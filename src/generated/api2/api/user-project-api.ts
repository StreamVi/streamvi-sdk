/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { ListOfUserProject2ProjectResponse } from '../models';
// @ts-ignore
import type { PaginatedResponseOfUserProjectResponse } from '../models';
// @ts-ignore
import type { ProjectInfoResponse } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
// @ts-ignore
import type { UserProjectGetResponse } from '../models';
/**
 * UserProjectApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change access user from project
         * @param {changeAccess1VEnum} v Version
         * @param {changeAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} userId User id
         * @param {changeAccess1AccessTypeEnum} accessType Access type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAccess1: async (v: changeAccess1VEnum, language: changeAccess1LanguageEnum, projectId: number, userId: number, accessType: changeAccess1AccessTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('changeAccess1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('changeAccess1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('changeAccess1', 'projectId', projectId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('changeAccess1', 'userId', userId)
            // verify required parameter 'accessType' is not null or undefined
            assertParamExists('changeAccess1', 'accessType', accessType)
            const localVarPath = `/method/project/user/change_access`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (accessType !== undefined) {
                localVarQueryParameter['access_type'] = accessType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove user from project
         * @param {del1VEnum} v Version
         * @param {del1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} userId User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        del1: async (v: del1VEnum, language: del1LanguageEnum, projectId: number, userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('del1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('del1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('del1', 'projectId', projectId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('del1', 'userId', userId)
            const localVarPath = `/method/project/user/del`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get project by number id
         * @param {getProject1VEnum} v Version
         * @param {getProject1LanguageEnum} language Current language
         * @param {string} projectExternalId Project external id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject1: async (v: getProject1VEnum, language: getProject1LanguageEnum, projectExternalId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('getProject1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getProject1', 'language', language)
            // verify required parameter 'projectExternalId' is not null or undefined
            assertParamExists('getProject1', 'projectExternalId', projectExternalId)
            const localVarPath = `/method/project/get_project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectExternalId !== undefined) {
                localVarQueryParameter['project_external_id'] = projectExternalId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get project full info
         * @param {getProjectInfo1VEnum} v Version
         * @param {getProjectInfo1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectInfo1: async (v: getProjectInfo1VEnum, language: getProjectInfo1LanguageEnum, projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('getProjectInfo1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getProjectInfo1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectInfo1', 'projectId', projectId)
            const localVarPath = `/method/project/get_project_info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user by number id
         * @param {getUser1VEnum} v Version
         * @param {getUser1LanguageEnum} language Current language
         * @param {string} userExternalId User external id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser1: async (v: getUser1VEnum, language: getUser1LanguageEnum, userExternalId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('getUser1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getUser1', 'language', language)
            // verify required parameter 'userExternalId' is not null or undefined
            assertParamExists('getUser1', 'userExternalId', userExternalId)
            const localVarPath = `/method/project/get_user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (userExternalId !== undefined) {
                localVarQueryParameter['user_external_id'] = userExternalId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of project for current user
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1: async (v: list1VEnum, language: list1LanguageEnum, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('list1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('list1', 'language', language)
            const localVarPath = `/method/project/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of user in project
         * @param {listAccess1VEnum} v Version
         * @param {listAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccess1: async (v: listAccess1VEnum, language: listAccess1LanguageEnum, projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('listAccess1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('listAccess1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('listAccess1', 'projectId', projectId)
            const localVarPath = `/method/project/user/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Select user for project
         * @param {selectProject1VEnum} v Version
         * @param {selectProject1LanguageEnum} language Current language
         * @param {number} id Project internal id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectProject1: async (v: selectProject1VEnum, language: selectProject1LanguageEnum, id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('selectProject1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('selectProject1', 'language', language)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('selectProject1', 'id', id)
            const localVarPath = `/method/project/select`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserProjectApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Change access user from project
         * @param {changeAccess1VEnum} v Version
         * @param {changeAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} userId User id
         * @param {changeAccess1AccessTypeEnum} accessType Access type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeAccess1(v: changeAccess1VEnum, language: changeAccess1LanguageEnum, projectId: number, userId: number, accessType: changeAccess1AccessTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeAccess1(v, language, projectId, userId, accessType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProjectApi.changeAccess1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove user from project
         * @param {del1VEnum} v Version
         * @param {del1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} userId User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async del1(v: del1VEnum, language: del1LanguageEnum, projectId: number, userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.del1(v, language, projectId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProjectApi.del1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get project by number id
         * @param {getProject1VEnum} v Version
         * @param {getProject1LanguageEnum} language Current language
         * @param {string} projectExternalId Project external id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProject1(v: getProject1VEnum, language: getProject1LanguageEnum, projectExternalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProjectGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProject1(v, language, projectExternalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProjectApi.getProject1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get project full info
         * @param {getProjectInfo1VEnum} v Version
         * @param {getProjectInfo1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectInfo1(v: getProjectInfo1VEnum, language: getProjectInfo1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectInfo1(v, language, projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProjectApi.getProjectInfo1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get user by number id
         * @param {getUser1VEnum} v Version
         * @param {getUser1LanguageEnum} language Current language
         * @param {string} userExternalId User external id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser1(v: getUser1VEnum, language: getUser1LanguageEnum, userExternalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProjectGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser1(v, language, userExternalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProjectApi.getUser1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List of project for current user
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list1(v: list1VEnum, language: list1LanguageEnum, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseOfUserProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list1(v, language, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProjectApi.list1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List of user in project
         * @param {listAccess1VEnum} v Version
         * @param {listAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccess1(v: listAccess1VEnum, language: listAccess1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfUserProject2ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccess1(v, language, projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProjectApi.listAccess1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Select user for project
         * @param {selectProject1VEnum} v Version
         * @param {selectProject1LanguageEnum} language Current language
         * @param {number} id Project internal id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectProject1(v: selectProject1VEnum, language: selectProject1LanguageEnum, id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProjectGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectProject1(v, language, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProjectApi.selectProject1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserProjectApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Change access user from project
         * @param {changeAccess1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAccess1(requestParameters: changeAccess1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: changeAccess1VEnum = requestParameters.v || changeAccess1VEnum._1;
            return localVarFp.changeAccess1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.userId, requestParameters.accessType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove user from project
         * @param {del1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        del1(requestParameters: del1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: del1VEnum = requestParameters.v || del1VEnum._1;
            return localVarFp.del1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get project by number id
         * @param {getProject1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject1(requestParameters: getProject1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProjectGetResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: getProject1VEnum = requestParameters.v || getProject1VEnum._1;
            return localVarFp.getProject1(actualV, requestParameters.language, requestParameters.projectExternalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get project full info
         * @param {getProjectInfo1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectInfo1(requestParameters: getProjectInfo1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectInfoResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: getProjectInfo1VEnum = requestParameters.v || getProjectInfo1VEnum._1;
            return localVarFp.getProjectInfo1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user by number id
         * @param {getUser1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser1(requestParameters: getUser1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProjectGetResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: getUser1VEnum = requestParameters.v || getUser1VEnum._1;
            return localVarFp.getUser1(actualV, requestParameters.language, requestParameters.userExternalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List of project for current user
         * @param {list1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfUserProjectResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: list1VEnum = requestParameters.v || list1VEnum._1;
            return localVarFp.list1(actualV, requestParameters.language, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List of user in project
         * @param {listAccess1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccess1(requestParameters: listAccess1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfUserProject2ProjectResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: listAccess1VEnum = requestParameters.v || listAccess1VEnum._1;
            return localVarFp.listAccess1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Select user for project
         * @param {selectProject1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectProject1(requestParameters: selectProject1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProjectGetResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: selectProject1VEnum = requestParameters.v || selectProject1VEnum._1;
            return localVarFp.selectProject1(actualV, requestParameters.language, requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for changeAccess1 operation in UserProjectApi.
 * @export
 * @interface changeAccess1Request
 */
export interface changeAccess1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof changeAccess1
     */
    readonly v?: changeAccess1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof changeAccess1
     */
    readonly language: changeAccess1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof changeAccess1
     */
    readonly projectId: number

    /**
     * User id
     * @type {number}
     * @memberof changeAccess1
     */
    readonly userId: number

    /**
     * Access type
     * @type {0 | 1 | 2}
     * @memberof changeAccess1
     */
    readonly accessType: changeAccess1AccessTypeEnum
}

/**
 * Request parameters for del1 operation in UserProjectApi.
 * @export
 * @interface del1Request
 */
export interface del1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof del1
     */
    readonly v?: del1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof del1
     */
    readonly language: del1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof del1
     */
    readonly projectId: number

    /**
     * User id
     * @type {number}
     * @memberof del1
     */
    readonly userId: number
}

/**
 * Request parameters for getProject1 operation in UserProjectApi.
 * @export
 * @interface getProject1Request
 */
export interface getProject1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getProject1
     */
    readonly v?: getProject1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getProject1
     */
    readonly language: getProject1LanguageEnum

    /**
     * Project external id
     * @type {string}
     * @memberof getProject1
     */
    readonly projectExternalId: string
}

/**
 * Request parameters for getProjectInfo1 operation in UserProjectApi.
 * @export
 * @interface getProjectInfo1Request
 */
export interface getProjectInfo1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getProjectInfo1
     */
    readonly v?: getProjectInfo1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getProjectInfo1
     */
    readonly language: getProjectInfo1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof getProjectInfo1
     */
    readonly projectId: number
}

/**
 * Request parameters for getUser1 operation in UserProjectApi.
 * @export
 * @interface getUser1Request
 */
export interface getUser1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getUser1
     */
    readonly v?: getUser1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getUser1
     */
    readonly language: getUser1LanguageEnum

    /**
     * User external id
     * @type {string}
     * @memberof getUser1
     */
    readonly userExternalId: string
}

/**
 * Request parameters for list1 operation in UserProjectApi.
 * @export
 * @interface list1Request
 */
export interface list1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof list1
     */
    readonly v?: list1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof list1
     */
    readonly language: list1LanguageEnum

    /**
     * Number of results
     * @type {number}
     * @memberof list1
     */
    readonly limit?: number

    /**
     * Page offset number
     * @type {number}
     * @memberof list1
     */
    readonly offset?: number
}

/**
 * Request parameters for listAccess1 operation in UserProjectApi.
 * @export
 * @interface listAccess1Request
 */
export interface listAccess1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof listAccess1
     */
    readonly v?: listAccess1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof listAccess1
     */
    readonly language: listAccess1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof listAccess1
     */
    readonly projectId: number
}

/**
 * Request parameters for selectProject1 operation in UserProjectApi.
 * @export
 * @interface selectProject1Request
 */
export interface selectProject1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof selectProject1
     */
    readonly v?: selectProject1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof selectProject1
     */
    readonly language: selectProject1LanguageEnum

    /**
     * Project internal id
     * @type {number}
     * @memberof selectProject1
     */
    readonly id: number
}

/**
 * UserProjectApi - object-oriented interface
 * @export
 * @class UserProjectApi
 * @extends {BaseAPI}
 */
export class UserProjectApi extends BaseAPI {
    /**
     * 
     * @summary Change access user from project
     * @param {changeAccess1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    public changeAccess1(requestParameters: changeAccess1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: changeAccess1VEnum = requestParameters.v || changeAccess1VEnum._1;
        return fp(this.configuration).changeAccess1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.userId, requestParameters.accessType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove user from project
     * @param {del1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    public del1(requestParameters: del1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: del1VEnum = requestParameters.v || del1VEnum._1;
        return fp(this.configuration).del1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get project by number id
     * @param {getProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    public getProject1(requestParameters: getProject1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: getProject1VEnum = requestParameters.v || getProject1VEnum._1;
        return fp(this.configuration).getProject1(actualV, requestParameters.language, requestParameters.projectExternalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get project full info
     * @param {getProjectInfo1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    public getProjectInfo1(requestParameters: getProjectInfo1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: getProjectInfo1VEnum = requestParameters.v || getProjectInfo1VEnum._1;
        return fp(this.configuration).getProjectInfo1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user by number id
     * @param {getUser1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    public getUser1(requestParameters: getUser1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: getUser1VEnum = requestParameters.v || getUser1VEnum._1;
        return fp(this.configuration).getUser1(actualV, requestParameters.language, requestParameters.userExternalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List of project for current user
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    public list1(requestParameters: list1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: list1VEnum = requestParameters.v || list1VEnum._1;
        return fp(this.configuration).list1(actualV, requestParameters.language, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List of user in project
     * @param {listAccess1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    public listAccess1(requestParameters: listAccess1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: listAccess1VEnum = requestParameters.v || listAccess1VEnum._1;
        return fp(this.configuration).listAccess1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Select user for project
     * @param {selectProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    public selectProject1(requestParameters: selectProject1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: selectProject1VEnum = requestParameters.v || selectProject1VEnum._1;
        return fp(this.configuration).selectProject1(actualV, requestParameters.language, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum changeAccess1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum changeAccess1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum changeAccess1AccessTypeEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
  * @export
  * @enum {string}
  */
export enum del1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum del1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum getProject1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum getProject1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum getProjectInfo1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum getProjectInfo1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum getUser1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum getUser1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum list1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum list1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum listAccess1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum listAccess1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum selectProject1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum selectProject1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
