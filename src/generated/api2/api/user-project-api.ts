/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { ListOfUserProject2ProjectResponse } from '../models';
// @ts-ignore
import type { PaginatedResponseOfUserProjectResponse } from '../models';
// @ts-ignore
import type { ProjectInfoResponse } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
// @ts-ignore
import type { UserProjectGetResponse } from '../models';
/**
 * UserProjectApi - axios parameter creator
 * @export
 */
export const UserProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change access user from project
         * @param {UserProjectChangeAccessV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} userId User id
         * @param {UserProjectChangeAccessV1AccessTypeEnum} accessType Access type
         * @param {UserProjectChangeAccessV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProjectChangeAccessV1: async (language: UserProjectChangeAccessV1LanguageEnum, projectId: number, userId: number, accessType: UserProjectChangeAccessV1AccessTypeEnum, v?: UserProjectChangeAccessV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('userProjectChangeAccessV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('userProjectChangeAccessV1', 'projectId', projectId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userProjectChangeAccessV1', 'userId', userId)
            // verify required parameter 'accessType' is not null or undefined
            assertParamExists('userProjectChangeAccessV1', 'accessType', accessType)
            const localVarPath = `/method/project/user/change_access`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (accessType !== undefined) {
                localVarQueryParameter['access_type'] = accessType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove user from project
         * @param {UserProjectDelV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} userId User id
         * @param {UserProjectDelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProjectDelV1: async (language: UserProjectDelV1LanguageEnum, projectId: number, userId: number, v?: UserProjectDelV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('userProjectDelV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('userProjectDelV1', 'projectId', projectId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userProjectDelV1', 'userId', userId)
            const localVarPath = `/method/project/user/del`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get project full info
         * @param {UserProjectGetProjectInfoV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {UserProjectGetProjectInfoV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProjectGetProjectInfoV1: async (language: UserProjectGetProjectInfoV1LanguageEnum, projectId: number, v?: UserProjectGetProjectInfoV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('userProjectGetProjectInfoV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('userProjectGetProjectInfoV1', 'projectId', projectId)
            const localVarPath = `/method/project/get_project_info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get project by number id
         * @param {UserProjectGetProjectV1LanguageEnum} language Current language
         * @param {string} projectExternalId Project external id
         * @param {UserProjectGetProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProjectGetProjectV1: async (language: UserProjectGetProjectV1LanguageEnum, projectExternalId: string, v?: UserProjectGetProjectV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('userProjectGetProjectV1', 'language', language)
            // verify required parameter 'projectExternalId' is not null or undefined
            assertParamExists('userProjectGetProjectV1', 'projectExternalId', projectExternalId)
            const localVarPath = `/method/project/get_project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectExternalId !== undefined) {
                localVarQueryParameter['project_external_id'] = projectExternalId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user by number id
         * @param {UserProjectGetUserV1LanguageEnum} language Current language
         * @param {string} userExternalId User external id
         * @param {UserProjectGetUserV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProjectGetUserV1: async (language: UserProjectGetUserV1LanguageEnum, userExternalId: string, v?: UserProjectGetUserV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('userProjectGetUserV1', 'language', language)
            // verify required parameter 'userExternalId' is not null or undefined
            assertParamExists('userProjectGetUserV1', 'userExternalId', userExternalId)
            const localVarPath = `/method/project/get_user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (userExternalId !== undefined) {
                localVarQueryParameter['user_external_id'] = userExternalId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of user in project
         * @param {UserProjectListAccessV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {UserProjectListAccessV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProjectListAccessV1: async (language: UserProjectListAccessV1LanguageEnum, projectId: number, v?: UserProjectListAccessV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('userProjectListAccessV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('userProjectListAccessV1', 'projectId', projectId)
            const localVarPath = `/method/project/user/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of project for current user
         * @param {UserProjectListV1LanguageEnum} language Current language
         * @param {UserProjectListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProjectListV1: async (language: UserProjectListV1LanguageEnum, v?: UserProjectListV1VEnum, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('userProjectListV1', 'language', language)
            const localVarPath = `/method/project/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Select user for project
         * @param {UserProjectSelectProjectV1LanguageEnum} language Current language
         * @param {number} id Project internal id
         * @param {UserProjectSelectProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProjectSelectProjectV1: async (language: UserProjectSelectProjectV1LanguageEnum, id: number, v?: UserProjectSelectProjectV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('userProjectSelectProjectV1', 'language', language)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userProjectSelectProjectV1', 'id', id)
            const localVarPath = `/method/project/select`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserProjectApi - functional programming interface
 * @export
 */
export const UserProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Change access user from project
         * @param {UserProjectChangeAccessV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} userId User id
         * @param {UserProjectChangeAccessV1AccessTypeEnum} accessType Access type
         * @param {UserProjectChangeAccessV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProjectChangeAccessV1(language: UserProjectChangeAccessV1LanguageEnum, projectId: number, userId: number, accessType: UserProjectChangeAccessV1AccessTypeEnum, v?: UserProjectChangeAccessV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProjectChangeAccessV1(language, projectId, userId, accessType, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProjectApi.userProjectChangeAccessV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove user from project
         * @param {UserProjectDelV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} userId User id
         * @param {UserProjectDelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProjectDelV1(language: UserProjectDelV1LanguageEnum, projectId: number, userId: number, v?: UserProjectDelV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProjectDelV1(language, projectId, userId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProjectApi.userProjectDelV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get project full info
         * @param {UserProjectGetProjectInfoV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {UserProjectGetProjectInfoV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProjectGetProjectInfoV1(language: UserProjectGetProjectInfoV1LanguageEnum, projectId: number, v?: UserProjectGetProjectInfoV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProjectGetProjectInfoV1(language, projectId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProjectApi.userProjectGetProjectInfoV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get project by number id
         * @param {UserProjectGetProjectV1LanguageEnum} language Current language
         * @param {string} projectExternalId Project external id
         * @param {UserProjectGetProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProjectGetProjectV1(language: UserProjectGetProjectV1LanguageEnum, projectExternalId: string, v?: UserProjectGetProjectV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProjectGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProjectGetProjectV1(language, projectExternalId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProjectApi.userProjectGetProjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get user by number id
         * @param {UserProjectGetUserV1LanguageEnum} language Current language
         * @param {string} userExternalId User external id
         * @param {UserProjectGetUserV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProjectGetUserV1(language: UserProjectGetUserV1LanguageEnum, userExternalId: string, v?: UserProjectGetUserV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProjectGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProjectGetUserV1(language, userExternalId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProjectApi.userProjectGetUserV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List of user in project
         * @param {UserProjectListAccessV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {UserProjectListAccessV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProjectListAccessV1(language: UserProjectListAccessV1LanguageEnum, projectId: number, v?: UserProjectListAccessV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfUserProject2ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProjectListAccessV1(language, projectId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProjectApi.userProjectListAccessV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List of project for current user
         * @param {UserProjectListV1LanguageEnum} language Current language
         * @param {UserProjectListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProjectListV1(language: UserProjectListV1LanguageEnum, v?: UserProjectListV1VEnum, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseOfUserProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProjectListV1(language, v, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProjectApi.userProjectListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Select user for project
         * @param {UserProjectSelectProjectV1LanguageEnum} language Current language
         * @param {number} id Project internal id
         * @param {UserProjectSelectProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProjectSelectProjectV1(language: UserProjectSelectProjectV1LanguageEnum, id: number, v?: UserProjectSelectProjectV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProjectGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProjectSelectProjectV1(language, id, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProjectApi.userProjectSelectProjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserProjectApi - factory interface
 * @export
 */
export const UserProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserProjectApiFp(configuration)
    return {
        /**
         * 
         * @summary Change access user from project
         * @param {UserProjectApiUserProjectChangeAccessV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProjectChangeAccessV1(requestParameters: UserProjectApiUserProjectChangeAccessV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.userProjectChangeAccessV1(requestParameters.language, requestParameters.projectId, requestParameters.userId, requestParameters.accessType, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove user from project
         * @param {UserProjectApiUserProjectDelV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProjectDelV1(requestParameters: UserProjectApiUserProjectDelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.userProjectDelV1(requestParameters.language, requestParameters.projectId, requestParameters.userId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get project full info
         * @param {UserProjectApiUserProjectGetProjectInfoV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProjectGetProjectInfoV1(requestParameters: UserProjectApiUserProjectGetProjectInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectInfoResponse> {
            return localVarFp.userProjectGetProjectInfoV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get project by number id
         * @param {UserProjectApiUserProjectGetProjectV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProjectGetProjectV1(requestParameters: UserProjectApiUserProjectGetProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProjectGetResponse> {
            return localVarFp.userProjectGetProjectV1(requestParameters.language, requestParameters.projectExternalId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user by number id
         * @param {UserProjectApiUserProjectGetUserV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProjectGetUserV1(requestParameters: UserProjectApiUserProjectGetUserV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProjectGetResponse> {
            return localVarFp.userProjectGetUserV1(requestParameters.language, requestParameters.userExternalId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List of user in project
         * @param {UserProjectApiUserProjectListAccessV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProjectListAccessV1(requestParameters: UserProjectApiUserProjectListAccessV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfUserProject2ProjectResponse> {
            return localVarFp.userProjectListAccessV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List of project for current user
         * @param {UserProjectApiUserProjectListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProjectListV1(requestParameters: UserProjectApiUserProjectListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfUserProjectResponse> {
            return localVarFp.userProjectListV1(requestParameters.language, requestParameters.v, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Select user for project
         * @param {UserProjectApiUserProjectSelectProjectV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProjectSelectProjectV1(requestParameters: UserProjectApiUserProjectSelectProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProjectGetResponse> {
            return localVarFp.userProjectSelectProjectV1(requestParameters.language, requestParameters.id, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserProjectApi - interface
 * @export
 * @interface UserProjectApi
 */
export interface UserProjectApiInterface {
    /**
     * 
     * @summary Change access user from project
     * @param {UserProjectApiUserProjectChangeAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApiInterface
     */
    userProjectChangeAccessV1(requestParameters: UserProjectApiUserProjectChangeAccessV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Remove user from project
     * @param {UserProjectApiUserProjectDelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApiInterface
     */
    userProjectDelV1(requestParameters: UserProjectApiUserProjectDelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Get project full info
     * @param {UserProjectApiUserProjectGetProjectInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApiInterface
     */
    userProjectGetProjectInfoV1(requestParameters: UserProjectApiUserProjectGetProjectInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectInfoResponse>;

    /**
     * 
     * @summary Get project by number id
     * @param {UserProjectApiUserProjectGetProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApiInterface
     */
    userProjectGetProjectV1(requestParameters: UserProjectApiUserProjectGetProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProjectGetResponse>;

    /**
     * 
     * @summary Get user by number id
     * @param {UserProjectApiUserProjectGetUserV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApiInterface
     */
    userProjectGetUserV1(requestParameters: UserProjectApiUserProjectGetUserV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProjectGetResponse>;

    /**
     * 
     * @summary List of user in project
     * @param {UserProjectApiUserProjectListAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApiInterface
     */
    userProjectListAccessV1(requestParameters: UserProjectApiUserProjectListAccessV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfUserProject2ProjectResponse>;

    /**
     * 
     * @summary List of project for current user
     * @param {UserProjectApiUserProjectListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApiInterface
     */
    userProjectListV1(requestParameters: UserProjectApiUserProjectListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfUserProjectResponse>;

    /**
     * 
     * @summary Select user for project
     * @param {UserProjectApiUserProjectSelectProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApiInterface
     */
    userProjectSelectProjectV1(requestParameters: UserProjectApiUserProjectSelectProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProjectGetResponse>;

}

/**
 * Request parameters for userProjectChangeAccessV1 operation in UserProjectApi.
 * @export
 * @interface UserProjectApiUserProjectChangeAccessV1Request
 */
export interface UserProjectApiUserProjectChangeAccessV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof UserProjectApiUserProjectChangeAccessV1
     */
    readonly language: UserProjectChangeAccessV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof UserProjectApiUserProjectChangeAccessV1
     */
    readonly projectId: number

    /**
     * User id
     * @type {number}
     * @memberof UserProjectApiUserProjectChangeAccessV1
     */
    readonly userId: number

    /**
     * Access type
     * @type {0 | 1 | 2}
     * @memberof UserProjectApiUserProjectChangeAccessV1
     */
    readonly accessType: UserProjectChangeAccessV1AccessTypeEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof UserProjectApiUserProjectChangeAccessV1
     */
    readonly v?: UserProjectChangeAccessV1VEnum
}

/**
 * Request parameters for userProjectDelV1 operation in UserProjectApi.
 * @export
 * @interface UserProjectApiUserProjectDelV1Request
 */
export interface UserProjectApiUserProjectDelV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof UserProjectApiUserProjectDelV1
     */
    readonly language: UserProjectDelV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof UserProjectApiUserProjectDelV1
     */
    readonly projectId: number

    /**
     * User id
     * @type {number}
     * @memberof UserProjectApiUserProjectDelV1
     */
    readonly userId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof UserProjectApiUserProjectDelV1
     */
    readonly v?: UserProjectDelV1VEnum
}

/**
 * Request parameters for userProjectGetProjectInfoV1 operation in UserProjectApi.
 * @export
 * @interface UserProjectApiUserProjectGetProjectInfoV1Request
 */
export interface UserProjectApiUserProjectGetProjectInfoV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof UserProjectApiUserProjectGetProjectInfoV1
     */
    readonly language: UserProjectGetProjectInfoV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof UserProjectApiUserProjectGetProjectInfoV1
     */
    readonly projectId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof UserProjectApiUserProjectGetProjectInfoV1
     */
    readonly v?: UserProjectGetProjectInfoV1VEnum
}

/**
 * Request parameters for userProjectGetProjectV1 operation in UserProjectApi.
 * @export
 * @interface UserProjectApiUserProjectGetProjectV1Request
 */
export interface UserProjectApiUserProjectGetProjectV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof UserProjectApiUserProjectGetProjectV1
     */
    readonly language: UserProjectGetProjectV1LanguageEnum

    /**
     * Project external id
     * @type {string}
     * @memberof UserProjectApiUserProjectGetProjectV1
     */
    readonly projectExternalId: string

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof UserProjectApiUserProjectGetProjectV1
     */
    readonly v?: UserProjectGetProjectV1VEnum
}

/**
 * Request parameters for userProjectGetUserV1 operation in UserProjectApi.
 * @export
 * @interface UserProjectApiUserProjectGetUserV1Request
 */
export interface UserProjectApiUserProjectGetUserV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof UserProjectApiUserProjectGetUserV1
     */
    readonly language: UserProjectGetUserV1LanguageEnum

    /**
     * User external id
     * @type {string}
     * @memberof UserProjectApiUserProjectGetUserV1
     */
    readonly userExternalId: string

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof UserProjectApiUserProjectGetUserV1
     */
    readonly v?: UserProjectGetUserV1VEnum
}

/**
 * Request parameters for userProjectListAccessV1 operation in UserProjectApi.
 * @export
 * @interface UserProjectApiUserProjectListAccessV1Request
 */
export interface UserProjectApiUserProjectListAccessV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof UserProjectApiUserProjectListAccessV1
     */
    readonly language: UserProjectListAccessV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof UserProjectApiUserProjectListAccessV1
     */
    readonly projectId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof UserProjectApiUserProjectListAccessV1
     */
    readonly v?: UserProjectListAccessV1VEnum
}

/**
 * Request parameters for userProjectListV1 operation in UserProjectApi.
 * @export
 * @interface UserProjectApiUserProjectListV1Request
 */
export interface UserProjectApiUserProjectListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof UserProjectApiUserProjectListV1
     */
    readonly language: UserProjectListV1LanguageEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof UserProjectApiUserProjectListV1
     */
    readonly v?: UserProjectListV1VEnum

    /**
     * Number of results
     * @type {number}
     * @memberof UserProjectApiUserProjectListV1
     */
    readonly limit?: number

    /**
     * Page offset number
     * @type {number}
     * @memberof UserProjectApiUserProjectListV1
     */
    readonly offset?: number
}

/**
 * Request parameters for userProjectSelectProjectV1 operation in UserProjectApi.
 * @export
 * @interface UserProjectApiUserProjectSelectProjectV1Request
 */
export interface UserProjectApiUserProjectSelectProjectV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof UserProjectApiUserProjectSelectProjectV1
     */
    readonly language: UserProjectSelectProjectV1LanguageEnum

    /**
     * Project internal id
     * @type {number}
     * @memberof UserProjectApiUserProjectSelectProjectV1
     */
    readonly id: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof UserProjectApiUserProjectSelectProjectV1
     */
    readonly v?: UserProjectSelectProjectV1VEnum
}

/**
 * UserProjectApi - object-oriented interface
 * @export
 * @class UserProjectApi
 * @extends {BaseAPI}
 */
export class UserProjectApi extends BaseAPI implements UserProjectApiInterface {
    /**
     * 
     * @summary Change access user from project
     * @param {UserProjectApiUserProjectChangeAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    public userProjectChangeAccessV1(requestParameters: UserProjectApiUserProjectChangeAccessV1Request, options?: RawAxiosRequestConfig) {
        return UserProjectApiFp(this.configuration).userProjectChangeAccessV1(requestParameters.language, requestParameters.projectId, requestParameters.userId, requestParameters.accessType, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove user from project
     * @param {UserProjectApiUserProjectDelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    public userProjectDelV1(requestParameters: UserProjectApiUserProjectDelV1Request, options?: RawAxiosRequestConfig) {
        return UserProjectApiFp(this.configuration).userProjectDelV1(requestParameters.language, requestParameters.projectId, requestParameters.userId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get project full info
     * @param {UserProjectApiUserProjectGetProjectInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    public userProjectGetProjectInfoV1(requestParameters: UserProjectApiUserProjectGetProjectInfoV1Request, options?: RawAxiosRequestConfig) {
        return UserProjectApiFp(this.configuration).userProjectGetProjectInfoV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get project by number id
     * @param {UserProjectApiUserProjectGetProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    public userProjectGetProjectV1(requestParameters: UserProjectApiUserProjectGetProjectV1Request, options?: RawAxiosRequestConfig) {
        return UserProjectApiFp(this.configuration).userProjectGetProjectV1(requestParameters.language, requestParameters.projectExternalId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user by number id
     * @param {UserProjectApiUserProjectGetUserV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    public userProjectGetUserV1(requestParameters: UserProjectApiUserProjectGetUserV1Request, options?: RawAxiosRequestConfig) {
        return UserProjectApiFp(this.configuration).userProjectGetUserV1(requestParameters.language, requestParameters.userExternalId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List of user in project
     * @param {UserProjectApiUserProjectListAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    public userProjectListAccessV1(requestParameters: UserProjectApiUserProjectListAccessV1Request, options?: RawAxiosRequestConfig) {
        return UserProjectApiFp(this.configuration).userProjectListAccessV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List of project for current user
     * @param {UserProjectApiUserProjectListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    public userProjectListV1(requestParameters: UserProjectApiUserProjectListV1Request, options?: RawAxiosRequestConfig) {
        return UserProjectApiFp(this.configuration).userProjectListV1(requestParameters.language, requestParameters.v, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Select user for project
     * @param {UserProjectApiUserProjectSelectProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    public userProjectSelectProjectV1(requestParameters: UserProjectApiUserProjectSelectProjectV1Request, options?: RawAxiosRequestConfig) {
        return UserProjectApiFp(this.configuration).userProjectSelectProjectV1(requestParameters.language, requestParameters.id, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const UserProjectChangeAccessV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type UserProjectChangeAccessV1LanguageEnum = typeof UserProjectChangeAccessV1LanguageEnum[keyof typeof UserProjectChangeAccessV1LanguageEnum];
/**
 * @export
 */
export const UserProjectChangeAccessV1AccessTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;
export type UserProjectChangeAccessV1AccessTypeEnum = typeof UserProjectChangeAccessV1AccessTypeEnum[keyof typeof UserProjectChangeAccessV1AccessTypeEnum];
/**
 * @export
 */
export const UserProjectChangeAccessV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type UserProjectChangeAccessV1VEnum = typeof UserProjectChangeAccessV1VEnum[keyof typeof UserProjectChangeAccessV1VEnum];
/**
 * @export
 */
export const UserProjectDelV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type UserProjectDelV1LanguageEnum = typeof UserProjectDelV1LanguageEnum[keyof typeof UserProjectDelV1LanguageEnum];
/**
 * @export
 */
export const UserProjectDelV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type UserProjectDelV1VEnum = typeof UserProjectDelV1VEnum[keyof typeof UserProjectDelV1VEnum];
/**
 * @export
 */
export const UserProjectGetProjectInfoV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type UserProjectGetProjectInfoV1LanguageEnum = typeof UserProjectGetProjectInfoV1LanguageEnum[keyof typeof UserProjectGetProjectInfoV1LanguageEnum];
/**
 * @export
 */
export const UserProjectGetProjectInfoV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type UserProjectGetProjectInfoV1VEnum = typeof UserProjectGetProjectInfoV1VEnum[keyof typeof UserProjectGetProjectInfoV1VEnum];
/**
 * @export
 */
export const UserProjectGetProjectV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type UserProjectGetProjectV1LanguageEnum = typeof UserProjectGetProjectV1LanguageEnum[keyof typeof UserProjectGetProjectV1LanguageEnum];
/**
 * @export
 */
export const UserProjectGetProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type UserProjectGetProjectV1VEnum = typeof UserProjectGetProjectV1VEnum[keyof typeof UserProjectGetProjectV1VEnum];
/**
 * @export
 */
export const UserProjectGetUserV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type UserProjectGetUserV1LanguageEnum = typeof UserProjectGetUserV1LanguageEnum[keyof typeof UserProjectGetUserV1LanguageEnum];
/**
 * @export
 */
export const UserProjectGetUserV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type UserProjectGetUserV1VEnum = typeof UserProjectGetUserV1VEnum[keyof typeof UserProjectGetUserV1VEnum];
/**
 * @export
 */
export const UserProjectListAccessV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type UserProjectListAccessV1LanguageEnum = typeof UserProjectListAccessV1LanguageEnum[keyof typeof UserProjectListAccessV1LanguageEnum];
/**
 * @export
 */
export const UserProjectListAccessV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type UserProjectListAccessV1VEnum = typeof UserProjectListAccessV1VEnum[keyof typeof UserProjectListAccessV1VEnum];
/**
 * @export
 */
export const UserProjectListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type UserProjectListV1LanguageEnum = typeof UserProjectListV1LanguageEnum[keyof typeof UserProjectListV1LanguageEnum];
/**
 * @export
 */
export const UserProjectListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type UserProjectListV1VEnum = typeof UserProjectListV1VEnum[keyof typeof UserProjectListV1VEnum];
/**
 * @export
 */
export const UserProjectSelectProjectV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type UserProjectSelectProjectV1LanguageEnum = typeof UserProjectSelectProjectV1LanguageEnum[keyof typeof UserProjectSelectProjectV1LanguageEnum];
/**
 * @export
 */
export const UserProjectSelectProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type UserProjectSelectProjectV1VEnum = typeof UserProjectSelectProjectV1VEnum[keyof typeof UserProjectSelectProjectV1VEnum];
