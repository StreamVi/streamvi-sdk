/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { SiteNotifyUserResponse } from '../models';
// @ts-ignore
import type { SiteScreenNotifyUserResponse } from '../models';
// @ts-ignore
import type { SiteSetNotifyUserRequest } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
/**
 * NotifyUserApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete mobile token from user
         * @param {delMobileToken1VEnum} v Version
         * @param {delMobileToken1LanguageEnum} language Current language
         * @param {string} token Token in mobile app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delMobileToken1: async (v: delMobileToken1VEnum, language: delMobileToken1LanguageEnum, token: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('delMobileToken1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('delMobileToken1', 'language', language)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('delMobileToken1', 'token', token)
            const localVarPath = `/method/notify_user/del_mobile_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user notify settings
         * @param {get1VEnum} v Version
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get1: async (v: get1VEnum, projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('get1', 'v', v)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('get1', 'projectId', projectId)
            const localVarPath = `/method/notify_user/setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user screen notify
         * @param {getScreen1VEnum} v Version
         * @param {getScreen1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreen1: async (v: getScreen1VEnum, language: getScreen1LanguageEnum, projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('getScreen1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getScreen1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getScreen1', 'projectId', projectId)
            const localVarPath = `/method/notify_user/screen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove user screen notify
         * @param {removeScreen1VEnum} v Version
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeScreen1: async (v: removeScreen1VEnum, projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('removeScreen1', 'v', v)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('removeScreen1', 'projectId', projectId)
            const localVarPath = `/method/notify_user/screen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set user notify settings
         * @param {set1VEnum} v Version
         * @param {SiteSetNotifyUserRequest} siteSetNotifyUserRequest Set user notify settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        set1: async (v: set1VEnum, siteSetNotifyUserRequest: SiteSetNotifyUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('set1', 'v', v)
            // verify required parameter 'siteSetNotifyUserRequest' is not null or undefined
            assertParamExists('set1', 'siteSetNotifyUserRequest', siteSetNotifyUserRequest)
            const localVarPath = `/method/notify_user/setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteSetNotifyUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotifyUserApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete mobile token from user
         * @param {delMobileToken1VEnum} v Version
         * @param {delMobileToken1LanguageEnum} language Current language
         * @param {string} token Token in mobile app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delMobileToken1(v: delMobileToken1VEnum, language: delMobileToken1LanguageEnum, token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delMobileToken1(v, language, token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotifyUserApi.delMobileToken1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get user notify settings
         * @param {get1VEnum} v Version
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get1(v: get1VEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteNotifyUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get1(v, projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotifyUserApi.get1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get user screen notify
         * @param {getScreen1VEnum} v Version
         * @param {getScreen1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScreen1(v: getScreen1VEnum, language: getScreen1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteScreenNotifyUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScreen1(v, language, projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotifyUserApi.getScreen1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove user screen notify
         * @param {removeScreen1VEnum} v Version
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeScreen1(v: removeScreen1VEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeScreen1(v, projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotifyUserApi.removeScreen1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set user notify settings
         * @param {set1VEnum} v Version
         * @param {SiteSetNotifyUserRequest} siteSetNotifyUserRequest Set user notify settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async set1(v: set1VEnum, siteSetNotifyUserRequest: SiteSetNotifyUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.set1(v, siteSetNotifyUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotifyUserApi.set1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NotifyUserApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Delete mobile token from user
         * @param {delMobileToken1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delMobileToken1(requestParameters: delMobileToken1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: delMobileToken1VEnum = requestParameters.v || delMobileToken1VEnum._1;
            return localVarFp.delMobileToken1(actualV, requestParameters.language, requestParameters.token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user notify settings
         * @param {get1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get1(requestParameters: get1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteNotifyUserResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: get1VEnum = requestParameters.v || get1VEnum._1;
            return localVarFp.get1(actualV, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user screen notify
         * @param {getScreen1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreen1(requestParameters: getScreen1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteScreenNotifyUserResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: getScreen1VEnum = requestParameters.v || getScreen1VEnum._1;
            return localVarFp.getScreen1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove user screen notify
         * @param {removeScreen1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeScreen1(requestParameters: removeScreen1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: removeScreen1VEnum = requestParameters.v || removeScreen1VEnum._1;
            return localVarFp.removeScreen1(actualV, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set user notify settings
         * @param {set1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        set1(requestParameters: set1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: set1VEnum = requestParameters.v || set1VEnum._1;
            return localVarFp.set1(actualV, requestParameters.siteSetNotifyUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for delMobileToken1 operation in NotifyUserApi.
 * @export
 * @interface delMobileToken1Request
 */
export interface delMobileToken1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof delMobileToken1
     */
    readonly v?: delMobileToken1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof delMobileToken1
     */
    readonly language: delMobileToken1LanguageEnum

    /**
     * Token in mobile app
     * @type {string}
     * @memberof delMobileToken1
     */
    readonly token: string
}

/**
 * Request parameters for get1 operation in NotifyUserApi.
 * @export
 * @interface get1Request
 */
export interface get1Request {
    /**
     * Version
     * @type {'1'}
     * @memberof get1
     */
    readonly v?: get1VEnum

    /**
     * Project id
     * @type {number}
     * @memberof get1
     */
    readonly projectId: number
}

/**
 * Request parameters for getScreen1 operation in NotifyUserApi.
 * @export
 * @interface getScreen1Request
 */
export interface getScreen1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getScreen1
     */
    readonly v?: getScreen1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getScreen1
     */
    readonly language: getScreen1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof getScreen1
     */
    readonly projectId: number
}

/**
 * Request parameters for removeScreen1 operation in NotifyUserApi.
 * @export
 * @interface removeScreen1Request
 */
export interface removeScreen1Request {
    /**
     * Version
     * @type {'1'}
     * @memberof removeScreen1
     */
    readonly v?: removeScreen1VEnum

    /**
     * Project id
     * @type {number}
     * @memberof removeScreen1
     */
    readonly projectId: number
}

/**
 * Request parameters for set1 operation in NotifyUserApi.
 * @export
 * @interface set1Request
 */
export interface set1Request {
    /**
     * Version
     * @type {'1'}
     * @memberof set1
     */
    readonly v?: set1VEnum

    /**
     * Set user notify settings
     * @type {SiteSetNotifyUserRequest}
     * @memberof set1
     */
    readonly siteSetNotifyUserRequest: SiteSetNotifyUserRequest
}

/**
 * NotifyUserApi - object-oriented interface
 * @export
 * @class NotifyUserApi
 * @extends {BaseAPI}
 */
export class NotifyUserApi extends BaseAPI {
    /**
     * 
     * @summary Delete mobile token from user
     * @param {delMobileToken1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    public delMobileToken1(requestParameters: delMobileToken1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: delMobileToken1VEnum = requestParameters.v || delMobileToken1VEnum._1;
        return fp(this.configuration).delMobileToken1(actualV, requestParameters.language, requestParameters.token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user notify settings
     * @param {get1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    public get1(requestParameters: get1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: get1VEnum = requestParameters.v || get1VEnum._1;
        return fp(this.configuration).get1(actualV, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user screen notify
     * @param {getScreen1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    public getScreen1(requestParameters: getScreen1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: getScreen1VEnum = requestParameters.v || getScreen1VEnum._1;
        return fp(this.configuration).getScreen1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove user screen notify
     * @param {removeScreen1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    public removeScreen1(requestParameters: removeScreen1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: removeScreen1VEnum = requestParameters.v || removeScreen1VEnum._1;
        return fp(this.configuration).removeScreen1(actualV, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set user notify settings
     * @param {set1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    public set1(requestParameters: set1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: set1VEnum = requestParameters.v || set1VEnum._1;
        return fp(this.configuration).set1(actualV, requestParameters.siteSetNotifyUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum delMobileToken1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum delMobileToken1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum get1VEnum {
    _1 = '1'
}
/**
  * @export
  * @enum {string}
  */
export enum getScreen1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum getScreen1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum removeScreen1VEnum {
    _1 = '1'
}
/**
  * @export
  * @enum {string}
  */
export enum set1VEnum {
    _1 = '1'
}
