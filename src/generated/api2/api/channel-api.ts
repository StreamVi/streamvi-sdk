/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { MethodSetStatusChannelRequest } from '../models';
// @ts-ignore
import type { SiteGetShortChannelResponse } from '../models';
// @ts-ignore
import type { SiteSearchChannelResponse } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
/**
 * ChannelApi - axios parameter creator
 * @export
 */
export const ChannelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Minimal channel list
         * @param {ChannelShortChannelListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {ChannelShortChannelListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelShortChannelListV1: async (language: ChannelShortChannelListV1LanguageEnum, projectId: number, v?: ChannelShortChannelListV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('channelShortChannelListV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('channelShortChannelListV1', 'projectId', projectId)
            const localVarPath = `/method/channel/short`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search channel list
         * @param {MethodSearchV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {MethodSearchV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {MethodSearchV1TypeEnum} [type] 
         * @param {string} [platform] platform type
         * @param {string} [name] name
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodSearchV1: async (language: MethodSearchV1LanguageEnum, projectId: number, v?: MethodSearchV1VEnum, type?: MethodSearchV1TypeEnum, platform?: string, name?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('methodSearchV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('methodSearchV1', 'projectId', projectId)
            const localVarPath = `/method/channel/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get live status
         * @param {MethodSetStatusChannelRequest} methodSetStatusChannelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodSetStatusV1: async (methodSetStatusChannelRequest: MethodSetStatusChannelRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'methodSetStatusChannelRequest' is not null or undefined
            assertParamExists('methodSetStatusV1', 'methodSetStatusChannelRequest', methodSetStatusChannelRequest)
            const localVarPath = `/method/channel/set-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(methodSetStatusChannelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelApi - functional programming interface
 * @export
 */
export const ChannelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChannelApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Minimal channel list
         * @param {ChannelShortChannelListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {ChannelShortChannelListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelShortChannelListV1(language: ChannelShortChannelListV1LanguageEnum, projectId: number, v?: ChannelShortChannelListV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteGetShortChannelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelShortChannelListV1(language, projectId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelApi.channelShortChannelListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search channel list
         * @param {MethodSearchV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {MethodSearchV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {MethodSearchV1TypeEnum} [type] 
         * @param {string} [platform] platform type
         * @param {string} [name] name
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async methodSearchV1(language: MethodSearchV1LanguageEnum, projectId: number, v?: MethodSearchV1VEnum, type?: MethodSearchV1TypeEnum, platform?: string, name?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteSearchChannelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.methodSearchV1(language, projectId, v, type, platform, name, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelApi.methodSearchV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get live status
         * @param {MethodSetStatusChannelRequest} methodSetStatusChannelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async methodSetStatusV1(methodSetStatusChannelRequest: MethodSetStatusChannelRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.methodSetStatusV1(methodSetStatusChannelRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelApi.methodSetStatusV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChannelApi - factory interface
 * @export
 */
export const ChannelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChannelApiFp(configuration)
    return {
        /**
         * 
         * @summary Minimal channel list
         * @param {ChannelApiChannelShortChannelListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelShortChannelListV1(requestParameters: ChannelApiChannelShortChannelListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteGetShortChannelResponse> {
            return localVarFp.channelShortChannelListV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search channel list
         * @param {ChannelApiMethodSearchV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodSearchV1(requestParameters: ChannelApiMethodSearchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteSearchChannelResponse> {
            return localVarFp.methodSearchV1(requestParameters.language, requestParameters.projectId, requestParameters.v, requestParameters.type, requestParameters.platform, requestParameters.name, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get live status
         * @param {ChannelApiMethodSetStatusV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodSetStatusV1(requestParameters: ChannelApiMethodSetStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.methodSetStatusV1(requestParameters.methodSetStatusChannelRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChannelApi - interface
 * @export
 * @interface ChannelApi
 */
export interface ChannelApiInterface {
    /**
     * 
     * @summary Minimal channel list
     * @param {ChannelApiChannelShortChannelListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     */
    channelShortChannelListV1(requestParameters: ChannelApiChannelShortChannelListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteGetShortChannelResponse>;

    /**
     * 
     * @summary Search channel list
     * @param {ChannelApiMethodSearchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     */
    methodSearchV1(requestParameters: ChannelApiMethodSearchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteSearchChannelResponse>;

    /**
     * 
     * @summary Get live status
     * @param {ChannelApiMethodSetStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     */
    methodSetStatusV1(requestParameters: ChannelApiMethodSetStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

}

/**
 * Request parameters for channelShortChannelListV1 operation in ChannelApi.
 * @export
 * @interface ChannelApiChannelShortChannelListV1Request
 */
export interface ChannelApiChannelShortChannelListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelApiChannelShortChannelListV1
     */
    readonly language: ChannelShortChannelListV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof ChannelApiChannelShortChannelListV1
     */
    readonly projectId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelApiChannelShortChannelListV1
     */
    readonly v?: ChannelShortChannelListV1VEnum
}

/**
 * Request parameters for methodSearchV1 operation in ChannelApi.
 * @export
 * @interface ChannelApiMethodSearchV1Request
 */
export interface ChannelApiMethodSearchV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelApiMethodSearchV1
     */
    readonly language: MethodSearchV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof ChannelApiMethodSearchV1
     */
    readonly projectId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelApiMethodSearchV1
     */
    readonly v?: MethodSearchV1VEnum

    /**
     * 
     * @type {'all' | 'my' | 'available' | 'active'}
     * @memberof ChannelApiMethodSearchV1
     */
    readonly type?: MethodSearchV1TypeEnum

    /**
     * platform type
     * @type {string}
     * @memberof ChannelApiMethodSearchV1
     */
    readonly platform?: string

    /**
     * name
     * @type {string}
     * @memberof ChannelApiMethodSearchV1
     */
    readonly name?: string

    /**
     * Number of results
     * @type {number}
     * @memberof ChannelApiMethodSearchV1
     */
    readonly limit?: number

    /**
     * Page offset number
     * @type {number}
     * @memberof ChannelApiMethodSearchV1
     */
    readonly offset?: number
}

/**
 * Request parameters for methodSetStatusV1 operation in ChannelApi.
 * @export
 * @interface ChannelApiMethodSetStatusV1Request
 */
export interface ChannelApiMethodSetStatusV1Request {
    /**
     * 
     * @type {MethodSetStatusChannelRequest}
     * @memberof ChannelApiMethodSetStatusV1
     */
    readonly methodSetStatusChannelRequest: MethodSetStatusChannelRequest
}

/**
 * ChannelApi - object-oriented interface
 * @export
 * @class ChannelApi
 * @extends {BaseAPI}
 */
export class ChannelApi extends BaseAPI implements ChannelApiInterface {
    /**
     * 
     * @summary Minimal channel list
     * @param {ChannelApiChannelShortChannelListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public channelShortChannelListV1(requestParameters: ChannelApiChannelShortChannelListV1Request, options?: RawAxiosRequestConfig) {
        return ChannelApiFp(this.configuration).channelShortChannelListV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search channel list
     * @param {ChannelApiMethodSearchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public methodSearchV1(requestParameters: ChannelApiMethodSearchV1Request, options?: RawAxiosRequestConfig) {
        return ChannelApiFp(this.configuration).methodSearchV1(requestParameters.language, requestParameters.projectId, requestParameters.v, requestParameters.type, requestParameters.platform, requestParameters.name, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get live status
     * @param {ChannelApiMethodSetStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public methodSetStatusV1(requestParameters: ChannelApiMethodSetStatusV1Request, options?: RawAxiosRequestConfig) {
        return ChannelApiFp(this.configuration).methodSetStatusV1(requestParameters.methodSetStatusChannelRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ChannelShortChannelListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ChannelShortChannelListV1LanguageEnum = typeof ChannelShortChannelListV1LanguageEnum[keyof typeof ChannelShortChannelListV1LanguageEnum];
/**
 * @export
 */
export const ChannelShortChannelListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ChannelShortChannelListV1VEnum = typeof ChannelShortChannelListV1VEnum[keyof typeof ChannelShortChannelListV1VEnum];
/**
 * @export
 */
export const MethodSearchV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type MethodSearchV1LanguageEnum = typeof MethodSearchV1LanguageEnum[keyof typeof MethodSearchV1LanguageEnum];
/**
 * @export
 */
export const MethodSearchV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type MethodSearchV1VEnum = typeof MethodSearchV1VEnum[keyof typeof MethodSearchV1VEnum];
/**
 * @export
 */
export const MethodSearchV1TypeEnum = {
    All: 'all',
    My: 'my',
    Available: 'available',
    Active: 'active'
} as const;
export type MethodSearchV1TypeEnum = typeof MethodSearchV1TypeEnum[keyof typeof MethodSearchV1TypeEnum];
