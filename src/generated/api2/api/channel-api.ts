/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { MethodSetStatusChannelRequest } from '../models';
// @ts-ignore
import type { SiteGetShortChannelResponse } from '../models';
// @ts-ignore
import type { SiteSearchChannelResponse } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
/**
 * ChannelApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Search channel list
         * @param {searchVEnum} v Version
         * @param {searchLanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {searchTypeEnum} [type] 
         * @param {string} [platform] platform type
         * @param {string} [name] name
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (v: searchVEnum, language: searchLanguageEnum, projectId: number, type?: searchTypeEnum, platform?: string, name?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('search', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('search', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('search', 'projectId', projectId)
            const localVarPath = `/method/channel/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-API-KEY required
            await keyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get live status
         * @param {MethodSetStatusChannelRequest} methodSetStatusChannelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStatus: async (methodSetStatusChannelRequest: MethodSetStatusChannelRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'methodSetStatusChannelRequest' is not null or undefined
            assertParamExists('setStatus', 'methodSetStatusChannelRequest', methodSetStatusChannelRequest)
            const localVarPath = `/method/channel/set-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-API-KEY required
            await keyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(methodSetStatusChannelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Minimal channel list
         * @param {shortChannelList1VEnum} v Version
         * @param {shortChannelList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shortChannelList1: async (v: shortChannelList1VEnum, language: shortChannelList1LanguageEnum, projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('shortChannelList1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('shortChannelList1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('shortChannelList1', 'projectId', projectId)
            const localVarPath = `/method/channel/short`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Search channel list
         * @param {searchVEnum} v Version
         * @param {searchLanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {searchTypeEnum} [type] 
         * @param {string} [platform] platform type
         * @param {string} [name] name
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(v: searchVEnum, language: searchLanguageEnum, projectId: number, type?: searchTypeEnum, platform?: string, name?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteSearchChannelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(v, language, projectId, type, platform, name, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelApi.search']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get live status
         * @param {MethodSetStatusChannelRequest} methodSetStatusChannelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setStatus(methodSetStatusChannelRequest: MethodSetStatusChannelRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setStatus(methodSetStatusChannelRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelApi.setStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Minimal channel list
         * @param {shortChannelList1VEnum} v Version
         * @param {shortChannelList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shortChannelList1(v: shortChannelList1VEnum, language: shortChannelList1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteGetShortChannelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shortChannelList1(v, language, projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelApi.shortChannelList1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChannelApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Search channel list
         * @param {searchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(requestParameters: searchRequest, options?: RawAxiosRequestConfig): AxiosPromise<SiteSearchChannelResponse> {
            return localVarFp.search(requestParameters.v, requestParameters.language, requestParameters.projectId, requestParameters.type, requestParameters.platform, requestParameters.name, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get live status
         * @param {setStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStatus(requestParameters: setStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.setStatus(requestParameters.methodSetStatusChannelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Minimal channel list
         * @param {shortChannelList1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shortChannelList1(requestParameters: shortChannelList1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteGetShortChannelResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: shortChannelList1VEnum = requestParameters.v || shortChannelList1VEnum._1;
            return localVarFp.shortChannelList1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for search operation in ChannelApi.
 * @export
 * @interface searchRequest
 */
export interface searchRequest {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof search
     */
    readonly v: searchVEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof search
     */
    readonly language: searchLanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof search
     */
    readonly projectId: number

    /**
     * 
     * @type {'all' | 'my' | 'available' | 'active'}
     * @memberof search
     */
    readonly type?: searchTypeEnum

    /**
     * platform type
     * @type {string}
     * @memberof search
     */
    readonly platform?: string

    /**
     * name
     * @type {string}
     * @memberof search
     */
    readonly name?: string

    /**
     * Number of results
     * @type {number}
     * @memberof search
     */
    readonly limit?: number

    /**
     * Page offset number
     * @type {number}
     * @memberof search
     */
    readonly offset?: number
}

/**
 * Request parameters for setStatus operation in ChannelApi.
 * @export
 * @interface setStatusRequest
 */
export interface setStatusRequest {
    /**
     * 
     * @type {MethodSetStatusChannelRequest}
     * @memberof setStatus
     */
    readonly methodSetStatusChannelRequest: MethodSetStatusChannelRequest
}

/**
 * Request parameters for shortChannelList1 operation in ChannelApi.
 * @export
 * @interface shortChannelList1Request
 */
export interface shortChannelList1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof shortChannelList1
     */
    readonly v?: shortChannelList1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof shortChannelList1
     */
    readonly language: shortChannelList1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof shortChannelList1
     */
    readonly projectId: number
}

/**
 * ChannelApi - object-oriented interface
 * @export
 * @class ChannelApi
 * @extends {BaseAPI}
 */
export class ChannelApi extends BaseAPI {
    /**
     * 
     * @summary Search channel list
     * @param {searchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public search(requestParameters: searchRequest, options?: RawAxiosRequestConfig) {
        return fp(this.configuration).search(requestParameters.v, requestParameters.language, requestParameters.projectId, requestParameters.type, requestParameters.platform, requestParameters.name, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get live status
     * @param {setStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public setStatus(requestParameters: setStatusRequest, options?: RawAxiosRequestConfig) {
        return fp(this.configuration).setStatus(requestParameters.methodSetStatusChannelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Minimal channel list
     * @param {shortChannelList1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public shortChannelList1(requestParameters: shortChannelList1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: shortChannelList1VEnum = requestParameters.v || shortChannelList1VEnum._1;
        return fp(this.configuration).shortChannelList1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum searchVEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum searchLanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum searchTypeEnum {
    all = 'all',
    my = 'my',
    available = 'available',
    active = 'active'
}
/**
  * @export
  * @enum {string}
  */
export enum shortChannelList1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum shortChannelList1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
