/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
// @ts-ignore
import type { UserProfileResponse } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get user profile
         * @param {getProfile1VEnum} v Version
         * @param {getProfile1LanguageEnum} language Current language
         * @param {number | null} [projectId] Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile1: async (v: getProfile1VEnum, language: getProfile1LanguageEnum, projectId?: number | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('getProfile1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getProfile1', 'language', language)
            const localVarPath = `/method/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Test code only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCode1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/method/users/code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Test code exception only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCodeException1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/method/users/code-throw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update profile
         * @param {updateProfile1VEnum} v Version
         * @param {updateProfile1LanguageEnum} language Current language
         * @param {string} firstName First name
         * @param {string} lastName Last name
         * @param {File} [avatar] File for avatar upload max size 2MB, format: jpeg, jpg, png
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfile1: async (v: updateProfile1VEnum, language: updateProfile1LanguageEnum, firstName: string, lastName: string, avatar?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('updateProfile1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('updateProfile1', 'language', language)
            // verify required parameter 'firstName' is not null or undefined
            assertParamExists('updateProfile1', 'firstName', firstName)
            // verify required parameter 'lastName' is not null or undefined
            assertParamExists('updateProfile1', 'lastName', lastName)
            const localVarPath = `/method/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (v !== undefined) { 
                localVarFormParams.append('v', v as any);
            }
    
            if (language !== undefined) { 
                localVarFormParams.append('language', language as any);
            }
    
            if (firstName !== undefined) { 
                localVarFormParams.append('first_name', firstName as any);
            }
    
            if (lastName !== undefined) { 
                localVarFormParams.append('last_name', lastName as any);
            }
    
            if (avatar !== undefined) { 
                localVarFormParams.append('avatar', avatar as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get user profile
         * @param {getProfile1VEnum} v Version
         * @param {getProfile1LanguageEnum} language Current language
         * @param {number | null} [projectId] Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile1(v: getProfile1VEnum, language: getProfile1LanguageEnum, projectId?: number | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile1(v, language, projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getProfile1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Test code only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testCode1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testCode1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.testCode1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Test code exception only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testCodeException1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testCodeException1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.testCodeException1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update profile
         * @param {updateProfile1VEnum} v Version
         * @param {updateProfile1LanguageEnum} language Current language
         * @param {string} firstName First name
         * @param {string} lastName Last name
         * @param {File} [avatar] File for avatar upload max size 2MB, format: jpeg, jpg, png
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfile1(v: updateProfile1VEnum, language: updateProfile1LanguageEnum, firstName: string, lastName: string, avatar?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProfile1(v, language, firstName, lastName, avatar, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.updateProfile1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Get user profile
         * @param {getProfile1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile1(requestParameters: getProfile1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: getProfile1VEnum = requestParameters.v || getProfile1VEnum._1;
            return localVarFp.getProfile1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Test code only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCode1(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.testCode1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Test code exception only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCodeException1(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.testCodeException1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update profile
         * @param {updateProfile1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfile1(requestParameters: updateProfile1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: updateProfile1VEnum = requestParameters.v || updateProfile1VEnum._1;
            return localVarFp.updateProfile1(actualV, requestParameters.language, requestParameters.firstName, requestParameters.lastName, requestParameters.avatar, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getProfile1 operation in UserApi.
 * @export
 * @interface getProfile1Request
 */
export interface getProfile1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getProfile1
     */
    readonly v?: getProfile1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getProfile1
     */
    readonly language: getProfile1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof getProfile1
     */
    readonly projectId?: number | null
}

/**
 * Request parameters for updateProfile1 operation in UserApi.
 * @export
 * @interface updateProfile1Request
 */
export interface updateProfile1Request {
    /**
     * Version
     * @type {string}
     * @memberof updateProfile1
     */
    readonly v?: updateProfile1VEnum

    /**
     * Current language
     * @type {string}
     * @memberof updateProfile1
     */
    readonly language: updateProfile1LanguageEnum

    /**
     * First name
     * @type {string}
     * @memberof updateProfile1
     */
    readonly firstName: string

    /**
     * Last name
     * @type {string}
     * @memberof updateProfile1
     */
    readonly lastName: string

    /**
     * File for avatar upload max size 2MB, format: jpeg, jpg, png
     * @type {File}
     * @memberof updateProfile1
     */
    readonly avatar?: File
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Get user profile
     * @param {getProfile1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getProfile1(requestParameters: getProfile1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: getProfile1VEnum = requestParameters.v || getProfile1VEnum._1;
        return fp(this.configuration).getProfile1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Test code only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public testCode1(options?: RawAxiosRequestConfig) {
        return fp(this.configuration).testCode1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Test code exception only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public testCodeException1(options?: RawAxiosRequestConfig) {
        return fp(this.configuration).testCodeException1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update profile
     * @param {updateProfile1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateProfile1(requestParameters: updateProfile1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: updateProfile1VEnum = requestParameters.v || updateProfile1VEnum._1;
        return fp(this.configuration).updateProfile1(actualV, requestParameters.language, requestParameters.firstName, requestParameters.lastName, requestParameters.avatar, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum getProfile1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum getProfile1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum updateProfile1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum updateProfile1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
