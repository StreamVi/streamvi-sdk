/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
// @ts-ignore
import type { UserProfileResponse } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get user profile
         * @param {UserGetProfileV1LanguageEnum} language Current language
         * @param {UserGetProfileV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number | null} [projectId] Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGetProfileV1: async (language: UserGetProfileV1LanguageEnum, v?: UserGetProfileV1VEnum, projectId?: number | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('userGetProfileV1', 'language', language)
            const localVarPath = `/method/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update profile
         * @param {UserUpdateProfileV1VEnum} v Version
         * @param {UserUpdateProfileV1LanguageEnum} language Current language
         * @param {string} firstName First name
         * @param {string} lastName Last name
         * @param {File} [avatar] File for avatar upload max size 2MB, format: jpeg, jpg, png
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdateProfileV1: async (v: UserUpdateProfileV1VEnum, language: UserUpdateProfileV1LanguageEnum, firstName: string, lastName: string, avatar?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('userUpdateProfileV1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('userUpdateProfileV1', 'language', language)
            // verify required parameter 'firstName' is not null or undefined
            assertParamExists('userUpdateProfileV1', 'firstName', firstName)
            // verify required parameter 'lastName' is not null or undefined
            assertParamExists('userUpdateProfileV1', 'lastName', lastName)
            const localVarPath = `/method/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (v !== undefined) { 
                localVarFormParams.append('v', v as any);
            }
    
            if (language !== undefined) { 
                localVarFormParams.append('language', language as any);
            }
    
            if (firstName !== undefined) { 
                localVarFormParams.append('first_name', firstName as any);
            }
    
            if (lastName !== undefined) { 
                localVarFormParams.append('last_name', lastName as any);
            }
    
            if (avatar !== undefined) { 
                localVarFormParams.append('avatar', avatar as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get user profile
         * @param {UserGetProfileV1LanguageEnum} language Current language
         * @param {UserGetProfileV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number | null} [projectId] Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userGetProfileV1(language: UserGetProfileV1LanguageEnum, v?: UserGetProfileV1VEnum, projectId?: number | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userGetProfileV1(language, v, projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userGetProfileV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update profile
         * @param {UserUpdateProfileV1VEnum} v Version
         * @param {UserUpdateProfileV1LanguageEnum} language Current language
         * @param {string} firstName First name
         * @param {string} lastName Last name
         * @param {File} [avatar] File for avatar upload max size 2MB, format: jpeg, jpg, png
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userUpdateProfileV1(v: UserUpdateProfileV1VEnum, language: UserUpdateProfileV1LanguageEnum, firstName: string, lastName: string, avatar?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userUpdateProfileV1(v, language, firstName, lastName, avatar, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userUpdateProfileV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Get user profile
         * @param {UserApiUserGetProfileV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGetProfileV1(requestParameters: UserApiUserGetProfileV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileResponse> {
            return localVarFp.userGetProfileV1(requestParameters.language, requestParameters.v, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update profile
         * @param {UserApiUserUpdateProfileV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdateProfileV1(requestParameters: UserApiUserUpdateProfileV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.userUpdateProfileV1(requestParameters.v, requestParameters.language, requestParameters.firstName, requestParameters.lastName, requestParameters.avatar, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - interface
 * @export
 * @interface UserApi
 */
export interface UserApiInterface {
    /**
     * 
     * @summary Get user profile
     * @param {UserApiUserGetProfileV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userGetProfileV1(requestParameters: UserApiUserGetProfileV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileResponse>;

    /**
     * 
     * @summary Update profile
     * @param {UserApiUserUpdateProfileV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userUpdateProfileV1(requestParameters: UserApiUserUpdateProfileV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

}

/**
 * Request parameters for userGetProfileV1 operation in UserApi.
 * @export
 * @interface UserApiUserGetProfileV1Request
 */
export interface UserApiUserGetProfileV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof UserApiUserGetProfileV1
     */
    readonly language: UserGetProfileV1LanguageEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof UserApiUserGetProfileV1
     */
    readonly v?: UserGetProfileV1VEnum

    /**
     * Project id
     * @type {number}
     * @memberof UserApiUserGetProfileV1
     */
    readonly projectId?: number | null
}

/**
 * Request parameters for userUpdateProfileV1 operation in UserApi.
 * @export
 * @interface UserApiUserUpdateProfileV1Request
 */
export interface UserApiUserUpdateProfileV1Request {
    /**
     * Version
     * @type {string}
     * @memberof UserApiUserUpdateProfileV1
     */
    readonly v: UserUpdateProfileV1VEnum

    /**
     * Current language
     * @type {string}
     * @memberof UserApiUserUpdateProfileV1
     */
    readonly language: UserUpdateProfileV1LanguageEnum

    /**
     * First name
     * @type {string}
     * @memberof UserApiUserUpdateProfileV1
     */
    readonly firstName: string

    /**
     * Last name
     * @type {string}
     * @memberof UserApiUserUpdateProfileV1
     */
    readonly lastName: string

    /**
     * File for avatar upload max size 2MB, format: jpeg, jpg, png
     * @type {File}
     * @memberof UserApiUserUpdateProfileV1
     */
    readonly avatar?: File
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI implements UserApiInterface {
    /**
     * 
     * @summary Get user profile
     * @param {UserApiUserGetProfileV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userGetProfileV1(requestParameters: UserApiUserGetProfileV1Request, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userGetProfileV1(requestParameters.language, requestParameters.v, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update profile
     * @param {UserApiUserUpdateProfileV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userUpdateProfileV1(requestParameters: UserApiUserUpdateProfileV1Request, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userUpdateProfileV1(requestParameters.v, requestParameters.language, requestParameters.firstName, requestParameters.lastName, requestParameters.avatar, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const UserGetProfileV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type UserGetProfileV1LanguageEnum = typeof UserGetProfileV1LanguageEnum[keyof typeof UserGetProfileV1LanguageEnum];
/**
 * @export
 */
export const UserGetProfileV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type UserGetProfileV1VEnum = typeof UserGetProfileV1VEnum[keyof typeof UserGetProfileV1VEnum];
/**
 * @export
 */
export const UserUpdateProfileV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type UserUpdateProfileV1VEnum = typeof UserUpdateProfileV1VEnum[keyof typeof UserUpdateProfileV1VEnum];
/**
 * @export
 */
export const UserUpdateProfileV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type UserUpdateProfileV1LanguageEnum = typeof UserUpdateProfileV1LanguageEnum[keyof typeof UserUpdateProfileV1LanguageEnum];
