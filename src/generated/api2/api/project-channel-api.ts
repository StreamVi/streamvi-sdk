/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { ListOfProjectChannelResponse } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
/**
 * ProjectChannelApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change access for project in channel
         * @param {changeAccess1VEnum} v Version
         * @param {changeAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {changeAccess1AccessTypeEnum} accessType Access type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAccess1: async (v: changeAccess1VEnum, language: changeAccess1LanguageEnum, projectId: number, channelId: number, toProjectId: number, accessType: changeAccess1AccessTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('changeAccess1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('changeAccess1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('changeAccess1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('changeAccess1', 'channelId', channelId)
            // verify required parameter 'toProjectId' is not null or undefined
            assertParamExists('changeAccess1', 'toProjectId', toProjectId)
            // verify required parameter 'accessType' is not null or undefined
            assertParamExists('changeAccess1', 'accessType', accessType)
            const localVarPath = `/method/channel/access/change`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (toProjectId !== undefined) {
                localVarQueryParameter['to_project_id'] = toProjectId;
            }

            if (accessType !== undefined) {
                localVarQueryParameter['access_type'] = accessType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove access for project in channel
         * @param {del1VEnum} v Version
         * @param {del1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} targetProjectId Target project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        del1: async (v: del1VEnum, language: del1LanguageEnum, projectId: number, channelId: number, targetProjectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('del1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('del1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('del1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('del1', 'channelId', channelId)
            // verify required parameter 'targetProjectId' is not null or undefined
            assertParamExists('del1', 'targetProjectId', targetProjectId)
            const localVarPath = `/method/channel/access/del`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (targetProjectId !== undefined) {
                localVarQueryParameter['target_project_id'] = targetProjectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Project channel list
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1: async (v: list1VEnum, language: list1LanguageEnum, projectId: number, channelId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('list1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('list1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('list1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('list1', 'channelId', channelId)
            const localVarPath = `/method/channel/access/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Transfer owner for project in channel
         * @param {transferOwner1VEnum} v Version
         * @param {transferOwner1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOwner1: async (v: transferOwner1VEnum, language: transferOwner1LanguageEnum, projectId: number, channelId: number, toProjectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('transferOwner1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('transferOwner1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('transferOwner1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('transferOwner1', 'channelId', channelId)
            // verify required parameter 'toProjectId' is not null or undefined
            assertParamExists('transferOwner1', 'toProjectId', toProjectId)
            const localVarPath = `/method/channel/access/transfer_owner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (toProjectId !== undefined) {
                localVarQueryParameter['to_project_id'] = toProjectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectChannelApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Change access for project in channel
         * @param {changeAccess1VEnum} v Version
         * @param {changeAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {changeAccess1AccessTypeEnum} accessType Access type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeAccess1(v: changeAccess1VEnum, language: changeAccess1LanguageEnum, projectId: number, channelId: number, toProjectId: number, accessType: changeAccess1AccessTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeAccess1(v, language, projectId, channelId, toProjectId, accessType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelApi.changeAccess1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove access for project in channel
         * @param {del1VEnum} v Version
         * @param {del1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} targetProjectId Target project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async del1(v: del1VEnum, language: del1LanguageEnum, projectId: number, channelId: number, targetProjectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.del1(v, language, projectId, channelId, targetProjectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelApi.del1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Project channel list
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list1(v: list1VEnum, language: list1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfProjectChannelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list1(v, language, projectId, channelId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelApi.list1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Transfer owner for project in channel
         * @param {transferOwner1VEnum} v Version
         * @param {transferOwner1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferOwner1(v: transferOwner1VEnum, language: transferOwner1LanguageEnum, projectId: number, channelId: number, toProjectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferOwner1(v, language, projectId, channelId, toProjectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelApi.transferOwner1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectChannelApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Change access for project in channel
         * @param {changeAccess1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAccess1(requestParameters: changeAccess1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: changeAccess1VEnum = requestParameters.v || changeAccess1VEnum._1;
            return localVarFp.changeAccess1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.toProjectId, requestParameters.accessType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove access for project in channel
         * @param {del1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        del1(requestParameters: del1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: del1VEnum = requestParameters.v || del1VEnum._1;
            return localVarFp.del1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.targetProjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Project channel list
         * @param {list1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfProjectChannelResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: list1VEnum = requestParameters.v || list1VEnum._1;
            return localVarFp.list1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Transfer owner for project in channel
         * @param {transferOwner1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOwner1(requestParameters: transferOwner1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: transferOwner1VEnum = requestParameters.v || transferOwner1VEnum._1;
            return localVarFp.transferOwner1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.toProjectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for changeAccess1 operation in ProjectChannelApi.
 * @export
 * @interface changeAccess1Request
 */
export interface changeAccess1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof changeAccess1
     */
    readonly v?: changeAccess1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof changeAccess1
     */
    readonly language: changeAccess1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof changeAccess1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof changeAccess1
     */
    readonly channelId: number

    /**
     * Target project id
     * @type {number}
     * @memberof changeAccess1
     */
    readonly toProjectId: number

    /**
     * Access type
     * @type {0 | 1 | 1 | 2}
     * @memberof changeAccess1
     */
    readonly accessType: changeAccess1AccessTypeEnum
}

/**
 * Request parameters for del1 operation in ProjectChannelApi.
 * @export
 * @interface del1Request
 */
export interface del1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof del1
     */
    readonly v?: del1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof del1
     */
    readonly language: del1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof del1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof del1
     */
    readonly channelId: number

    /**
     * Target project id
     * @type {number}
     * @memberof del1
     */
    readonly targetProjectId: number
}

/**
 * Request parameters for list1 operation in ProjectChannelApi.
 * @export
 * @interface list1Request
 */
export interface list1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof list1
     */
    readonly v?: list1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof list1
     */
    readonly language: list1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof list1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof list1
     */
    readonly channelId: number
}

/**
 * Request parameters for transferOwner1 operation in ProjectChannelApi.
 * @export
 * @interface transferOwner1Request
 */
export interface transferOwner1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof transferOwner1
     */
    readonly v?: transferOwner1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof transferOwner1
     */
    readonly language: transferOwner1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof transferOwner1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof transferOwner1
     */
    readonly channelId: number

    /**
     * Target project id
     * @type {number}
     * @memberof transferOwner1
     */
    readonly toProjectId: number
}

/**
 * ProjectChannelApi - object-oriented interface
 * @export
 * @class ProjectChannelApi
 * @extends {BaseAPI}
 */
export class ProjectChannelApi extends BaseAPI {
    /**
     * 
     * @summary Change access for project in channel
     * @param {changeAccess1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    public changeAccess1(requestParameters: changeAccess1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: changeAccess1VEnum = requestParameters.v || changeAccess1VEnum._1;
        return fp(this.configuration).changeAccess1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.toProjectId, requestParameters.accessType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove access for project in channel
     * @param {del1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    public del1(requestParameters: del1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: del1VEnum = requestParameters.v || del1VEnum._1;
        return fp(this.configuration).del1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.targetProjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Project channel list
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    public list1(requestParameters: list1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: list1VEnum = requestParameters.v || list1VEnum._1;
        return fp(this.configuration).list1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Transfer owner for project in channel
     * @param {transferOwner1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    public transferOwner1(requestParameters: transferOwner1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: transferOwner1VEnum = requestParameters.v || transferOwner1VEnum._1;
        return fp(this.configuration).transferOwner1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.toProjectId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum changeAccess1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum changeAccess1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum changeAccess1AccessTypeEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_12 = 1,
    NUMBER_2 = 2
}
/**
  * @export
  * @enum {string}
  */
export enum del1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum del1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum list1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum list1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum transferOwner1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum transferOwner1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
