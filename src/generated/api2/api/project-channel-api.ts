/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { ListOfProjectChannelResponse } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
/**
 * ProjectChannelApi - axios parameter creator
 * @export
 */
export const ProjectChannelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change access for project in channel
         * @param {ProjectChannelChangeAccessV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {ProjectChannelChangeAccessV1AccessTypeEnum} accessType Access type
         * @param {ProjectChannelChangeAccessV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelChangeAccessV1: async (language: ProjectChannelChangeAccessV1LanguageEnum, projectId: number, channelId: number, toProjectId: number, accessType: ProjectChannelChangeAccessV1AccessTypeEnum, v?: ProjectChannelChangeAccessV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('projectChannelChangeAccessV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectChannelChangeAccessV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('projectChannelChangeAccessV1', 'channelId', channelId)
            // verify required parameter 'toProjectId' is not null or undefined
            assertParamExists('projectChannelChangeAccessV1', 'toProjectId', toProjectId)
            // verify required parameter 'accessType' is not null or undefined
            assertParamExists('projectChannelChangeAccessV1', 'accessType', accessType)
            const localVarPath = `/method/channel/access/change`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (toProjectId !== undefined) {
                localVarQueryParameter['to_project_id'] = toProjectId;
            }

            if (accessType !== undefined) {
                localVarQueryParameter['access_type'] = accessType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove access for project in channel
         * @param {ProjectChannelDelV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} targetProjectId Target project id
         * @param {ProjectChannelDelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelDelV1: async (language: ProjectChannelDelV1LanguageEnum, projectId: number, channelId: number, targetProjectId: number, v?: ProjectChannelDelV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('projectChannelDelV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectChannelDelV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('projectChannelDelV1', 'channelId', channelId)
            // verify required parameter 'targetProjectId' is not null or undefined
            assertParamExists('projectChannelDelV1', 'targetProjectId', targetProjectId)
            const localVarPath = `/method/channel/access/del`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (targetProjectId !== undefined) {
                localVarQueryParameter['target_project_id'] = targetProjectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Project channel list
         * @param {ProjectChannelListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ProjectChannelListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelListV1: async (language: ProjectChannelListV1LanguageEnum, projectId: number, channelId: number, v?: ProjectChannelListV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('projectChannelListV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectChannelListV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('projectChannelListV1', 'channelId', channelId)
            const localVarPath = `/method/channel/access/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Transfer owner for project in channel
         * @param {ProjectChannelTransferOwnerV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {ProjectChannelTransferOwnerV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelTransferOwnerV1: async (language: ProjectChannelTransferOwnerV1LanguageEnum, projectId: number, channelId: number, toProjectId: number, v?: ProjectChannelTransferOwnerV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('projectChannelTransferOwnerV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectChannelTransferOwnerV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('projectChannelTransferOwnerV1', 'channelId', channelId)
            // verify required parameter 'toProjectId' is not null or undefined
            assertParamExists('projectChannelTransferOwnerV1', 'toProjectId', toProjectId)
            const localVarPath = `/method/channel/access/transfer_owner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (toProjectId !== undefined) {
                localVarQueryParameter['to_project_id'] = toProjectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectChannelApi - functional programming interface
 * @export
 */
export const ProjectChannelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectChannelApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Change access for project in channel
         * @param {ProjectChannelChangeAccessV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {ProjectChannelChangeAccessV1AccessTypeEnum} accessType Access type
         * @param {ProjectChannelChangeAccessV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelChangeAccessV1(language: ProjectChannelChangeAccessV1LanguageEnum, projectId: number, channelId: number, toProjectId: number, accessType: ProjectChannelChangeAccessV1AccessTypeEnum, v?: ProjectChannelChangeAccessV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelChangeAccessV1(language, projectId, channelId, toProjectId, accessType, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelApi.projectChannelChangeAccessV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove access for project in channel
         * @param {ProjectChannelDelV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} targetProjectId Target project id
         * @param {ProjectChannelDelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelDelV1(language: ProjectChannelDelV1LanguageEnum, projectId: number, channelId: number, targetProjectId: number, v?: ProjectChannelDelV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelDelV1(language, projectId, channelId, targetProjectId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelApi.projectChannelDelV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Project channel list
         * @param {ProjectChannelListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ProjectChannelListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelListV1(language: ProjectChannelListV1LanguageEnum, projectId: number, channelId: number, v?: ProjectChannelListV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfProjectChannelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelListV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelApi.projectChannelListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Transfer owner for project in channel
         * @param {ProjectChannelTransferOwnerV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {ProjectChannelTransferOwnerV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelTransferOwnerV1(language: ProjectChannelTransferOwnerV1LanguageEnum, projectId: number, channelId: number, toProjectId: number, v?: ProjectChannelTransferOwnerV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelTransferOwnerV1(language, projectId, channelId, toProjectId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelApi.projectChannelTransferOwnerV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectChannelApi - factory interface
 * @export
 */
export const ProjectChannelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectChannelApiFp(configuration)
    return {
        /**
         * 
         * @summary Change access for project in channel
         * @param {ProjectChannelApiProjectChannelChangeAccessV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelChangeAccessV1(requestParameters: ProjectChannelApiProjectChannelChangeAccessV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.projectChannelChangeAccessV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.toProjectId, requestParameters.accessType, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove access for project in channel
         * @param {ProjectChannelApiProjectChannelDelV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelDelV1(requestParameters: ProjectChannelApiProjectChannelDelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.projectChannelDelV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.targetProjectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Project channel list
         * @param {ProjectChannelApiProjectChannelListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelListV1(requestParameters: ProjectChannelApiProjectChannelListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfProjectChannelResponse> {
            return localVarFp.projectChannelListV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Transfer owner for project in channel
         * @param {ProjectChannelApiProjectChannelTransferOwnerV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelTransferOwnerV1(requestParameters: ProjectChannelApiProjectChannelTransferOwnerV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.projectChannelTransferOwnerV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.toProjectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectChannelApi - interface
 * @export
 * @interface ProjectChannelApi
 */
export interface ProjectChannelApiInterface {
    /**
     * 
     * @summary Change access for project in channel
     * @param {ProjectChannelApiProjectChannelChangeAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApiInterface
     */
    projectChannelChangeAccessV1(requestParameters: ProjectChannelApiProjectChannelChangeAccessV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Remove access for project in channel
     * @param {ProjectChannelApiProjectChannelDelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApiInterface
     */
    projectChannelDelV1(requestParameters: ProjectChannelApiProjectChannelDelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Project channel list
     * @param {ProjectChannelApiProjectChannelListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApiInterface
     */
    projectChannelListV1(requestParameters: ProjectChannelApiProjectChannelListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfProjectChannelResponse>;

    /**
     * 
     * @summary Transfer owner for project in channel
     * @param {ProjectChannelApiProjectChannelTransferOwnerV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApiInterface
     */
    projectChannelTransferOwnerV1(requestParameters: ProjectChannelApiProjectChannelTransferOwnerV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

}

/**
 * Request parameters for projectChannelChangeAccessV1 operation in ProjectChannelApi.
 * @export
 * @interface ProjectChannelApiProjectChannelChangeAccessV1Request
 */
export interface ProjectChannelApiProjectChannelChangeAccessV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ProjectChannelApiProjectChannelChangeAccessV1
     */
    readonly language: ProjectChannelChangeAccessV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelChangeAccessV1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelChangeAccessV1
     */
    readonly channelId: number

    /**
     * Target project id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelChangeAccessV1
     */
    readonly toProjectId: number

    /**
     * Access type
     * @type {0 | 1 | 1 | 2}
     * @memberof ProjectChannelApiProjectChannelChangeAccessV1
     */
    readonly accessType: ProjectChannelChangeAccessV1AccessTypeEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ProjectChannelApiProjectChannelChangeAccessV1
     */
    readonly v?: ProjectChannelChangeAccessV1VEnum
}

/**
 * Request parameters for projectChannelDelV1 operation in ProjectChannelApi.
 * @export
 * @interface ProjectChannelApiProjectChannelDelV1Request
 */
export interface ProjectChannelApiProjectChannelDelV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ProjectChannelApiProjectChannelDelV1
     */
    readonly language: ProjectChannelDelV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelDelV1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelDelV1
     */
    readonly channelId: number

    /**
     * Target project id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelDelV1
     */
    readonly targetProjectId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ProjectChannelApiProjectChannelDelV1
     */
    readonly v?: ProjectChannelDelV1VEnum
}

/**
 * Request parameters for projectChannelListV1 operation in ProjectChannelApi.
 * @export
 * @interface ProjectChannelApiProjectChannelListV1Request
 */
export interface ProjectChannelApiProjectChannelListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ProjectChannelApiProjectChannelListV1
     */
    readonly language: ProjectChannelListV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelListV1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelListV1
     */
    readonly channelId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ProjectChannelApiProjectChannelListV1
     */
    readonly v?: ProjectChannelListV1VEnum
}

/**
 * Request parameters for projectChannelTransferOwnerV1 operation in ProjectChannelApi.
 * @export
 * @interface ProjectChannelApiProjectChannelTransferOwnerV1Request
 */
export interface ProjectChannelApiProjectChannelTransferOwnerV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ProjectChannelApiProjectChannelTransferOwnerV1
     */
    readonly language: ProjectChannelTransferOwnerV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelTransferOwnerV1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelTransferOwnerV1
     */
    readonly channelId: number

    /**
     * Target project id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelTransferOwnerV1
     */
    readonly toProjectId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ProjectChannelApiProjectChannelTransferOwnerV1
     */
    readonly v?: ProjectChannelTransferOwnerV1VEnum
}

/**
 * ProjectChannelApi - object-oriented interface
 * @export
 * @class ProjectChannelApi
 * @extends {BaseAPI}
 */
export class ProjectChannelApi extends BaseAPI implements ProjectChannelApiInterface {
    /**
     * 
     * @summary Change access for project in channel
     * @param {ProjectChannelApiProjectChannelChangeAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    public projectChannelChangeAccessV1(requestParameters: ProjectChannelApiProjectChannelChangeAccessV1Request, options?: RawAxiosRequestConfig) {
        return ProjectChannelApiFp(this.configuration).projectChannelChangeAccessV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.toProjectId, requestParameters.accessType, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove access for project in channel
     * @param {ProjectChannelApiProjectChannelDelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    public projectChannelDelV1(requestParameters: ProjectChannelApiProjectChannelDelV1Request, options?: RawAxiosRequestConfig) {
        return ProjectChannelApiFp(this.configuration).projectChannelDelV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.targetProjectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Project channel list
     * @param {ProjectChannelApiProjectChannelListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    public projectChannelListV1(requestParameters: ProjectChannelApiProjectChannelListV1Request, options?: RawAxiosRequestConfig) {
        return ProjectChannelApiFp(this.configuration).projectChannelListV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Transfer owner for project in channel
     * @param {ProjectChannelApiProjectChannelTransferOwnerV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    public projectChannelTransferOwnerV1(requestParameters: ProjectChannelApiProjectChannelTransferOwnerV1Request, options?: RawAxiosRequestConfig) {
        return ProjectChannelApiFp(this.configuration).projectChannelTransferOwnerV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.toProjectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ProjectChannelChangeAccessV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ProjectChannelChangeAccessV1LanguageEnum = typeof ProjectChannelChangeAccessV1LanguageEnum[keyof typeof ProjectChannelChangeAccessV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelChangeAccessV1AccessTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_12: 1,
    NUMBER_2: 2
} as const;
export type ProjectChannelChangeAccessV1AccessTypeEnum = typeof ProjectChannelChangeAccessV1AccessTypeEnum[keyof typeof ProjectChannelChangeAccessV1AccessTypeEnum];
/**
 * @export
 */
export const ProjectChannelChangeAccessV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelChangeAccessV1VEnum = typeof ProjectChannelChangeAccessV1VEnum[keyof typeof ProjectChannelChangeAccessV1VEnum];
/**
 * @export
 */
export const ProjectChannelDelV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ProjectChannelDelV1LanguageEnum = typeof ProjectChannelDelV1LanguageEnum[keyof typeof ProjectChannelDelV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelDelV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelDelV1VEnum = typeof ProjectChannelDelV1VEnum[keyof typeof ProjectChannelDelV1VEnum];
/**
 * @export
 */
export const ProjectChannelListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ProjectChannelListV1LanguageEnum = typeof ProjectChannelListV1LanguageEnum[keyof typeof ProjectChannelListV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelListV1VEnum = typeof ProjectChannelListV1VEnum[keyof typeof ProjectChannelListV1VEnum];
/**
 * @export
 */
export const ProjectChannelTransferOwnerV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ProjectChannelTransferOwnerV1LanguageEnum = typeof ProjectChannelTransferOwnerV1LanguageEnum[keyof typeof ProjectChannelTransferOwnerV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelTransferOwnerV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelTransferOwnerV1VEnum = typeof ProjectChannelTransferOwnerV1VEnum[keyof typeof ProjectChannelTransferOwnerV1VEnum];
