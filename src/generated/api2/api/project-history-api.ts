/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { PaginatedResponseOfProjectHistoryResponse } from '../models';
/**
 * ProjectHistoryApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get project history of actions
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {list1ActionEnum} [action] Action
         * @param {number} [groupId] Group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1: async (v: list1VEnum, language: list1LanguageEnum, projectId: number, limit?: number, offset?: number, dateFrom?: string, dateTo?: string, action?: list1ActionEnum, groupId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('list1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('list1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('list1', 'projectId', projectId)
            const localVarPath = `/method/project_history/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString() :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString() :
                    dateTo;
            }

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectHistoryApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get project history of actions
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {list1ActionEnum} [action] Action
         * @param {number} [groupId] Group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list1(v: list1VEnum, language: list1LanguageEnum, projectId: number, limit?: number, offset?: number, dateFrom?: string, dateTo?: string, action?: list1ActionEnum, groupId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseOfProjectHistoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list1(v, language, projectId, limit, offset, dateFrom, dateTo, action, groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectHistoryApi.list1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectHistoryApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Get project history of actions
         * @param {list1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfProjectHistoryResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: list1VEnum = requestParameters.v || list1VEnum._1;
            return localVarFp.list1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.limit, requestParameters.offset, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.action, requestParameters.groupId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for list1 operation in ProjectHistoryApi.
 * @export
 * @interface list1Request
 */
export interface list1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof list1
     */
    readonly v?: list1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof list1
     */
    readonly language: list1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof list1
     */
    readonly projectId: number

    /**
     * Number of results
     * @type {number}
     * @memberof list1
     */
    readonly limit?: number

    /**
     * Page offset number
     * @type {number}
     * @memberof list1
     */
    readonly offset?: number

    /**
     * Date from
     * @type {string}
     * @memberof list1
     */
    readonly dateFrom?: string

    /**
     * Date to
     * @type {string}
     * @memberof list1
     */
    readonly dateTo?: string

    /**
     * Action
     * @type {'project_channel_invite_add' | 'project_channel_invite_del' | 'project_channel_invite_accept' | 'project_channel_invite_decline' | 'user_project_invite_add' | 'user_project_invite_del' | 'user_project_invite_accept' | 'user_project_invite_decline' | 'user_project_add' | 'user_project_del' | 'user_project_change' | 'project_channel_add' | 'project_channel_del' | 'project_channel_change'}
     * @memberof list1
     */
    readonly action?: list1ActionEnum

    /**
     * Group id
     * @type {number}
     * @memberof list1
     */
    readonly groupId?: number
}

/**
 * ProjectHistoryApi - object-oriented interface
 * @export
 * @class ProjectHistoryApi
 * @extends {BaseAPI}
 */
export class ProjectHistoryApi extends BaseAPI {
    /**
     * 
     * @summary Get project history of actions
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectHistoryApi
     */
    public list1(requestParameters: list1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: list1VEnum = requestParameters.v || list1VEnum._1;
        return fp(this.configuration).list1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.limit, requestParameters.offset, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.action, requestParameters.groupId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum list1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum list1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum list1ActionEnum {
    project_channel_invite_add = 'project_channel_invite_add',
    project_channel_invite_del = 'project_channel_invite_del',
    project_channel_invite_accept = 'project_channel_invite_accept',
    project_channel_invite_decline = 'project_channel_invite_decline',
    user_project_invite_add = 'user_project_invite_add',
    user_project_invite_del = 'user_project_invite_del',
    user_project_invite_accept = 'user_project_invite_accept',
    user_project_invite_decline = 'user_project_invite_decline',
    user_project_add = 'user_project_add',
    user_project_del = 'user_project_del',
    user_project_change = 'user_project_change',
    project_channel_add = 'project_channel_add',
    project_channel_del = 'project_channel_del',
    project_channel_change = 'project_channel_change'
}
