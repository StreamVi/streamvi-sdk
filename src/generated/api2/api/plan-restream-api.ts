/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { PlanRestreamCheckV2Response } from '../models';
// @ts-ignore
import type { PlanRestreamDiscountResponse } from '../models';
// @ts-ignore
import type { PlanRestreamForProject } from '../models';
// @ts-ignore
import type { PlanRestreamProjectResponseDto } from '../models';
// @ts-ignore
import type { PlanRestreamResponseDto } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
/**
 * PlanRestreamApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Buy restream tariff
         * @param {buy1VEnum} v Version
         * @param {buy1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {buy1PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {number} [countChannel] Channel count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buy1: async (v: buy1VEnum, language: buy1LanguageEnum, projectId: number, period: buy1PeriodEnum, planRestreamId: number, countChannel?: number, bitrate?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('buy1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('buy1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('buy1', 'projectId', projectId)
            // verify required parameter 'period' is not null or undefined
            assertParamExists('buy1', 'period', period)
            // verify required parameter 'planRestreamId' is not null or undefined
            assertParamExists('buy1', 'planRestreamId', planRestreamId)
            const localVarPath = `/method/plan_restream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            if (planRestreamId !== undefined) {
                localVarQueryParameter['plan_restream_id'] = planRestreamId;
            }

            if (countChannel !== undefined) {
                localVarQueryParameter['count_channel'] = countChannel;
            }

            if (bitrate !== undefined) {
                localVarQueryParameter['bitrate'] = bitrate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Load data for show card the tariffs v2
         * @param {check21VEnum} v Version
         * @param {check21LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {check21PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {number} [useBalance] Is select balance
         * @param {number} [channels] Channels count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check21: async (v: check21VEnum, language: check21LanguageEnum, projectId: number, period: check21PeriodEnum, planRestreamId: number, useBalance?: number, channels?: number, bitrate?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('check21', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('check21', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('check21', 'projectId', projectId)
            // verify required parameter 'period' is not null or undefined
            assertParamExists('check21', 'period', period)
            // verify required parameter 'planRestreamId' is not null or undefined
            assertParamExists('check21', 'planRestreamId', planRestreamId)
            const localVarPath = `/method/plan_restream/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            if (planRestreamId !== undefined) {
                localVarQueryParameter['plan_restream_id'] = planRestreamId;
            }

            if (useBalance !== undefined) {
                localVarQueryParameter['use_balance'] = useBalance;
            }

            if (channels !== undefined) {
                localVarQueryParameter['channels'] = channels;
            }

            if (bitrate !== undefined) {
                localVarQueryParameter['bitrate'] = bitrate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get discount restream
         * @param {getDiscount1VEnum} v Version
         * @param {getDiscount1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscount1: async (v: getDiscount1VEnum, language: getDiscount1LanguageEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('getDiscount1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getDiscount1', 'language', language)
            const localVarPath = `/method/plan_restream/get_discount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of restream tariffs
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1: async (v: list1VEnum, language: list1LanguageEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('list1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('list1', 'language', language)
            const localVarPath = `/method/plan_restream/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of restream tariffs for project
         * @param {listProject1VEnum} v Version
         * @param {listProject1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProject1: async (v: listProject1VEnum, language: listProject1LanguageEnum, projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('listProject1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('listProject1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('listProject1', 'projectId', projectId)
            const localVarPath = `/method/plan_restream/list/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove after tariff
         * @param {remove1VEnum} v Version
         * @param {remove1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} planRestreamId Restream plan id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove1: async (v: remove1VEnum, language: remove1LanguageEnum, projectId: number, planRestreamId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('remove1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('remove1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('remove1', 'projectId', projectId)
            // verify required parameter 'planRestreamId' is not null or undefined
            assertParamExists('remove1', 'planRestreamId', planRestreamId)
            const localVarPath = `/method/plan_restream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (planRestreamId !== undefined) {
                localVarQueryParameter['plan_restream_id'] = planRestreamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get tariff for project
         * @param {tariff1VEnum} v Version
         * @param {tariff1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tariff1: async (v: tariff1VEnum, language: tariff1LanguageEnum, projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('tariff1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('tariff1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('tariff1', 'projectId', projectId)
            const localVarPath = `/method/plan_restream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlanRestreamApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Buy restream tariff
         * @param {buy1VEnum} v Version
         * @param {buy1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {buy1PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {number} [countChannel] Channel count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buy1(v: buy1VEnum, language: buy1LanguageEnum, projectId: number, period: buy1PeriodEnum, planRestreamId: number, countChannel?: number, bitrate?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buy1(v, language, projectId, period, planRestreamId, countChannel, bitrate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanRestreamApi.buy1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Load data for show card the tariffs v2
         * @param {check21VEnum} v Version
         * @param {check21LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {check21PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {number} [useBalance] Is select balance
         * @param {number} [channels] Channels count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async check21(v: check21VEnum, language: check21LanguageEnum, projectId: number, period: check21PeriodEnum, planRestreamId: number, useBalance?: number, channels?: number, bitrate?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamCheckV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.check21(v, language, projectId, period, planRestreamId, useBalance, channels, bitrate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanRestreamApi.check21']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get discount restream
         * @param {getDiscount1VEnum} v Version
         * @param {getDiscount1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDiscount1(v: getDiscount1VEnum, language: getDiscount1LanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamDiscountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDiscount1(v, language, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanRestreamApi.getDiscount1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of restream tariffs
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list1(v: list1VEnum, language: list1LanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list1(v, language, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanRestreamApi.list1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of restream tariffs for project
         * @param {listProject1VEnum} v Version
         * @param {listProject1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProject1(v: listProject1VEnum, language: listProject1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamProjectResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProject1(v, language, projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanRestreamApi.listProject1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove after tariff
         * @param {remove1VEnum} v Version
         * @param {remove1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} planRestreamId Restream plan id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove1(v: remove1VEnum, language: remove1LanguageEnum, projectId: number, planRestreamId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remove1(v, language, projectId, planRestreamId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanRestreamApi.remove1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get tariff for project
         * @param {tariff1VEnum} v Version
         * @param {tariff1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tariff1(v: tariff1VEnum, language: tariff1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamForProject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tariff1(v, language, projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanRestreamApi.tariff1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlanRestreamApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Buy restream tariff
         * @param {buy1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buy1(requestParameters: buy1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: buy1VEnum = requestParameters.v || buy1VEnum._1;
            return localVarFp.buy1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planRestreamId, requestParameters.countChannel, requestParameters.bitrate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Load data for show card the tariffs v2
         * @param {check21Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check21(requestParameters: check21Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamCheckV2Response> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: check21VEnum = requestParameters.v || check21VEnum._1;
            return localVarFp.check21(actualV, requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planRestreamId, requestParameters.useBalance, requestParameters.channels, requestParameters.bitrate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get discount restream
         * @param {getDiscount1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscount1(requestParameters: getDiscount1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamDiscountResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: getDiscount1VEnum = requestParameters.v || getDiscount1VEnum._1;
            return localVarFp.getDiscount1(actualV, requestParameters.language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of restream tariffs
         * @param {list1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamResponseDto> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: list1VEnum = requestParameters.v || list1VEnum._1;
            return localVarFp.list1(actualV, requestParameters.language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of restream tariffs for project
         * @param {listProject1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProject1(requestParameters: listProject1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamProjectResponseDto> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: listProject1VEnum = requestParameters.v || listProject1VEnum._1;
            return localVarFp.listProject1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove after tariff
         * @param {remove1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove1(requestParameters: remove1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: remove1VEnum = requestParameters.v || remove1VEnum._1;
            return localVarFp.remove1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.planRestreamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get tariff for project
         * @param {tariff1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tariff1(requestParameters: tariff1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamForProject> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: tariff1VEnum = requestParameters.v || tariff1VEnum._1;
            return localVarFp.tariff1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for buy1 operation in PlanRestreamApi.
 * @export
 * @interface buy1Request
 */
export interface buy1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof buy1
     */
    readonly v?: buy1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof buy1
     */
    readonly language: buy1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof buy1
     */
    readonly projectId: number

    /**
     * Period
     * @type {'month' | 'year'}
     * @memberof buy1
     */
    readonly period: buy1PeriodEnum

    /**
     * Restream plan id
     * @type {number}
     * @memberof buy1
     */
    readonly planRestreamId: number

    /**
     * Channel count
     * @type {number}
     * @memberof buy1
     */
    readonly countChannel?: number

    /**
     * Bitrate, kbps
     * @type {number}
     * @memberof buy1
     */
    readonly bitrate?: number
}

/**
 * Request parameters for check21 operation in PlanRestreamApi.
 * @export
 * @interface check21Request
 */
export interface check21Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof check21
     */
    readonly v?: check21VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof check21
     */
    readonly language: check21LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof check21
     */
    readonly projectId: number

    /**
     * Period
     * @type {'month' | 'year'}
     * @memberof check21
     */
    readonly period: check21PeriodEnum

    /**
     * Restream plan id
     * @type {number}
     * @memberof check21
     */
    readonly planRestreamId: number

    /**
     * Is select balance
     * @type {number}
     * @memberof check21
     */
    readonly useBalance?: number

    /**
     * Channels count
     * @type {number}
     * @memberof check21
     */
    readonly channels?: number

    /**
     * Bitrate, kbps
     * @type {number}
     * @memberof check21
     */
    readonly bitrate?: number
}

/**
 * Request parameters for getDiscount1 operation in PlanRestreamApi.
 * @export
 * @interface getDiscount1Request
 */
export interface getDiscount1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getDiscount1
     */
    readonly v?: getDiscount1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getDiscount1
     */
    readonly language: getDiscount1LanguageEnum
}

/**
 * Request parameters for list1 operation in PlanRestreamApi.
 * @export
 * @interface list1Request
 */
export interface list1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof list1
     */
    readonly v?: list1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof list1
     */
    readonly language: list1LanguageEnum
}

/**
 * Request parameters for listProject1 operation in PlanRestreamApi.
 * @export
 * @interface listProject1Request
 */
export interface listProject1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof listProject1
     */
    readonly v?: listProject1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof listProject1
     */
    readonly language: listProject1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof listProject1
     */
    readonly projectId: number
}

/**
 * Request parameters for remove1 operation in PlanRestreamApi.
 * @export
 * @interface remove1Request
 */
export interface remove1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof remove1
     */
    readonly v?: remove1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof remove1
     */
    readonly language: remove1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof remove1
     */
    readonly projectId: number

    /**
     * Restream plan id
     * @type {number}
     * @memberof remove1
     */
    readonly planRestreamId: number
}

/**
 * Request parameters for tariff1 operation in PlanRestreamApi.
 * @export
 * @interface tariff1Request
 */
export interface tariff1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof tariff1
     */
    readonly v?: tariff1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof tariff1
     */
    readonly language: tariff1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof tariff1
     */
    readonly projectId: number
}

/**
 * PlanRestreamApi - object-oriented interface
 * @export
 * @class PlanRestreamApi
 * @extends {BaseAPI}
 */
export class PlanRestreamApi extends BaseAPI {
    /**
     * 
     * @summary Buy restream tariff
     * @param {buy1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    public buy1(requestParameters: buy1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: buy1VEnum = requestParameters.v || buy1VEnum._1;
        return fp(this.configuration).buy1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planRestreamId, requestParameters.countChannel, requestParameters.bitrate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Load data for show card the tariffs v2
     * @param {check21Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    public check21(requestParameters: check21Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: check21VEnum = requestParameters.v || check21VEnum._1;
        return fp(this.configuration).check21(actualV, requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planRestreamId, requestParameters.useBalance, requestParameters.channels, requestParameters.bitrate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get discount restream
     * @param {getDiscount1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    public getDiscount1(requestParameters: getDiscount1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: getDiscount1VEnum = requestParameters.v || getDiscount1VEnum._1;
        return fp(this.configuration).getDiscount1(actualV, requestParameters.language, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of restream tariffs
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    public list1(requestParameters: list1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: list1VEnum = requestParameters.v || list1VEnum._1;
        return fp(this.configuration).list1(actualV, requestParameters.language, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of restream tariffs for project
     * @param {listProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    public listProject1(requestParameters: listProject1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: listProject1VEnum = requestParameters.v || listProject1VEnum._1;
        return fp(this.configuration).listProject1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove after tariff
     * @param {remove1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    public remove1(requestParameters: remove1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: remove1VEnum = requestParameters.v || remove1VEnum._1;
        return fp(this.configuration).remove1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.planRestreamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get tariff for project
     * @param {tariff1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    public tariff1(requestParameters: tariff1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: tariff1VEnum = requestParameters.v || tariff1VEnum._1;
        return fp(this.configuration).tariff1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum buy1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum buy1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum buy1PeriodEnum {
    month = 'month',
    year = 'year'
}
/**
  * @export
  * @enum {string}
  */
export enum check21VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum check21LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum check21PeriodEnum {
    month = 'month',
    year = 'year'
}
/**
  * @export
  * @enum {string}
  */
export enum getDiscount1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum getDiscount1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum list1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum list1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum listProject1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum listProject1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum remove1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum remove1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum tariff1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum tariff1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
