/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { PlanRestreamCheckV2Response } from '../models';
// @ts-ignore
import type { PlanRestreamDiscountResponse } from '../models';
// @ts-ignore
import type { PlanRestreamForProject } from '../models';
// @ts-ignore
import type { PlanRestreamProjectResponseDto } from '../models';
// @ts-ignore
import type { PlanRestreamResponseDto } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
/**
 * PlanRestreamApi - axios parameter creator
 * @export
 */
export const PlanRestreamApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Buy restream tariff
         * @param {PlanRestreamBuyV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanRestreamBuyV1PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {PlanRestreamBuyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [countChannel] Channel count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamBuyV1: async (language: PlanRestreamBuyV1LanguageEnum, projectId: number, period: PlanRestreamBuyV1PeriodEnum, planRestreamId: number, v?: PlanRestreamBuyV1VEnum, countChannel?: number, bitrate?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('planRestreamBuyV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('planRestreamBuyV1', 'projectId', projectId)
            // verify required parameter 'period' is not null or undefined
            assertParamExists('planRestreamBuyV1', 'period', period)
            // verify required parameter 'planRestreamId' is not null or undefined
            assertParamExists('planRestreamBuyV1', 'planRestreamId', planRestreamId)
            const localVarPath = `/method/plan_restream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            if (planRestreamId !== undefined) {
                localVarQueryParameter['plan_restream_id'] = planRestreamId;
            }

            if (countChannel !== undefined) {
                localVarQueryParameter['count_channel'] = countChannel;
            }

            if (bitrate !== undefined) {
                localVarQueryParameter['bitrate'] = bitrate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Load data for show card the tariffs v2
         * @param {PlanRestreamCheck2V1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanRestreamCheck2V1PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {PlanRestreamCheck2V1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [useBalance] Is select balance
         * @param {number} [channels] Channels count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamCheck2V1: async (language: PlanRestreamCheck2V1LanguageEnum, projectId: number, period: PlanRestreamCheck2V1PeriodEnum, planRestreamId: number, v?: PlanRestreamCheck2V1VEnum, useBalance?: number, channels?: number, bitrate?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('planRestreamCheck2V1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('planRestreamCheck2V1', 'projectId', projectId)
            // verify required parameter 'period' is not null or undefined
            assertParamExists('planRestreamCheck2V1', 'period', period)
            // verify required parameter 'planRestreamId' is not null or undefined
            assertParamExists('planRestreamCheck2V1', 'planRestreamId', planRestreamId)
            const localVarPath = `/method/plan_restream/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            if (planRestreamId !== undefined) {
                localVarQueryParameter['plan_restream_id'] = planRestreamId;
            }

            if (useBalance !== undefined) {
                localVarQueryParameter['use_balance'] = useBalance;
            }

            if (channels !== undefined) {
                localVarQueryParameter['channels'] = channels;
            }

            if (bitrate !== undefined) {
                localVarQueryParameter['bitrate'] = bitrate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get discount restream
         * @param {PlanRestreamGetDiscountV1LanguageEnum} language Current language
         * @param {PlanRestreamGetDiscountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamGetDiscountV1: async (language: PlanRestreamGetDiscountV1LanguageEnum, v?: PlanRestreamGetDiscountV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('planRestreamGetDiscountV1', 'language', language)
            const localVarPath = `/method/plan_restream/get_discount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of restream tariffs for project
         * @param {PlanRestreamListProjectV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanRestreamListProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamListProjectV1: async (language: PlanRestreamListProjectV1LanguageEnum, projectId: number, v?: PlanRestreamListProjectV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('planRestreamListProjectV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('planRestreamListProjectV1', 'projectId', projectId)
            const localVarPath = `/method/plan_restream/list/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of restream tariffs
         * @param {PlanRestreamListV1LanguageEnum} language Current language
         * @param {PlanRestreamListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamListV1: async (language: PlanRestreamListV1LanguageEnum, v?: PlanRestreamListV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('planRestreamListV1', 'language', language)
            const localVarPath = `/method/plan_restream/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove after tariff
         * @param {PlanRestreamRemoveV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} planRestreamId Restream plan id
         * @param {PlanRestreamRemoveV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamRemoveV1: async (language: PlanRestreamRemoveV1LanguageEnum, projectId: number, planRestreamId: number, v?: PlanRestreamRemoveV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('planRestreamRemoveV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('planRestreamRemoveV1', 'projectId', projectId)
            // verify required parameter 'planRestreamId' is not null or undefined
            assertParamExists('planRestreamRemoveV1', 'planRestreamId', planRestreamId)
            const localVarPath = `/method/plan_restream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (planRestreamId !== undefined) {
                localVarQueryParameter['plan_restream_id'] = planRestreamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get tariff for project
         * @param {PlanRestreamTariffV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanRestreamTariffV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamTariffV1: async (language: PlanRestreamTariffV1LanguageEnum, projectId: number, v?: PlanRestreamTariffV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('planRestreamTariffV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('planRestreamTariffV1', 'projectId', projectId)
            const localVarPath = `/method/plan_restream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlanRestreamApi - functional programming interface
 * @export
 */
export const PlanRestreamApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlanRestreamApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Buy restream tariff
         * @param {PlanRestreamBuyV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanRestreamBuyV1PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {PlanRestreamBuyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [countChannel] Channel count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planRestreamBuyV1(language: PlanRestreamBuyV1LanguageEnum, projectId: number, period: PlanRestreamBuyV1PeriodEnum, planRestreamId: number, v?: PlanRestreamBuyV1VEnum, countChannel?: number, bitrate?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planRestreamBuyV1(language, projectId, period, planRestreamId, v, countChannel, bitrate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanRestreamApi.planRestreamBuyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Load data for show card the tariffs v2
         * @param {PlanRestreamCheck2V1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanRestreamCheck2V1PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {PlanRestreamCheck2V1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [useBalance] Is select balance
         * @param {number} [channels] Channels count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planRestreamCheck2V1(language: PlanRestreamCheck2V1LanguageEnum, projectId: number, period: PlanRestreamCheck2V1PeriodEnum, planRestreamId: number, v?: PlanRestreamCheck2V1VEnum, useBalance?: number, channels?: number, bitrate?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamCheckV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planRestreamCheck2V1(language, projectId, period, planRestreamId, v, useBalance, channels, bitrate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanRestreamApi.planRestreamCheck2V1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get discount restream
         * @param {PlanRestreamGetDiscountV1LanguageEnum} language Current language
         * @param {PlanRestreamGetDiscountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planRestreamGetDiscountV1(language: PlanRestreamGetDiscountV1LanguageEnum, v?: PlanRestreamGetDiscountV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamDiscountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planRestreamGetDiscountV1(language, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanRestreamApi.planRestreamGetDiscountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of restream tariffs for project
         * @param {PlanRestreamListProjectV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanRestreamListProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planRestreamListProjectV1(language: PlanRestreamListProjectV1LanguageEnum, projectId: number, v?: PlanRestreamListProjectV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamProjectResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planRestreamListProjectV1(language, projectId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanRestreamApi.planRestreamListProjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of restream tariffs
         * @param {PlanRestreamListV1LanguageEnum} language Current language
         * @param {PlanRestreamListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planRestreamListV1(language: PlanRestreamListV1LanguageEnum, v?: PlanRestreamListV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planRestreamListV1(language, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanRestreamApi.planRestreamListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove after tariff
         * @param {PlanRestreamRemoveV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} planRestreamId Restream plan id
         * @param {PlanRestreamRemoveV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planRestreamRemoveV1(language: PlanRestreamRemoveV1LanguageEnum, projectId: number, planRestreamId: number, v?: PlanRestreamRemoveV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planRestreamRemoveV1(language, projectId, planRestreamId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanRestreamApi.planRestreamRemoveV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get tariff for project
         * @param {PlanRestreamTariffV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanRestreamTariffV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planRestreamTariffV1(language: PlanRestreamTariffV1LanguageEnum, projectId: number, v?: PlanRestreamTariffV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamForProject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planRestreamTariffV1(language, projectId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanRestreamApi.planRestreamTariffV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlanRestreamApi - factory interface
 * @export
 */
export const PlanRestreamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlanRestreamApiFp(configuration)
    return {
        /**
         * 
         * @summary Buy restream tariff
         * @param {PlanRestreamApiPlanRestreamBuyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamBuyV1(requestParameters: PlanRestreamApiPlanRestreamBuyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.planRestreamBuyV1(requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planRestreamId, requestParameters.v, requestParameters.countChannel, requestParameters.bitrate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Load data for show card the tariffs v2
         * @param {PlanRestreamApiPlanRestreamCheck2V1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamCheck2V1(requestParameters: PlanRestreamApiPlanRestreamCheck2V1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamCheckV2Response> {
            return localVarFp.planRestreamCheck2V1(requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planRestreamId, requestParameters.v, requestParameters.useBalance, requestParameters.channels, requestParameters.bitrate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get discount restream
         * @param {PlanRestreamApiPlanRestreamGetDiscountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamGetDiscountV1(requestParameters: PlanRestreamApiPlanRestreamGetDiscountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamDiscountResponse> {
            return localVarFp.planRestreamGetDiscountV1(requestParameters.language, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of restream tariffs for project
         * @param {PlanRestreamApiPlanRestreamListProjectV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamListProjectV1(requestParameters: PlanRestreamApiPlanRestreamListProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamProjectResponseDto> {
            return localVarFp.planRestreamListProjectV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of restream tariffs
         * @param {PlanRestreamApiPlanRestreamListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamListV1(requestParameters: PlanRestreamApiPlanRestreamListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamResponseDto> {
            return localVarFp.planRestreamListV1(requestParameters.language, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove after tariff
         * @param {PlanRestreamApiPlanRestreamRemoveV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamRemoveV1(requestParameters: PlanRestreamApiPlanRestreamRemoveV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.planRestreamRemoveV1(requestParameters.language, requestParameters.projectId, requestParameters.planRestreamId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get tariff for project
         * @param {PlanRestreamApiPlanRestreamTariffV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamTariffV1(requestParameters: PlanRestreamApiPlanRestreamTariffV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamForProject> {
            return localVarFp.planRestreamTariffV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlanRestreamApi - interface
 * @export
 * @interface PlanRestreamApi
 */
export interface PlanRestreamApiInterface {
    /**
     * 
     * @summary Buy restream tariff
     * @param {PlanRestreamApiPlanRestreamBuyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamBuyV1(requestParameters: PlanRestreamApiPlanRestreamBuyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Load data for show card the tariffs v2
     * @param {PlanRestreamApiPlanRestreamCheck2V1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamCheck2V1(requestParameters: PlanRestreamApiPlanRestreamCheck2V1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamCheckV2Response>;

    /**
     * 
     * @summary Get discount restream
     * @param {PlanRestreamApiPlanRestreamGetDiscountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamGetDiscountV1(requestParameters: PlanRestreamApiPlanRestreamGetDiscountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamDiscountResponse>;

    /**
     * 
     * @summary Get list of restream tariffs for project
     * @param {PlanRestreamApiPlanRestreamListProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamListProjectV1(requestParameters: PlanRestreamApiPlanRestreamListProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamProjectResponseDto>;

    /**
     * 
     * @summary Get list of restream tariffs
     * @param {PlanRestreamApiPlanRestreamListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamListV1(requestParameters: PlanRestreamApiPlanRestreamListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamResponseDto>;

    /**
     * 
     * @summary Remove after tariff
     * @param {PlanRestreamApiPlanRestreamRemoveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamRemoveV1(requestParameters: PlanRestreamApiPlanRestreamRemoveV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Get tariff for project
     * @param {PlanRestreamApiPlanRestreamTariffV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamTariffV1(requestParameters: PlanRestreamApiPlanRestreamTariffV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamForProject>;

}

/**
 * Request parameters for planRestreamBuyV1 operation in PlanRestreamApi.
 * @export
 * @interface PlanRestreamApiPlanRestreamBuyV1Request
 */
export interface PlanRestreamApiPlanRestreamBuyV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanRestreamApiPlanRestreamBuyV1
     */
    readonly language: PlanRestreamBuyV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamBuyV1
     */
    readonly projectId: number

    /**
     * Period
     * @type {'month' | 'year'}
     * @memberof PlanRestreamApiPlanRestreamBuyV1
     */
    readonly period: PlanRestreamBuyV1PeriodEnum

    /**
     * Restream plan id
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamBuyV1
     */
    readonly planRestreamId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanRestreamApiPlanRestreamBuyV1
     */
    readonly v?: PlanRestreamBuyV1VEnum

    /**
     * Channel count
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamBuyV1
     */
    readonly countChannel?: number

    /**
     * Bitrate, kbps
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamBuyV1
     */
    readonly bitrate?: number
}

/**
 * Request parameters for planRestreamCheck2V1 operation in PlanRestreamApi.
 * @export
 * @interface PlanRestreamApiPlanRestreamCheck2V1Request
 */
export interface PlanRestreamApiPlanRestreamCheck2V1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanRestreamApiPlanRestreamCheck2V1
     */
    readonly language: PlanRestreamCheck2V1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamCheck2V1
     */
    readonly projectId: number

    /**
     * Period
     * @type {'month' | 'year'}
     * @memberof PlanRestreamApiPlanRestreamCheck2V1
     */
    readonly period: PlanRestreamCheck2V1PeriodEnum

    /**
     * Restream plan id
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamCheck2V1
     */
    readonly planRestreamId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanRestreamApiPlanRestreamCheck2V1
     */
    readonly v?: PlanRestreamCheck2V1VEnum

    /**
     * Is select balance
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamCheck2V1
     */
    readonly useBalance?: number

    /**
     * Channels count
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamCheck2V1
     */
    readonly channels?: number

    /**
     * Bitrate, kbps
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamCheck2V1
     */
    readonly bitrate?: number
}

/**
 * Request parameters for planRestreamGetDiscountV1 operation in PlanRestreamApi.
 * @export
 * @interface PlanRestreamApiPlanRestreamGetDiscountV1Request
 */
export interface PlanRestreamApiPlanRestreamGetDiscountV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanRestreamApiPlanRestreamGetDiscountV1
     */
    readonly language: PlanRestreamGetDiscountV1LanguageEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanRestreamApiPlanRestreamGetDiscountV1
     */
    readonly v?: PlanRestreamGetDiscountV1VEnum
}

/**
 * Request parameters for planRestreamListProjectV1 operation in PlanRestreamApi.
 * @export
 * @interface PlanRestreamApiPlanRestreamListProjectV1Request
 */
export interface PlanRestreamApiPlanRestreamListProjectV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanRestreamApiPlanRestreamListProjectV1
     */
    readonly language: PlanRestreamListProjectV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamListProjectV1
     */
    readonly projectId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanRestreamApiPlanRestreamListProjectV1
     */
    readonly v?: PlanRestreamListProjectV1VEnum
}

/**
 * Request parameters for planRestreamListV1 operation in PlanRestreamApi.
 * @export
 * @interface PlanRestreamApiPlanRestreamListV1Request
 */
export interface PlanRestreamApiPlanRestreamListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanRestreamApiPlanRestreamListV1
     */
    readonly language: PlanRestreamListV1LanguageEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanRestreamApiPlanRestreamListV1
     */
    readonly v?: PlanRestreamListV1VEnum
}

/**
 * Request parameters for planRestreamRemoveV1 operation in PlanRestreamApi.
 * @export
 * @interface PlanRestreamApiPlanRestreamRemoveV1Request
 */
export interface PlanRestreamApiPlanRestreamRemoveV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanRestreamApiPlanRestreamRemoveV1
     */
    readonly language: PlanRestreamRemoveV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamRemoveV1
     */
    readonly projectId: number

    /**
     * Restream plan id
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamRemoveV1
     */
    readonly planRestreamId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanRestreamApiPlanRestreamRemoveV1
     */
    readonly v?: PlanRestreamRemoveV1VEnum
}

/**
 * Request parameters for planRestreamTariffV1 operation in PlanRestreamApi.
 * @export
 * @interface PlanRestreamApiPlanRestreamTariffV1Request
 */
export interface PlanRestreamApiPlanRestreamTariffV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanRestreamApiPlanRestreamTariffV1
     */
    readonly language: PlanRestreamTariffV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamTariffV1
     */
    readonly projectId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanRestreamApiPlanRestreamTariffV1
     */
    readonly v?: PlanRestreamTariffV1VEnum
}

/**
 * PlanRestreamApi - object-oriented interface
 * @export
 * @class PlanRestreamApi
 * @extends {BaseAPI}
 */
export class PlanRestreamApi extends BaseAPI implements PlanRestreamApiInterface {
    /**
     * 
     * @summary Buy restream tariff
     * @param {PlanRestreamApiPlanRestreamBuyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    public planRestreamBuyV1(requestParameters: PlanRestreamApiPlanRestreamBuyV1Request, options?: RawAxiosRequestConfig) {
        return PlanRestreamApiFp(this.configuration).planRestreamBuyV1(requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planRestreamId, requestParameters.v, requestParameters.countChannel, requestParameters.bitrate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Load data for show card the tariffs v2
     * @param {PlanRestreamApiPlanRestreamCheck2V1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    public planRestreamCheck2V1(requestParameters: PlanRestreamApiPlanRestreamCheck2V1Request, options?: RawAxiosRequestConfig) {
        return PlanRestreamApiFp(this.configuration).planRestreamCheck2V1(requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planRestreamId, requestParameters.v, requestParameters.useBalance, requestParameters.channels, requestParameters.bitrate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get discount restream
     * @param {PlanRestreamApiPlanRestreamGetDiscountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    public planRestreamGetDiscountV1(requestParameters: PlanRestreamApiPlanRestreamGetDiscountV1Request, options?: RawAxiosRequestConfig) {
        return PlanRestreamApiFp(this.configuration).planRestreamGetDiscountV1(requestParameters.language, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of restream tariffs for project
     * @param {PlanRestreamApiPlanRestreamListProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    public planRestreamListProjectV1(requestParameters: PlanRestreamApiPlanRestreamListProjectV1Request, options?: RawAxiosRequestConfig) {
        return PlanRestreamApiFp(this.configuration).planRestreamListProjectV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of restream tariffs
     * @param {PlanRestreamApiPlanRestreamListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    public planRestreamListV1(requestParameters: PlanRestreamApiPlanRestreamListV1Request, options?: RawAxiosRequestConfig) {
        return PlanRestreamApiFp(this.configuration).planRestreamListV1(requestParameters.language, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove after tariff
     * @param {PlanRestreamApiPlanRestreamRemoveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    public planRestreamRemoveV1(requestParameters: PlanRestreamApiPlanRestreamRemoveV1Request, options?: RawAxiosRequestConfig) {
        return PlanRestreamApiFp(this.configuration).planRestreamRemoveV1(requestParameters.language, requestParameters.projectId, requestParameters.planRestreamId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get tariff for project
     * @param {PlanRestreamApiPlanRestreamTariffV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    public planRestreamTariffV1(requestParameters: PlanRestreamApiPlanRestreamTariffV1Request, options?: RawAxiosRequestConfig) {
        return PlanRestreamApiFp(this.configuration).planRestreamTariffV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const PlanRestreamBuyV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PlanRestreamBuyV1LanguageEnum = typeof PlanRestreamBuyV1LanguageEnum[keyof typeof PlanRestreamBuyV1LanguageEnum];
/**
 * @export
 */
export const PlanRestreamBuyV1PeriodEnum = {
    Month: 'month',
    Year: 'year'
} as const;
export type PlanRestreamBuyV1PeriodEnum = typeof PlanRestreamBuyV1PeriodEnum[keyof typeof PlanRestreamBuyV1PeriodEnum];
/**
 * @export
 */
export const PlanRestreamBuyV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanRestreamBuyV1VEnum = typeof PlanRestreamBuyV1VEnum[keyof typeof PlanRestreamBuyV1VEnum];
/**
 * @export
 */
export const PlanRestreamCheck2V1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PlanRestreamCheck2V1LanguageEnum = typeof PlanRestreamCheck2V1LanguageEnum[keyof typeof PlanRestreamCheck2V1LanguageEnum];
/**
 * @export
 */
export const PlanRestreamCheck2V1PeriodEnum = {
    Month: 'month',
    Year: 'year'
} as const;
export type PlanRestreamCheck2V1PeriodEnum = typeof PlanRestreamCheck2V1PeriodEnum[keyof typeof PlanRestreamCheck2V1PeriodEnum];
/**
 * @export
 */
export const PlanRestreamCheck2V1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanRestreamCheck2V1VEnum = typeof PlanRestreamCheck2V1VEnum[keyof typeof PlanRestreamCheck2V1VEnum];
/**
 * @export
 */
export const PlanRestreamGetDiscountV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PlanRestreamGetDiscountV1LanguageEnum = typeof PlanRestreamGetDiscountV1LanguageEnum[keyof typeof PlanRestreamGetDiscountV1LanguageEnum];
/**
 * @export
 */
export const PlanRestreamGetDiscountV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanRestreamGetDiscountV1VEnum = typeof PlanRestreamGetDiscountV1VEnum[keyof typeof PlanRestreamGetDiscountV1VEnum];
/**
 * @export
 */
export const PlanRestreamListProjectV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PlanRestreamListProjectV1LanguageEnum = typeof PlanRestreamListProjectV1LanguageEnum[keyof typeof PlanRestreamListProjectV1LanguageEnum];
/**
 * @export
 */
export const PlanRestreamListProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanRestreamListProjectV1VEnum = typeof PlanRestreamListProjectV1VEnum[keyof typeof PlanRestreamListProjectV1VEnum];
/**
 * @export
 */
export const PlanRestreamListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PlanRestreamListV1LanguageEnum = typeof PlanRestreamListV1LanguageEnum[keyof typeof PlanRestreamListV1LanguageEnum];
/**
 * @export
 */
export const PlanRestreamListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanRestreamListV1VEnum = typeof PlanRestreamListV1VEnum[keyof typeof PlanRestreamListV1VEnum];
/**
 * @export
 */
export const PlanRestreamRemoveV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PlanRestreamRemoveV1LanguageEnum = typeof PlanRestreamRemoveV1LanguageEnum[keyof typeof PlanRestreamRemoveV1LanguageEnum];
/**
 * @export
 */
export const PlanRestreamRemoveV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanRestreamRemoveV1VEnum = typeof PlanRestreamRemoveV1VEnum[keyof typeof PlanRestreamRemoveV1VEnum];
/**
 * @export
 */
export const PlanRestreamTariffV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PlanRestreamTariffV1LanguageEnum = typeof PlanRestreamTariffV1LanguageEnum[keyof typeof PlanRestreamTariffV1LanguageEnum];
/**
 * @export
 */
export const PlanRestreamTariffV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanRestreamTariffV1VEnum = typeof PlanRestreamTariffV1VEnum[keyof typeof PlanRestreamTariffV1VEnum];
