/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CheckPullKeyResponse } from '../models';
// @ts-ignore
import type { CreatePullKeyRequest } from '../models';
// @ts-ignore
import type { CreatePullKeyResponse } from '../models';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { PullKeyListResponse } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
// @ts-ignore
import type { UpdatePullKeyRequest } from '../models';
/**
 * StreamPullKeysApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check key
         * @param {check1VEnum} v Version
         * @param {check1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {string} key Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check1: async (v: check1VEnum, language: check1LanguageEnum, projectId: number, key: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('check1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('check1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('check1', 'projectId', projectId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('check1', 'key', key)
            const localVarPath = `/method/stream-pull-keys/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create key
         * @param {CreatePullKeyRequest} createPullKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1: async (createPullKeyRequest: CreatePullKeyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPullKeyRequest' is not null or undefined
            assertParamExists('create1', 'createPullKeyRequest', createPullKeyRequest)
            const localVarPath = `/method/stream-pull-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPullKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List keys
         * @param {get1VEnum} v Version
         * @param {get1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get1: async (v: get1VEnum, language: get1LanguageEnum, projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('get1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('get1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('get1', 'projectId', projectId)
            const localVarPath = `/method/stream-pull-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete key
         * @param {remove1VEnum} v Version
         * @param {remove1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {string} key Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove1: async (v: remove1VEnum, language: remove1LanguageEnum, projectId: number, key: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('remove1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('remove1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('remove1', 'projectId', projectId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('remove1', 'key', key)
            const localVarPath = `/method/stream-pull-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update key
         * @param {UpdatePullKeyRequest} updatePullKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1: async (updatePullKeyRequest: UpdatePullKeyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updatePullKeyRequest' is not null or undefined
            assertParamExists('update1', 'updatePullKeyRequest', updatePullKeyRequest)
            const localVarPath = `/method/stream-pull-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePullKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StreamPullKeysApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Check key
         * @param {check1VEnum} v Version
         * @param {check1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {string} key Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async check1(v: check1VEnum, language: check1LanguageEnum, projectId: number, key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckPullKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.check1(v, language, projectId, key, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreamPullKeysApi.check1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create key
         * @param {CreatePullKeyRequest} createPullKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create1(createPullKeyRequest: CreatePullKeyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePullKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create1(createPullKeyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreamPullKeysApi.create1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List keys
         * @param {get1VEnum} v Version
         * @param {get1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get1(v: get1VEnum, language: get1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PullKeyListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get1(v, language, projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreamPullKeysApi.get1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete key
         * @param {remove1VEnum} v Version
         * @param {remove1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {string} key Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove1(v: remove1VEnum, language: remove1LanguageEnum, projectId: number, key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remove1(v, language, projectId, key, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreamPullKeysApi.remove1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update key
         * @param {UpdatePullKeyRequest} updatePullKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update1(updatePullKeyRequest: UpdatePullKeyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update1(updatePullKeyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreamPullKeysApi.update1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StreamPullKeysApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Check key
         * @param {check1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check1(requestParameters: check1Request, options?: RawAxiosRequestConfig): AxiosPromise<CheckPullKeyResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: check1VEnum = requestParameters.v || check1VEnum._1;
            return localVarFp.check1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create key
         * @param {create1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1(requestParameters: create1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePullKeyResponse> {
            return localVarFp.create1(requestParameters.createPullKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List keys
         * @param {get1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get1(requestParameters: get1Request, options?: RawAxiosRequestConfig): AxiosPromise<PullKeyListResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: get1VEnum = requestParameters.v || get1VEnum._1;
            return localVarFp.get1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete key
         * @param {remove1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove1(requestParameters: remove1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: remove1VEnum = requestParameters.v || remove1VEnum._1;
            return localVarFp.remove1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update key
         * @param {update1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1(requestParameters: update1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.update1(requestParameters.updatePullKeyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for check1 operation in StreamPullKeysApi.
 * @export
 * @interface check1Request
 */
export interface check1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof check1
     */
    readonly v?: check1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof check1
     */
    readonly language: check1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof check1
     */
    readonly projectId: number

    /**
     * Key
     * @type {string}
     * @memberof check1
     */
    readonly key: string
}

/**
 * Request parameters for create1 operation in StreamPullKeysApi.
 * @export
 * @interface create1Request
 */
export interface create1Request {
    /**
     * 
     * @type {CreatePullKeyRequest}
     * @memberof create1
     */
    readonly createPullKeyRequest: CreatePullKeyRequest
}

/**
 * Request parameters for get1 operation in StreamPullKeysApi.
 * @export
 * @interface get1Request
 */
export interface get1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof get1
     */
    readonly v?: get1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof get1
     */
    readonly language: get1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof get1
     */
    readonly projectId: number
}

/**
 * Request parameters for remove1 operation in StreamPullKeysApi.
 * @export
 * @interface remove1Request
 */
export interface remove1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof remove1
     */
    readonly v?: remove1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof remove1
     */
    readonly language: remove1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof remove1
     */
    readonly projectId: number

    /**
     * Key
     * @type {string}
     * @memberof remove1
     */
    readonly key: string
}

/**
 * Request parameters for update1 operation in StreamPullKeysApi.
 * @export
 * @interface update1Request
 */
export interface update1Request {
    /**
     * 
     * @type {UpdatePullKeyRequest}
     * @memberof update1
     */
    readonly updatePullKeyRequest: UpdatePullKeyRequest
}

/**
 * StreamPullKeysApi - object-oriented interface
 * @export
 * @class StreamPullKeysApi
 * @extends {BaseAPI}
 */
export class StreamPullKeysApi extends BaseAPI {
    /**
     * 
     * @summary Check key
     * @param {check1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    public check1(requestParameters: check1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: check1VEnum = requestParameters.v || check1VEnum._1;
        return fp(this.configuration).check1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create key
     * @param {create1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    public create1(requestParameters: create1Request, options?: RawAxiosRequestConfig) {
        return fp(this.configuration).create1(requestParameters.createPullKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List keys
     * @param {get1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    public get1(requestParameters: get1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: get1VEnum = requestParameters.v || get1VEnum._1;
        return fp(this.configuration).get1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete key
     * @param {remove1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    public remove1(requestParameters: remove1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: remove1VEnum = requestParameters.v || remove1VEnum._1;
        return fp(this.configuration).remove1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update key
     * @param {update1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    public update1(requestParameters: update1Request, options?: RawAxiosRequestConfig) {
        return fp(this.configuration).update1(requestParameters.updatePullKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum check1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum check1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum get1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum get1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum remove1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum remove1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
