/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CheckPullKeyResponse } from '../models';
// @ts-ignore
import type { CreatePullKeyRequest } from '../models';
// @ts-ignore
import type { CreatePullKeyResponse } from '../models';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { PullKeyListResponse } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
// @ts-ignore
import type { UpdatePullKeyRequest } from '../models';
/**
 * StreamPullKeysApi - axios parameter creator
 * @export
 */
export const StreamPullKeysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check key
         * @param {StreamPullKeysSiteCheckV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {string} key Key
         * @param {StreamPullKeysSiteCheckV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteCheckV1: async (language: StreamPullKeysSiteCheckV1LanguageEnum, projectId: number, key: string, v?: StreamPullKeysSiteCheckV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('streamPullKeysSiteCheckV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('streamPullKeysSiteCheckV1', 'projectId', projectId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('streamPullKeysSiteCheckV1', 'key', key)
            const localVarPath = `/method/stream-pull-keys/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create key
         * @param {CreatePullKeyRequest} createPullKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteCreateV1: async (createPullKeyRequest: CreatePullKeyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPullKeyRequest' is not null or undefined
            assertParamExists('streamPullKeysSiteCreateV1', 'createPullKeyRequest', createPullKeyRequest)
            const localVarPath = `/method/stream-pull-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPullKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List keys
         * @param {StreamPullKeysSiteGetV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {StreamPullKeysSiteGetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteGetV1: async (language: StreamPullKeysSiteGetV1LanguageEnum, projectId: number, v?: StreamPullKeysSiteGetV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('streamPullKeysSiteGetV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('streamPullKeysSiteGetV1', 'projectId', projectId)
            const localVarPath = `/method/stream-pull-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete key
         * @param {StreamPullKeysSiteRemoveV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {string} key Key
         * @param {StreamPullKeysSiteRemoveV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteRemoveV1: async (language: StreamPullKeysSiteRemoveV1LanguageEnum, projectId: number, key: string, v?: StreamPullKeysSiteRemoveV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('streamPullKeysSiteRemoveV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('streamPullKeysSiteRemoveV1', 'projectId', projectId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('streamPullKeysSiteRemoveV1', 'key', key)
            const localVarPath = `/method/stream-pull-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update key
         * @param {UpdatePullKeyRequest} updatePullKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteUpdateV1: async (updatePullKeyRequest: UpdatePullKeyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updatePullKeyRequest' is not null or undefined
            assertParamExists('streamPullKeysSiteUpdateV1', 'updatePullKeyRequest', updatePullKeyRequest)
            const localVarPath = `/method/stream-pull-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePullKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StreamPullKeysApi - functional programming interface
 * @export
 */
export const StreamPullKeysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StreamPullKeysApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Check key
         * @param {StreamPullKeysSiteCheckV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {string} key Key
         * @param {StreamPullKeysSiteCheckV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamPullKeysSiteCheckV1(language: StreamPullKeysSiteCheckV1LanguageEnum, projectId: number, key: string, v?: StreamPullKeysSiteCheckV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckPullKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamPullKeysSiteCheckV1(language, projectId, key, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreamPullKeysApi.streamPullKeysSiteCheckV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create key
         * @param {CreatePullKeyRequest} createPullKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamPullKeysSiteCreateV1(createPullKeyRequest: CreatePullKeyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePullKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamPullKeysSiteCreateV1(createPullKeyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreamPullKeysApi.streamPullKeysSiteCreateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List keys
         * @param {StreamPullKeysSiteGetV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {StreamPullKeysSiteGetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamPullKeysSiteGetV1(language: StreamPullKeysSiteGetV1LanguageEnum, projectId: number, v?: StreamPullKeysSiteGetV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PullKeyListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamPullKeysSiteGetV1(language, projectId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreamPullKeysApi.streamPullKeysSiteGetV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete key
         * @param {StreamPullKeysSiteRemoveV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {string} key Key
         * @param {StreamPullKeysSiteRemoveV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamPullKeysSiteRemoveV1(language: StreamPullKeysSiteRemoveV1LanguageEnum, projectId: number, key: string, v?: StreamPullKeysSiteRemoveV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamPullKeysSiteRemoveV1(language, projectId, key, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreamPullKeysApi.streamPullKeysSiteRemoveV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update key
         * @param {UpdatePullKeyRequest} updatePullKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamPullKeysSiteUpdateV1(updatePullKeyRequest: UpdatePullKeyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamPullKeysSiteUpdateV1(updatePullKeyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreamPullKeysApi.streamPullKeysSiteUpdateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StreamPullKeysApi - factory interface
 * @export
 */
export const StreamPullKeysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StreamPullKeysApiFp(configuration)
    return {
        /**
         * 
         * @summary Check key
         * @param {StreamPullKeysApiStreamPullKeysSiteCheckV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteCheckV1(requestParameters: StreamPullKeysApiStreamPullKeysSiteCheckV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CheckPullKeyResponse> {
            return localVarFp.streamPullKeysSiteCheckV1(requestParameters.language, requestParameters.projectId, requestParameters.key, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create key
         * @param {StreamPullKeysApiStreamPullKeysSiteCreateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteCreateV1(requestParameters: StreamPullKeysApiStreamPullKeysSiteCreateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePullKeyResponse> {
            return localVarFp.streamPullKeysSiteCreateV1(requestParameters.createPullKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List keys
         * @param {StreamPullKeysApiStreamPullKeysSiteGetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteGetV1(requestParameters: StreamPullKeysApiStreamPullKeysSiteGetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PullKeyListResponse> {
            return localVarFp.streamPullKeysSiteGetV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete key
         * @param {StreamPullKeysApiStreamPullKeysSiteRemoveV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteRemoveV1(requestParameters: StreamPullKeysApiStreamPullKeysSiteRemoveV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.streamPullKeysSiteRemoveV1(requestParameters.language, requestParameters.projectId, requestParameters.key, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update key
         * @param {StreamPullKeysApiStreamPullKeysSiteUpdateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteUpdateV1(requestParameters: StreamPullKeysApiStreamPullKeysSiteUpdateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.streamPullKeysSiteUpdateV1(requestParameters.updatePullKeyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StreamPullKeysApi - interface
 * @export
 * @interface StreamPullKeysApi
 */
export interface StreamPullKeysApiInterface {
    /**
     * 
     * @summary Check key
     * @param {StreamPullKeysApiStreamPullKeysSiteCheckV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApiInterface
     */
    streamPullKeysSiteCheckV1(requestParameters: StreamPullKeysApiStreamPullKeysSiteCheckV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CheckPullKeyResponse>;

    /**
     * 
     * @summary Create key
     * @param {StreamPullKeysApiStreamPullKeysSiteCreateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApiInterface
     */
    streamPullKeysSiteCreateV1(requestParameters: StreamPullKeysApiStreamPullKeysSiteCreateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePullKeyResponse>;

    /**
     * 
     * @summary List keys
     * @param {StreamPullKeysApiStreamPullKeysSiteGetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApiInterface
     */
    streamPullKeysSiteGetV1(requestParameters: StreamPullKeysApiStreamPullKeysSiteGetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PullKeyListResponse>;

    /**
     * 
     * @summary Delete key
     * @param {StreamPullKeysApiStreamPullKeysSiteRemoveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApiInterface
     */
    streamPullKeysSiteRemoveV1(requestParameters: StreamPullKeysApiStreamPullKeysSiteRemoveV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Update key
     * @param {StreamPullKeysApiStreamPullKeysSiteUpdateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApiInterface
     */
    streamPullKeysSiteUpdateV1(requestParameters: StreamPullKeysApiStreamPullKeysSiteUpdateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

}

/**
 * Request parameters for streamPullKeysSiteCheckV1 operation in StreamPullKeysApi.
 * @export
 * @interface StreamPullKeysApiStreamPullKeysSiteCheckV1Request
 */
export interface StreamPullKeysApiStreamPullKeysSiteCheckV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof StreamPullKeysApiStreamPullKeysSiteCheckV1
     */
    readonly language: StreamPullKeysSiteCheckV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof StreamPullKeysApiStreamPullKeysSiteCheckV1
     */
    readonly projectId: number

    /**
     * Key
     * @type {string}
     * @memberof StreamPullKeysApiStreamPullKeysSiteCheckV1
     */
    readonly key: string

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof StreamPullKeysApiStreamPullKeysSiteCheckV1
     */
    readonly v?: StreamPullKeysSiteCheckV1VEnum
}

/**
 * Request parameters for streamPullKeysSiteCreateV1 operation in StreamPullKeysApi.
 * @export
 * @interface StreamPullKeysApiStreamPullKeysSiteCreateV1Request
 */
export interface StreamPullKeysApiStreamPullKeysSiteCreateV1Request {
    /**
     * 
     * @type {CreatePullKeyRequest}
     * @memberof StreamPullKeysApiStreamPullKeysSiteCreateV1
     */
    readonly createPullKeyRequest: CreatePullKeyRequest
}

/**
 * Request parameters for streamPullKeysSiteGetV1 operation in StreamPullKeysApi.
 * @export
 * @interface StreamPullKeysApiStreamPullKeysSiteGetV1Request
 */
export interface StreamPullKeysApiStreamPullKeysSiteGetV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof StreamPullKeysApiStreamPullKeysSiteGetV1
     */
    readonly language: StreamPullKeysSiteGetV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof StreamPullKeysApiStreamPullKeysSiteGetV1
     */
    readonly projectId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof StreamPullKeysApiStreamPullKeysSiteGetV1
     */
    readonly v?: StreamPullKeysSiteGetV1VEnum
}

/**
 * Request parameters for streamPullKeysSiteRemoveV1 operation in StreamPullKeysApi.
 * @export
 * @interface StreamPullKeysApiStreamPullKeysSiteRemoveV1Request
 */
export interface StreamPullKeysApiStreamPullKeysSiteRemoveV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof StreamPullKeysApiStreamPullKeysSiteRemoveV1
     */
    readonly language: StreamPullKeysSiteRemoveV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof StreamPullKeysApiStreamPullKeysSiteRemoveV1
     */
    readonly projectId: number

    /**
     * Key
     * @type {string}
     * @memberof StreamPullKeysApiStreamPullKeysSiteRemoveV1
     */
    readonly key: string

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof StreamPullKeysApiStreamPullKeysSiteRemoveV1
     */
    readonly v?: StreamPullKeysSiteRemoveV1VEnum
}

/**
 * Request parameters for streamPullKeysSiteUpdateV1 operation in StreamPullKeysApi.
 * @export
 * @interface StreamPullKeysApiStreamPullKeysSiteUpdateV1Request
 */
export interface StreamPullKeysApiStreamPullKeysSiteUpdateV1Request {
    /**
     * 
     * @type {UpdatePullKeyRequest}
     * @memberof StreamPullKeysApiStreamPullKeysSiteUpdateV1
     */
    readonly updatePullKeyRequest: UpdatePullKeyRequest
}

/**
 * StreamPullKeysApi - object-oriented interface
 * @export
 * @class StreamPullKeysApi
 * @extends {BaseAPI}
 */
export class StreamPullKeysApi extends BaseAPI implements StreamPullKeysApiInterface {
    /**
     * 
     * @summary Check key
     * @param {StreamPullKeysApiStreamPullKeysSiteCheckV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    public streamPullKeysSiteCheckV1(requestParameters: StreamPullKeysApiStreamPullKeysSiteCheckV1Request, options?: RawAxiosRequestConfig) {
        return StreamPullKeysApiFp(this.configuration).streamPullKeysSiteCheckV1(requestParameters.language, requestParameters.projectId, requestParameters.key, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create key
     * @param {StreamPullKeysApiStreamPullKeysSiteCreateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    public streamPullKeysSiteCreateV1(requestParameters: StreamPullKeysApiStreamPullKeysSiteCreateV1Request, options?: RawAxiosRequestConfig) {
        return StreamPullKeysApiFp(this.configuration).streamPullKeysSiteCreateV1(requestParameters.createPullKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List keys
     * @param {StreamPullKeysApiStreamPullKeysSiteGetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    public streamPullKeysSiteGetV1(requestParameters: StreamPullKeysApiStreamPullKeysSiteGetV1Request, options?: RawAxiosRequestConfig) {
        return StreamPullKeysApiFp(this.configuration).streamPullKeysSiteGetV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete key
     * @param {StreamPullKeysApiStreamPullKeysSiteRemoveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    public streamPullKeysSiteRemoveV1(requestParameters: StreamPullKeysApiStreamPullKeysSiteRemoveV1Request, options?: RawAxiosRequestConfig) {
        return StreamPullKeysApiFp(this.configuration).streamPullKeysSiteRemoveV1(requestParameters.language, requestParameters.projectId, requestParameters.key, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update key
     * @param {StreamPullKeysApiStreamPullKeysSiteUpdateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    public streamPullKeysSiteUpdateV1(requestParameters: StreamPullKeysApiStreamPullKeysSiteUpdateV1Request, options?: RawAxiosRequestConfig) {
        return StreamPullKeysApiFp(this.configuration).streamPullKeysSiteUpdateV1(requestParameters.updatePullKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const StreamPullKeysSiteCheckV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type StreamPullKeysSiteCheckV1LanguageEnum = typeof StreamPullKeysSiteCheckV1LanguageEnum[keyof typeof StreamPullKeysSiteCheckV1LanguageEnum];
/**
 * @export
 */
export const StreamPullKeysSiteCheckV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type StreamPullKeysSiteCheckV1VEnum = typeof StreamPullKeysSiteCheckV1VEnum[keyof typeof StreamPullKeysSiteCheckV1VEnum];
/**
 * @export
 */
export const StreamPullKeysSiteGetV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type StreamPullKeysSiteGetV1LanguageEnum = typeof StreamPullKeysSiteGetV1LanguageEnum[keyof typeof StreamPullKeysSiteGetV1LanguageEnum];
/**
 * @export
 */
export const StreamPullKeysSiteGetV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type StreamPullKeysSiteGetV1VEnum = typeof StreamPullKeysSiteGetV1VEnum[keyof typeof StreamPullKeysSiteGetV1VEnum];
/**
 * @export
 */
export const StreamPullKeysSiteRemoveV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type StreamPullKeysSiteRemoveV1LanguageEnum = typeof StreamPullKeysSiteRemoveV1LanguageEnum[keyof typeof StreamPullKeysSiteRemoveV1LanguageEnum];
/**
 * @export
 */
export const StreamPullKeysSiteRemoveV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type StreamPullKeysSiteRemoveV1VEnum = typeof StreamPullKeysSiteRemoveV1VEnum[keyof typeof StreamPullKeysSiteRemoveV1VEnum];
