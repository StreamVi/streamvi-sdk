/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { MessageResponseDto } from '../models';
// @ts-ignore
import type { MethodChatHistoryResponse } from '../models';
// @ts-ignore
import type { MethodChatSendMessageRequestDto } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
/**
 * ChatGatewayApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Remove message
         * @param {deleteVEnum} v Version
         * @param {deleteLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {string} eventId Event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: async (v: deleteVEnum, language: deleteLanguageEnum, key: string, broadcastId: number, eventId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('delete', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('delete', 'language', language)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('delete', 'key', key)
            // verify required parameter 'broadcastId' is not null or undefined
            assertParamExists('delete', 'broadcastId', broadcastId)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('delete', 'eventId', eventId)
            const localVarPath = `/method/chat/messages/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }

            if (eventId !== undefined) {
                localVarQueryParameter['event_id'] = eventId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get one message
         * @param {getMessageVEnum} v Version
         * @param {getMessageLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {string} eventId Event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessage: async (v: getMessageVEnum, language: getMessageLanguageEnum, key: string, broadcastId: number, eventId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('getMessage', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getMessage', 'language', language)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('getMessage', 'key', key)
            // verify required parameter 'broadcastId' is not null or undefined
            assertParamExists('getMessage', 'broadcastId', broadcastId)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getMessage', 'eventId', eventId)
            const localVarPath = `/method/chat/messages/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }

            if (eventId !== undefined) {
                localVarQueryParameter['event_id'] = eventId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List history message
         * @param {historyVEnum} v Version
         * @param {historyLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        history: async (v: historyVEnum, language: historyLanguageEnum, key: string, broadcastId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('history', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('history', 'language', language)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('history', 'key', key)
            // verify required parameter 'broadcastId' is not null or undefined
            assertParamExists('history', 'broadcastId', broadcastId)
            const localVarPath = `/method/chat/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send message
         * @param {sendVEnum} v Version
         * @param {sendLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId 
         * @param {MethodChatSendMessageRequestDto} methodChatSendMessageRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        send: async (v: sendVEnum, language: sendLanguageEnum, key: string, broadcastId: number, methodChatSendMessageRequestDto: MethodChatSendMessageRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('send', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('send', 'language', language)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('send', 'key', key)
            // verify required parameter 'broadcastId' is not null or undefined
            assertParamExists('send', 'broadcastId', broadcastId)
            // verify required parameter 'methodChatSendMessageRequestDto' is not null or undefined
            assertParamExists('send', 'methodChatSendMessageRequestDto', methodChatSendMessageRequestDto)
            const localVarPath = `/method/chat/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(methodChatSendMessageRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatGatewayApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Remove message
         * @param {deleteVEnum} v Version
         * @param {deleteLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {string} eventId Event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete(v: deleteVEnum, language: deleteLanguageEnum, key: string, broadcastId: number, eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete(v, language, key, broadcastId, eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatGatewayApi.delete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get one message
         * @param {getMessageVEnum} v Version
         * @param {getMessageLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {string} eventId Event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessage(v: getMessageVEnum, language: getMessageLanguageEnum, key: string, broadcastId: number, eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessage(v, language, key, broadcastId, eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatGatewayApi.getMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List history message
         * @param {historyVEnum} v Version
         * @param {historyLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async history(v: historyVEnum, language: historyLanguageEnum, key: string, broadcastId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MethodChatHistoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.history(v, language, key, broadcastId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatGatewayApi.history']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Send message
         * @param {sendVEnum} v Version
         * @param {sendLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId 
         * @param {MethodChatSendMessageRequestDto} methodChatSendMessageRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async send(v: sendVEnum, language: sendLanguageEnum, key: string, broadcastId: number, methodChatSendMessageRequestDto: MethodChatSendMessageRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.send(v, language, key, broadcastId, methodChatSendMessageRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatGatewayApi.send']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChatGatewayApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Remove message
         * @param {deleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters: deleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.delete(requestParameters.v, requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get one message
         * @param {getMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessage(requestParameters: getMessageRequest, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponseDto> {
            return localVarFp.getMessage(requestParameters.v, requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List history message
         * @param {historyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        history(requestParameters: historyRequest, options?: RawAxiosRequestConfig): AxiosPromise<MethodChatHistoryResponse> {
            return localVarFp.history(requestParameters.v, requestParameters.language, requestParameters.key, requestParameters.broadcastId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send message
         * @param {sendRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        send(requestParameters: sendRequest, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponseDto> {
            return localVarFp.send(requestParameters.v, requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.methodChatSendMessageRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for delete operation in ChatGatewayApi.
 * @export
 * @interface deleteRequest
 */
export interface deleteRequest {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof delete
     */
    readonly v: deleteVEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof delete
     */
    readonly language: deleteLanguageEnum

    /**
     * Key
     * @type {string}
     * @memberof delete
     */
    readonly key: string

    /**
     * broadcast id
     * @type {number}
     * @memberof delete
     */
    readonly broadcastId: number

    /**
     * Event id
     * @type {string}
     * @memberof delete
     */
    readonly eventId: string
}

/**
 * Request parameters for getMessage operation in ChatGatewayApi.
 * @export
 * @interface getMessageRequest
 */
export interface getMessageRequest {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getMessage
     */
    readonly v: getMessageVEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getMessage
     */
    readonly language: getMessageLanguageEnum

    /**
     * Key
     * @type {string}
     * @memberof getMessage
     */
    readonly key: string

    /**
     * broadcast id
     * @type {number}
     * @memberof getMessage
     */
    readonly broadcastId: number

    /**
     * Event id
     * @type {string}
     * @memberof getMessage
     */
    readonly eventId: string
}

/**
 * Request parameters for history operation in ChatGatewayApi.
 * @export
 * @interface historyRequest
 */
export interface historyRequest {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof history
     */
    readonly v: historyVEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof history
     */
    readonly language: historyLanguageEnum

    /**
     * Key
     * @type {string}
     * @memberof history
     */
    readonly key: string

    /**
     * broadcast id
     * @type {number}
     * @memberof history
     */
    readonly broadcastId: number
}

/**
 * Request parameters for send operation in ChatGatewayApi.
 * @export
 * @interface sendRequest
 */
export interface sendRequest {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof send
     */
    readonly v: sendVEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof send
     */
    readonly language: sendLanguageEnum

    /**
     * Key
     * @type {string}
     * @memberof send
     */
    readonly key: string

    /**
     * 
     * @type {number}
     * @memberof send
     */
    readonly broadcastId: number

    /**
     * 
     * @type {MethodChatSendMessageRequestDto}
     * @memberof send
     */
    readonly methodChatSendMessageRequestDto: MethodChatSendMessageRequestDto
}

/**
 * ChatGatewayApi - object-oriented interface
 * @export
 * @class ChatGatewayApi
 * @extends {BaseAPI}
 */
export class ChatGatewayApi extends BaseAPI {
    /**
     * 
     * @summary Remove message
     * @param {deleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    public delete(requestParameters: deleteRequest, options?: RawAxiosRequestConfig) {
        return fp(this.configuration).delete(requestParameters.v, requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get one message
     * @param {getMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    public getMessage(requestParameters: getMessageRequest, options?: RawAxiosRequestConfig) {
        return fp(this.configuration).getMessage(requestParameters.v, requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List history message
     * @param {historyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    public history(requestParameters: historyRequest, options?: RawAxiosRequestConfig) {
        return fp(this.configuration).history(requestParameters.v, requestParameters.language, requestParameters.key, requestParameters.broadcastId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send message
     * @param {sendRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    public send(requestParameters: sendRequest, options?: RawAxiosRequestConfig) {
        return fp(this.configuration).send(requestParameters.v, requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.methodChatSendMessageRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum deleteVEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum deleteLanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum getMessageVEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum getMessageLanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum historyVEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum historyLanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum sendVEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum sendLanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
