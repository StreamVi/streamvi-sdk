/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { PlanStorageCheckResponse } from '../models';
// @ts-ignore
import type { PlanStorageDiscountResponse } from '../models';
// @ts-ignore
import type { PlanStorageForProject } from '../models';
// @ts-ignore
import type { PlanStorageResponseDto } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
/**
 * PlanStorageApi - axios parameter creator
 * @export
 */
export const PlanStorageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Buy storage tariff
         * @param {PlanStorageBuyV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanStorageBuyV1PeriodEnum} period Period
         * @param {number} planStorageId Storage plan id
         * @param {PlanStorageBuyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [size] Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageBuyV1: async (language: PlanStorageBuyV1LanguageEnum, projectId: number, period: PlanStorageBuyV1PeriodEnum, planStorageId: number, v?: PlanStorageBuyV1VEnum, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('planStorageBuyV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('planStorageBuyV1', 'projectId', projectId)
            // verify required parameter 'period' is not null or undefined
            assertParamExists('planStorageBuyV1', 'period', period)
            // verify required parameter 'planStorageId' is not null or undefined
            assertParamExists('planStorageBuyV1', 'planStorageId', planStorageId)
            const localVarPath = `/method/plan_storage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            if (planStorageId !== undefined) {
                localVarQueryParameter['plan_storage_id'] = planStorageId;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove next tariff
         * @param {PlanStorageCancelV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanStorageCancelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageCancelV1: async (language: PlanStorageCancelV1LanguageEnum, projectId: number, v?: PlanStorageCancelV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('planStorageCancelV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('planStorageCancelV1', 'projectId', projectId)
            const localVarPath = `/method/plan_storage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check storage tariff before buy
         * @param {PlanStorageCheckV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanStorageCheckV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageCheckV1: async (language: PlanStorageCheckV1LanguageEnum, projectId: number, v?: PlanStorageCheckV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('planStorageCheckV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('planStorageCheckV1', 'projectId', projectId)
            const localVarPath = `/method/plan_storage/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get discount of storage
         * @param {PlanStorageGetDiscountV1LanguageEnum} language Current language
         * @param {PlanStorageGetDiscountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageGetDiscountV1: async (language: PlanStorageGetDiscountV1LanguageEnum, v?: PlanStorageGetDiscountV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('planStorageGetDiscountV1', 'language', language)
            const localVarPath = `/method/plan_storage/get_discount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get info for storage tariff
         * @param {PlanStorageListV1LanguageEnum} language Current language
         * @param {PlanStorageListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageListV1: async (language: PlanStorageListV1LanguageEnum, v?: PlanStorageListV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('planStorageListV1', 'language', language)
            const localVarPath = `/method/plan_storage/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get tariff for project
         * @param {PlanStorageTariffV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanStorageTariffV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageTariffV1: async (language: PlanStorageTariffV1LanguageEnum, projectId: number, v?: PlanStorageTariffV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('planStorageTariffV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('planStorageTariffV1', 'projectId', projectId)
            const localVarPath = `/method/plan_storage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlanStorageApi - functional programming interface
 * @export
 */
export const PlanStorageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlanStorageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Buy storage tariff
         * @param {PlanStorageBuyV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanStorageBuyV1PeriodEnum} period Period
         * @param {number} planStorageId Storage plan id
         * @param {PlanStorageBuyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [size] Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planStorageBuyV1(language: PlanStorageBuyV1LanguageEnum, projectId: number, period: PlanStorageBuyV1PeriodEnum, planStorageId: number, v?: PlanStorageBuyV1VEnum, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planStorageBuyV1(language, projectId, period, planStorageId, v, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanStorageApi.planStorageBuyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove next tariff
         * @param {PlanStorageCancelV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanStorageCancelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planStorageCancelV1(language: PlanStorageCancelV1LanguageEnum, projectId: number, v?: PlanStorageCancelV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planStorageCancelV1(language, projectId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanStorageApi.planStorageCancelV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Check storage tariff before buy
         * @param {PlanStorageCheckV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanStorageCheckV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planStorageCheckV1(language: PlanStorageCheckV1LanguageEnum, projectId: number, v?: PlanStorageCheckV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanStorageCheckResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planStorageCheckV1(language, projectId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanStorageApi.planStorageCheckV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get discount of storage
         * @param {PlanStorageGetDiscountV1LanguageEnum} language Current language
         * @param {PlanStorageGetDiscountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planStorageGetDiscountV1(language: PlanStorageGetDiscountV1LanguageEnum, v?: PlanStorageGetDiscountV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanStorageDiscountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planStorageGetDiscountV1(language, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanStorageApi.planStorageGetDiscountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get info for storage tariff
         * @param {PlanStorageListV1LanguageEnum} language Current language
         * @param {PlanStorageListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planStorageListV1(language: PlanStorageListV1LanguageEnum, v?: PlanStorageListV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanStorageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planStorageListV1(language, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanStorageApi.planStorageListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get tariff for project
         * @param {PlanStorageTariffV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanStorageTariffV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planStorageTariffV1(language: PlanStorageTariffV1LanguageEnum, projectId: number, v?: PlanStorageTariffV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanStorageForProject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planStorageTariffV1(language, projectId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanStorageApi.planStorageTariffV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlanStorageApi - factory interface
 * @export
 */
export const PlanStorageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlanStorageApiFp(configuration)
    return {
        /**
         * 
         * @summary Buy storage tariff
         * @param {PlanStorageApiPlanStorageBuyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageBuyV1(requestParameters: PlanStorageApiPlanStorageBuyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.planStorageBuyV1(requestParameters.language, requestParameters.project_id, requestParameters.period, requestParameters.plan_storage_id, requestParameters.v, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove next tariff
         * @param {PlanStorageApiPlanStorageCancelV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageCancelV1(requestParameters: PlanStorageApiPlanStorageCancelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.planStorageCancelV1(requestParameters.language, requestParameters.project_id, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check storage tariff before buy
         * @param {PlanStorageApiPlanStorageCheckV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageCheckV1(requestParameters: PlanStorageApiPlanStorageCheckV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanStorageCheckResponse> {
            return localVarFp.planStorageCheckV1(requestParameters.language, requestParameters.project_id, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get discount of storage
         * @param {PlanStorageApiPlanStorageGetDiscountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageGetDiscountV1(requestParameters: PlanStorageApiPlanStorageGetDiscountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanStorageDiscountResponse> {
            return localVarFp.planStorageGetDiscountV1(requestParameters.language, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get info for storage tariff
         * @param {PlanStorageApiPlanStorageListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageListV1(requestParameters: PlanStorageApiPlanStorageListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanStorageResponseDto> {
            return localVarFp.planStorageListV1(requestParameters.language, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get tariff for project
         * @param {PlanStorageApiPlanStorageTariffV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageTariffV1(requestParameters: PlanStorageApiPlanStorageTariffV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanStorageForProject> {
            return localVarFp.planStorageTariffV1(requestParameters.language, requestParameters.project_id, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlanStorageApi - interface
 * @export
 * @interface PlanStorageApi
 */
export interface PlanStorageApiInterface {
    /**
     * 
     * @summary Buy storage tariff
     * @param {PlanStorageApiPlanStorageBuyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageBuyV1(requestParameters: PlanStorageApiPlanStorageBuyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Remove next tariff
     * @param {PlanStorageApiPlanStorageCancelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageCancelV1(requestParameters: PlanStorageApiPlanStorageCancelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Check storage tariff before buy
     * @param {PlanStorageApiPlanStorageCheckV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageCheckV1(requestParameters: PlanStorageApiPlanStorageCheckV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanStorageCheckResponse>;

    /**
     * 
     * @summary Get discount of storage
     * @param {PlanStorageApiPlanStorageGetDiscountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageGetDiscountV1(requestParameters: PlanStorageApiPlanStorageGetDiscountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanStorageDiscountResponse>;

    /**
     * 
     * @summary Get info for storage tariff
     * @param {PlanStorageApiPlanStorageListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageListV1(requestParameters: PlanStorageApiPlanStorageListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanStorageResponseDto>;

    /**
     * 
     * @summary Get tariff for project
     * @param {PlanStorageApiPlanStorageTariffV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageTariffV1(requestParameters: PlanStorageApiPlanStorageTariffV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanStorageForProject>;

}

/**
 * Request parameters for planStorageBuyV1 operation in PlanStorageApi.
 * @export
 * @interface PlanStorageApiPlanStorageBuyV1Request
 */
export interface PlanStorageApiPlanStorageBuyV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanStorageApiPlanStorageBuyV1
     */
    readonly language: PlanStorageBuyV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof PlanStorageApiPlanStorageBuyV1
     */
    readonly project_id: number

    /**
     * Period
     * @type {'month' | 'year'}
     * @memberof PlanStorageApiPlanStorageBuyV1
     */
    readonly period: PlanStorageBuyV1PeriodEnum

    /**
     * Storage plan id
     * @type {number}
     * @memberof PlanStorageApiPlanStorageBuyV1
     */
    readonly plan_storage_id: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanStorageApiPlanStorageBuyV1
     */
    readonly v?: PlanStorageBuyV1VEnum

    /**
     * Size
     * @type {number}
     * @memberof PlanStorageApiPlanStorageBuyV1
     */
    readonly size?: number
}

/**
 * Request parameters for planStorageCancelV1 operation in PlanStorageApi.
 * @export
 * @interface PlanStorageApiPlanStorageCancelV1Request
 */
export interface PlanStorageApiPlanStorageCancelV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanStorageApiPlanStorageCancelV1
     */
    readonly language: PlanStorageCancelV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof PlanStorageApiPlanStorageCancelV1
     */
    readonly project_id: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanStorageApiPlanStorageCancelV1
     */
    readonly v?: PlanStorageCancelV1VEnum
}

/**
 * Request parameters for planStorageCheckV1 operation in PlanStorageApi.
 * @export
 * @interface PlanStorageApiPlanStorageCheckV1Request
 */
export interface PlanStorageApiPlanStorageCheckV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanStorageApiPlanStorageCheckV1
     */
    readonly language: PlanStorageCheckV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof PlanStorageApiPlanStorageCheckV1
     */
    readonly project_id: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanStorageApiPlanStorageCheckV1
     */
    readonly v?: PlanStorageCheckV1VEnum
}

/**
 * Request parameters for planStorageGetDiscountV1 operation in PlanStorageApi.
 * @export
 * @interface PlanStorageApiPlanStorageGetDiscountV1Request
 */
export interface PlanStorageApiPlanStorageGetDiscountV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanStorageApiPlanStorageGetDiscountV1
     */
    readonly language: PlanStorageGetDiscountV1LanguageEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanStorageApiPlanStorageGetDiscountV1
     */
    readonly v?: PlanStorageGetDiscountV1VEnum
}

/**
 * Request parameters for planStorageListV1 operation in PlanStorageApi.
 * @export
 * @interface PlanStorageApiPlanStorageListV1Request
 */
export interface PlanStorageApiPlanStorageListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanStorageApiPlanStorageListV1
     */
    readonly language: PlanStorageListV1LanguageEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanStorageApiPlanStorageListV1
     */
    readonly v?: PlanStorageListV1VEnum
}

/**
 * Request parameters for planStorageTariffV1 operation in PlanStorageApi.
 * @export
 * @interface PlanStorageApiPlanStorageTariffV1Request
 */
export interface PlanStorageApiPlanStorageTariffV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanStorageApiPlanStorageTariffV1
     */
    readonly language: PlanStorageTariffV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof PlanStorageApiPlanStorageTariffV1
     */
    readonly project_id: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanStorageApiPlanStorageTariffV1
     */
    readonly v?: PlanStorageTariffV1VEnum
}

/**
 * PlanStorageApi - object-oriented interface
 * @export
 * @class PlanStorageApi
 * @extends {BaseAPI}
 */
export class PlanStorageApi extends BaseAPI implements PlanStorageApiInterface {
    /**
     * 
     * @summary Buy storage tariff
     * @param {PlanStorageApiPlanStorageBuyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    public planStorageBuyV1(requestParameters: PlanStorageApiPlanStorageBuyV1Request, options?: RawAxiosRequestConfig) {
        return PlanStorageApiFp(this.configuration).planStorageBuyV1(requestParameters.language, requestParameters.project_id, requestParameters.period, requestParameters.plan_storage_id, requestParameters.v, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove next tariff
     * @param {PlanStorageApiPlanStorageCancelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    public planStorageCancelV1(requestParameters: PlanStorageApiPlanStorageCancelV1Request, options?: RawAxiosRequestConfig) {
        return PlanStorageApiFp(this.configuration).planStorageCancelV1(requestParameters.language, requestParameters.project_id, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check storage tariff before buy
     * @param {PlanStorageApiPlanStorageCheckV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    public planStorageCheckV1(requestParameters: PlanStorageApiPlanStorageCheckV1Request, options?: RawAxiosRequestConfig) {
        return PlanStorageApiFp(this.configuration).planStorageCheckV1(requestParameters.language, requestParameters.project_id, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get discount of storage
     * @param {PlanStorageApiPlanStorageGetDiscountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    public planStorageGetDiscountV1(requestParameters: PlanStorageApiPlanStorageGetDiscountV1Request, options?: RawAxiosRequestConfig) {
        return PlanStorageApiFp(this.configuration).planStorageGetDiscountV1(requestParameters.language, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get info for storage tariff
     * @param {PlanStorageApiPlanStorageListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    public planStorageListV1(requestParameters: PlanStorageApiPlanStorageListV1Request, options?: RawAxiosRequestConfig) {
        return PlanStorageApiFp(this.configuration).planStorageListV1(requestParameters.language, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get tariff for project
     * @param {PlanStorageApiPlanStorageTariffV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    public planStorageTariffV1(requestParameters: PlanStorageApiPlanStorageTariffV1Request, options?: RawAxiosRequestConfig) {
        return PlanStorageApiFp(this.configuration).planStorageTariffV1(requestParameters.language, requestParameters.project_id, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const PlanStorageBuyV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PlanStorageBuyV1LanguageEnum = typeof PlanStorageBuyV1LanguageEnum[keyof typeof PlanStorageBuyV1LanguageEnum];
/**
 * @export
 */
export const PlanStorageBuyV1PeriodEnum = {
    Month: 'month',
    Year: 'year'
} as const;
export type PlanStorageBuyV1PeriodEnum = typeof PlanStorageBuyV1PeriodEnum[keyof typeof PlanStorageBuyV1PeriodEnum];
/**
 * @export
 */
export const PlanStorageBuyV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanStorageBuyV1VEnum = typeof PlanStorageBuyV1VEnum[keyof typeof PlanStorageBuyV1VEnum];
/**
 * @export
 */
export const PlanStorageCancelV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PlanStorageCancelV1LanguageEnum = typeof PlanStorageCancelV1LanguageEnum[keyof typeof PlanStorageCancelV1LanguageEnum];
/**
 * @export
 */
export const PlanStorageCancelV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanStorageCancelV1VEnum = typeof PlanStorageCancelV1VEnum[keyof typeof PlanStorageCancelV1VEnum];
/**
 * @export
 */
export const PlanStorageCheckV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PlanStorageCheckV1LanguageEnum = typeof PlanStorageCheckV1LanguageEnum[keyof typeof PlanStorageCheckV1LanguageEnum];
/**
 * @export
 */
export const PlanStorageCheckV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanStorageCheckV1VEnum = typeof PlanStorageCheckV1VEnum[keyof typeof PlanStorageCheckV1VEnum];
/**
 * @export
 */
export const PlanStorageGetDiscountV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PlanStorageGetDiscountV1LanguageEnum = typeof PlanStorageGetDiscountV1LanguageEnum[keyof typeof PlanStorageGetDiscountV1LanguageEnum];
/**
 * @export
 */
export const PlanStorageGetDiscountV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanStorageGetDiscountV1VEnum = typeof PlanStorageGetDiscountV1VEnum[keyof typeof PlanStorageGetDiscountV1VEnum];
/**
 * @export
 */
export const PlanStorageListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PlanStorageListV1LanguageEnum = typeof PlanStorageListV1LanguageEnum[keyof typeof PlanStorageListV1LanguageEnum];
/**
 * @export
 */
export const PlanStorageListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanStorageListV1VEnum = typeof PlanStorageListV1VEnum[keyof typeof PlanStorageListV1VEnum];
/**
 * @export
 */
export const PlanStorageTariffV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PlanStorageTariffV1LanguageEnum = typeof PlanStorageTariffV1LanguageEnum[keyof typeof PlanStorageTariffV1LanguageEnum];
/**
 * @export
 */
export const PlanStorageTariffV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanStorageTariffV1VEnum = typeof PlanStorageTariffV1VEnum[keyof typeof PlanStorageTariffV1VEnum];
