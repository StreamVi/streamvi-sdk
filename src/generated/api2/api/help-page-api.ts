/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { GetHelpPageResponse } from '../models';
// @ts-ignore
import type { PaginatedResponseOfHelpPageResponse } from '../models';
// @ts-ignore
import type { StructureHelpPageResponse } from '../models';
/**
 * HelpPageApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get help page
         * @param {get1VEnum} v Version
         * @param {get1LanguageEnum} language Current language
         * @param {string} url Url of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get1: async (v: get1VEnum, language: get1LanguageEnum, url: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('get1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('get1', 'language', language)
            // verify required parameter 'url' is not null or undefined
            assertParamExists('get1', 'url', url)
            const localVarPath = `/method/help/page/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of help pages
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {string} [s] String for search
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1: async (v: list1VEnum, language: list1LanguageEnum, s?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('list1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('list1', 'language', language)
            const localVarPath = `/method/help/page/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (s !== undefined) {
                localVarQueryParameter['s'] = s;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get structure of help pages
         * @param {structure1VEnum} v Version
         * @param {structure1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        structure1: async (v: structure1VEnum, language: structure1LanguageEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('structure1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('structure1', 'language', language)
            const localVarPath = `/method/help/page/structure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HelpPageApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get help page
         * @param {get1VEnum} v Version
         * @param {get1LanguageEnum} language Current language
         * @param {string} url Url of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get1(v: get1VEnum, language: get1LanguageEnum, url: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHelpPageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get1(v, language, url, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HelpPageApi.get1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of help pages
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {string} [s] String for search
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list1(v: list1VEnum, language: list1LanguageEnum, s?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseOfHelpPageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list1(v, language, s, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HelpPageApi.list1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get structure of help pages
         * @param {structure1VEnum} v Version
         * @param {structure1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async structure1(v: structure1VEnum, language: structure1LanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StructureHelpPageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.structure1(v, language, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HelpPageApi.structure1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HelpPageApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Get help page
         * @param {get1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get1(requestParameters: get1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetHelpPageResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: get1VEnum = requestParameters.v || get1VEnum._1;
            return localVarFp.get1(actualV, requestParameters.language, requestParameters.url, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of help pages
         * @param {list1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfHelpPageResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: list1VEnum = requestParameters.v || list1VEnum._1;
            return localVarFp.list1(actualV, requestParameters.language, requestParameters.s, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get structure of help pages
         * @param {structure1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        structure1(requestParameters: structure1Request, options?: RawAxiosRequestConfig): AxiosPromise<StructureHelpPageResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: structure1VEnum = requestParameters.v || structure1VEnum._1;
            return localVarFp.structure1(actualV, requestParameters.language, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for get1 operation in HelpPageApi.
 * @export
 * @interface get1Request
 */
export interface get1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof get1
     */
    readonly v?: get1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof get1
     */
    readonly language: get1LanguageEnum

    /**
     * Url of page
     * @type {string}
     * @memberof get1
     */
    readonly url: string
}

/**
 * Request parameters for list1 operation in HelpPageApi.
 * @export
 * @interface list1Request
 */
export interface list1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof list1
     */
    readonly v?: list1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof list1
     */
    readonly language: list1LanguageEnum

    /**
     * String for search
     * @type {string}
     * @memberof list1
     */
    readonly s?: string

    /**
     * Number of results
     * @type {number}
     * @memberof list1
     */
    readonly limit?: number

    /**
     * Page offset number
     * @type {number}
     * @memberof list1
     */
    readonly offset?: number
}

/**
 * Request parameters for structure1 operation in HelpPageApi.
 * @export
 * @interface structure1Request
 */
export interface structure1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof structure1
     */
    readonly v?: structure1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof structure1
     */
    readonly language: structure1LanguageEnum
}

/**
 * HelpPageApi - object-oriented interface
 * @export
 * @class HelpPageApi
 * @extends {BaseAPI}
 */
export class HelpPageApi extends BaseAPI {
    /**
     * 
     * @summary Get help page
     * @param {get1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpPageApi
     */
    public get1(requestParameters: get1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: get1VEnum = requestParameters.v || get1VEnum._1;
        return fp(this.configuration).get1(actualV, requestParameters.language, requestParameters.url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of help pages
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpPageApi
     */
    public list1(requestParameters: list1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: list1VEnum = requestParameters.v || list1VEnum._1;
        return fp(this.configuration).list1(actualV, requestParameters.language, requestParameters.s, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get structure of help pages
     * @param {structure1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpPageApi
     */
    public structure1(requestParameters: structure1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: structure1VEnum = requestParameters.v || structure1VEnum._1;
        return fp(this.configuration).structure1(actualV, requestParameters.language, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum get1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum get1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum list1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum list1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum structure1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum structure1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
