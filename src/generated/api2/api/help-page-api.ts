/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { GetHelpPageResponse } from '../models';
// @ts-ignore
import type { PaginatedResponseOfHelpPageResponse } from '../models';
// @ts-ignore
import type { StructureHelpPageResponse } from '../models';
/**
 * HelpPageApi - axios parameter creator
 * @export
 */
export const HelpPageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get help page
         * @param {HelpPageGetV1LanguageEnum} language Current language
         * @param {string} url Url of page
         * @param {HelpPageGetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helpPageGetV1: async (language: HelpPageGetV1LanguageEnum, url: string, v?: HelpPageGetV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('helpPageGetV1', 'language', language)
            // verify required parameter 'url' is not null or undefined
            assertParamExists('helpPageGetV1', 'url', url)
            const localVarPath = `/method/help/page/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of help pages
         * @param {HelpPageListV1LanguageEnum} language Current language
         * @param {HelpPageListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {string} [s] String for search
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helpPageListV1: async (language: HelpPageListV1LanguageEnum, v?: HelpPageListV1VEnum, s?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('helpPageListV1', 'language', language)
            const localVarPath = `/method/help/page/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (s !== undefined) {
                localVarQueryParameter['s'] = s;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get structure of help pages
         * @param {HelpPageStructureV1LanguageEnum} language Current language
         * @param {HelpPageStructureV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helpPageStructureV1: async (language: HelpPageStructureV1LanguageEnum, v?: HelpPageStructureV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('helpPageStructureV1', 'language', language)
            const localVarPath = `/method/help/page/structure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HelpPageApi - functional programming interface
 * @export
 */
export const HelpPageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HelpPageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get help page
         * @param {HelpPageGetV1LanguageEnum} language Current language
         * @param {string} url Url of page
         * @param {HelpPageGetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async helpPageGetV1(language: HelpPageGetV1LanguageEnum, url: string, v?: HelpPageGetV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHelpPageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.helpPageGetV1(language, url, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HelpPageApi.helpPageGetV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of help pages
         * @param {HelpPageListV1LanguageEnum} language Current language
         * @param {HelpPageListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {string} [s] String for search
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async helpPageListV1(language: HelpPageListV1LanguageEnum, v?: HelpPageListV1VEnum, s?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseOfHelpPageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.helpPageListV1(language, v, s, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HelpPageApi.helpPageListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get structure of help pages
         * @param {HelpPageStructureV1LanguageEnum} language Current language
         * @param {HelpPageStructureV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async helpPageStructureV1(language: HelpPageStructureV1LanguageEnum, v?: HelpPageStructureV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StructureHelpPageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.helpPageStructureV1(language, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HelpPageApi.helpPageStructureV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HelpPageApi - factory interface
 * @export
 */
export const HelpPageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HelpPageApiFp(configuration)
    return {
        /**
         * 
         * @summary Get help page
         * @param {HelpPageApiHelpPageGetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helpPageGetV1(requestParameters: HelpPageApiHelpPageGetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetHelpPageResponse> {
            return localVarFp.helpPageGetV1(requestParameters.language, requestParameters.url, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of help pages
         * @param {HelpPageApiHelpPageListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helpPageListV1(requestParameters: HelpPageApiHelpPageListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfHelpPageResponse> {
            return localVarFp.helpPageListV1(requestParameters.language, requestParameters.v, requestParameters.s, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get structure of help pages
         * @param {HelpPageApiHelpPageStructureV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helpPageStructureV1(requestParameters: HelpPageApiHelpPageStructureV1Request, options?: RawAxiosRequestConfig): AxiosPromise<StructureHelpPageResponse> {
            return localVarFp.helpPageStructureV1(requestParameters.language, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HelpPageApi - interface
 * @export
 * @interface HelpPageApi
 */
export interface HelpPageApiInterface {
    /**
     * 
     * @summary Get help page
     * @param {HelpPageApiHelpPageGetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpPageApiInterface
     */
    helpPageGetV1(requestParameters: HelpPageApiHelpPageGetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetHelpPageResponse>;

    /**
     * 
     * @summary Get list of help pages
     * @param {HelpPageApiHelpPageListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpPageApiInterface
     */
    helpPageListV1(requestParameters: HelpPageApiHelpPageListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfHelpPageResponse>;

    /**
     * 
     * @summary Get structure of help pages
     * @param {HelpPageApiHelpPageStructureV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpPageApiInterface
     */
    helpPageStructureV1(requestParameters: HelpPageApiHelpPageStructureV1Request, options?: RawAxiosRequestConfig): AxiosPromise<StructureHelpPageResponse>;

}

/**
 * Request parameters for helpPageGetV1 operation in HelpPageApi.
 * @export
 * @interface HelpPageApiHelpPageGetV1Request
 */
export interface HelpPageApiHelpPageGetV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof HelpPageApiHelpPageGetV1
     */
    readonly language: HelpPageGetV1LanguageEnum

    /**
     * Url of page
     * @type {string}
     * @memberof HelpPageApiHelpPageGetV1
     */
    readonly url: string

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof HelpPageApiHelpPageGetV1
     */
    readonly v?: HelpPageGetV1VEnum
}

/**
 * Request parameters for helpPageListV1 operation in HelpPageApi.
 * @export
 * @interface HelpPageApiHelpPageListV1Request
 */
export interface HelpPageApiHelpPageListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof HelpPageApiHelpPageListV1
     */
    readonly language: HelpPageListV1LanguageEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof HelpPageApiHelpPageListV1
     */
    readonly v?: HelpPageListV1VEnum

    /**
     * String for search
     * @type {string}
     * @memberof HelpPageApiHelpPageListV1
     */
    readonly s?: string

    /**
     * Number of results
     * @type {number}
     * @memberof HelpPageApiHelpPageListV1
     */
    readonly limit?: number

    /**
     * Page offset number
     * @type {number}
     * @memberof HelpPageApiHelpPageListV1
     */
    readonly offset?: number
}

/**
 * Request parameters for helpPageStructureV1 operation in HelpPageApi.
 * @export
 * @interface HelpPageApiHelpPageStructureV1Request
 */
export interface HelpPageApiHelpPageStructureV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof HelpPageApiHelpPageStructureV1
     */
    readonly language: HelpPageStructureV1LanguageEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof HelpPageApiHelpPageStructureV1
     */
    readonly v?: HelpPageStructureV1VEnum
}

/**
 * HelpPageApi - object-oriented interface
 * @export
 * @class HelpPageApi
 * @extends {BaseAPI}
 */
export class HelpPageApi extends BaseAPI implements HelpPageApiInterface {
    /**
     * 
     * @summary Get help page
     * @param {HelpPageApiHelpPageGetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpPageApi
     */
    public helpPageGetV1(requestParameters: HelpPageApiHelpPageGetV1Request, options?: RawAxiosRequestConfig) {
        return HelpPageApiFp(this.configuration).helpPageGetV1(requestParameters.language, requestParameters.url, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of help pages
     * @param {HelpPageApiHelpPageListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpPageApi
     */
    public helpPageListV1(requestParameters: HelpPageApiHelpPageListV1Request, options?: RawAxiosRequestConfig) {
        return HelpPageApiFp(this.configuration).helpPageListV1(requestParameters.language, requestParameters.v, requestParameters.s, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get structure of help pages
     * @param {HelpPageApiHelpPageStructureV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpPageApi
     */
    public helpPageStructureV1(requestParameters: HelpPageApiHelpPageStructureV1Request, options?: RawAxiosRequestConfig) {
        return HelpPageApiFp(this.configuration).helpPageStructureV1(requestParameters.language, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const HelpPageGetV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type HelpPageGetV1LanguageEnum = typeof HelpPageGetV1LanguageEnum[keyof typeof HelpPageGetV1LanguageEnum];
/**
 * @export
 */
export const HelpPageGetV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type HelpPageGetV1VEnum = typeof HelpPageGetV1VEnum[keyof typeof HelpPageGetV1VEnum];
/**
 * @export
 */
export const HelpPageListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type HelpPageListV1LanguageEnum = typeof HelpPageListV1LanguageEnum[keyof typeof HelpPageListV1LanguageEnum];
/**
 * @export
 */
export const HelpPageListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type HelpPageListV1VEnum = typeof HelpPageListV1VEnum[keyof typeof HelpPageListV1VEnum];
/**
 * @export
 */
export const HelpPageStructureV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type HelpPageStructureV1LanguageEnum = typeof HelpPageStructureV1LanguageEnum[keyof typeof HelpPageStructureV1LanguageEnum];
/**
 * @export
 */
export const HelpPageStructureV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type HelpPageStructureV1VEnum = typeof HelpPageStructureV1VEnum[keyof typeof HelpPageStructureV1VEnum];
