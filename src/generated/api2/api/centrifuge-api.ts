/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { SiteAuthCentrifugeResponse } from '../models';
/**
 * CentrifugeApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min     
         * @summary Auth token for broadcast
         * @param {number} broadcastId 
         * @param {GetTokenBroadcastVEnum} v Version
         * @param {GetTokenBroadcastLanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenBroadcast: async (broadcastId: number, v: GetTokenBroadcastVEnum, language: GetTokenBroadcastLanguageEnum, projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'broadcastId' is not null or undefined
            assertParamExists('getTokenBroadcast', 'broadcastId', broadcastId)
            // verify required parameter 'v' is not null or undefined
            assertParamExists('getTokenBroadcast', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getTokenBroadcast', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getTokenBroadcast', 'projectId', projectId)
            const localVarPath = `/method/centrifuge/token/broadcast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auth centrifuge
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authV21: async (projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('authV21', 'projectId', projectId)
            const localVarPath = `/method/centrifuge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor     
         * @summary Auth token for project
         * @param {project1VEnum} v Version
         * @param {project1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        project1: async (v: project1VEnum, language: project1LanguageEnum, projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('project1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('project1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('project1', 'projectId', projectId)
            const localVarPath = `/method/centrifuge/auth/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CentrifugeApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min     
         * @summary Auth token for broadcast
         * @param {number} broadcastId 
         * @param {GetTokenBroadcastVEnum} v Version
         * @param {GetTokenBroadcastLanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTokenBroadcast(broadcastId: number, v: GetTokenBroadcastVEnum, language: GetTokenBroadcastLanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteAuthCentrifugeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTokenBroadcast(broadcastId, v, language, projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CentrifugeApi.getTokenBroadcast']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auth centrifuge
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authV21(projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteAuthCentrifugeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authV21(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CentrifugeApi.authV21']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor     
         * @summary Auth token for project
         * @param {project1VEnum} v Version
         * @param {project1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async project1(v: project1VEnum, language: project1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteAuthCentrifugeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.project1(v, language, projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CentrifugeApi.project1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CentrifugeApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min     
         * @summary Auth token for broadcast
         * @param {getTokenBroadcastRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenBroadcast(requestParameters: getTokenBroadcastRequest, options?: RawAxiosRequestConfig): AxiosPromise<SiteAuthCentrifugeResponse> {
            return localVarFp.getTokenBroadcast(requestParameters.broadcastId, requestParameters.v, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auth centrifuge
         * @param {authV21Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authV21(requestParameters: authV21Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteAuthCentrifugeResponse> {
            return localVarFp.authV21(requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor     
         * @summary Auth token for project
         * @param {project1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        project1(requestParameters: project1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteAuthCentrifugeResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: project1VEnum = requestParameters.v || project1VEnum._1;
            return localVarFp.project1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTokenBroadcast operation in CentrifugeApi.
 * @export
 * @interface getTokenBroadcastRequest
 */
export interface getTokenBroadcastRequest {
    /**
     * 
     * @type {number}
     * @memberof getTokenBroadcast
     */
    readonly broadcastId: number

    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getTokenBroadcast
     */
    readonly v: GetTokenBroadcastVEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getTokenBroadcast
     */
    readonly language: GetTokenBroadcastLanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof getTokenBroadcast
     */
    readonly projectId: number
}

/**
 * Request parameters for authV21 operation in CentrifugeApi.
 * @export
 * @interface authV21Request
 */
export interface authV21Request {
    /**
     * Project id
     * @type {number}
     * @memberof authV21
     */
    readonly projectId: number
}

/**
 * Request parameters for project1 operation in CentrifugeApi.
 * @export
 * @interface project1Request
 */
export interface project1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof project1
     */
    readonly v?: project1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof project1
     */
    readonly language: project1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof project1
     */
    readonly projectId: number
}

/**
 * CentrifugeApi - object-oriented interface
 * @export
 * @class CentrifugeApi
 * @extends {BaseAPI}
 */
export class CentrifugeApi extends BaseAPI {
    /**
     *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min     
     * @summary Auth token for broadcast
     * @param {getTokenBroadcastRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApi
     */
    public getTokenBroadcast(requestParameters: getTokenBroadcastRequest, options?: RawAxiosRequestConfig) {
        return fp(this.configuration).getTokenBroadcast(requestParameters.broadcastId, requestParameters.v, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auth centrifuge
     * @param {authV21Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApi
     */
    public authV21(requestParameters: authV21Request, options?: RawAxiosRequestConfig) {
        return fp(this.configuration).authV21(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor     
     * @summary Auth token for project
     * @param {project1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApi
     */
    public project1(requestParameters: project1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: project1VEnum = requestParameters.v || project1VEnum._1;
        return fp(this.configuration).project1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum GetTokenBroadcastVEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum GetTokenBroadcastLanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum project1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum project1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
