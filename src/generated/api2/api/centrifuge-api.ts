/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { SiteAuthCentrifugeResponse } from '../models';
/**
 * CentrifugeApi - axios parameter creator
 * @export
 */
export const CentrifugeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Auth centrifuge
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        centrifugeAuthV2: async (projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('centrifugeAuthV2', 'projectId', projectId)
            const localVarPath = `/method/centrifuge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor     
         * @summary Auth token for project
         * @param {CentrifugeProjectV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {CentrifugeProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        centrifugeProjectV1: async (language: CentrifugeProjectV1LanguageEnum, projectId: number, v?: CentrifugeProjectV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('centrifugeProjectV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('centrifugeProjectV1', 'projectId', projectId)
            const localVarPath = `/method/centrifuge/auth/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '2';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min     
         * @summary Auth token for broadcast
         * @param {number} broadcastId 
         * @param {GetTokenBroadcastV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {GetTokenBroadcastV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenBroadcastV1: async (broadcastId: number, language: GetTokenBroadcastV1LanguageEnum, projectId: number, v?: GetTokenBroadcastV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'broadcastId' is not null or undefined
            assertParamExists('getTokenBroadcastV1', 'broadcastId', broadcastId)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getTokenBroadcastV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getTokenBroadcastV1', 'projectId', projectId)
            const localVarPath = `/method/centrifuge/token/broadcast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CentrifugeApi - functional programming interface
 * @export
 */
export const CentrifugeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CentrifugeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Auth centrifuge
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async centrifugeAuthV2(projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteAuthCentrifugeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.centrifugeAuthV2(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CentrifugeApi.centrifugeAuthV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor     
         * @summary Auth token for project
         * @param {CentrifugeProjectV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {CentrifugeProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async centrifugeProjectV1(language: CentrifugeProjectV1LanguageEnum, projectId: number, v?: CentrifugeProjectV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteAuthCentrifugeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.centrifugeProjectV1(language, projectId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CentrifugeApi.centrifugeProjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min     
         * @summary Auth token for broadcast
         * @param {number} broadcastId 
         * @param {GetTokenBroadcastV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {GetTokenBroadcastV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTokenBroadcastV1(broadcastId: number, language: GetTokenBroadcastV1LanguageEnum, projectId: number, v?: GetTokenBroadcastV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteAuthCentrifugeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTokenBroadcastV1(broadcastId, language, projectId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CentrifugeApi.getTokenBroadcastV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CentrifugeApi - factory interface
 * @export
 */
export const CentrifugeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CentrifugeApiFp(configuration)
    return {
        /**
         * 
         * @summary Auth centrifuge
         * @param {CentrifugeApiCentrifugeAuthV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        centrifugeAuthV2(requestParameters: CentrifugeApiCentrifugeAuthV2Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteAuthCentrifugeResponse> {
            return localVarFp.centrifugeAuthV2(requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor     
         * @summary Auth token for project
         * @param {CentrifugeApiCentrifugeProjectV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        centrifugeProjectV1(requestParameters: CentrifugeApiCentrifugeProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteAuthCentrifugeResponse> {
            return localVarFp.centrifugeProjectV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min     
         * @summary Auth token for broadcast
         * @param {CentrifugeApiGetTokenBroadcastV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenBroadcastV1(requestParameters: CentrifugeApiGetTokenBroadcastV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteAuthCentrifugeResponse> {
            return localVarFp.getTokenBroadcastV1(requestParameters.broadcastId, requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CentrifugeApi - interface
 * @export
 * @interface CentrifugeApi
 */
export interface CentrifugeApiInterface {
    /**
     * 
     * @summary Auth centrifuge
     * @param {CentrifugeApiCentrifugeAuthV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApiInterface
     */
    centrifugeAuthV2(requestParameters: CentrifugeApiCentrifugeAuthV2Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteAuthCentrifugeResponse>;

    /**
     *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor     
     * @summary Auth token for project
     * @param {CentrifugeApiCentrifugeProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApiInterface
     */
    centrifugeProjectV1(requestParameters: CentrifugeApiCentrifugeProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteAuthCentrifugeResponse>;

    /**
     *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min     
     * @summary Auth token for broadcast
     * @param {CentrifugeApiGetTokenBroadcastV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApiInterface
     */
    getTokenBroadcastV1(requestParameters: CentrifugeApiGetTokenBroadcastV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteAuthCentrifugeResponse>;

}

/**
 * Request parameters for centrifugeAuthV2 operation in CentrifugeApi.
 * @export
 * @interface CentrifugeApiCentrifugeAuthV2Request
 */
export interface CentrifugeApiCentrifugeAuthV2Request {
    /**
     * Project id
     * @type {number}
     * @memberof CentrifugeApiCentrifugeAuthV2
     */
    readonly projectId: number
}

/**
 * Request parameters for centrifugeProjectV1 operation in CentrifugeApi.
 * @export
 * @interface CentrifugeApiCentrifugeProjectV1Request
 */
export interface CentrifugeApiCentrifugeProjectV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof CentrifugeApiCentrifugeProjectV1
     */
    readonly language: CentrifugeProjectV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof CentrifugeApiCentrifugeProjectV1
     */
    readonly projectId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof CentrifugeApiCentrifugeProjectV1
     */
    readonly v?: CentrifugeProjectV1VEnum
}

/**
 * Request parameters for getTokenBroadcastV1 operation in CentrifugeApi.
 * @export
 * @interface CentrifugeApiGetTokenBroadcastV1Request
 */
export interface CentrifugeApiGetTokenBroadcastV1Request {
    /**
     * 
     * @type {number}
     * @memberof CentrifugeApiGetTokenBroadcastV1
     */
    readonly broadcastId: number

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof CentrifugeApiGetTokenBroadcastV1
     */
    readonly language: GetTokenBroadcastV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof CentrifugeApiGetTokenBroadcastV1
     */
    readonly projectId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof CentrifugeApiGetTokenBroadcastV1
     */
    readonly v?: GetTokenBroadcastV1VEnum
}

/**
 * CentrifugeApi - object-oriented interface
 * @export
 * @class CentrifugeApi
 * @extends {BaseAPI}
 */
export class CentrifugeApi extends BaseAPI implements CentrifugeApiInterface {
    /**
     * 
     * @summary Auth centrifuge
     * @param {CentrifugeApiCentrifugeAuthV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApi
     */
    public centrifugeAuthV2(requestParameters: CentrifugeApiCentrifugeAuthV2Request, options?: RawAxiosRequestConfig) {
        return CentrifugeApiFp(this.configuration).centrifugeAuthV2(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor     
     * @summary Auth token for project
     * @param {CentrifugeApiCentrifugeProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApi
     */
    public centrifugeProjectV1(requestParameters: CentrifugeApiCentrifugeProjectV1Request, options?: RawAxiosRequestConfig) {
        return CentrifugeApiFp(this.configuration).centrifugeProjectV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min     
     * @summary Auth token for broadcast
     * @param {CentrifugeApiGetTokenBroadcastV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApi
     */
    public getTokenBroadcastV1(requestParameters: CentrifugeApiGetTokenBroadcastV1Request, options?: RawAxiosRequestConfig) {
        return CentrifugeApiFp(this.configuration).getTokenBroadcastV1(requestParameters.broadcastId, requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CentrifugeProjectV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type CentrifugeProjectV1LanguageEnum = typeof CentrifugeProjectV1LanguageEnum[keyof typeof CentrifugeProjectV1LanguageEnum];
/**
 * @export
 */
export const CentrifugeProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type CentrifugeProjectV1VEnum = typeof CentrifugeProjectV1VEnum[keyof typeof CentrifugeProjectV1VEnum];
/**
 * @export
 */
export const GetTokenBroadcastV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type GetTokenBroadcastV1LanguageEnum = typeof GetTokenBroadcastV1LanguageEnum[keyof typeof GetTokenBroadcastV1LanguageEnum];
/**
 * @export
 */
export const GetTokenBroadcastV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type GetTokenBroadcastV1VEnum = typeof GetTokenBroadcastV1VEnum[keyof typeof GetTokenBroadcastV1VEnum];
