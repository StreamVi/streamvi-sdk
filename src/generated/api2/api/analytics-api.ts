/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
/**
 * AnalyticsApi - axios parameter creator
 * @export
 */
export const AnalyticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Bitrate for stream
         * @param {AnalyticsTsStreamBitrateV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} streamId stream id
         * @param {AnalyticsTsStreamBitrateV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsTsStreamBitrateV1: async (language: AnalyticsTsStreamBitrateV1LanguageEnum, projectId: number, streamId: number, v?: AnalyticsTsStreamBitrateV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('analyticsTsStreamBitrateV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('analyticsTsStreamBitrateV1', 'projectId', projectId)
            // verify required parameter 'streamId' is not null or undefined
            assertParamExists('analyticsTsStreamBitrateV1', 'streamId', streamId)
            const localVarPath = `/method/analytics/stream/graph/bitrate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (streamId !== undefined) {
                localVarQueryParameter['stream_id'] = streamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Events for stream
         * @param {AnalyticsTsStreamEventsV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} streamId stream id
         * @param {AnalyticsTsStreamEventsV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsTsStreamEventsV1: async (language: AnalyticsTsStreamEventsV1LanguageEnum, projectId: number, streamId: number, v?: AnalyticsTsStreamEventsV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('analyticsTsStreamEventsV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('analyticsTsStreamEventsV1', 'projectId', projectId)
            // verify required parameter 'streamId' is not null or undefined
            assertParamExists('analyticsTsStreamEventsV1', 'streamId', streamId)
            const localVarPath = `/method/analytics/stream/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (streamId !== undefined) {
                localVarQueryParameter['stream_id'] = streamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Viewers for stream
         * @param {AnalyticsTsStreamViewersV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} streamId stream id
         * @param {AnalyticsTsStreamViewersV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsTsStreamViewersV1: async (language: AnalyticsTsStreamViewersV1LanguageEnum, projectId: number, streamId: number, v?: AnalyticsTsStreamViewersV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('analyticsTsStreamViewersV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('analyticsTsStreamViewersV1', 'projectId', projectId)
            // verify required parameter 'streamId' is not null or undefined
            assertParamExists('analyticsTsStreamViewersV1', 'streamId', streamId)
            const localVarPath = `/method/analytics/stream/graph/viewers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (streamId !== undefined) {
                localVarQueryParameter['stream_id'] = streamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnalyticsApi - functional programming interface
 * @export
 */
export const AnalyticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnalyticsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Bitrate for stream
         * @param {AnalyticsTsStreamBitrateV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} streamId stream id
         * @param {AnalyticsTsStreamBitrateV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsTsStreamBitrateV1(language: AnalyticsTsStreamBitrateV1LanguageEnum, projectId: number, streamId: number, v?: AnalyticsTsStreamBitrateV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsTsStreamBitrateV1(language, projectId, streamId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsTsStreamBitrateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Events for stream
         * @param {AnalyticsTsStreamEventsV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} streamId stream id
         * @param {AnalyticsTsStreamEventsV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsTsStreamEventsV1(language: AnalyticsTsStreamEventsV1LanguageEnum, projectId: number, streamId: number, v?: AnalyticsTsStreamEventsV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsTsStreamEventsV1(language, projectId, streamId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsTsStreamEventsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Viewers for stream
         * @param {AnalyticsTsStreamViewersV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} streamId stream id
         * @param {AnalyticsTsStreamViewersV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsTsStreamViewersV1(language: AnalyticsTsStreamViewersV1LanguageEnum, projectId: number, streamId: number, v?: AnalyticsTsStreamViewersV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsTsStreamViewersV1(language, projectId, streamId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsTsStreamViewersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AnalyticsApi - factory interface
 * @export
 */
export const AnalyticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnalyticsApiFp(configuration)
    return {
        /**
         * 
         * @summary Bitrate for stream
         * @param {AnalyticsApiAnalyticsTsStreamBitrateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsTsStreamBitrateV1(requestParameters: AnalyticsApiAnalyticsTsStreamBitrateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.analyticsTsStreamBitrateV1(requestParameters.language, requestParameters.projectId, requestParameters.streamId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Events for stream
         * @param {AnalyticsApiAnalyticsTsStreamEventsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsTsStreamEventsV1(requestParameters: AnalyticsApiAnalyticsTsStreamEventsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.analyticsTsStreamEventsV1(requestParameters.language, requestParameters.projectId, requestParameters.streamId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Viewers for stream
         * @param {AnalyticsApiAnalyticsTsStreamViewersV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsTsStreamViewersV1(requestParameters: AnalyticsApiAnalyticsTsStreamViewersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.analyticsTsStreamViewersV1(requestParameters.language, requestParameters.projectId, requestParameters.streamId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnalyticsApi - interface
 * @export
 * @interface AnalyticsApi
 */
export interface AnalyticsApiInterface {
    /**
     * 
     * @summary Bitrate for stream
     * @param {AnalyticsApiAnalyticsTsStreamBitrateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsTsStreamBitrateV1(requestParameters: AnalyticsApiAnalyticsTsStreamBitrateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Events for stream
     * @param {AnalyticsApiAnalyticsTsStreamEventsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsTsStreamEventsV1(requestParameters: AnalyticsApiAnalyticsTsStreamEventsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary Viewers for stream
     * @param {AnalyticsApiAnalyticsTsStreamViewersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsTsStreamViewersV1(requestParameters: AnalyticsApiAnalyticsTsStreamViewersV1Request, options?: RawAxiosRequestConfig): AxiosPromise<object>;

}

/**
 * Request parameters for analyticsTsStreamBitrateV1 operation in AnalyticsApi.
 * @export
 * @interface AnalyticsApiAnalyticsTsStreamBitrateV1Request
 */
export interface AnalyticsApiAnalyticsTsStreamBitrateV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof AnalyticsApiAnalyticsTsStreamBitrateV1
     */
    readonly language: AnalyticsTsStreamBitrateV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof AnalyticsApiAnalyticsTsStreamBitrateV1
     */
    readonly projectId: number

    /**
     * stream id
     * @type {number}
     * @memberof AnalyticsApiAnalyticsTsStreamBitrateV1
     */
    readonly streamId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof AnalyticsApiAnalyticsTsStreamBitrateV1
     */
    readonly v?: AnalyticsTsStreamBitrateV1VEnum
}

/**
 * Request parameters for analyticsTsStreamEventsV1 operation in AnalyticsApi.
 * @export
 * @interface AnalyticsApiAnalyticsTsStreamEventsV1Request
 */
export interface AnalyticsApiAnalyticsTsStreamEventsV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof AnalyticsApiAnalyticsTsStreamEventsV1
     */
    readonly language: AnalyticsTsStreamEventsV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof AnalyticsApiAnalyticsTsStreamEventsV1
     */
    readonly projectId: number

    /**
     * stream id
     * @type {number}
     * @memberof AnalyticsApiAnalyticsTsStreamEventsV1
     */
    readonly streamId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof AnalyticsApiAnalyticsTsStreamEventsV1
     */
    readonly v?: AnalyticsTsStreamEventsV1VEnum
}

/**
 * Request parameters for analyticsTsStreamViewersV1 operation in AnalyticsApi.
 * @export
 * @interface AnalyticsApiAnalyticsTsStreamViewersV1Request
 */
export interface AnalyticsApiAnalyticsTsStreamViewersV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof AnalyticsApiAnalyticsTsStreamViewersV1
     */
    readonly language: AnalyticsTsStreamViewersV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof AnalyticsApiAnalyticsTsStreamViewersV1
     */
    readonly projectId: number

    /**
     * stream id
     * @type {number}
     * @memberof AnalyticsApiAnalyticsTsStreamViewersV1
     */
    readonly streamId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof AnalyticsApiAnalyticsTsStreamViewersV1
     */
    readonly v?: AnalyticsTsStreamViewersV1VEnum
}

/**
 * AnalyticsApi - object-oriented interface
 * @export
 * @class AnalyticsApi
 * @extends {BaseAPI}
 */
export class AnalyticsApi extends BaseAPI implements AnalyticsApiInterface {
    /**
     * 
     * @summary Bitrate for stream
     * @param {AnalyticsApiAnalyticsTsStreamBitrateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public analyticsTsStreamBitrateV1(requestParameters: AnalyticsApiAnalyticsTsStreamBitrateV1Request, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsTsStreamBitrateV1(requestParameters.language, requestParameters.projectId, requestParameters.streamId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Events for stream
     * @param {AnalyticsApiAnalyticsTsStreamEventsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public analyticsTsStreamEventsV1(requestParameters: AnalyticsApiAnalyticsTsStreamEventsV1Request, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsTsStreamEventsV1(requestParameters.language, requestParameters.projectId, requestParameters.streamId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Viewers for stream
     * @param {AnalyticsApiAnalyticsTsStreamViewersV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public analyticsTsStreamViewersV1(requestParameters: AnalyticsApiAnalyticsTsStreamViewersV1Request, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsTsStreamViewersV1(requestParameters.language, requestParameters.projectId, requestParameters.streamId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AnalyticsTsStreamBitrateV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type AnalyticsTsStreamBitrateV1LanguageEnum = typeof AnalyticsTsStreamBitrateV1LanguageEnum[keyof typeof AnalyticsTsStreamBitrateV1LanguageEnum];
/**
 * @export
 */
export const AnalyticsTsStreamBitrateV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AnalyticsTsStreamBitrateV1VEnum = typeof AnalyticsTsStreamBitrateV1VEnum[keyof typeof AnalyticsTsStreamBitrateV1VEnum];
/**
 * @export
 */
export const AnalyticsTsStreamEventsV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type AnalyticsTsStreamEventsV1LanguageEnum = typeof AnalyticsTsStreamEventsV1LanguageEnum[keyof typeof AnalyticsTsStreamEventsV1LanguageEnum];
/**
 * @export
 */
export const AnalyticsTsStreamEventsV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AnalyticsTsStreamEventsV1VEnum = typeof AnalyticsTsStreamEventsV1VEnum[keyof typeof AnalyticsTsStreamEventsV1VEnum];
/**
 * @export
 */
export const AnalyticsTsStreamViewersV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type AnalyticsTsStreamViewersV1LanguageEnum = typeof AnalyticsTsStreamViewersV1LanguageEnum[keyof typeof AnalyticsTsStreamViewersV1LanguageEnum];
/**
 * @export
 */
export const AnalyticsTsStreamViewersV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AnalyticsTsStreamViewersV1VEnum = typeof AnalyticsTsStreamViewersV1VEnum[keyof typeof AnalyticsTsStreamViewersV1VEnum];
