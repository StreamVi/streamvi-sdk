/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { GetVersionAppResponse } from '../models';
/**
 * ReleaseApi - axios parameter creator
 * @export
 */
export const ReleaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get current version app
         * @param {ReleaseAppCabinetV1LanguageEnum} language Current language
         * @param {ReleaseAppCabinetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {ReleaseAppCabinetV1AppEnum} [app] Apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releaseAppCabinetV1: async (language: ReleaseAppCabinetV1LanguageEnum, v?: ReleaseAppCabinetV1VEnum, app?: ReleaseAppCabinetV1AppEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('releaseAppCabinetV1', 'language', language)
            const localVarPath = `/method/release-app`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (app !== undefined) {
                localVarQueryParameter['app'] = app;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReleaseApi - functional programming interface
 * @export
 */
export const ReleaseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReleaseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get current version app
         * @param {ReleaseAppCabinetV1LanguageEnum} language Current language
         * @param {ReleaseAppCabinetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {ReleaseAppCabinetV1AppEnum} [app] Apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releaseAppCabinetV1(language: ReleaseAppCabinetV1LanguageEnum, v?: ReleaseAppCabinetV1VEnum, app?: ReleaseAppCabinetV1AppEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVersionAppResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releaseAppCabinetV1(language, v, app, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReleaseApi.releaseAppCabinetV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReleaseApi - factory interface
 * @export
 */
export const ReleaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReleaseApiFp(configuration)
    return {
        /**
         * 
         * @summary Get current version app
         * @param {ReleaseApiReleaseAppCabinetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releaseAppCabinetV1(requestParameters: ReleaseApiReleaseAppCabinetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetVersionAppResponse> {
            return localVarFp.releaseAppCabinetV1(requestParameters.language, requestParameters.v, requestParameters.app, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReleaseApi - interface
 * @export
 * @interface ReleaseApi
 */
export interface ReleaseApiInterface {
    /**
     * 
     * @summary Get current version app
     * @param {ReleaseApiReleaseAppCabinetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleaseApiInterface
     */
    releaseAppCabinetV1(requestParameters: ReleaseApiReleaseAppCabinetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetVersionAppResponse>;

}

/**
 * Request parameters for releaseAppCabinetV1 operation in ReleaseApi.
 * @export
 * @interface ReleaseApiReleaseAppCabinetV1Request
 */
export interface ReleaseApiReleaseAppCabinetV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ReleaseApiReleaseAppCabinetV1
     */
    readonly language: ReleaseAppCabinetV1LanguageEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ReleaseApiReleaseAppCabinetV1
     */
    readonly v?: ReleaseAppCabinetV1VEnum

    /**
     * Apps
     * @type {'cabinet'}
     * @memberof ReleaseApiReleaseAppCabinetV1
     */
    readonly app?: ReleaseAppCabinetV1AppEnum
}

/**
 * ReleaseApi - object-oriented interface
 * @export
 * @class ReleaseApi
 * @extends {BaseAPI}
 */
export class ReleaseApi extends BaseAPI implements ReleaseApiInterface {
    /**
     * 
     * @summary Get current version app
     * @param {ReleaseApiReleaseAppCabinetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleaseApi
     */
    public releaseAppCabinetV1(requestParameters: ReleaseApiReleaseAppCabinetV1Request, options?: RawAxiosRequestConfig) {
        return ReleaseApiFp(this.configuration).releaseAppCabinetV1(requestParameters.language, requestParameters.v, requestParameters.app, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ReleaseAppCabinetV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ReleaseAppCabinetV1LanguageEnum = typeof ReleaseAppCabinetV1LanguageEnum[keyof typeof ReleaseAppCabinetV1LanguageEnum];
/**
 * @export
 */
export const ReleaseAppCabinetV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ReleaseAppCabinetV1VEnum = typeof ReleaseAppCabinetV1VEnum[keyof typeof ReleaseAppCabinetV1VEnum];
/**
 * @export
 */
export const ReleaseAppCabinetV1AppEnum = {
    Cabinet: 'cabinet'
} as const;
export type ReleaseAppCabinetV1AppEnum = typeof ReleaseAppCabinetV1AppEnum[keyof typeof ReleaseAppCabinetV1AppEnum];
