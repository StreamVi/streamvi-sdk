/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { GetVersionAppResponse } from '../models';
/**
 * ReleaseApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get current version app
         * @param {cabinet1VEnum} v Version
         * @param {cabinet1LanguageEnum} language Current language
         * @param {cabinet1AppEnum} [app] Apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinet1: async (v: cabinet1VEnum, language: cabinet1LanguageEnum, app?: cabinet1AppEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('cabinet1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('cabinet1', 'language', language)
            const localVarPath = `/method/release-app`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (app !== undefined) {
                localVarQueryParameter['app'] = app;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReleaseApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get current version app
         * @param {cabinet1VEnum} v Version
         * @param {cabinet1LanguageEnum} language Current language
         * @param {cabinet1AppEnum} [app] Apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cabinet1(v: cabinet1VEnum, language: cabinet1LanguageEnum, app?: cabinet1AppEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVersionAppResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cabinet1(v, language, app, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReleaseApi.cabinet1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReleaseApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Get current version app
         * @param {cabinet1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinet1(requestParameters: cabinet1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetVersionAppResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: cabinet1VEnum = requestParameters.v || cabinet1VEnum._1;
            return localVarFp.cabinet1(actualV, requestParameters.language, requestParameters.app, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cabinet1 operation in ReleaseApi.
 * @export
 * @interface cabinet1Request
 */
export interface cabinet1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof cabinet1
     */
    readonly v?: cabinet1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof cabinet1
     */
    readonly language: cabinet1LanguageEnum

    /**
     * Apps
     * @type {'cabinet'}
     * @memberof cabinet1
     */
    readonly app?: cabinet1AppEnum
}

/**
 * ReleaseApi - object-oriented interface
 * @export
 * @class ReleaseApi
 * @extends {BaseAPI}
 */
export class ReleaseApi extends BaseAPI {
    /**
     * 
     * @summary Get current version app
     * @param {cabinet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleaseApi
     */
    public cabinet1(requestParameters: cabinet1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: cabinet1VEnum = requestParameters.v || cabinet1VEnum._1;
        return fp(this.configuration).cabinet1(actualV, requestParameters.language, requestParameters.app, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum cabinet1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum cabinet1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum cabinet1AppEnum {
    cabinet = 'cabinet'
}
