/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { ListOfProjectChannelInviteResponse } from '../models';
// @ts-ignore
import type { ProjectChannelInviteLinkResponse } from '../models';
// @ts-ignore
import type { ProjectChannelInviteResponse } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
/**
 * ProjectChannelInviteApi - axios parameter creator
 * @export
 */
export const ProjectChannelInviteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Accept channel invitation for selected project
         * @param {ProjectChannelInviteAcceptForProjectV1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteAcceptForProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteAcceptForProjectV1: async (language: ProjectChannelInviteAcceptForProjectV1LanguageEnum, projectId: number, channelId: number, v?: ProjectChannelInviteAcceptForProjectV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('projectChannelInviteAcceptForProjectV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectChannelInviteAcceptForProjectV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('projectChannelInviteAcceptForProjectV1', 'channelId', channelId)
            const localVarPath = `/method/channel_invite/accept_for_project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Accept channel invitation using a secret link
         * @param {ProjectChannelInviteAcceptForSecretV1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {ProjectChannelInviteAcceptForSecretV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteAcceptForSecretV1: async (language: ProjectChannelInviteAcceptForSecretV1LanguageEnum, projectId: number, channelId: number, secret: string, v?: ProjectChannelInviteAcceptForSecretV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('projectChannelInviteAcceptForSecretV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectChannelInviteAcceptForSecretV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('projectChannelInviteAcceptForSecretV1', 'channelId', channelId)
            // verify required parameter 'secret' is not null or undefined
            assertParamExists('projectChannelInviteAcceptForSecretV1', 'secret', secret)
            const localVarPath = `/method/channel_invite/accept_for_secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (secret !== undefined) {
                localVarQueryParameter['secret'] = secret;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add channel invite item for another user by email
         * @param {ProjectChannelInviteAddByEmailV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {string} email Email
         * @param {ProjectChannelInviteAddByEmailV1AccessTypeEnum} accessType Access type
         * @param {ProjectChannelInviteAddByEmailV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteAddByEmailV1: async (language: ProjectChannelInviteAddByEmailV1LanguageEnum, projectId: number, channelId: number, email: string, accessType: ProjectChannelInviteAddByEmailV1AccessTypeEnum, v?: ProjectChannelInviteAddByEmailV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('projectChannelInviteAddByEmailV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectChannelInviteAddByEmailV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('projectChannelInviteAddByEmailV1', 'channelId', channelId)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('projectChannelInviteAddByEmailV1', 'email', email)
            // verify required parameter 'accessType' is not null or undefined
            assertParamExists('projectChannelInviteAddByEmailV1', 'accessType', accessType)
            const localVarPath = `/method/channel_invite/add_by_email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (accessType !== undefined) {
                localVarQueryParameter['access_type'] = accessType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add channel invite item for another user by id
         * @param {ProjectChannelInviteAddByIdV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteAddByIdV1AccessTypeEnum} accessType Access type
         * @param {string} toProjectExternalId Project for get access by external id
         * @param {ProjectChannelInviteAddByIdV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteAddByIdV1: async (language: ProjectChannelInviteAddByIdV1LanguageEnum, projectId: number, channelId: number, accessType: ProjectChannelInviteAddByIdV1AccessTypeEnum, toProjectExternalId: string, v?: ProjectChannelInviteAddByIdV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('projectChannelInviteAddByIdV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectChannelInviteAddByIdV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('projectChannelInviteAddByIdV1', 'channelId', channelId)
            // verify required parameter 'accessType' is not null or undefined
            assertParamExists('projectChannelInviteAddByIdV1', 'accessType', accessType)
            // verify required parameter 'toProjectExternalId' is not null or undefined
            assertParamExists('projectChannelInviteAddByIdV1', 'toProjectExternalId', toProjectExternalId)
            const localVarPath = `/method/channel_invite/add_by_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (accessType !== undefined) {
                localVarQueryParameter['access_type'] = accessType;
            }

            if (toProjectExternalId !== undefined) {
                localVarQueryParameter['to_project_external_id'] = toProjectExternalId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Decline channel invitation for selected project
         * @param {ProjectChannelInviteDeclineForProjectV1LanguageEnum} language Current language
         * @param {number} projectId Channel id
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteDeclineForProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteDeclineForProjectV1: async (language: ProjectChannelInviteDeclineForProjectV1LanguageEnum, projectId: number, channelId: number, v?: ProjectChannelInviteDeclineForProjectV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('projectChannelInviteDeclineForProjectV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectChannelInviteDeclineForProjectV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('projectChannelInviteDeclineForProjectV1', 'channelId', channelId)
            const localVarPath = `/method/channel_invite/decline_for_project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Decline channel invitation using a secret link
         * @param {ProjectChannelInviteDeclineForSecretV1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {ProjectChannelInviteDeclineForSecretV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteDeclineForSecretV1: async (language: ProjectChannelInviteDeclineForSecretV1LanguageEnum, projectId: number, channelId: number, secret: string, v?: ProjectChannelInviteDeclineForSecretV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('projectChannelInviteDeclineForSecretV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectChannelInviteDeclineForSecretV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('projectChannelInviteDeclineForSecretV1', 'channelId', channelId)
            // verify required parameter 'secret' is not null or undefined
            assertParamExists('projectChannelInviteDeclineForSecretV1', 'secret', secret)
            const localVarPath = `/method/channel_invite/decline_for_secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (secret !== undefined) {
                localVarQueryParameter['secret'] = secret;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Del channel invite item for my channel for another user
         * @param {ProjectChannelInviteDelV1LanguageEnum} language Current language
         * @param {number} id Unique id
         * @param {ProjectChannelInviteDelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteDelV1: async (language: ProjectChannelInviteDelV1LanguageEnum, id: number, v?: ProjectChannelInviteDelV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('projectChannelInviteDelV1', 'language', language)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectChannelInviteDelV1', 'id', id)
            const localVarPath = `/method/channel_invite/del`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get invitation for channel
         * @param {ProjectChannelInviteGetForProjectV1LanguageEnum} language Current language
         * @param {number} projectId Current project id
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteGetForProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteGetForProjectV1: async (language: ProjectChannelInviteGetForProjectV1LanguageEnum, projectId: number, channelId: number, v?: ProjectChannelInviteGetForProjectV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('projectChannelInviteGetForProjectV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectChannelInviteGetForProjectV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('projectChannelInviteGetForProjectV1', 'channelId', channelId)
            const localVarPath = `/method/channel_invite/get_for_project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get channel invitation using a secret link
         * @param {ProjectChannelInviteGetForSecretV1LanguageEnum} language Current language
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {ProjectChannelInviteGetForSecretV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteGetForSecretV1: async (language: ProjectChannelInviteGetForSecretV1LanguageEnum, channelId: number, secret: string, v?: ProjectChannelInviteGetForSecretV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('projectChannelInviteGetForSecretV1', 'language', language)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('projectChannelInviteGetForSecretV1', 'channelId', channelId)
            // verify required parameter 'secret' is not null or undefined
            assertParamExists('projectChannelInviteGetForSecretV1', 'secret', secret)
            const localVarPath = `/method/channel_invite/get_for_secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (secret !== undefined) {
                localVarQueryParameter['secret'] = secret;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get channel invite item for my channel for another user
         * @param {ProjectChannelInviteGetV1LanguageEnum} language Current language
         * @param {number} id Channel request id
         * @param {ProjectChannelInviteGetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteGetV1: async (language: ProjectChannelInviteGetV1LanguageEnum, id: number, v?: ProjectChannelInviteGetV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('projectChannelInviteGetV1', 'language', language)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectChannelInviteGetV1', 'id', id)
            const localVarPath = `/method/channel_invite/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of invites for channel in project
         * @param {ProjectChannelInviteListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteListV1: async (language: ProjectChannelInviteListV1LanguageEnum, projectId: number, channelId: number, v?: ProjectChannelInviteListV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('projectChannelInviteListV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectChannelInviteListV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('projectChannelInviteListV1', 'channelId', channelId)
            const localVarPath = `/method/channel_invite/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectChannelInviteApi - functional programming interface
 * @export
 */
export const ProjectChannelInviteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectChannelInviteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Accept channel invitation for selected project
         * @param {ProjectChannelInviteAcceptForProjectV1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteAcceptForProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteAcceptForProjectV1(language: ProjectChannelInviteAcceptForProjectV1LanguageEnum, projectId: number, channelId: number, v?: ProjectChannelInviteAcceptForProjectV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteAcceptForProjectV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.projectChannelInviteAcceptForProjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Accept channel invitation using a secret link
         * @param {ProjectChannelInviteAcceptForSecretV1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {ProjectChannelInviteAcceptForSecretV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteAcceptForSecretV1(language: ProjectChannelInviteAcceptForSecretV1LanguageEnum, projectId: number, channelId: number, secret: string, v?: ProjectChannelInviteAcceptForSecretV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteAcceptForSecretV1(language, projectId, channelId, secret, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.projectChannelInviteAcceptForSecretV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add channel invite item for another user by email
         * @param {ProjectChannelInviteAddByEmailV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {string} email Email
         * @param {ProjectChannelInviteAddByEmailV1AccessTypeEnum} accessType Access type
         * @param {ProjectChannelInviteAddByEmailV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteAddByEmailV1(language: ProjectChannelInviteAddByEmailV1LanguageEnum, projectId: number, channelId: number, email: string, accessType: ProjectChannelInviteAddByEmailV1AccessTypeEnum, v?: ProjectChannelInviteAddByEmailV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectChannelInviteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteAddByEmailV1(language, projectId, channelId, email, accessType, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.projectChannelInviteAddByEmailV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add channel invite item for another user by id
         * @param {ProjectChannelInviteAddByIdV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteAddByIdV1AccessTypeEnum} accessType Access type
         * @param {string} toProjectExternalId Project for get access by external id
         * @param {ProjectChannelInviteAddByIdV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteAddByIdV1(language: ProjectChannelInviteAddByIdV1LanguageEnum, projectId: number, channelId: number, accessType: ProjectChannelInviteAddByIdV1AccessTypeEnum, toProjectExternalId: string, v?: ProjectChannelInviteAddByIdV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectChannelInviteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteAddByIdV1(language, projectId, channelId, accessType, toProjectExternalId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.projectChannelInviteAddByIdV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Decline channel invitation for selected project
         * @param {ProjectChannelInviteDeclineForProjectV1LanguageEnum} language Current language
         * @param {number} projectId Channel id
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteDeclineForProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteDeclineForProjectV1(language: ProjectChannelInviteDeclineForProjectV1LanguageEnum, projectId: number, channelId: number, v?: ProjectChannelInviteDeclineForProjectV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteDeclineForProjectV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.projectChannelInviteDeclineForProjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Decline channel invitation using a secret link
         * @param {ProjectChannelInviteDeclineForSecretV1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {ProjectChannelInviteDeclineForSecretV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteDeclineForSecretV1(language: ProjectChannelInviteDeclineForSecretV1LanguageEnum, projectId: number, channelId: number, secret: string, v?: ProjectChannelInviteDeclineForSecretV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteDeclineForSecretV1(language, projectId, channelId, secret, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.projectChannelInviteDeclineForSecretV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Del channel invite item for my channel for another user
         * @param {ProjectChannelInviteDelV1LanguageEnum} language Current language
         * @param {number} id Unique id
         * @param {ProjectChannelInviteDelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteDelV1(language: ProjectChannelInviteDelV1LanguageEnum, id: number, v?: ProjectChannelInviteDelV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteDelV1(language, id, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.projectChannelInviteDelV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get invitation for channel
         * @param {ProjectChannelInviteGetForProjectV1LanguageEnum} language Current language
         * @param {number} projectId Current project id
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteGetForProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteGetForProjectV1(language: ProjectChannelInviteGetForProjectV1LanguageEnum, projectId: number, channelId: number, v?: ProjectChannelInviteGetForProjectV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectChannelInviteLinkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteGetForProjectV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.projectChannelInviteGetForProjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get channel invitation using a secret link
         * @param {ProjectChannelInviteGetForSecretV1LanguageEnum} language Current language
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {ProjectChannelInviteGetForSecretV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteGetForSecretV1(language: ProjectChannelInviteGetForSecretV1LanguageEnum, channelId: number, secret: string, v?: ProjectChannelInviteGetForSecretV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectChannelInviteLinkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteGetForSecretV1(language, channelId, secret, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.projectChannelInviteGetForSecretV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get channel invite item for my channel for another user
         * @param {ProjectChannelInviteGetV1LanguageEnum} language Current language
         * @param {number} id Channel request id
         * @param {ProjectChannelInviteGetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteGetV1(language: ProjectChannelInviteGetV1LanguageEnum, id: number, v?: ProjectChannelInviteGetV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteGetV1(language, id, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.projectChannelInviteGetV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List of invites for channel in project
         * @param {ProjectChannelInviteListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteListV1(language: ProjectChannelInviteListV1LanguageEnum, projectId: number, channelId: number, v?: ProjectChannelInviteListV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfProjectChannelInviteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteListV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.projectChannelInviteListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectChannelInviteApi - factory interface
 * @export
 */
export const ProjectChannelInviteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectChannelInviteApiFp(configuration)
    return {
        /**
         * 
         * @summary Accept channel invitation for selected project
         * @param {ProjectChannelInviteApiProjectChannelInviteAcceptForProjectV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteAcceptForProjectV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteAcceptForProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.projectChannelInviteAcceptForProjectV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Accept channel invitation using a secret link
         * @param {ProjectChannelInviteApiProjectChannelInviteAcceptForSecretV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteAcceptForSecretV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteAcceptForSecretV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.projectChannelInviteAcceptForSecretV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.secret, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add channel invite item for another user by email
         * @param {ProjectChannelInviteApiProjectChannelInviteAddByEmailV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteAddByEmailV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteAddByEmailV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectChannelInviteResponse> {
            return localVarFp.projectChannelInviteAddByEmailV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.email, requestParameters.accessType, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add channel invite item for another user by id
         * @param {ProjectChannelInviteApiProjectChannelInviteAddByIdV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteAddByIdV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteAddByIdV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectChannelInviteResponse> {
            return localVarFp.projectChannelInviteAddByIdV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.accessType, requestParameters.toProjectExternalId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Decline channel invitation for selected project
         * @param {ProjectChannelInviteApiProjectChannelInviteDeclineForProjectV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteDeclineForProjectV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteDeclineForProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.projectChannelInviteDeclineForProjectV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Decline channel invitation using a secret link
         * @param {ProjectChannelInviteApiProjectChannelInviteDeclineForSecretV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteDeclineForSecretV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteDeclineForSecretV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.projectChannelInviteDeclineForSecretV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.secret, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Del channel invite item for my channel for another user
         * @param {ProjectChannelInviteApiProjectChannelInviteDelV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteDelV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteDelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.projectChannelInviteDelV1(requestParameters.language, requestParameters.id, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get invitation for channel
         * @param {ProjectChannelInviteApiProjectChannelInviteGetForProjectV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteGetForProjectV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteGetForProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectChannelInviteLinkResponse> {
            return localVarFp.projectChannelInviteGetForProjectV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get channel invitation using a secret link
         * @param {ProjectChannelInviteApiProjectChannelInviteGetForSecretV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteGetForSecretV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteGetForSecretV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectChannelInviteLinkResponse> {
            return localVarFp.projectChannelInviteGetForSecretV1(requestParameters.language, requestParameters.channelId, requestParameters.secret, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get channel invite item for my channel for another user
         * @param {ProjectChannelInviteApiProjectChannelInviteGetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteGetV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteGetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.projectChannelInviteGetV1(requestParameters.language, requestParameters.id, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List of invites for channel in project
         * @param {ProjectChannelInviteApiProjectChannelInviteListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteListV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfProjectChannelInviteResponse> {
            return localVarFp.projectChannelInviteListV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectChannelInviteApi - interface
 * @export
 * @interface ProjectChannelInviteApi
 */
export interface ProjectChannelInviteApiInterface {
    /**
     * 
     * @summary Accept channel invitation for selected project
     * @param {ProjectChannelInviteApiProjectChannelInviteAcceptForProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteAcceptForProjectV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteAcceptForProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Accept channel invitation using a secret link
     * @param {ProjectChannelInviteApiProjectChannelInviteAcceptForSecretV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteAcceptForSecretV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteAcceptForSecretV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Add channel invite item for another user by email
     * @param {ProjectChannelInviteApiProjectChannelInviteAddByEmailV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteAddByEmailV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteAddByEmailV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectChannelInviteResponse>;

    /**
     * 
     * @summary Add channel invite item for another user by id
     * @param {ProjectChannelInviteApiProjectChannelInviteAddByIdV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteAddByIdV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteAddByIdV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectChannelInviteResponse>;

    /**
     * 
     * @summary Decline channel invitation for selected project
     * @param {ProjectChannelInviteApiProjectChannelInviteDeclineForProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteDeclineForProjectV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteDeclineForProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Decline channel invitation using a secret link
     * @param {ProjectChannelInviteApiProjectChannelInviteDeclineForSecretV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteDeclineForSecretV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteDeclineForSecretV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Del channel invite item for my channel for another user
     * @param {ProjectChannelInviteApiProjectChannelInviteDelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteDelV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteDelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Get invitation for channel
     * @param {ProjectChannelInviteApiProjectChannelInviteGetForProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteGetForProjectV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteGetForProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectChannelInviteLinkResponse>;

    /**
     * 
     * @summary Get channel invitation using a secret link
     * @param {ProjectChannelInviteApiProjectChannelInviteGetForSecretV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteGetForSecretV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteGetForSecretV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectChannelInviteLinkResponse>;

    /**
     * 
     * @summary Get channel invite item for my channel for another user
     * @param {ProjectChannelInviteApiProjectChannelInviteGetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteGetV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteGetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary List of invites for channel in project
     * @param {ProjectChannelInviteApiProjectChannelInviteListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApiInterface
     */
    projectChannelInviteListV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfProjectChannelInviteResponse>;

}

/**
 * Request parameters for projectChannelInviteAcceptForProjectV1 operation in ProjectChannelInviteApi.
 * @export
 * @interface ProjectChannelInviteApiProjectChannelInviteAcceptForProjectV1Request
 */
export interface ProjectChannelInviteApiProjectChannelInviteAcceptForProjectV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAcceptForProjectV1
     */
    readonly language: ProjectChannelInviteAcceptForProjectV1LanguageEnum

    /**
     * The project to which you want to add a channel
     * @type {number}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAcceptForProjectV1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAcceptForProjectV1
     */
    readonly channelId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAcceptForProjectV1
     */
    readonly v?: ProjectChannelInviteAcceptForProjectV1VEnum
}

/**
 * Request parameters for projectChannelInviteAcceptForSecretV1 operation in ProjectChannelInviteApi.
 * @export
 * @interface ProjectChannelInviteApiProjectChannelInviteAcceptForSecretV1Request
 */
export interface ProjectChannelInviteApiProjectChannelInviteAcceptForSecretV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAcceptForSecretV1
     */
    readonly language: ProjectChannelInviteAcceptForSecretV1LanguageEnum

    /**
     * The project to which you want to add a channel
     * @type {number}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAcceptForSecretV1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAcceptForSecretV1
     */
    readonly channelId: number

    /**
     * Secret
     * @type {string}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAcceptForSecretV1
     */
    readonly secret: string

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAcceptForSecretV1
     */
    readonly v?: ProjectChannelInviteAcceptForSecretV1VEnum
}

/**
 * Request parameters for projectChannelInviteAddByEmailV1 operation in ProjectChannelInviteApi.
 * @export
 * @interface ProjectChannelInviteApiProjectChannelInviteAddByEmailV1Request
 */
export interface ProjectChannelInviteApiProjectChannelInviteAddByEmailV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAddByEmailV1
     */
    readonly language: ProjectChannelInviteAddByEmailV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAddByEmailV1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAddByEmailV1
     */
    readonly channelId: number

    /**
     * Email
     * @type {string}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAddByEmailV1
     */
    readonly email: string

    /**
     * Access type
     * @type {0 | 1 | 1 | 2}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAddByEmailV1
     */
    readonly accessType: ProjectChannelInviteAddByEmailV1AccessTypeEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAddByEmailV1
     */
    readonly v?: ProjectChannelInviteAddByEmailV1VEnum
}

/**
 * Request parameters for projectChannelInviteAddByIdV1 operation in ProjectChannelInviteApi.
 * @export
 * @interface ProjectChannelInviteApiProjectChannelInviteAddByIdV1Request
 */
export interface ProjectChannelInviteApiProjectChannelInviteAddByIdV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAddByIdV1
     */
    readonly language: ProjectChannelInviteAddByIdV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAddByIdV1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAddByIdV1
     */
    readonly channelId: number

    /**
     * Access type
     * @type {0 | 1 | 1 | 2}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAddByIdV1
     */
    readonly accessType: ProjectChannelInviteAddByIdV1AccessTypeEnum

    /**
     * Project for get access by external id
     * @type {string}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAddByIdV1
     */
    readonly toProjectExternalId: string

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteAddByIdV1
     */
    readonly v?: ProjectChannelInviteAddByIdV1VEnum
}

/**
 * Request parameters for projectChannelInviteDeclineForProjectV1 operation in ProjectChannelInviteApi.
 * @export
 * @interface ProjectChannelInviteApiProjectChannelInviteDeclineForProjectV1Request
 */
export interface ProjectChannelInviteApiProjectChannelInviteDeclineForProjectV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteDeclineForProjectV1
     */
    readonly language: ProjectChannelInviteDeclineForProjectV1LanguageEnum

    /**
     * Channel id
     * @type {number}
     * @memberof ProjectChannelInviteApiProjectChannelInviteDeclineForProjectV1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof ProjectChannelInviteApiProjectChannelInviteDeclineForProjectV1
     */
    readonly channelId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteDeclineForProjectV1
     */
    readonly v?: ProjectChannelInviteDeclineForProjectV1VEnum
}

/**
 * Request parameters for projectChannelInviteDeclineForSecretV1 operation in ProjectChannelInviteApi.
 * @export
 * @interface ProjectChannelInviteApiProjectChannelInviteDeclineForSecretV1Request
 */
export interface ProjectChannelInviteApiProjectChannelInviteDeclineForSecretV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteDeclineForSecretV1
     */
    readonly language: ProjectChannelInviteDeclineForSecretV1LanguageEnum

    /**
     * The project to which you want to add a channel
     * @type {number}
     * @memberof ProjectChannelInviteApiProjectChannelInviteDeclineForSecretV1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof ProjectChannelInviteApiProjectChannelInviteDeclineForSecretV1
     */
    readonly channelId: number

    /**
     * Secret
     * @type {string}
     * @memberof ProjectChannelInviteApiProjectChannelInviteDeclineForSecretV1
     */
    readonly secret: string

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteDeclineForSecretV1
     */
    readonly v?: ProjectChannelInviteDeclineForSecretV1VEnum
}

/**
 * Request parameters for projectChannelInviteDelV1 operation in ProjectChannelInviteApi.
 * @export
 * @interface ProjectChannelInviteApiProjectChannelInviteDelV1Request
 */
export interface ProjectChannelInviteApiProjectChannelInviteDelV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteDelV1
     */
    readonly language: ProjectChannelInviteDelV1LanguageEnum

    /**
     * Unique id
     * @type {number}
     * @memberof ProjectChannelInviteApiProjectChannelInviteDelV1
     */
    readonly id: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteDelV1
     */
    readonly v?: ProjectChannelInviteDelV1VEnum
}

/**
 * Request parameters for projectChannelInviteGetForProjectV1 operation in ProjectChannelInviteApi.
 * @export
 * @interface ProjectChannelInviteApiProjectChannelInviteGetForProjectV1Request
 */
export interface ProjectChannelInviteApiProjectChannelInviteGetForProjectV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteGetForProjectV1
     */
    readonly language: ProjectChannelInviteGetForProjectV1LanguageEnum

    /**
     * Current project id
     * @type {number}
     * @memberof ProjectChannelInviteApiProjectChannelInviteGetForProjectV1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof ProjectChannelInviteApiProjectChannelInviteGetForProjectV1
     */
    readonly channelId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteGetForProjectV1
     */
    readonly v?: ProjectChannelInviteGetForProjectV1VEnum
}

/**
 * Request parameters for projectChannelInviteGetForSecretV1 operation in ProjectChannelInviteApi.
 * @export
 * @interface ProjectChannelInviteApiProjectChannelInviteGetForSecretV1Request
 */
export interface ProjectChannelInviteApiProjectChannelInviteGetForSecretV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteGetForSecretV1
     */
    readonly language: ProjectChannelInviteGetForSecretV1LanguageEnum

    /**
     * Channel id
     * @type {number}
     * @memberof ProjectChannelInviteApiProjectChannelInviteGetForSecretV1
     */
    readonly channelId: number

    /**
     * Secret
     * @type {string}
     * @memberof ProjectChannelInviteApiProjectChannelInviteGetForSecretV1
     */
    readonly secret: string

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteGetForSecretV1
     */
    readonly v?: ProjectChannelInviteGetForSecretV1VEnum
}

/**
 * Request parameters for projectChannelInviteGetV1 operation in ProjectChannelInviteApi.
 * @export
 * @interface ProjectChannelInviteApiProjectChannelInviteGetV1Request
 */
export interface ProjectChannelInviteApiProjectChannelInviteGetV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteGetV1
     */
    readonly language: ProjectChannelInviteGetV1LanguageEnum

    /**
     * Channel request id
     * @type {number}
     * @memberof ProjectChannelInviteApiProjectChannelInviteGetV1
     */
    readonly id: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteGetV1
     */
    readonly v?: ProjectChannelInviteGetV1VEnum
}

/**
 * Request parameters for projectChannelInviteListV1 operation in ProjectChannelInviteApi.
 * @export
 * @interface ProjectChannelInviteApiProjectChannelInviteListV1Request
 */
export interface ProjectChannelInviteApiProjectChannelInviteListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteListV1
     */
    readonly language: ProjectChannelInviteListV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof ProjectChannelInviteApiProjectChannelInviteListV1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof ProjectChannelInviteApiProjectChannelInviteListV1
     */
    readonly channelId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ProjectChannelInviteApiProjectChannelInviteListV1
     */
    readonly v?: ProjectChannelInviteListV1VEnum
}

/**
 * ProjectChannelInviteApi - object-oriented interface
 * @export
 * @class ProjectChannelInviteApi
 * @extends {BaseAPI}
 */
export class ProjectChannelInviteApi extends BaseAPI implements ProjectChannelInviteApiInterface {
    /**
     * 
     * @summary Accept channel invitation for selected project
     * @param {ProjectChannelInviteApiProjectChannelInviteAcceptForProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public projectChannelInviteAcceptForProjectV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteAcceptForProjectV1Request, options?: RawAxiosRequestConfig) {
        return ProjectChannelInviteApiFp(this.configuration).projectChannelInviteAcceptForProjectV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Accept channel invitation using a secret link
     * @param {ProjectChannelInviteApiProjectChannelInviteAcceptForSecretV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public projectChannelInviteAcceptForSecretV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteAcceptForSecretV1Request, options?: RawAxiosRequestConfig) {
        return ProjectChannelInviteApiFp(this.configuration).projectChannelInviteAcceptForSecretV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.secret, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add channel invite item for another user by email
     * @param {ProjectChannelInviteApiProjectChannelInviteAddByEmailV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public projectChannelInviteAddByEmailV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteAddByEmailV1Request, options?: RawAxiosRequestConfig) {
        return ProjectChannelInviteApiFp(this.configuration).projectChannelInviteAddByEmailV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.email, requestParameters.accessType, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add channel invite item for another user by id
     * @param {ProjectChannelInviteApiProjectChannelInviteAddByIdV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public projectChannelInviteAddByIdV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteAddByIdV1Request, options?: RawAxiosRequestConfig) {
        return ProjectChannelInviteApiFp(this.configuration).projectChannelInviteAddByIdV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.accessType, requestParameters.toProjectExternalId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Decline channel invitation for selected project
     * @param {ProjectChannelInviteApiProjectChannelInviteDeclineForProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public projectChannelInviteDeclineForProjectV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteDeclineForProjectV1Request, options?: RawAxiosRequestConfig) {
        return ProjectChannelInviteApiFp(this.configuration).projectChannelInviteDeclineForProjectV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Decline channel invitation using a secret link
     * @param {ProjectChannelInviteApiProjectChannelInviteDeclineForSecretV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public projectChannelInviteDeclineForSecretV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteDeclineForSecretV1Request, options?: RawAxiosRequestConfig) {
        return ProjectChannelInviteApiFp(this.configuration).projectChannelInviteDeclineForSecretV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.secret, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Del channel invite item for my channel for another user
     * @param {ProjectChannelInviteApiProjectChannelInviteDelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public projectChannelInviteDelV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteDelV1Request, options?: RawAxiosRequestConfig) {
        return ProjectChannelInviteApiFp(this.configuration).projectChannelInviteDelV1(requestParameters.language, requestParameters.id, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get invitation for channel
     * @param {ProjectChannelInviteApiProjectChannelInviteGetForProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public projectChannelInviteGetForProjectV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteGetForProjectV1Request, options?: RawAxiosRequestConfig) {
        return ProjectChannelInviteApiFp(this.configuration).projectChannelInviteGetForProjectV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get channel invitation using a secret link
     * @param {ProjectChannelInviteApiProjectChannelInviteGetForSecretV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public projectChannelInviteGetForSecretV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteGetForSecretV1Request, options?: RawAxiosRequestConfig) {
        return ProjectChannelInviteApiFp(this.configuration).projectChannelInviteGetForSecretV1(requestParameters.language, requestParameters.channelId, requestParameters.secret, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get channel invite item for my channel for another user
     * @param {ProjectChannelInviteApiProjectChannelInviteGetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public projectChannelInviteGetV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteGetV1Request, options?: RawAxiosRequestConfig) {
        return ProjectChannelInviteApiFp(this.configuration).projectChannelInviteGetV1(requestParameters.language, requestParameters.id, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List of invites for channel in project
     * @param {ProjectChannelInviteApiProjectChannelInviteListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public projectChannelInviteListV1(requestParameters: ProjectChannelInviteApiProjectChannelInviteListV1Request, options?: RawAxiosRequestConfig) {
        return ProjectChannelInviteApiFp(this.configuration).projectChannelInviteListV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ProjectChannelInviteAcceptForProjectV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ProjectChannelInviteAcceptForProjectV1LanguageEnum = typeof ProjectChannelInviteAcceptForProjectV1LanguageEnum[keyof typeof ProjectChannelInviteAcceptForProjectV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteAcceptForProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteAcceptForProjectV1VEnum = typeof ProjectChannelInviteAcceptForProjectV1VEnum[keyof typeof ProjectChannelInviteAcceptForProjectV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteAcceptForSecretV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ProjectChannelInviteAcceptForSecretV1LanguageEnum = typeof ProjectChannelInviteAcceptForSecretV1LanguageEnum[keyof typeof ProjectChannelInviteAcceptForSecretV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteAcceptForSecretV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteAcceptForSecretV1VEnum = typeof ProjectChannelInviteAcceptForSecretV1VEnum[keyof typeof ProjectChannelInviteAcceptForSecretV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteAddByEmailV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ProjectChannelInviteAddByEmailV1LanguageEnum = typeof ProjectChannelInviteAddByEmailV1LanguageEnum[keyof typeof ProjectChannelInviteAddByEmailV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteAddByEmailV1AccessTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_12: 1,
    NUMBER_2: 2
} as const;
export type ProjectChannelInviteAddByEmailV1AccessTypeEnum = typeof ProjectChannelInviteAddByEmailV1AccessTypeEnum[keyof typeof ProjectChannelInviteAddByEmailV1AccessTypeEnum];
/**
 * @export
 */
export const ProjectChannelInviteAddByEmailV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteAddByEmailV1VEnum = typeof ProjectChannelInviteAddByEmailV1VEnum[keyof typeof ProjectChannelInviteAddByEmailV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteAddByIdV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ProjectChannelInviteAddByIdV1LanguageEnum = typeof ProjectChannelInviteAddByIdV1LanguageEnum[keyof typeof ProjectChannelInviteAddByIdV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteAddByIdV1AccessTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_12: 1,
    NUMBER_2: 2
} as const;
export type ProjectChannelInviteAddByIdV1AccessTypeEnum = typeof ProjectChannelInviteAddByIdV1AccessTypeEnum[keyof typeof ProjectChannelInviteAddByIdV1AccessTypeEnum];
/**
 * @export
 */
export const ProjectChannelInviteAddByIdV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteAddByIdV1VEnum = typeof ProjectChannelInviteAddByIdV1VEnum[keyof typeof ProjectChannelInviteAddByIdV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteDeclineForProjectV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ProjectChannelInviteDeclineForProjectV1LanguageEnum = typeof ProjectChannelInviteDeclineForProjectV1LanguageEnum[keyof typeof ProjectChannelInviteDeclineForProjectV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteDeclineForProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteDeclineForProjectV1VEnum = typeof ProjectChannelInviteDeclineForProjectV1VEnum[keyof typeof ProjectChannelInviteDeclineForProjectV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteDeclineForSecretV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ProjectChannelInviteDeclineForSecretV1LanguageEnum = typeof ProjectChannelInviteDeclineForSecretV1LanguageEnum[keyof typeof ProjectChannelInviteDeclineForSecretV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteDeclineForSecretV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteDeclineForSecretV1VEnum = typeof ProjectChannelInviteDeclineForSecretV1VEnum[keyof typeof ProjectChannelInviteDeclineForSecretV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteDelV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ProjectChannelInviteDelV1LanguageEnum = typeof ProjectChannelInviteDelV1LanguageEnum[keyof typeof ProjectChannelInviteDelV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteDelV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteDelV1VEnum = typeof ProjectChannelInviteDelV1VEnum[keyof typeof ProjectChannelInviteDelV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteGetForProjectV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ProjectChannelInviteGetForProjectV1LanguageEnum = typeof ProjectChannelInviteGetForProjectV1LanguageEnum[keyof typeof ProjectChannelInviteGetForProjectV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteGetForProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteGetForProjectV1VEnum = typeof ProjectChannelInviteGetForProjectV1VEnum[keyof typeof ProjectChannelInviteGetForProjectV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteGetForSecretV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ProjectChannelInviteGetForSecretV1LanguageEnum = typeof ProjectChannelInviteGetForSecretV1LanguageEnum[keyof typeof ProjectChannelInviteGetForSecretV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteGetForSecretV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteGetForSecretV1VEnum = typeof ProjectChannelInviteGetForSecretV1VEnum[keyof typeof ProjectChannelInviteGetForSecretV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteGetV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ProjectChannelInviteGetV1LanguageEnum = typeof ProjectChannelInviteGetV1LanguageEnum[keyof typeof ProjectChannelInviteGetV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteGetV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteGetV1VEnum = typeof ProjectChannelInviteGetV1VEnum[keyof typeof ProjectChannelInviteGetV1VEnum];
/**
 * @export
 */
export const ProjectChannelInviteListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ProjectChannelInviteListV1LanguageEnum = typeof ProjectChannelInviteListV1LanguageEnum[keyof typeof ProjectChannelInviteListV1LanguageEnum];
/**
 * @export
 */
export const ProjectChannelInviteListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ProjectChannelInviteListV1VEnum = typeof ProjectChannelInviteListV1VEnum[keyof typeof ProjectChannelInviteListV1VEnum];
