/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { ListOfProjectChannelInviteResponse } from '../models';
// @ts-ignore
import type { ProjectChannelInviteLinkResponse } from '../models';
// @ts-ignore
import type { ProjectChannelInviteResponse } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
/**
 * ProjectChannelInviteApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Accept channel invitation for selected project
         * @param {acceptForProject1VEnum} v Version
         * @param {acceptForProject1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptForProject1: async (v: acceptForProject1VEnum, language: acceptForProject1LanguageEnum, projectId: number, channelId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('acceptForProject1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('acceptForProject1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('acceptForProject1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('acceptForProject1', 'channelId', channelId)
            const localVarPath = `/method/channel_invite/accept_for_project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Accept channel invitation using a secret link
         * @param {acceptForSecret1VEnum} v Version
         * @param {acceptForSecret1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptForSecret1: async (v: acceptForSecret1VEnum, language: acceptForSecret1LanguageEnum, projectId: number, channelId: number, secret: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('acceptForSecret1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('acceptForSecret1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('acceptForSecret1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('acceptForSecret1', 'channelId', channelId)
            // verify required parameter 'secret' is not null or undefined
            assertParamExists('acceptForSecret1', 'secret', secret)
            const localVarPath = `/method/channel_invite/accept_for_secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (secret !== undefined) {
                localVarQueryParameter['secret'] = secret;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add channel invite item for another user by email
         * @param {addByEmail1VEnum} v Version
         * @param {addByEmail1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {string} email Email
         * @param {addByEmail1AccessTypeEnum} accessType Access type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addByEmail1: async (v: addByEmail1VEnum, language: addByEmail1LanguageEnum, projectId: number, channelId: number, email: string, accessType: addByEmail1AccessTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('addByEmail1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('addByEmail1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('addByEmail1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('addByEmail1', 'channelId', channelId)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('addByEmail1', 'email', email)
            // verify required parameter 'accessType' is not null or undefined
            assertParamExists('addByEmail1', 'accessType', accessType)
            const localVarPath = `/method/channel_invite/add_by_email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (accessType !== undefined) {
                localVarQueryParameter['access_type'] = accessType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add channel invite item for another user by id
         * @param {addById1VEnum} v Version
         * @param {addById1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {addById1AccessTypeEnum} accessType Access type
         * @param {string} toProjectExternalId Project for get access by external id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addById1: async (v: addById1VEnum, language: addById1LanguageEnum, projectId: number, channelId: number, accessType: addById1AccessTypeEnum, toProjectExternalId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('addById1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('addById1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('addById1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('addById1', 'channelId', channelId)
            // verify required parameter 'accessType' is not null or undefined
            assertParamExists('addById1', 'accessType', accessType)
            // verify required parameter 'toProjectExternalId' is not null or undefined
            assertParamExists('addById1', 'toProjectExternalId', toProjectExternalId)
            const localVarPath = `/method/channel_invite/add_by_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (accessType !== undefined) {
                localVarQueryParameter['access_type'] = accessType;
            }

            if (toProjectExternalId !== undefined) {
                localVarQueryParameter['to_project_external_id'] = toProjectExternalId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Decline channel invitation for selected project
         * @param {declineForProject1VEnum} v Version
         * @param {declineForProject1LanguageEnum} language Current language
         * @param {number} projectId Channel id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineForProject1: async (v: declineForProject1VEnum, language: declineForProject1LanguageEnum, projectId: number, channelId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('declineForProject1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('declineForProject1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('declineForProject1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('declineForProject1', 'channelId', channelId)
            const localVarPath = `/method/channel_invite/decline_for_project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Decline channel invitation using a secret link
         * @param {declineForSecret1VEnum} v Version
         * @param {declineForSecret1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineForSecret1: async (v: declineForSecret1VEnum, language: declineForSecret1LanguageEnum, projectId: number, channelId: number, secret: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('declineForSecret1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('declineForSecret1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('declineForSecret1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('declineForSecret1', 'channelId', channelId)
            // verify required parameter 'secret' is not null or undefined
            assertParamExists('declineForSecret1', 'secret', secret)
            const localVarPath = `/method/channel_invite/decline_for_secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (secret !== undefined) {
                localVarQueryParameter['secret'] = secret;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Del channel invite item for my channel for another user
         * @param {del1VEnum} v Version
         * @param {del1LanguageEnum} language Current language
         * @param {number} id Unique id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        del1: async (v: del1VEnum, language: del1LanguageEnum, id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('del1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('del1', 'language', language)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('del1', 'id', id)
            const localVarPath = `/method/channel_invite/del`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get channel invite item for my channel for another user
         * @param {get1VEnum} v Version
         * @param {get1LanguageEnum} language Current language
         * @param {number} id Channel request id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get1: async (v: get1VEnum, language: get1LanguageEnum, id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('get1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('get1', 'language', language)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get1', 'id', id)
            const localVarPath = `/method/channel_invite/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get invitation for channel
         * @param {getForProject1VEnum} v Version
         * @param {getForProject1LanguageEnum} language Current language
         * @param {number} projectId Current project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForProject1: async (v: getForProject1VEnum, language: getForProject1LanguageEnum, projectId: number, channelId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('getForProject1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getForProject1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getForProject1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('getForProject1', 'channelId', channelId)
            const localVarPath = `/method/channel_invite/get_for_project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get channel invitation using a secret link
         * @param {getForSecret1VEnum} v Version
         * @param {getForSecret1LanguageEnum} language Current language
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForSecret1: async (v: getForSecret1VEnum, language: getForSecret1LanguageEnum, channelId: number, secret: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('getForSecret1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getForSecret1', 'language', language)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('getForSecret1', 'channelId', channelId)
            // verify required parameter 'secret' is not null or undefined
            assertParamExists('getForSecret1', 'secret', secret)
            const localVarPath = `/method/channel_invite/get_for_secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (secret !== undefined) {
                localVarQueryParameter['secret'] = secret;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of invites for channel in project
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1: async (v: list1VEnum, language: list1LanguageEnum, projectId: number, channelId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('list1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('list1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('list1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('list1', 'channelId', channelId)
            const localVarPath = `/method/channel_invite/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectChannelInviteApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Accept channel invitation for selected project
         * @param {acceptForProject1VEnum} v Version
         * @param {acceptForProject1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptForProject1(v: acceptForProject1VEnum, language: acceptForProject1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptForProject1(v, language, projectId, channelId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.acceptForProject1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Accept channel invitation using a secret link
         * @param {acceptForSecret1VEnum} v Version
         * @param {acceptForSecret1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptForSecret1(v: acceptForSecret1VEnum, language: acceptForSecret1LanguageEnum, projectId: number, channelId: number, secret: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptForSecret1(v, language, projectId, channelId, secret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.acceptForSecret1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add channel invite item for another user by email
         * @param {addByEmail1VEnum} v Version
         * @param {addByEmail1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {string} email Email
         * @param {addByEmail1AccessTypeEnum} accessType Access type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addByEmail1(v: addByEmail1VEnum, language: addByEmail1LanguageEnum, projectId: number, channelId: number, email: string, accessType: addByEmail1AccessTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectChannelInviteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addByEmail1(v, language, projectId, channelId, email, accessType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.addByEmail1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add channel invite item for another user by id
         * @param {addById1VEnum} v Version
         * @param {addById1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {addById1AccessTypeEnum} accessType Access type
         * @param {string} toProjectExternalId Project for get access by external id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addById1(v: addById1VEnum, language: addById1LanguageEnum, projectId: number, channelId: number, accessType: addById1AccessTypeEnum, toProjectExternalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectChannelInviteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addById1(v, language, projectId, channelId, accessType, toProjectExternalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.addById1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Decline channel invitation for selected project
         * @param {declineForProject1VEnum} v Version
         * @param {declineForProject1LanguageEnum} language Current language
         * @param {number} projectId Channel id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async declineForProject1(v: declineForProject1VEnum, language: declineForProject1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.declineForProject1(v, language, projectId, channelId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.declineForProject1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Decline channel invitation using a secret link
         * @param {declineForSecret1VEnum} v Version
         * @param {declineForSecret1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async declineForSecret1(v: declineForSecret1VEnum, language: declineForSecret1LanguageEnum, projectId: number, channelId: number, secret: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.declineForSecret1(v, language, projectId, channelId, secret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.declineForSecret1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Del channel invite item for my channel for another user
         * @param {del1VEnum} v Version
         * @param {del1LanguageEnum} language Current language
         * @param {number} id Unique id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async del1(v: del1VEnum, language: del1LanguageEnum, id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.del1(v, language, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.del1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get channel invite item for my channel for another user
         * @param {get1VEnum} v Version
         * @param {get1LanguageEnum} language Current language
         * @param {number} id Channel request id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get1(v: get1VEnum, language: get1LanguageEnum, id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get1(v, language, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.get1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get invitation for channel
         * @param {getForProject1VEnum} v Version
         * @param {getForProject1LanguageEnum} language Current language
         * @param {number} projectId Current project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getForProject1(v: getForProject1VEnum, language: getForProject1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectChannelInviteLinkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getForProject1(v, language, projectId, channelId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.getForProject1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get channel invitation using a secret link
         * @param {getForSecret1VEnum} v Version
         * @param {getForSecret1LanguageEnum} language Current language
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getForSecret1(v: getForSecret1VEnum, language: getForSecret1LanguageEnum, channelId: number, secret: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectChannelInviteLinkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getForSecret1(v, language, channelId, secret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.getForSecret1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List of invites for channel in project
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list1(v: list1VEnum, language: list1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfProjectChannelInviteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list1(v, language, projectId, channelId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectChannelInviteApi.list1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectChannelInviteApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Accept channel invitation for selected project
         * @param {acceptForProject1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptForProject1(requestParameters: acceptForProject1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: acceptForProject1VEnum = requestParameters.v || acceptForProject1VEnum._1;
            return localVarFp.acceptForProject1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Accept channel invitation using a secret link
         * @param {acceptForSecret1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptForSecret1(requestParameters: acceptForSecret1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: acceptForSecret1VEnum = requestParameters.v || acceptForSecret1VEnum._1;
            return localVarFp.acceptForSecret1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.secret, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add channel invite item for another user by email
         * @param {addByEmail1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addByEmail1(requestParameters: addByEmail1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectChannelInviteResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: addByEmail1VEnum = requestParameters.v || addByEmail1VEnum._1;
            return localVarFp.addByEmail1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.email, requestParameters.accessType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add channel invite item for another user by id
         * @param {addById1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addById1(requestParameters: addById1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectChannelInviteResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: addById1VEnum = requestParameters.v || addById1VEnum._1;
            return localVarFp.addById1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.accessType, requestParameters.toProjectExternalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Decline channel invitation for selected project
         * @param {declineForProject1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineForProject1(requestParameters: declineForProject1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: declineForProject1VEnum = requestParameters.v || declineForProject1VEnum._1;
            return localVarFp.declineForProject1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Decline channel invitation using a secret link
         * @param {declineForSecret1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineForSecret1(requestParameters: declineForSecret1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: declineForSecret1VEnum = requestParameters.v || declineForSecret1VEnum._1;
            return localVarFp.declineForSecret1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.secret, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Del channel invite item for my channel for another user
         * @param {del1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        del1(requestParameters: del1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: del1VEnum = requestParameters.v || del1VEnum._1;
            return localVarFp.del1(actualV, requestParameters.language, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get channel invite item for my channel for another user
         * @param {get1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get1(requestParameters: get1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: get1VEnum = requestParameters.v || get1VEnum._1;
            return localVarFp.get1(actualV, requestParameters.language, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get invitation for channel
         * @param {getForProject1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForProject1(requestParameters: getForProject1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectChannelInviteLinkResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: getForProject1VEnum = requestParameters.v || getForProject1VEnum._1;
            return localVarFp.getForProject1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get channel invitation using a secret link
         * @param {getForSecret1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForSecret1(requestParameters: getForSecret1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectChannelInviteLinkResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: getForSecret1VEnum = requestParameters.v || getForSecret1VEnum._1;
            return localVarFp.getForSecret1(actualV, requestParameters.language, requestParameters.channelId, requestParameters.secret, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List of invites for channel in project
         * @param {list1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfProjectChannelInviteResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: list1VEnum = requestParameters.v || list1VEnum._1;
            return localVarFp.list1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for acceptForProject1 operation in ProjectChannelInviteApi.
 * @export
 * @interface acceptForProject1Request
 */
export interface acceptForProject1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof acceptForProject1
     */
    readonly v?: acceptForProject1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof acceptForProject1
     */
    readonly language: acceptForProject1LanguageEnum

    /**
     * The project to which you want to add a channel
     * @type {number}
     * @memberof acceptForProject1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof acceptForProject1
     */
    readonly channelId: number
}

/**
 * Request parameters for acceptForSecret1 operation in ProjectChannelInviteApi.
 * @export
 * @interface acceptForSecret1Request
 */
export interface acceptForSecret1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof acceptForSecret1
     */
    readonly v?: acceptForSecret1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof acceptForSecret1
     */
    readonly language: acceptForSecret1LanguageEnum

    /**
     * The project to which you want to add a channel
     * @type {number}
     * @memberof acceptForSecret1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof acceptForSecret1
     */
    readonly channelId: number

    /**
     * Secret
     * @type {string}
     * @memberof acceptForSecret1
     */
    readonly secret: string
}

/**
 * Request parameters for addByEmail1 operation in ProjectChannelInviteApi.
 * @export
 * @interface addByEmail1Request
 */
export interface addByEmail1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof addByEmail1
     */
    readonly v?: addByEmail1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof addByEmail1
     */
    readonly language: addByEmail1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof addByEmail1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof addByEmail1
     */
    readonly channelId: number

    /**
     * Email
     * @type {string}
     * @memberof addByEmail1
     */
    readonly email: string

    /**
     * Access type
     * @type {0 | 1 | 1 | 2}
     * @memberof addByEmail1
     */
    readonly accessType: addByEmail1AccessTypeEnum
}

/**
 * Request parameters for addById1 operation in ProjectChannelInviteApi.
 * @export
 * @interface addById1Request
 */
export interface addById1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof addById1
     */
    readonly v?: addById1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof addById1
     */
    readonly language: addById1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof addById1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof addById1
     */
    readonly channelId: number

    /**
     * Access type
     * @type {0 | 1 | 1 | 2}
     * @memberof addById1
     */
    readonly accessType: addById1AccessTypeEnum

    /**
     * Project for get access by external id
     * @type {string}
     * @memberof addById1
     */
    readonly toProjectExternalId: string
}

/**
 * Request parameters for declineForProject1 operation in ProjectChannelInviteApi.
 * @export
 * @interface declineForProject1Request
 */
export interface declineForProject1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof declineForProject1
     */
    readonly v?: declineForProject1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof declineForProject1
     */
    readonly language: declineForProject1LanguageEnum

    /**
     * Channel id
     * @type {number}
     * @memberof declineForProject1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof declineForProject1
     */
    readonly channelId: number
}

/**
 * Request parameters for declineForSecret1 operation in ProjectChannelInviteApi.
 * @export
 * @interface declineForSecret1Request
 */
export interface declineForSecret1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof declineForSecret1
     */
    readonly v?: declineForSecret1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof declineForSecret1
     */
    readonly language: declineForSecret1LanguageEnum

    /**
     * The project to which you want to add a channel
     * @type {number}
     * @memberof declineForSecret1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof declineForSecret1
     */
    readonly channelId: number

    /**
     * Secret
     * @type {string}
     * @memberof declineForSecret1
     */
    readonly secret: string
}

/**
 * Request parameters for del1 operation in ProjectChannelInviteApi.
 * @export
 * @interface del1Request
 */
export interface del1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof del1
     */
    readonly v?: del1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof del1
     */
    readonly language: del1LanguageEnum

    /**
     * Unique id
     * @type {number}
     * @memberof del1
     */
    readonly id: number
}

/**
 * Request parameters for get1 operation in ProjectChannelInviteApi.
 * @export
 * @interface get1Request
 */
export interface get1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof get1
     */
    readonly v?: get1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof get1
     */
    readonly language: get1LanguageEnum

    /**
     * Channel request id
     * @type {number}
     * @memberof get1
     */
    readonly id: number
}

/**
 * Request parameters for getForProject1 operation in ProjectChannelInviteApi.
 * @export
 * @interface getForProject1Request
 */
export interface getForProject1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getForProject1
     */
    readonly v?: getForProject1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getForProject1
     */
    readonly language: getForProject1LanguageEnum

    /**
     * Current project id
     * @type {number}
     * @memberof getForProject1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof getForProject1
     */
    readonly channelId: number
}

/**
 * Request parameters for getForSecret1 operation in ProjectChannelInviteApi.
 * @export
 * @interface getForSecret1Request
 */
export interface getForSecret1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getForSecret1
     */
    readonly v?: getForSecret1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getForSecret1
     */
    readonly language: getForSecret1LanguageEnum

    /**
     * Channel id
     * @type {number}
     * @memberof getForSecret1
     */
    readonly channelId: number

    /**
     * Secret
     * @type {string}
     * @memberof getForSecret1
     */
    readonly secret: string
}

/**
 * Request parameters for list1 operation in ProjectChannelInviteApi.
 * @export
 * @interface list1Request
 */
export interface list1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof list1
     */
    readonly v?: list1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof list1
     */
    readonly language: list1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof list1
     */
    readonly projectId: number

    /**
     * Channel id
     * @type {number}
     * @memberof list1
     */
    readonly channelId: number
}

/**
 * ProjectChannelInviteApi - object-oriented interface
 * @export
 * @class ProjectChannelInviteApi
 * @extends {BaseAPI}
 */
export class ProjectChannelInviteApi extends BaseAPI {
    /**
     * 
     * @summary Accept channel invitation for selected project
     * @param {acceptForProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public acceptForProject1(requestParameters: acceptForProject1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: acceptForProject1VEnum = requestParameters.v || acceptForProject1VEnum._1;
        return fp(this.configuration).acceptForProject1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Accept channel invitation using a secret link
     * @param {acceptForSecret1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public acceptForSecret1(requestParameters: acceptForSecret1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: acceptForSecret1VEnum = requestParameters.v || acceptForSecret1VEnum._1;
        return fp(this.configuration).acceptForSecret1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.secret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add channel invite item for another user by email
     * @param {addByEmail1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public addByEmail1(requestParameters: addByEmail1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: addByEmail1VEnum = requestParameters.v || addByEmail1VEnum._1;
        return fp(this.configuration).addByEmail1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.email, requestParameters.accessType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add channel invite item for another user by id
     * @param {addById1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public addById1(requestParameters: addById1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: addById1VEnum = requestParameters.v || addById1VEnum._1;
        return fp(this.configuration).addById1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.accessType, requestParameters.toProjectExternalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Decline channel invitation for selected project
     * @param {declineForProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public declineForProject1(requestParameters: declineForProject1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: declineForProject1VEnum = requestParameters.v || declineForProject1VEnum._1;
        return fp(this.configuration).declineForProject1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Decline channel invitation using a secret link
     * @param {declineForSecret1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public declineForSecret1(requestParameters: declineForSecret1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: declineForSecret1VEnum = requestParameters.v || declineForSecret1VEnum._1;
        return fp(this.configuration).declineForSecret1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.secret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Del channel invite item for my channel for another user
     * @param {del1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public del1(requestParameters: del1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: del1VEnum = requestParameters.v || del1VEnum._1;
        return fp(this.configuration).del1(actualV, requestParameters.language, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get channel invite item for my channel for another user
     * @param {get1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public get1(requestParameters: get1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: get1VEnum = requestParameters.v || get1VEnum._1;
        return fp(this.configuration).get1(actualV, requestParameters.language, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get invitation for channel
     * @param {getForProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public getForProject1(requestParameters: getForProject1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: getForProject1VEnum = requestParameters.v || getForProject1VEnum._1;
        return fp(this.configuration).getForProject1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get channel invitation using a secret link
     * @param {getForSecret1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public getForSecret1(requestParameters: getForSecret1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: getForSecret1VEnum = requestParameters.v || getForSecret1VEnum._1;
        return fp(this.configuration).getForSecret1(actualV, requestParameters.language, requestParameters.channelId, requestParameters.secret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List of invites for channel in project
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    public list1(requestParameters: list1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: list1VEnum = requestParameters.v || list1VEnum._1;
        return fp(this.configuration).list1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum acceptForProject1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum acceptForProject1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum acceptForSecret1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum acceptForSecret1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum addByEmail1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum addByEmail1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum addByEmail1AccessTypeEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_12 = 1,
    NUMBER_2 = 2
}
/**
  * @export
  * @enum {string}
  */
export enum addById1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum addById1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum addById1AccessTypeEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_12 = 1,
    NUMBER_2 = 2
}
/**
  * @export
  * @enum {string}
  */
export enum declineForProject1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum declineForProject1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum declineForSecret1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum declineForSecret1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum del1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum del1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum get1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum get1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum getForProject1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum getForProject1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum getForSecret1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum getForSecret1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum list1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum list1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
