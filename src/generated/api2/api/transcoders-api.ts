/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { SiteTranscoderCreateDto } from '../models';
// @ts-ignore
import type { SiteTranscoderItemDto } from '../models';
// @ts-ignore
import type { SiteTranscoderListResponse } from '../models';
// @ts-ignore
import type { SiteTranscoderUpdateDto } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
/**
 * TranscodersApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Transcoder create
         * @param {SiteTranscoderCreateDto} siteTranscoderCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add1: async (siteTranscoderCreateDto: SiteTranscoderCreateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteTranscoderCreateDto' is not null or undefined
            assertParamExists('add1', 'siteTranscoderCreateDto', siteTranscoderCreateDto)
            const localVarPath = `/method/transcoder/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteTranscoderCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Transcoder delete
         * @param {SiteTranscoderItemDto} siteTranscoderItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1: async (siteTranscoderItemDto: SiteTranscoderItemDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteTranscoderItemDto' is not null or undefined
            assertParamExists('delete1', 'siteTranscoderItemDto', siteTranscoderItemDto)
            const localVarPath = `/method/transcoder/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteTranscoderItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of transcoder
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1: async (v: list1VEnum, language: list1LanguageEnum, projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('list1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('list1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('list1', 'projectId', projectId)
            const localVarPath = `/method/transcoder/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Transcoder stop
         * @param {SiteTranscoderItemDto} siteTranscoderItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stop1: async (siteTranscoderItemDto: SiteTranscoderItemDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteTranscoderItemDto' is not null or undefined
            assertParamExists('stop1', 'siteTranscoderItemDto', siteTranscoderItemDto)
            const localVarPath = `/method/transcoder/stop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteTranscoderItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Transcoder update
         * @param {SiteTranscoderUpdateDto} siteTranscoderUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1: async (siteTranscoderUpdateDto: SiteTranscoderUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteTranscoderUpdateDto' is not null or undefined
            assertParamExists('update1', 'siteTranscoderUpdateDto', siteTranscoderUpdateDto)
            const localVarPath = `/method/transcoder/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteTranscoderUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TranscodersApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Transcoder create
         * @param {SiteTranscoderCreateDto} siteTranscoderCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async add1(siteTranscoderCreateDto: SiteTranscoderCreateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.add1(siteTranscoderCreateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TranscodersApi.add1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Transcoder delete
         * @param {SiteTranscoderItemDto} siteTranscoderItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete1(siteTranscoderItemDto: SiteTranscoderItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete1(siteTranscoderItemDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TranscodersApi.delete1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List of transcoder
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list1(v: list1VEnum, language: list1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteTranscoderListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list1(v, language, projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TranscodersApi.list1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Transcoder stop
         * @param {SiteTranscoderItemDto} siteTranscoderItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stop1(siteTranscoderItemDto: SiteTranscoderItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stop1(siteTranscoderItemDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TranscodersApi.stop1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Transcoder update
         * @param {SiteTranscoderUpdateDto} siteTranscoderUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update1(siteTranscoderUpdateDto: SiteTranscoderUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update1(siteTranscoderUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TranscodersApi.update1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TranscodersApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Transcoder create
         * @param {add1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add1(requestParameters: add1Request, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.add1(requestParameters.siteTranscoderCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Transcoder delete
         * @param {delete1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1(requestParameters: delete1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.delete1(requestParameters.siteTranscoderItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List of transcoder
         * @param {list1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteTranscoderListResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: list1VEnum = requestParameters.v || list1VEnum._1;
            return localVarFp.list1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Transcoder stop
         * @param {stop1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stop1(requestParameters: stop1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.stop1(requestParameters.siteTranscoderItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Transcoder update
         * @param {update1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1(requestParameters: update1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.update1(requestParameters.siteTranscoderUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for add1 operation in TranscodersApi.
 * @export
 * @interface add1Request
 */
export interface add1Request {
    /**
     * 
     * @type {SiteTranscoderCreateDto}
     * @memberof add1
     */
    readonly siteTranscoderCreateDto: SiteTranscoderCreateDto
}

/**
 * Request parameters for delete1 operation in TranscodersApi.
 * @export
 * @interface delete1Request
 */
export interface delete1Request {
    /**
     * 
     * @type {SiteTranscoderItemDto}
     * @memberof delete1
     */
    readonly siteTranscoderItemDto: SiteTranscoderItemDto
}

/**
 * Request parameters for list1 operation in TranscodersApi.
 * @export
 * @interface list1Request
 */
export interface list1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof list1
     */
    readonly v?: list1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof list1
     */
    readonly language: list1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof list1
     */
    readonly projectId: number
}

/**
 * Request parameters for stop1 operation in TranscodersApi.
 * @export
 * @interface stop1Request
 */
export interface stop1Request {
    /**
     * 
     * @type {SiteTranscoderItemDto}
     * @memberof stop1
     */
    readonly siteTranscoderItemDto: SiteTranscoderItemDto
}

/**
 * Request parameters for update1 operation in TranscodersApi.
 * @export
 * @interface update1Request
 */
export interface update1Request {
    /**
     * 
     * @type {SiteTranscoderUpdateDto}
     * @memberof update1
     */
    readonly siteTranscoderUpdateDto: SiteTranscoderUpdateDto
}

/**
 * TranscodersApi - object-oriented interface
 * @export
 * @class TranscodersApi
 * @extends {BaseAPI}
 */
export class TranscodersApi extends BaseAPI {
    /**
     * 
     * @summary Transcoder create
     * @param {add1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    public add1(requestParameters: add1Request, options?: RawAxiosRequestConfig) {
        return fp(this.configuration).add1(requestParameters.siteTranscoderCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Transcoder delete
     * @param {delete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    public delete1(requestParameters: delete1Request, options?: RawAxiosRequestConfig) {
        return fp(this.configuration).delete1(requestParameters.siteTranscoderItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List of transcoder
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    public list1(requestParameters: list1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: list1VEnum = requestParameters.v || list1VEnum._1;
        return fp(this.configuration).list1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Transcoder stop
     * @param {stop1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    public stop1(requestParameters: stop1Request, options?: RawAxiosRequestConfig) {
        return fp(this.configuration).stop1(requestParameters.siteTranscoderItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Transcoder update
     * @param {update1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    public update1(requestParameters: update1Request, options?: RawAxiosRequestConfig) {
        return fp(this.configuration).update1(requestParameters.siteTranscoderUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum list1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum list1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
