/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { SiteTranscoderListResponse } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
// @ts-ignore
import type { TranscoderCreateDto } from '../models';
// @ts-ignore
import type { TranscoderItemDto } from '../models';
// @ts-ignore
import type { TranscoderUpdateDto } from '../models';
/**
 * TranscodersApi - axios parameter creator
 * @export
 */
export const TranscodersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Transcoder create
         * @param {TranscoderCreateDto} transcoderCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersAddV1: async (transcoderCreateDto: TranscoderCreateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transcoderCreateDto' is not null or undefined
            assertParamExists('transcodersAddV1', 'transcoderCreateDto', transcoderCreateDto)
            const localVarPath = `/method/transcoder/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transcoderCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Transcoder delete
         * @param {TranscoderItemDto} transcoderItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersDeleteV1: async (transcoderItemDto: TranscoderItemDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transcoderItemDto' is not null or undefined
            assertParamExists('transcodersDeleteV1', 'transcoderItemDto', transcoderItemDto)
            const localVarPath = `/method/transcoder/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transcoderItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of transcoder
         * @param {TranscodersListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {TranscodersListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersListV1: async (language: TranscodersListV1LanguageEnum, projectId: number, v?: TranscodersListV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('transcodersListV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('transcodersListV1', 'projectId', projectId)
            const localVarPath = `/method/transcoder/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Transcoder stop
         * @param {TranscoderItemDto} transcoderItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersStopV1: async (transcoderItemDto: TranscoderItemDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transcoderItemDto' is not null or undefined
            assertParamExists('transcodersStopV1', 'transcoderItemDto', transcoderItemDto)
            const localVarPath = `/method/transcoder/stop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transcoderItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Transcoder update
         * @param {TranscoderUpdateDto} transcoderUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersUpdateV1: async (transcoderUpdateDto: TranscoderUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transcoderUpdateDto' is not null or undefined
            assertParamExists('transcodersUpdateV1', 'transcoderUpdateDto', transcoderUpdateDto)
            const localVarPath = `/method/transcoder/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transcoderUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TranscodersApi - functional programming interface
 * @export
 */
export const TranscodersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TranscodersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Transcoder create
         * @param {TranscoderCreateDto} transcoderCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transcodersAddV1(transcoderCreateDto: TranscoderCreateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transcodersAddV1(transcoderCreateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TranscodersApi.transcodersAddV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Transcoder delete
         * @param {TranscoderItemDto} transcoderItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transcodersDeleteV1(transcoderItemDto: TranscoderItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transcodersDeleteV1(transcoderItemDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TranscodersApi.transcodersDeleteV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List of transcoder
         * @param {TranscodersListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {TranscodersListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transcodersListV1(language: TranscodersListV1LanguageEnum, projectId: number, v?: TranscodersListV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteTranscoderListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transcodersListV1(language, projectId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TranscodersApi.transcodersListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Transcoder stop
         * @param {TranscoderItemDto} transcoderItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transcodersStopV1(transcoderItemDto: TranscoderItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transcodersStopV1(transcoderItemDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TranscodersApi.transcodersStopV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Transcoder update
         * @param {TranscoderUpdateDto} transcoderUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transcodersUpdateV1(transcoderUpdateDto: TranscoderUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transcodersUpdateV1(transcoderUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TranscodersApi.transcodersUpdateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TranscodersApi - factory interface
 * @export
 */
export const TranscodersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TranscodersApiFp(configuration)
    return {
        /**
         * 
         * @summary Transcoder create
         * @param {TranscodersApiTranscodersAddV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersAddV1(requestParameters: TranscodersApiTranscodersAddV1Request, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.transcodersAddV1(requestParameters.transcoderCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Transcoder delete
         * @param {TranscodersApiTranscodersDeleteV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersDeleteV1(requestParameters: TranscodersApiTranscodersDeleteV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.transcodersDeleteV1(requestParameters.transcoderItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List of transcoder
         * @param {TranscodersApiTranscodersListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersListV1(requestParameters: TranscodersApiTranscodersListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteTranscoderListResponse> {
            return localVarFp.transcodersListV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Transcoder stop
         * @param {TranscodersApiTranscodersStopV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersStopV1(requestParameters: TranscodersApiTranscodersStopV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.transcodersStopV1(requestParameters.transcoderItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Transcoder update
         * @param {TranscodersApiTranscodersUpdateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersUpdateV1(requestParameters: TranscodersApiTranscodersUpdateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.transcodersUpdateV1(requestParameters.transcoderUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TranscodersApi - interface
 * @export
 * @interface TranscodersApi
 */
export interface TranscodersApiInterface {
    /**
     * 
     * @summary Transcoder create
     * @param {TranscodersApiTranscodersAddV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApiInterface
     */
    transcodersAddV1(requestParameters: TranscodersApiTranscodersAddV1Request, options?: RawAxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @summary Transcoder delete
     * @param {TranscodersApiTranscodersDeleteV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApiInterface
     */
    transcodersDeleteV1(requestParameters: TranscodersApiTranscodersDeleteV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary List of transcoder
     * @param {TranscodersApiTranscodersListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApiInterface
     */
    transcodersListV1(requestParameters: TranscodersApiTranscodersListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteTranscoderListResponse>;

    /**
     * 
     * @summary Transcoder stop
     * @param {TranscodersApiTranscodersStopV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApiInterface
     */
    transcodersStopV1(requestParameters: TranscodersApiTranscodersStopV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Transcoder update
     * @param {TranscodersApiTranscodersUpdateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApiInterface
     */
    transcodersUpdateV1(requestParameters: TranscodersApiTranscodersUpdateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

}

/**
 * Request parameters for transcodersAddV1 operation in TranscodersApi.
 * @export
 * @interface TranscodersApiTranscodersAddV1Request
 */
export interface TranscodersApiTranscodersAddV1Request {
    /**
     * 
     * @type {TranscoderCreateDto}
     * @memberof TranscodersApiTranscodersAddV1
     */
    readonly transcoderCreateDto: TranscoderCreateDto
}

/**
 * Request parameters for transcodersDeleteV1 operation in TranscodersApi.
 * @export
 * @interface TranscodersApiTranscodersDeleteV1Request
 */
export interface TranscodersApiTranscodersDeleteV1Request {
    /**
     * 
     * @type {TranscoderItemDto}
     * @memberof TranscodersApiTranscodersDeleteV1
     */
    readonly transcoderItemDto: TranscoderItemDto
}

/**
 * Request parameters for transcodersListV1 operation in TranscodersApi.
 * @export
 * @interface TranscodersApiTranscodersListV1Request
 */
export interface TranscodersApiTranscodersListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof TranscodersApiTranscodersListV1
     */
    readonly language: TranscodersListV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof TranscodersApiTranscodersListV1
     */
    readonly projectId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof TranscodersApiTranscodersListV1
     */
    readonly v?: TranscodersListV1VEnum
}

/**
 * Request parameters for transcodersStopV1 operation in TranscodersApi.
 * @export
 * @interface TranscodersApiTranscodersStopV1Request
 */
export interface TranscodersApiTranscodersStopV1Request {
    /**
     * 
     * @type {TranscoderItemDto}
     * @memberof TranscodersApiTranscodersStopV1
     */
    readonly transcoderItemDto: TranscoderItemDto
}

/**
 * Request parameters for transcodersUpdateV1 operation in TranscodersApi.
 * @export
 * @interface TranscodersApiTranscodersUpdateV1Request
 */
export interface TranscodersApiTranscodersUpdateV1Request {
    /**
     * 
     * @type {TranscoderUpdateDto}
     * @memberof TranscodersApiTranscodersUpdateV1
     */
    readonly transcoderUpdateDto: TranscoderUpdateDto
}

/**
 * TranscodersApi - object-oriented interface
 * @export
 * @class TranscodersApi
 * @extends {BaseAPI}
 */
export class TranscodersApi extends BaseAPI implements TranscodersApiInterface {
    /**
     * 
     * @summary Transcoder create
     * @param {TranscodersApiTranscodersAddV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    public transcodersAddV1(requestParameters: TranscodersApiTranscodersAddV1Request, options?: RawAxiosRequestConfig) {
        return TranscodersApiFp(this.configuration).transcodersAddV1(requestParameters.transcoderCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Transcoder delete
     * @param {TranscodersApiTranscodersDeleteV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    public transcodersDeleteV1(requestParameters: TranscodersApiTranscodersDeleteV1Request, options?: RawAxiosRequestConfig) {
        return TranscodersApiFp(this.configuration).transcodersDeleteV1(requestParameters.transcoderItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List of transcoder
     * @param {TranscodersApiTranscodersListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    public transcodersListV1(requestParameters: TranscodersApiTranscodersListV1Request, options?: RawAxiosRequestConfig) {
        return TranscodersApiFp(this.configuration).transcodersListV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Transcoder stop
     * @param {TranscodersApiTranscodersStopV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    public transcodersStopV1(requestParameters: TranscodersApiTranscodersStopV1Request, options?: RawAxiosRequestConfig) {
        return TranscodersApiFp(this.configuration).transcodersStopV1(requestParameters.transcoderItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Transcoder update
     * @param {TranscodersApiTranscodersUpdateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    public transcodersUpdateV1(requestParameters: TranscodersApiTranscodersUpdateV1Request, options?: RawAxiosRequestConfig) {
        return TranscodersApiFp(this.configuration).transcodersUpdateV1(requestParameters.transcoderUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const TranscodersListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type TranscodersListV1LanguageEnum = typeof TranscodersListV1LanguageEnum[keyof typeof TranscodersListV1LanguageEnum];
/**
 * @export
 */
export const TranscodersListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type TranscodersListV1VEnum = typeof TranscodersListV1VEnum[keyof typeof TranscodersListV1VEnum];
