/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CodeAppAuthResponse } from '../models';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { RefreshAuthResponse } from '../models';
// @ts-ignore
import type { SiteAuthExchangeRequest } from '../models';
// @ts-ignore
import type { SiteLogoutAuthRequest } from '../models';
// @ts-ignore
import type { SiteRefreshAuthBodyRequest } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Auth telegram
         * @param {AuthAuthTelegramV1LanguageEnum} language Current language
         * @param {number} authDate Time auth
         * @param {number} id Telegram userId
         * @param {string} firstName First name
         * @param {string} hash Hash
         * @param {AuthAuthTelegramV1AppEnum} app App oauth
         * @param {AuthAuthTelegramV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {string} [lastName] Last name
         * @param {string} [username] Nickname
         * @param {string} [photoUrl] Photo
         * @param {string} [languageCode] IETF language tag of the user\&#39;s language
         * @param {boolean} [isPremium] True, if this user is a Telegram Premium user
         * @param {boolean} [addedToAttachmentMenu] True, if this user added the bot to the attachment menu
         * @param {string} [refId] Referal id
         * @param {string} [redirect] Redirect url
         * @param {string} [country] Country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAuthTelegramV1: async (language: AuthAuthTelegramV1LanguageEnum, authDate: number, id: number, firstName: string, hash: string, app: AuthAuthTelegramV1AppEnum, v?: AuthAuthTelegramV1VEnum, lastName?: string, username?: string, photoUrl?: string, languageCode?: string, isPremium?: boolean, addedToAttachmentMenu?: boolean, refId?: string, redirect?: string, country?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('authAuthTelegramV1', 'language', language)
            // verify required parameter 'authDate' is not null or undefined
            assertParamExists('authAuthTelegramV1', 'authDate', authDate)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('authAuthTelegramV1', 'id', id)
            // verify required parameter 'firstName' is not null or undefined
            assertParamExists('authAuthTelegramV1', 'firstName', firstName)
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('authAuthTelegramV1', 'hash', hash)
            // verify required parameter 'app' is not null or undefined
            assertParamExists('authAuthTelegramV1', 'app', app)
            const localVarPath = `/method/auth/auth-telegram`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (authDate !== undefined) {
                localVarQueryParameter['auth_date'] = authDate;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['first_name'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['last_name'] = lastName;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (photoUrl !== undefined) {
                localVarQueryParameter['photo_url'] = photoUrl;
            }

            if (languageCode !== undefined) {
                localVarQueryParameter['language_code'] = languageCode;
            }

            if (isPremium !== undefined) {
                localVarQueryParameter['is_premium'] = isPremium;
            }

            if (addedToAttachmentMenu !== undefined) {
                localVarQueryParameter['added_to_attachment_menu'] = addedToAttachmentMenu;
            }

            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }

            if (refId !== undefined) {
                localVarQueryParameter['refId'] = refId;
            }

            if (app !== undefined) {
                localVarQueryParameter['app'] = app;
            }

            if (redirect !== undefined) {
                localVarQueryParameter['redirect'] = redirect;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Internal request of auth google
         * @param {string} state 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCallbackGoogleV1: async (state: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            assertParamExists('authCallbackGoogleV1', 'state', state)
            const localVarPath = `/method/auth/callback/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Internal request of auth new vk
         * @param {string} state 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCallbackVkIdV1: async (state: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            assertParamExists('authCallbackVkIdV1', 'state', state)
            const localVarPath = `/method/auth/callback/vk-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Internal request of auth old vk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCallbackVkV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/method/auth/callback/vk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get code for auth
         * @param {AuthCodeV1LanguageEnum} language Current language
         * @param {AuthCodeV1AppEnum} app Create auth code for app
         * @param {AuthCodeV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCodeV1: async (language: AuthCodeV1LanguageEnum, app: AuthCodeV1AppEnum, v?: AuthCodeV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('authCodeV1', 'language', language)
            // verify required parameter 'app' is not null or undefined
            assertParamExists('authCodeV1', 'app', app)
            const localVarPath = `/method/auth/app/code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (app !== undefined) {
                localVarQueryParameter['app'] = app;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary CallBack for connect social
         * @param {AuthConnectResultV1LanguageEnum} language Current language
         * @param {string} message Result message for connect
         * @param {AuthConnectResultV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authConnectResultV1: async (language: AuthConnectResultV1LanguageEnum, message: string, v?: AuthConnectResultV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('authConnectResultV1', 'language', language)
            // verify required parameter 'message' is not null or undefined
            assertParamExists('authConnectResultV1', 'message', message)
            const localVarPath = `/method/auth/connect/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (message !== undefined) {
                localVarQueryParameter['message'] = message;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Connect telegram in account
         * @param {AuthConnectTelegramV1LanguageEnum} language Current language
         * @param {AuthConnectTelegramV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authConnectTelegramV1: async (language: AuthConnectTelegramV1LanguageEnum, v?: AuthConnectTelegramV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('authConnectTelegramV1', 'language', language)
            const localVarPath = `/method/auth/connect-telegram`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Connected social account
         * @param {AuthConnectV1LanguageEnum} language Current language
         * @param {AuthConnectV1ProviderEnum} provider Provider oauth
         * @param {AuthConnectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {AuthConnectV1AppEnum} [app] App oauth
         * @param {string} [redirect] Redirect url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authConnectV1: async (language: AuthConnectV1LanguageEnum, provider: AuthConnectV1ProviderEnum, v?: AuthConnectV1VEnum, app?: AuthConnectV1AppEnum, redirect?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('authConnectV1', 'language', language)
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('authConnectV1', 'provider', provider)
            const localVarPath = `/method/auth/connect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }

            if (app !== undefined) {
                localVarQueryParameter['app'] = app;
            }

            if (redirect !== undefined) {
                localVarQueryParameter['redirect'] = redirect;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Disconnected social account
         * @param {AuthDisconnectV1LanguageEnum} language Current language
         * @param {number} socialId Social id
         * @param {AuthDisconnectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authDisconnectV1: async (language: AuthDisconnectV1LanguageEnum, socialId: number, v?: AuthDisconnectV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('authDisconnectV1', 'language', language)
            // verify required parameter 'socialId' is not null or undefined
            assertParamExists('authDisconnectV1', 'socialId', socialId)
            const localVarPath = `/method/auth/disconnect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (socialId !== undefined) {
                localVarQueryParameter['social_id'] = socialId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Code exchange
         * @param {SiteAuthExchangeRequest} siteAuthExchangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authExchangeV1: async (siteAuthExchangeRequest: SiteAuthExchangeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteAuthExchangeRequest' is not null or undefined
            assertParamExists('authExchangeV1', 'siteAuthExchangeRequest', siteAuthExchangeRequest)
            const localVarPath = `/method/auth/app/exchange`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteAuthExchangeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get url for start oauth
         * @param {AuthGetAuthUrlV1LanguageEnum} language Current language
         * @param {AuthGetAuthUrlV1ProviderEnum} provider Provider oauth
         * @param {AuthGetAuthUrlV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {AuthGetAuthUrlV1AppEnum} [app] App oauth
         * @param {string} [redirect] Redirect url
         * @param {string} [refId] Referal id
         * @param {string} [country] Country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGetAuthUrlV1: async (language: AuthGetAuthUrlV1LanguageEnum, provider: AuthGetAuthUrlV1ProviderEnum, v?: AuthGetAuthUrlV1VEnum, app?: AuthGetAuthUrlV1AppEnum, redirect?: string, refId?: string, country?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('authGetAuthUrlV1', 'language', language)
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('authGetAuthUrlV1', 'provider', provider)
            const localVarPath = `/method/auth/redirect-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }

            if (app !== undefined) {
                localVarQueryParameter['app'] = app;
            }

            if (redirect !== undefined) {
                localVarQueryParameter['redirect'] = redirect;
            }

            if (refId !== undefined) {
                localVarQueryParameter['refId'] = refId;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get basic data for auth user
         * @param {AuthGetProfileV1LanguageEnum} language Current language
         * @param {AuthGetProfileV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGetProfileV1: async (language: AuthGetProfileV1LanguageEnum, v?: AuthGetProfileV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('authGetProfileV1', 'language', language)
            const localVarPath = `/method/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Guest request of auth
         * @param {string} refId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGuestV1: async (refId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refId' is not null or undefined
            assertParamExists('authGuestV1', 'refId', refId)
            const localVarPath = `/method/auth/guest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refId !== undefined) {
                localVarQueryParameter['refId'] = refId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout
         * @param {SiteLogoutAuthRequest} siteLogoutAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutV1: async (siteLogoutAuthRequest: SiteLogoutAuthRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteLogoutAuthRequest' is not null or undefined
            assertParamExists('authLogoutV1', 'siteLogoutAuthRequest', siteLogoutAuthRequest)
            const localVarPath = `/method/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteLogoutAuthRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update access token
         * @param {string} userAgent 
         * @param {SiteRefreshAuthBodyRequest} siteRefreshAuthBodyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshAccessV1: async (userAgent: string, siteRefreshAuthBodyRequest: SiteRefreshAuthBodyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userAgent' is not null or undefined
            assertParamExists('authRefreshAccessV1', 'userAgent', userAgent)
            // verify required parameter 'siteRefreshAuthBodyRequest' is not null or undefined
            assertParamExists('authRefreshAccessV1', 'siteRefreshAuthBodyRequest', siteRefreshAuthBodyRequest)
            const localVarPath = `/method/auth/refresh-access`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (userAgent != null) {
                localVarHeaderParameter['User-Agent'] = String(userAgent);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteRefreshAuthBodyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Auth telegram
         * @param {AuthAuthTelegramV1LanguageEnum} language Current language
         * @param {number} authDate Time auth
         * @param {number} id Telegram userId
         * @param {string} firstName First name
         * @param {string} hash Hash
         * @param {AuthAuthTelegramV1AppEnum} app App oauth
         * @param {AuthAuthTelegramV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {string} [lastName] Last name
         * @param {string} [username] Nickname
         * @param {string} [photoUrl] Photo
         * @param {string} [languageCode] IETF language tag of the user\&#39;s language
         * @param {boolean} [isPremium] True, if this user is a Telegram Premium user
         * @param {boolean} [addedToAttachmentMenu] True, if this user added the bot to the attachment menu
         * @param {string} [refId] Referal id
         * @param {string} [redirect] Redirect url
         * @param {string} [country] Country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authAuthTelegramV1(language: AuthAuthTelegramV1LanguageEnum, authDate: number, id: number, firstName: string, hash: string, app: AuthAuthTelegramV1AppEnum, v?: AuthAuthTelegramV1VEnum, lastName?: string, username?: string, photoUrl?: string, languageCode?: string, isPremium?: boolean, addedToAttachmentMenu?: boolean, refId?: string, redirect?: string, country?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authAuthTelegramV1(language, authDate, id, firstName, hash, app, v, lastName, username, photoUrl, languageCode, isPremium, addedToAttachmentMenu, refId, redirect, country, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authAuthTelegramV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Internal request of auth google
         * @param {string} state 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authCallbackGoogleV1(state: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authCallbackGoogleV1(state, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authCallbackGoogleV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Internal request of auth new vk
         * @param {string} state 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authCallbackVkIdV1(state: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authCallbackVkIdV1(state, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authCallbackVkIdV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Internal request of auth old vk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authCallbackVkV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authCallbackVkV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authCallbackVkV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get code for auth
         * @param {AuthCodeV1LanguageEnum} language Current language
         * @param {AuthCodeV1AppEnum} app Create auth code for app
         * @param {AuthCodeV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authCodeV1(language: AuthCodeV1LanguageEnum, app: AuthCodeV1AppEnum, v?: AuthCodeV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeAppAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authCodeV1(language, app, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authCodeV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary CallBack for connect social
         * @param {AuthConnectResultV1LanguageEnum} language Current language
         * @param {string} message Result message for connect
         * @param {AuthConnectResultV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authConnectResultV1(language: AuthConnectResultV1LanguageEnum, message: string, v?: AuthConnectResultV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authConnectResultV1(language, message, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authConnectResultV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Connect telegram in account
         * @param {AuthConnectTelegramV1LanguageEnum} language Current language
         * @param {AuthConnectTelegramV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authConnectTelegramV1(language: AuthConnectTelegramV1LanguageEnum, v?: AuthConnectTelegramV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authConnectTelegramV1(language, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authConnectTelegramV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Connected social account
         * @param {AuthConnectV1LanguageEnum} language Current language
         * @param {AuthConnectV1ProviderEnum} provider Provider oauth
         * @param {AuthConnectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {AuthConnectV1AppEnum} [app] App oauth
         * @param {string} [redirect] Redirect url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authConnectV1(language: AuthConnectV1LanguageEnum, provider: AuthConnectV1ProviderEnum, v?: AuthConnectV1VEnum, app?: AuthConnectV1AppEnum, redirect?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authConnectV1(language, provider, v, app, redirect, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authConnectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Disconnected social account
         * @param {AuthDisconnectV1LanguageEnum} language Current language
         * @param {number} socialId Social id
         * @param {AuthDisconnectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authDisconnectV1(language: AuthDisconnectV1LanguageEnum, socialId: number, v?: AuthDisconnectV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authDisconnectV1(language, socialId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authDisconnectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Code exchange
         * @param {SiteAuthExchangeRequest} siteAuthExchangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authExchangeV1(siteAuthExchangeRequest: SiteAuthExchangeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authExchangeV1(siteAuthExchangeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authExchangeV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get url for start oauth
         * @param {AuthGetAuthUrlV1LanguageEnum} language Current language
         * @param {AuthGetAuthUrlV1ProviderEnum} provider Provider oauth
         * @param {AuthGetAuthUrlV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {AuthGetAuthUrlV1AppEnum} [app] App oauth
         * @param {string} [redirect] Redirect url
         * @param {string} [refId] Referal id
         * @param {string} [country] Country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGetAuthUrlV1(language: AuthGetAuthUrlV1LanguageEnum, provider: AuthGetAuthUrlV1ProviderEnum, v?: AuthGetAuthUrlV1VEnum, app?: AuthGetAuthUrlV1AppEnum, redirect?: string, refId?: string, country?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGetAuthUrlV1(language, provider, v, app, redirect, refId, country, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authGetAuthUrlV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get basic data for auth user
         * @param {AuthGetProfileV1LanguageEnum} language Current language
         * @param {AuthGetProfileV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGetProfileV1(language: AuthGetProfileV1LanguageEnum, v?: AuthGetProfileV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGetProfileV1(language, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authGetProfileV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Guest request of auth
         * @param {string} refId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGuestV1(refId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGuestV1(refId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authGuestV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Logout
         * @param {SiteLogoutAuthRequest} siteLogoutAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogoutV1(siteLogoutAuthRequest: SiteLogoutAuthRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogoutV1(siteLogoutAuthRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authLogoutV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update access token
         * @param {string} userAgent 
         * @param {SiteRefreshAuthBodyRequest} siteRefreshAuthBodyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRefreshAccessV1(userAgent: string, siteRefreshAuthBodyRequest: SiteRefreshAuthBodyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRefreshAccessV1(userAgent, siteRefreshAuthBodyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authRefreshAccessV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Auth telegram
         * @param {AuthApiAuthAuthTelegramV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAuthTelegramV1(requestParameters: AuthApiAuthAuthTelegramV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authAuthTelegramV1(requestParameters.language, requestParameters.authDate, requestParameters.id, requestParameters.firstName, requestParameters.hash, requestParameters.app, requestParameters.v, requestParameters.lastName, requestParameters.username, requestParameters.photoUrl, requestParameters.languageCode, requestParameters.isPremium, requestParameters.addedToAttachmentMenu, requestParameters.refId, requestParameters.redirect, requestParameters.country, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Internal request of auth google
         * @param {AuthApiAuthCallbackGoogleV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCallbackGoogleV1(requestParameters: AuthApiAuthCallbackGoogleV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authCallbackGoogleV1(requestParameters.state, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Internal request of auth new vk
         * @param {AuthApiAuthCallbackVkIdV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCallbackVkIdV1(requestParameters: AuthApiAuthCallbackVkIdV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authCallbackVkIdV1(requestParameters.state, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Internal request of auth old vk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCallbackVkV1(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authCallbackVkV1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get code for auth
         * @param {AuthApiAuthCodeV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCodeV1(requestParameters: AuthApiAuthCodeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CodeAppAuthResponse> {
            return localVarFp.authCodeV1(requestParameters.language, requestParameters.app, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary CallBack for connect social
         * @param {AuthApiAuthConnectResultV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authConnectResultV1(requestParameters: AuthApiAuthConnectResultV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authConnectResultV1(requestParameters.language, requestParameters.message, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Connect telegram in account
         * @param {AuthApiAuthConnectTelegramV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authConnectTelegramV1(requestParameters: AuthApiAuthConnectTelegramV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.authConnectTelegramV1(requestParameters.language, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Connected social account
         * @param {AuthApiAuthConnectV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authConnectV1(requestParameters: AuthApiAuthConnectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authConnectV1(requestParameters.language, requestParameters.provider, requestParameters.v, requestParameters.app, requestParameters.redirect, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Disconnected social account
         * @param {AuthApiAuthDisconnectV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authDisconnectV1(requestParameters: AuthApiAuthDisconnectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.authDisconnectV1(requestParameters.language, requestParameters.socialId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Code exchange
         * @param {AuthApiAuthExchangeV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authExchangeV1(requestParameters: AuthApiAuthExchangeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<RefreshAuthResponse> {
            return localVarFp.authExchangeV1(requestParameters.siteAuthExchangeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get url for start oauth
         * @param {AuthApiAuthGetAuthUrlV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGetAuthUrlV1(requestParameters: AuthApiAuthGetAuthUrlV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authGetAuthUrlV1(requestParameters.language, requestParameters.provider, requestParameters.v, requestParameters.app, requestParameters.redirect, requestParameters.refId, requestParameters.country, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get basic data for auth user
         * @param {AuthApiAuthGetProfileV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGetProfileV1(requestParameters: AuthApiAuthGetProfileV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authGetProfileV1(requestParameters.language, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Guest request of auth
         * @param {AuthApiAuthGuestV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGuestV1(requestParameters: AuthApiAuthGuestV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authGuestV1(requestParameters.refId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logout
         * @param {AuthApiAuthLogoutV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutV1(requestParameters: AuthApiAuthLogoutV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.authLogoutV1(requestParameters.siteLogoutAuthRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update access token
         * @param {AuthApiAuthRefreshAccessV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshAccessV1(requestParameters: AuthApiAuthRefreshAccessV1Request, options?: RawAxiosRequestConfig): AxiosPromise<RefreshAuthResponse> {
            return localVarFp.authRefreshAccessV1(requestParameters.userAgent, requestParameters.siteRefreshAuthBodyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - interface
 * @export
 * @interface AuthApi
 */
export interface AuthApiInterface {
    /**
     * 
     * @summary Auth telegram
     * @param {AuthApiAuthAuthTelegramV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authAuthTelegramV1(requestParameters: AuthApiAuthAuthTelegramV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Internal request of auth google
     * @param {AuthApiAuthCallbackGoogleV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authCallbackGoogleV1(requestParameters: AuthApiAuthCallbackGoogleV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Internal request of auth new vk
     * @param {AuthApiAuthCallbackVkIdV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authCallbackVkIdV1(requestParameters: AuthApiAuthCallbackVkIdV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Internal request of auth old vk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authCallbackVkV1(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get code for auth
     * @param {AuthApiAuthCodeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authCodeV1(requestParameters: AuthApiAuthCodeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CodeAppAuthResponse>;

    /**
     * 
     * @summary CallBack for connect social
     * @param {AuthApiAuthConnectResultV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authConnectResultV1(requestParameters: AuthApiAuthConnectResultV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Connect telegram in account
     * @param {AuthApiAuthConnectTelegramV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authConnectTelegramV1(requestParameters: AuthApiAuthConnectTelegramV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Connected social account
     * @param {AuthApiAuthConnectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authConnectV1(requestParameters: AuthApiAuthConnectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Disconnected social account
     * @param {AuthApiAuthDisconnectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authDisconnectV1(requestParameters: AuthApiAuthDisconnectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Code exchange
     * @param {AuthApiAuthExchangeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authExchangeV1(requestParameters: AuthApiAuthExchangeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<RefreshAuthResponse>;

    /**
     * 
     * @summary Get url for start oauth
     * @param {AuthApiAuthGetAuthUrlV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authGetAuthUrlV1(requestParameters: AuthApiAuthGetAuthUrlV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get basic data for auth user
     * @param {AuthApiAuthGetProfileV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authGetProfileV1(requestParameters: AuthApiAuthGetProfileV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Guest request of auth
     * @param {AuthApiAuthGuestV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authGuestV1(requestParameters: AuthApiAuthGuestV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Logout
     * @param {AuthApiAuthLogoutV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authLogoutV1(requestParameters: AuthApiAuthLogoutV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Update access token
     * @param {AuthApiAuthRefreshAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authRefreshAccessV1(requestParameters: AuthApiAuthRefreshAccessV1Request, options?: RawAxiosRequestConfig): AxiosPromise<RefreshAuthResponse>;

}

/**
 * Request parameters for authAuthTelegramV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthAuthTelegramV1Request
 */
export interface AuthApiAuthAuthTelegramV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly language: AuthAuthTelegramV1LanguageEnum

    /**
     * Time auth
     * @type {number}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly authDate: number

    /**
     * Telegram userId
     * @type {number}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly id: number

    /**
     * First name
     * @type {string}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly firstName: string

    /**
     * Hash
     * @type {string}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly hash: string

    /**
     * App oauth
     * @type {'site' | 'admin' | 'mobile' | 'desktop'}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly app: AuthAuthTelegramV1AppEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly v?: AuthAuthTelegramV1VEnum

    /**
     * Last name
     * @type {string}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly lastName?: string

    /**
     * Nickname
     * @type {string}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly username?: string

    /**
     * Photo
     * @type {string}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly photoUrl?: string

    /**
     * IETF language tag of the user\&#39;s language
     * @type {string}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly languageCode?: string

    /**
     * True, if this user is a Telegram Premium user
     * @type {boolean}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly isPremium?: boolean

    /**
     * True, if this user added the bot to the attachment menu
     * @type {boolean}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly addedToAttachmentMenu?: boolean

    /**
     * Referal id
     * @type {string}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly refId?: string

    /**
     * Redirect url
     * @type {string}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly redirect?: string

    /**
     * Country code
     * @type {string}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly country?: string
}

/**
 * Request parameters for authCallbackGoogleV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthCallbackGoogleV1Request
 */
export interface AuthApiAuthCallbackGoogleV1Request {
    /**
     * 
     * @type {string}
     * @memberof AuthApiAuthCallbackGoogleV1
     */
    readonly state: string
}

/**
 * Request parameters for authCallbackVkIdV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthCallbackVkIdV1Request
 */
export interface AuthApiAuthCallbackVkIdV1Request {
    /**
     * 
     * @type {string}
     * @memberof AuthApiAuthCallbackVkIdV1
     */
    readonly state: string
}

/**
 * Request parameters for authCodeV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthCodeV1Request
 */
export interface AuthApiAuthCodeV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof AuthApiAuthCodeV1
     */
    readonly language: AuthCodeV1LanguageEnum

    /**
     * Create auth code for app
     * @type {'site' | 'admin' | 'mobile' | 'desktop'}
     * @memberof AuthApiAuthCodeV1
     */
    readonly app: AuthCodeV1AppEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof AuthApiAuthCodeV1
     */
    readonly v?: AuthCodeV1VEnum
}

/**
 * Request parameters for authConnectResultV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthConnectResultV1Request
 */
export interface AuthApiAuthConnectResultV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof AuthApiAuthConnectResultV1
     */
    readonly language: AuthConnectResultV1LanguageEnum

    /**
     * Result message for connect
     * @type {string}
     * @memberof AuthApiAuthConnectResultV1
     */
    readonly message: string

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof AuthApiAuthConnectResultV1
     */
    readonly v?: AuthConnectResultV1VEnum
}

/**
 * Request parameters for authConnectTelegramV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthConnectTelegramV1Request
 */
export interface AuthApiAuthConnectTelegramV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof AuthApiAuthConnectTelegramV1
     */
    readonly language: AuthConnectTelegramV1LanguageEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof AuthApiAuthConnectTelegramV1
     */
    readonly v?: AuthConnectTelegramV1VEnum
}

/**
 * Request parameters for authConnectV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthConnectV1Request
 */
export interface AuthApiAuthConnectV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof AuthApiAuthConnectV1
     */
    readonly language: AuthConnectV1LanguageEnum

    /**
     * Provider oauth
     * @type {'google' | 'vk' | 'vk-id' | 'telegram'}
     * @memberof AuthApiAuthConnectV1
     */
    readonly provider: AuthConnectV1ProviderEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof AuthApiAuthConnectV1
     */
    readonly v?: AuthConnectV1VEnum

    /**
     * App oauth
     * @type {'site' | 'admin' | 'mobile' | 'desktop'}
     * @memberof AuthApiAuthConnectV1
     */
    readonly app?: AuthConnectV1AppEnum

    /**
     * Redirect url
     * @type {string}
     * @memberof AuthApiAuthConnectV1
     */
    readonly redirect?: string
}

/**
 * Request parameters for authDisconnectV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthDisconnectV1Request
 */
export interface AuthApiAuthDisconnectV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof AuthApiAuthDisconnectV1
     */
    readonly language: AuthDisconnectV1LanguageEnum

    /**
     * Social id
     * @type {number}
     * @memberof AuthApiAuthDisconnectV1
     */
    readonly socialId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof AuthApiAuthDisconnectV1
     */
    readonly v?: AuthDisconnectV1VEnum
}

/**
 * Request parameters for authExchangeV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthExchangeV1Request
 */
export interface AuthApiAuthExchangeV1Request {
    /**
     * 
     * @type {SiteAuthExchangeRequest}
     * @memberof AuthApiAuthExchangeV1
     */
    readonly siteAuthExchangeRequest: SiteAuthExchangeRequest
}

/**
 * Request parameters for authGetAuthUrlV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthGetAuthUrlV1Request
 */
export interface AuthApiAuthGetAuthUrlV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof AuthApiAuthGetAuthUrlV1
     */
    readonly language: AuthGetAuthUrlV1LanguageEnum

    /**
     * Provider oauth
     * @type {'google' | 'vk' | 'vk-id' | 'telegram'}
     * @memberof AuthApiAuthGetAuthUrlV1
     */
    readonly provider: AuthGetAuthUrlV1ProviderEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof AuthApiAuthGetAuthUrlV1
     */
    readonly v?: AuthGetAuthUrlV1VEnum

    /**
     * App oauth
     * @type {'site' | 'admin' | 'mobile' | 'desktop'}
     * @memberof AuthApiAuthGetAuthUrlV1
     */
    readonly app?: AuthGetAuthUrlV1AppEnum

    /**
     * Redirect url
     * @type {string}
     * @memberof AuthApiAuthGetAuthUrlV1
     */
    readonly redirect?: string

    /**
     * Referal id
     * @type {string}
     * @memberof AuthApiAuthGetAuthUrlV1
     */
    readonly refId?: string

    /**
     * Country code
     * @type {string}
     * @memberof AuthApiAuthGetAuthUrlV1
     */
    readonly country?: string
}

/**
 * Request parameters for authGetProfileV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthGetProfileV1Request
 */
export interface AuthApiAuthGetProfileV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof AuthApiAuthGetProfileV1
     */
    readonly language: AuthGetProfileV1LanguageEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof AuthApiAuthGetProfileV1
     */
    readonly v?: AuthGetProfileV1VEnum
}

/**
 * Request parameters for authGuestV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthGuestV1Request
 */
export interface AuthApiAuthGuestV1Request {
    /**
     * 
     * @type {string}
     * @memberof AuthApiAuthGuestV1
     */
    readonly refId: string
}

/**
 * Request parameters for authLogoutV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthLogoutV1Request
 */
export interface AuthApiAuthLogoutV1Request {
    /**
     * 
     * @type {SiteLogoutAuthRequest}
     * @memberof AuthApiAuthLogoutV1
     */
    readonly siteLogoutAuthRequest: SiteLogoutAuthRequest
}

/**
 * Request parameters for authRefreshAccessV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthRefreshAccessV1Request
 */
export interface AuthApiAuthRefreshAccessV1Request {
    /**
     * 
     * @type {string}
     * @memberof AuthApiAuthRefreshAccessV1
     */
    readonly userAgent: string

    /**
     * 
     * @type {SiteRefreshAuthBodyRequest}
     * @memberof AuthApiAuthRefreshAccessV1
     */
    readonly siteRefreshAuthBodyRequest: SiteRefreshAuthBodyRequest
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI implements AuthApiInterface {
    /**
     * 
     * @summary Auth telegram
     * @param {AuthApiAuthAuthTelegramV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authAuthTelegramV1(requestParameters: AuthApiAuthAuthTelegramV1Request, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authAuthTelegramV1(requestParameters.language, requestParameters.authDate, requestParameters.id, requestParameters.firstName, requestParameters.hash, requestParameters.app, requestParameters.v, requestParameters.lastName, requestParameters.username, requestParameters.photoUrl, requestParameters.languageCode, requestParameters.isPremium, requestParameters.addedToAttachmentMenu, requestParameters.refId, requestParameters.redirect, requestParameters.country, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Internal request of auth google
     * @param {AuthApiAuthCallbackGoogleV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authCallbackGoogleV1(requestParameters: AuthApiAuthCallbackGoogleV1Request, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authCallbackGoogleV1(requestParameters.state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Internal request of auth new vk
     * @param {AuthApiAuthCallbackVkIdV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authCallbackVkIdV1(requestParameters: AuthApiAuthCallbackVkIdV1Request, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authCallbackVkIdV1(requestParameters.state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Internal request of auth old vk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authCallbackVkV1(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authCallbackVkV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get code for auth
     * @param {AuthApiAuthCodeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authCodeV1(requestParameters: AuthApiAuthCodeV1Request, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authCodeV1(requestParameters.language, requestParameters.app, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary CallBack for connect social
     * @param {AuthApiAuthConnectResultV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authConnectResultV1(requestParameters: AuthApiAuthConnectResultV1Request, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authConnectResultV1(requestParameters.language, requestParameters.message, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Connect telegram in account
     * @param {AuthApiAuthConnectTelegramV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authConnectTelegramV1(requestParameters: AuthApiAuthConnectTelegramV1Request, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authConnectTelegramV1(requestParameters.language, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Connected social account
     * @param {AuthApiAuthConnectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authConnectV1(requestParameters: AuthApiAuthConnectV1Request, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authConnectV1(requestParameters.language, requestParameters.provider, requestParameters.v, requestParameters.app, requestParameters.redirect, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Disconnected social account
     * @param {AuthApiAuthDisconnectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authDisconnectV1(requestParameters: AuthApiAuthDisconnectV1Request, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authDisconnectV1(requestParameters.language, requestParameters.socialId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Code exchange
     * @param {AuthApiAuthExchangeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authExchangeV1(requestParameters: AuthApiAuthExchangeV1Request, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authExchangeV1(requestParameters.siteAuthExchangeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get url for start oauth
     * @param {AuthApiAuthGetAuthUrlV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authGetAuthUrlV1(requestParameters: AuthApiAuthGetAuthUrlV1Request, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authGetAuthUrlV1(requestParameters.language, requestParameters.provider, requestParameters.v, requestParameters.app, requestParameters.redirect, requestParameters.refId, requestParameters.country, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get basic data for auth user
     * @param {AuthApiAuthGetProfileV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authGetProfileV1(requestParameters: AuthApiAuthGetProfileV1Request, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authGetProfileV1(requestParameters.language, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Guest request of auth
     * @param {AuthApiAuthGuestV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authGuestV1(requestParameters: AuthApiAuthGuestV1Request, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authGuestV1(requestParameters.refId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logout
     * @param {AuthApiAuthLogoutV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLogoutV1(requestParameters: AuthApiAuthLogoutV1Request, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLogoutV1(requestParameters.siteLogoutAuthRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update access token
     * @param {AuthApiAuthRefreshAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRefreshAccessV1(requestParameters: AuthApiAuthRefreshAccessV1Request, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRefreshAccessV1(requestParameters.userAgent, requestParameters.siteRefreshAuthBodyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AuthAuthTelegramV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type AuthAuthTelegramV1LanguageEnum = typeof AuthAuthTelegramV1LanguageEnum[keyof typeof AuthAuthTelegramV1LanguageEnum];
/**
 * @export
 */
export const AuthAuthTelegramV1AppEnum = {
    Site: 'site',
    Admin: 'admin',
    Mobile: 'mobile',
    Desktop: 'desktop'
} as const;
export type AuthAuthTelegramV1AppEnum = typeof AuthAuthTelegramV1AppEnum[keyof typeof AuthAuthTelegramV1AppEnum];
/**
 * @export
 */
export const AuthAuthTelegramV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AuthAuthTelegramV1VEnum = typeof AuthAuthTelegramV1VEnum[keyof typeof AuthAuthTelegramV1VEnum];
/**
 * @export
 */
export const AuthCodeV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type AuthCodeV1LanguageEnum = typeof AuthCodeV1LanguageEnum[keyof typeof AuthCodeV1LanguageEnum];
/**
 * @export
 */
export const AuthCodeV1AppEnum = {
    Site: 'site',
    Admin: 'admin',
    Mobile: 'mobile',
    Desktop: 'desktop'
} as const;
export type AuthCodeV1AppEnum = typeof AuthCodeV1AppEnum[keyof typeof AuthCodeV1AppEnum];
/**
 * @export
 */
export const AuthCodeV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AuthCodeV1VEnum = typeof AuthCodeV1VEnum[keyof typeof AuthCodeV1VEnum];
/**
 * @export
 */
export const AuthConnectResultV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type AuthConnectResultV1LanguageEnum = typeof AuthConnectResultV1LanguageEnum[keyof typeof AuthConnectResultV1LanguageEnum];
/**
 * @export
 */
export const AuthConnectResultV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AuthConnectResultV1VEnum = typeof AuthConnectResultV1VEnum[keyof typeof AuthConnectResultV1VEnum];
/**
 * @export
 */
export const AuthConnectTelegramV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type AuthConnectTelegramV1LanguageEnum = typeof AuthConnectTelegramV1LanguageEnum[keyof typeof AuthConnectTelegramV1LanguageEnum];
/**
 * @export
 */
export const AuthConnectTelegramV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AuthConnectTelegramV1VEnum = typeof AuthConnectTelegramV1VEnum[keyof typeof AuthConnectTelegramV1VEnum];
/**
 * @export
 */
export const AuthConnectV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type AuthConnectV1LanguageEnum = typeof AuthConnectV1LanguageEnum[keyof typeof AuthConnectV1LanguageEnum];
/**
 * @export
 */
export const AuthConnectV1ProviderEnum = {
    Google: 'google',
    Vk: 'vk',
    VkId: 'vk-id',
    Telegram: 'telegram'
} as const;
export type AuthConnectV1ProviderEnum = typeof AuthConnectV1ProviderEnum[keyof typeof AuthConnectV1ProviderEnum];
/**
 * @export
 */
export const AuthConnectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AuthConnectV1VEnum = typeof AuthConnectV1VEnum[keyof typeof AuthConnectV1VEnum];
/**
 * @export
 */
export const AuthConnectV1AppEnum = {
    Site: 'site',
    Admin: 'admin',
    Mobile: 'mobile',
    Desktop: 'desktop'
} as const;
export type AuthConnectV1AppEnum = typeof AuthConnectV1AppEnum[keyof typeof AuthConnectV1AppEnum];
/**
 * @export
 */
export const AuthDisconnectV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type AuthDisconnectV1LanguageEnum = typeof AuthDisconnectV1LanguageEnum[keyof typeof AuthDisconnectV1LanguageEnum];
/**
 * @export
 */
export const AuthDisconnectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AuthDisconnectV1VEnum = typeof AuthDisconnectV1VEnum[keyof typeof AuthDisconnectV1VEnum];
/**
 * @export
 */
export const AuthGetAuthUrlV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type AuthGetAuthUrlV1LanguageEnum = typeof AuthGetAuthUrlV1LanguageEnum[keyof typeof AuthGetAuthUrlV1LanguageEnum];
/**
 * @export
 */
export const AuthGetAuthUrlV1ProviderEnum = {
    Google: 'google',
    Vk: 'vk',
    VkId: 'vk-id',
    Telegram: 'telegram'
} as const;
export type AuthGetAuthUrlV1ProviderEnum = typeof AuthGetAuthUrlV1ProviderEnum[keyof typeof AuthGetAuthUrlV1ProviderEnum];
/**
 * @export
 */
export const AuthGetAuthUrlV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AuthGetAuthUrlV1VEnum = typeof AuthGetAuthUrlV1VEnum[keyof typeof AuthGetAuthUrlV1VEnum];
/**
 * @export
 */
export const AuthGetAuthUrlV1AppEnum = {
    Site: 'site',
    Admin: 'admin',
    Mobile: 'mobile',
    Desktop: 'desktop'
} as const;
export type AuthGetAuthUrlV1AppEnum = typeof AuthGetAuthUrlV1AppEnum[keyof typeof AuthGetAuthUrlV1AppEnum];
/**
 * @export
 */
export const AuthGetProfileV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type AuthGetProfileV1LanguageEnum = typeof AuthGetProfileV1LanguageEnum[keyof typeof AuthGetProfileV1LanguageEnum];
/**
 * @export
 */
export const AuthGetProfileV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type AuthGetProfileV1VEnum = typeof AuthGetProfileV1VEnum[keyof typeof AuthGetProfileV1VEnum];
