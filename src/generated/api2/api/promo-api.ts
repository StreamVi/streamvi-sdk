/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { SitePromoApplyResponse } from '../models';
// @ts-ignore
import type { SitePromoCheckResponse } from '../models';
/**
 * PromoApi - axios parameter creator
 * @export
 */
export const PromoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Apply code
         * @param {PromoApplyV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} code Code
         * @param {PromoApplyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoApplyV1: async (language: PromoApplyV1LanguageEnum, projectId: number, code: number, v?: PromoApplyV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('promoApplyV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('promoApplyV1', 'projectId', projectId)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('promoApplyV1', 'code', code)
            const localVarPath = `/method/promo/apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check code
         * @param {PromoCheckV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} code Code
         * @param {PromoCheckV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoCheckV1: async (language: PromoCheckV1LanguageEnum, projectId: number, code: number, v?: PromoCheckV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('promoCheckV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('promoCheckV1', 'projectId', projectId)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('promoCheckV1', 'code', code)
            const localVarPath = `/method/promo/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PromoApi - functional programming interface
 * @export
 */
export const PromoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PromoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Apply code
         * @param {PromoApplyV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} code Code
         * @param {PromoApplyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promoApplyV1(language: PromoApplyV1LanguageEnum, projectId: number, code: number, v?: PromoApplyV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SitePromoApplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promoApplyV1(language, projectId, code, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromoApi.promoApplyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Check code
         * @param {PromoCheckV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} code Code
         * @param {PromoCheckV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promoCheckV1(language: PromoCheckV1LanguageEnum, projectId: number, code: number, v?: PromoCheckV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SitePromoCheckResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promoCheckV1(language, projectId, code, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromoApi.promoCheckV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PromoApi - factory interface
 * @export
 */
export const PromoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PromoApiFp(configuration)
    return {
        /**
         * 
         * @summary Apply code
         * @param {PromoApiPromoApplyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoApplyV1(requestParameters: PromoApiPromoApplyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SitePromoApplyResponse> {
            return localVarFp.promoApplyV1(requestParameters.language, requestParameters.project_id, requestParameters.code, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check code
         * @param {PromoApiPromoCheckV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoCheckV1(requestParameters: PromoApiPromoCheckV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SitePromoCheckResponse> {
            return localVarFp.promoCheckV1(requestParameters.language, requestParameters.project_id, requestParameters.code, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PromoApi - interface
 * @export
 * @interface PromoApi
 */
export interface PromoApiInterface {
    /**
     * 
     * @summary Apply code
     * @param {PromoApiPromoApplyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromoApiInterface
     */
    promoApplyV1(requestParameters: PromoApiPromoApplyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SitePromoApplyResponse>;

    /**
     * 
     * @summary Check code
     * @param {PromoApiPromoCheckV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromoApiInterface
     */
    promoCheckV1(requestParameters: PromoApiPromoCheckV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SitePromoCheckResponse>;

}

/**
 * Request parameters for promoApplyV1 operation in PromoApi.
 * @export
 * @interface PromoApiPromoApplyV1Request
 */
export interface PromoApiPromoApplyV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PromoApiPromoApplyV1
     */
    readonly language: PromoApplyV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof PromoApiPromoApplyV1
     */
    readonly project_id: number

    /**
     * Code
     * @type {number}
     * @memberof PromoApiPromoApplyV1
     */
    readonly code: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PromoApiPromoApplyV1
     */
    readonly v?: PromoApplyV1VEnum
}

/**
 * Request parameters for promoCheckV1 operation in PromoApi.
 * @export
 * @interface PromoApiPromoCheckV1Request
 */
export interface PromoApiPromoCheckV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PromoApiPromoCheckV1
     */
    readonly language: PromoCheckV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof PromoApiPromoCheckV1
     */
    readonly project_id: number

    /**
     * Code
     * @type {number}
     * @memberof PromoApiPromoCheckV1
     */
    readonly code: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PromoApiPromoCheckV1
     */
    readonly v?: PromoCheckV1VEnum
}

/**
 * PromoApi - object-oriented interface
 * @export
 * @class PromoApi
 * @extends {BaseAPI}
 */
export class PromoApi extends BaseAPI implements PromoApiInterface {
    /**
     * 
     * @summary Apply code
     * @param {PromoApiPromoApplyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromoApi
     */
    public promoApplyV1(requestParameters: PromoApiPromoApplyV1Request, options?: RawAxiosRequestConfig) {
        return PromoApiFp(this.configuration).promoApplyV1(requestParameters.language, requestParameters.project_id, requestParameters.code, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check code
     * @param {PromoApiPromoCheckV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromoApi
     */
    public promoCheckV1(requestParameters: PromoApiPromoCheckV1Request, options?: RawAxiosRequestConfig) {
        return PromoApiFp(this.configuration).promoCheckV1(requestParameters.language, requestParameters.project_id, requestParameters.code, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const PromoApplyV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PromoApplyV1LanguageEnum = typeof PromoApplyV1LanguageEnum[keyof typeof PromoApplyV1LanguageEnum];
/**
 * @export
 */
export const PromoApplyV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PromoApplyV1VEnum = typeof PromoApplyV1VEnum[keyof typeof PromoApplyV1VEnum];
/**
 * @export
 */
export const PromoCheckV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PromoCheckV1LanguageEnum = typeof PromoCheckV1LanguageEnum[keyof typeof PromoCheckV1LanguageEnum];
/**
 * @export
 */
export const PromoCheckV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PromoCheckV1VEnum = typeof PromoCheckV1VEnum[keyof typeof PromoCheckV1VEnum];
