/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { MethodBroadcastRestreamsResponse } from '../models';
// @ts-ignore
import type { MethodCurrentBroadcastResponse } from '../models';
/**
 * BroadcastApi - axios parameter creator
 * @export
 */
export const BroadcastApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get restreams
         * @param {MethodBroadcastRestreamsV1LanguageEnum} language Current language
         * @param {number} broadcastId broadcast id
         * @param {string} key Chat token
         * @param {MethodBroadcastRestreamsV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodBroadcastRestreamsV1: async (language: MethodBroadcastRestreamsV1LanguageEnum, broadcastId: number, key: string, v?: MethodBroadcastRestreamsV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('methodBroadcastRestreamsV1', 'language', language)
            // verify required parameter 'broadcastId' is not null or undefined
            assertParamExists('methodBroadcastRestreamsV1', 'broadcastId', broadcastId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('methodBroadcastRestreamsV1', 'key', key)
            const localVarPath = `/method/broadcast/restreams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Connect channel, long polling
         * @param {MethodBroadcastTokenChannelV1LanguageEnum} language Current language
         * @param {string} key 
         * @param {MethodBroadcastTokenChannelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodBroadcastTokenChannelV1: async (language: MethodBroadcastTokenChannelV1LanguageEnum, key: string, v?: MethodBroadcastTokenChannelV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('methodBroadcastTokenChannelV1', 'language', language)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('methodBroadcastTokenChannelV1', 'key', key)
            const localVarPath = `/method/broadcast/longpoll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BroadcastApi - functional programming interface
 * @export
 */
export const BroadcastApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BroadcastApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get restreams
         * @param {MethodBroadcastRestreamsV1LanguageEnum} language Current language
         * @param {number} broadcastId broadcast id
         * @param {string} key Chat token
         * @param {MethodBroadcastRestreamsV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async methodBroadcastRestreamsV1(language: MethodBroadcastRestreamsV1LanguageEnum, broadcastId: number, key: string, v?: MethodBroadcastRestreamsV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MethodBroadcastRestreamsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.methodBroadcastRestreamsV1(language, broadcastId, key, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BroadcastApi.methodBroadcastRestreamsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Connect channel, long polling
         * @param {MethodBroadcastTokenChannelV1LanguageEnum} language Current language
         * @param {string} key 
         * @param {MethodBroadcastTokenChannelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async methodBroadcastTokenChannelV1(language: MethodBroadcastTokenChannelV1LanguageEnum, key: string, v?: MethodBroadcastTokenChannelV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MethodCurrentBroadcastResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.methodBroadcastTokenChannelV1(language, key, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BroadcastApi.methodBroadcastTokenChannelV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BroadcastApi - factory interface
 * @export
 */
export const BroadcastApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BroadcastApiFp(configuration)
    return {
        /**
         * 
         * @summary Get restreams
         * @param {BroadcastApiMethodBroadcastRestreamsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodBroadcastRestreamsV1(requestParameters: BroadcastApiMethodBroadcastRestreamsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MethodBroadcastRestreamsResponse> {
            return localVarFp.methodBroadcastRestreamsV1(requestParameters.language, requestParameters.broadcast_id, requestParameters.key, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Connect channel, long polling
         * @param {BroadcastApiMethodBroadcastTokenChannelV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodBroadcastTokenChannelV1(requestParameters: BroadcastApiMethodBroadcastTokenChannelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MethodCurrentBroadcastResponse> {
            return localVarFp.methodBroadcastTokenChannelV1(requestParameters.language, requestParameters.key, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BroadcastApi - interface
 * @export
 * @interface BroadcastApi
 */
export interface BroadcastApiInterface {
    /**
     * 
     * @summary Get restreams
     * @param {BroadcastApiMethodBroadcastRestreamsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApiInterface
     */
    methodBroadcastRestreamsV1(requestParameters: BroadcastApiMethodBroadcastRestreamsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MethodBroadcastRestreamsResponse>;

    /**
     * 
     * @summary Connect channel, long polling
     * @param {BroadcastApiMethodBroadcastTokenChannelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApiInterface
     */
    methodBroadcastTokenChannelV1(requestParameters: BroadcastApiMethodBroadcastTokenChannelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<MethodCurrentBroadcastResponse>;

}

/**
 * Request parameters for methodBroadcastRestreamsV1 operation in BroadcastApi.
 * @export
 * @interface BroadcastApiMethodBroadcastRestreamsV1Request
 */
export interface BroadcastApiMethodBroadcastRestreamsV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof BroadcastApiMethodBroadcastRestreamsV1
     */
    readonly language: MethodBroadcastRestreamsV1LanguageEnum

    /**
     * broadcast id
     * @type {number}
     * @memberof BroadcastApiMethodBroadcastRestreamsV1
     */
    readonly broadcast_id: number

    /**
     * Chat token
     * @type {string}
     * @memberof BroadcastApiMethodBroadcastRestreamsV1
     */
    readonly key: string

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof BroadcastApiMethodBroadcastRestreamsV1
     */
    readonly v?: MethodBroadcastRestreamsV1VEnum
}

/**
 * Request parameters for methodBroadcastTokenChannelV1 operation in BroadcastApi.
 * @export
 * @interface BroadcastApiMethodBroadcastTokenChannelV1Request
 */
export interface BroadcastApiMethodBroadcastTokenChannelV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof BroadcastApiMethodBroadcastTokenChannelV1
     */
    readonly language: MethodBroadcastTokenChannelV1LanguageEnum

    /**
     * 
     * @type {string}
     * @memberof BroadcastApiMethodBroadcastTokenChannelV1
     */
    readonly key: string

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof BroadcastApiMethodBroadcastTokenChannelV1
     */
    readonly v?: MethodBroadcastTokenChannelV1VEnum
}

/**
 * BroadcastApi - object-oriented interface
 * @export
 * @class BroadcastApi
 * @extends {BaseAPI}
 */
export class BroadcastApi extends BaseAPI implements BroadcastApiInterface {
    /**
     * 
     * @summary Get restreams
     * @param {BroadcastApiMethodBroadcastRestreamsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    public methodBroadcastRestreamsV1(requestParameters: BroadcastApiMethodBroadcastRestreamsV1Request, options?: RawAxiosRequestConfig) {
        return BroadcastApiFp(this.configuration).methodBroadcastRestreamsV1(requestParameters.language, requestParameters.broadcast_id, requestParameters.key, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Connect channel, long polling
     * @param {BroadcastApiMethodBroadcastTokenChannelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    public methodBroadcastTokenChannelV1(requestParameters: BroadcastApiMethodBroadcastTokenChannelV1Request, options?: RawAxiosRequestConfig) {
        return BroadcastApiFp(this.configuration).methodBroadcastTokenChannelV1(requestParameters.language, requestParameters.key, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const MethodBroadcastRestreamsV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type MethodBroadcastRestreamsV1LanguageEnum = typeof MethodBroadcastRestreamsV1LanguageEnum[keyof typeof MethodBroadcastRestreamsV1LanguageEnum];
/**
 * @export
 */
export const MethodBroadcastRestreamsV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type MethodBroadcastRestreamsV1VEnum = typeof MethodBroadcastRestreamsV1VEnum[keyof typeof MethodBroadcastRestreamsV1VEnum];
/**
 * @export
 */
export const MethodBroadcastTokenChannelV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type MethodBroadcastTokenChannelV1LanguageEnum = typeof MethodBroadcastTokenChannelV1LanguageEnum[keyof typeof MethodBroadcastTokenChannelV1LanguageEnum];
/**
 * @export
 */
export const MethodBroadcastTokenChannelV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type MethodBroadcastTokenChannelV1VEnum = typeof MethodBroadcastTokenChannelV1VEnum[keyof typeof MethodBroadcastTokenChannelV1VEnum];
