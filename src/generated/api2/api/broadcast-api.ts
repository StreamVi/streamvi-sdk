/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { MethodBroadcastRestreamsResponse } from '../models';
// @ts-ignore
import type { MethodCurrentBroadcastResponse } from '../models';
/**
 * BroadcastApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get restreams
         * @param {restreamsVEnum} v Version
         * @param {restreamsLanguageEnum} language Current language
         * @param {number} broadcastId broadcast id
         * @param {string} key Chat token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restreams: async (v: restreamsVEnum, language: restreamsLanguageEnum, broadcastId: number, key: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('restreams', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('restreams', 'language', language)
            // verify required parameter 'broadcastId' is not null or undefined
            assertParamExists('restreams', 'broadcastId', broadcastId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('restreams', 'key', key)
            const localVarPath = `/method/broadcast/restreams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Connect channel, long polling
         * @param {tokenChannelVEnum} v Version
         * @param {tokenChannelLanguageEnum} language Current language
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenChannel: async (v: tokenChannelVEnum, language: tokenChannelLanguageEnum, key: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('tokenChannel', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('tokenChannel', 'language', language)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('tokenChannel', 'key', key)
            const localVarPath = `/method/broadcast/longpoll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BroadcastApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get restreams
         * @param {restreamsVEnum} v Version
         * @param {restreamsLanguageEnum} language Current language
         * @param {number} broadcastId broadcast id
         * @param {string} key Chat token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restreams(v: restreamsVEnum, language: restreamsLanguageEnum, broadcastId: number, key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MethodBroadcastRestreamsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restreams(v, language, broadcastId, key, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BroadcastApi.restreams']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Connect channel, long polling
         * @param {tokenChannelVEnum} v Version
         * @param {tokenChannelLanguageEnum} language Current language
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenChannel(v: tokenChannelVEnum, language: tokenChannelLanguageEnum, key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MethodCurrentBroadcastResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenChannel(v, language, key, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BroadcastApi.tokenChannel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BroadcastApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Get restreams
         * @param {restreamsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restreams(requestParameters: restreamsRequest, options?: RawAxiosRequestConfig): AxiosPromise<MethodBroadcastRestreamsResponse> {
            return localVarFp.restreams(requestParameters.v, requestParameters.language, requestParameters.broadcastId, requestParameters.key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Connect channel, long polling
         * @param {tokenChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenChannel(requestParameters: tokenChannelRequest, options?: RawAxiosRequestConfig): AxiosPromise<MethodCurrentBroadcastResponse> {
            return localVarFp.tokenChannel(requestParameters.v, requestParameters.language, requestParameters.key, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for restreams operation in BroadcastApi.
 * @export
 * @interface restreamsRequest
 */
export interface restreamsRequest {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof restreams
     */
    readonly v: restreamsVEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof restreams
     */
    readonly language: restreamsLanguageEnum

    /**
     * broadcast id
     * @type {number}
     * @memberof restreams
     */
    readonly broadcastId: number

    /**
     * Chat token
     * @type {string}
     * @memberof restreams
     */
    readonly key: string
}

/**
 * Request parameters for tokenChannel operation in BroadcastApi.
 * @export
 * @interface tokenChannelRequest
 */
export interface tokenChannelRequest {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof tokenChannel
     */
    readonly v: tokenChannelVEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof tokenChannel
     */
    readonly language: tokenChannelLanguageEnum

    /**
     * 
     * @type {string}
     * @memberof tokenChannel
     */
    readonly key: string
}

/**
 * BroadcastApi - object-oriented interface
 * @export
 * @class BroadcastApi
 * @extends {BaseAPI}
 */
export class BroadcastApi extends BaseAPI {
    /**
     * 
     * @summary Get restreams
     * @param {restreamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    public restreams(requestParameters: restreamsRequest, options?: RawAxiosRequestConfig) {
        return fp(this.configuration).restreams(requestParameters.v, requestParameters.language, requestParameters.broadcastId, requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Connect channel, long polling
     * @param {tokenChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    public tokenChannel(requestParameters: tokenChannelRequest, options?: RawAxiosRequestConfig) {
        return fp(this.configuration).tokenChannel(requestParameters.v, requestParameters.language, requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum restreamsVEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum restreamsLanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum tokenChannelVEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum tokenChannelLanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
