/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { ListOfPlaylistItemResponse } from '../models';
// @ts-ignore
import type { ListOfSitePlannedResponse } from '../models';
// @ts-ignore
import type { SiteChannelStatusResponse } from '../models';
// @ts-ignore
import type { SitePlannedResponse } from '../models';
// @ts-ignore
import type { SiteSetNameRequest } from '../models';
// @ts-ignore
import type { SiteSetPlannedRequest } from '../models';
// @ts-ignore
import type { SiteSetTranscoderRequest } from '../models';
// @ts-ignore
import type { SiteSetUrlRequest } from '../models';
// @ts-ignore
import type { SiteUpdateChatTelegramRequest } from '../models';
// @ts-ignore
import type { SiteUpdateOptionsOkRequest } from '../models';
// @ts-ignore
import type { SiteUpdateOptionsTrovoRequest } from '../models';
// @ts-ignore
import type { SiteUpdateOptionsTwitchRequest } from '../models';
// @ts-ignore
import type { SiteUpdateOptionsVkRequest } from '../models';
// @ts-ignore
import type { SiteUpdateOptionsVkVideoLiveRequest } from '../models';
// @ts-ignore
import type { SiteUpdateOptionsYoutubeRequest } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
// @ts-ignore
import type { TelegramChatPostsItem } from '../models';
// @ts-ignore
import type { TelegramChatPostsResponseDto } from '../models';
// @ts-ignore
import type { TelegramInitConnectResponseDto } from '../models';
// @ts-ignore
import type { TelegramSetSettingsRequestDto } from '../models';
// @ts-ignore
import type { TelegramSettingsResponseDto } from '../models';
/**
 * ChannelSettingsApi - axios parameter creator
 * @export
 */
export const ChannelSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get telegram settings
         * @param {ChannelChatGetTelegramSettingV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelChatGetTelegramSettingV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatGetTelegramSettingV1: async (language: ChannelChatGetTelegramSettingV1LanguageEnum, projectId: number, channelId: number, v?: ChannelChatGetTelegramSettingV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('channelChatGetTelegramSettingV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('channelChatGetTelegramSettingV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('channelChatGetTelegramSettingV1', 'channelId', channelId)
            const localVarPath = `/method/channel_settings/chat/telegram/setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get code for connected chat
         * @param {ChannelChatInitTelegramChatConnectV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelChatInitTelegramChatConnectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatInitTelegramChatConnectV1: async (language: ChannelChatInitTelegramChatConnectV1LanguageEnum, projectId: number, channelId: number, v?: ChannelChatInitTelegramChatConnectV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('channelChatInitTelegramChatConnectV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('channelChatInitTelegramChatConnectV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('channelChatInitTelegramChatConnectV1', 'channelId', channelId)
            const localVarPath = `/method/channel_settings/chat/telegram/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Disconnect telegram chat
         * @param {ChannelChatRemoveTelegramChatV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelChatRemoveTelegramChatV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatRemoveTelegramChatV1: async (language: ChannelChatRemoveTelegramChatV1LanguageEnum, projectId: number, channelId: number, v?: ChannelChatRemoveTelegramChatV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('channelChatRemoveTelegramChatV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('channelChatRemoveTelegramChatV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('channelChatRemoveTelegramChatV1', 'channelId', channelId)
            const localVarPath = `/method/channel_settings/chat/telegram/disconnect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set telegram settings
         * @param {ChannelChatSetTelegramSettingV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {TelegramSetSettingsRequestDto} telegramSetSettingsRequestDto 
         * @param {ChannelChatSetTelegramSettingV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatSetTelegramSettingV1: async (language: ChannelChatSetTelegramSettingV1LanguageEnum, projectId: number, channelId: number, telegramSetSettingsRequestDto: TelegramSetSettingsRequestDto, v?: ChannelChatSetTelegramSettingV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('channelChatSetTelegramSettingV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('channelChatSetTelegramSettingV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('channelChatSetTelegramSettingV1', 'channelId', channelId)
            // verify required parameter 'telegramSetSettingsRequestDto' is not null or undefined
            assertParamExists('channelChatSetTelegramSettingV1', 'telegramSetSettingsRequestDto', telegramSetSettingsRequestDto)
            const localVarPath = `/method/channel_settings/chat/telegram/setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(telegramSetSettingsRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get telegram post list
         * @param {ChannelChatTelegramPostsV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelChatTelegramPostsV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatTelegramPostsV1: async (language: ChannelChatTelegramPostsV1LanguageEnum, projectId: number, channelId: number, v?: ChannelChatTelegramPostsV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('channelChatTelegramPostsV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('channelChatTelegramPostsV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('channelChatTelegramPostsV1', 'channelId', channelId)
            const localVarPath = `/method/channel_settings/chat/telegram/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Optional settings for telegram
         * @param {SiteUpdateChatTelegramRequest} siteUpdateChatTelegramRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatUpdateOptionsTelegramV1: async (siteUpdateChatTelegramRequest: SiteUpdateChatTelegramRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteUpdateChatTelegramRequest' is not null or undefined
            assertParamExists('channelChatUpdateOptionsTelegramV1', 'siteUpdateChatTelegramRequest', siteUpdateChatTelegramRequest)
            const localVarPath = `/method/channel_settings/chat/setTelegram`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteUpdateChatTelegramRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get planned list
         * @param {ChannelOptionsGetPlannedV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelOptionsGetPlannedV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsGetPlannedV1: async (language: ChannelOptionsGetPlannedV1LanguageEnum, projectId: number, channelId: number, v?: ChannelOptionsGetPlannedV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('channelOptionsGetPlannedV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('channelOptionsGetPlannedV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('channelOptionsGetPlannedV1', 'channelId', channelId)
            const localVarPath = `/method/channel_settings/options/getPlanned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get playlists from the platform
         * @param {ChannelOptionsGetPlayListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelOptionsGetPlayListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsGetPlayListV1: async (language: ChannelOptionsGetPlayListV1LanguageEnum, projectId: number, channelId: number, v?: ChannelOptionsGetPlayListV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('channelOptionsGetPlayListV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('channelOptionsGetPlayListV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('channelOptionsGetPlayListV1', 'channelId', channelId)
            const localVarPath = `/method/channel_settings/options/getPlaylist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Optional settings for ok. Depends on the tariff.
         * @param {SiteUpdateOptionsOkRequest} siteUpdateOptionsOkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsOkV1: async (siteUpdateOptionsOkRequest: SiteUpdateOptionsOkRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteUpdateOptionsOkRequest' is not null or undefined
            assertParamExists('channelOptionsUpdateOptionsOkV1', 'siteUpdateOptionsOkRequest', siteUpdateOptionsOkRequest)
            const localVarPath = `/method/channel_settings/options/setOk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteUpdateOptionsOkRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Optional settings for trovo. Depends on the tariff.
         * @param {SiteUpdateOptionsTrovoRequest} siteUpdateOptionsTrovoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsTrovoV1: async (siteUpdateOptionsTrovoRequest: SiteUpdateOptionsTrovoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteUpdateOptionsTrovoRequest' is not null or undefined
            assertParamExists('channelOptionsUpdateOptionsTrovoV1', 'siteUpdateOptionsTrovoRequest', siteUpdateOptionsTrovoRequest)
            const localVarPath = `/method/channel_settings/options/setTrovo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteUpdateOptionsTrovoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Optional settings for twitch. Depends on the tariff.
         * @param {SiteUpdateOptionsTwitchRequest} siteUpdateOptionsTwitchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsTwitchV1: async (siteUpdateOptionsTwitchRequest: SiteUpdateOptionsTwitchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteUpdateOptionsTwitchRequest' is not null or undefined
            assertParamExists('channelOptionsUpdateOptionsTwitchV1', 'siteUpdateOptionsTwitchRequest', siteUpdateOptionsTwitchRequest)
            const localVarPath = `/method/channel_settings/options/setTwitch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteUpdateOptionsTwitchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Optional settings for vk. Depends on the tariff.
         * @param {SiteUpdateOptionsVkRequest} siteUpdateOptionsVkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsVkV1: async (siteUpdateOptionsVkRequest: SiteUpdateOptionsVkRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteUpdateOptionsVkRequest' is not null or undefined
            assertParamExists('channelOptionsUpdateOptionsVkV1', 'siteUpdateOptionsVkRequest', siteUpdateOptionsVkRequest)
            const localVarPath = `/method/channel_settings/options/setVk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteUpdateOptionsVkRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Optional settings for vk video live. Depends on the tariff.
         * @param {SiteUpdateOptionsVkVideoLiveRequest} siteUpdateOptionsVkVideoLiveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsVkVideoLiveV1: async (siteUpdateOptionsVkVideoLiveRequest: SiteUpdateOptionsVkVideoLiveRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteUpdateOptionsVkVideoLiveRequest' is not null or undefined
            assertParamExists('channelOptionsUpdateOptionsVkVideoLiveV1', 'siteUpdateOptionsVkVideoLiveRequest', siteUpdateOptionsVkVideoLiveRequest)
            const localVarPath = `/method/channel_settings/options/setVkVideoLive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteUpdateOptionsVkVideoLiveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Optional settings for youtube. Depends on the tariff.
         * @param {SiteUpdateOptionsYoutubeRequest} siteUpdateOptionsYoutubeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsYoutubeV1: async (siteUpdateOptionsYoutubeRequest: SiteUpdateOptionsYoutubeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteUpdateOptionsYoutubeRequest' is not null or undefined
            assertParamExists('channelOptionsUpdateOptionsYoutubeV1', 'siteUpdateOptionsYoutubeRequest', siteUpdateOptionsYoutubeRequest)
            const localVarPath = `/method/channel_settings/options/setYoutube`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteUpdateOptionsYoutubeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set planned id. Depends on the tariff.
         * @param {SiteSetPlannedRequest} siteSetPlannedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdatePlannedV1: async (siteSetPlannedRequest: SiteSetPlannedRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteSetPlannedRequest' is not null or undefined
            assertParamExists('channelOptionsUpdatePlannedV1', 'siteSetPlannedRequest', siteSetPlannedRequest)
            const localVarPath = `/method/channel_settings/options/setPlanned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteSetPlannedRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get status platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingGetStatusV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/method/channel_settings/getStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set name from custom channel. Global settings.
         * @param {SiteSetNameRequest} siteSetNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingSetNameV1: async (siteSetNameRequest: SiteSetNameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteSetNameRequest' is not null or undefined
            assertParamExists('channelSettingSetNameV1', 'siteSetNameRequest', siteSetNameRequest)
            const localVarPath = `/method/channel_settings/setName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteSetNameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set rtmp url from channel. Global settings.
         * @param {SiteSetUrlRequest} siteSetUrlRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingUpdateRtmpV1: async (siteSetUrlRequest: SiteSetUrlRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteSetUrlRequest' is not null or undefined
            assertParamExists('channelSettingUpdateRtmpV1', 'siteSetUrlRequest', siteSetUrlRequest)
            const localVarPath = `/method/channel_settings/setRtmp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteSetUrlRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get status platform
         * @param {ChannelSettingUpdateTokenV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelSettingUpdateTokenV1RoleEnum} role Token role
         * @param {ChannelSettingUpdateTokenV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingUpdateTokenV1: async (language: ChannelSettingUpdateTokenV1LanguageEnum, projectId: number, channelId: number, role: ChannelSettingUpdateTokenV1RoleEnum, v?: ChannelSettingUpdateTokenV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('channelSettingUpdateTokenV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('channelSettingUpdateTokenV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('channelSettingUpdateTokenV1', 'channelId', channelId)
            // verify required parameter 'role' is not null or undefined
            assertParamExists('channelSettingUpdateTokenV1', 'role', role)
            const localVarPath = `/method/channel_settings/update-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set transcoder from channel. Personal settings.
         * @param {SiteSetTranscoderRequest} siteSetTranscoderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingUpdateTranscoderV1: async (siteSetTranscoderRequest: SiteSetTranscoderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteSetTranscoderRequest' is not null or undefined
            assertParamExists('channelSettingUpdateTranscoderV1', 'siteSetTranscoderRequest', siteSetTranscoderRequest)
            const localVarPath = `/method/channel_settings/setTranscoder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteSetTranscoderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get telegram post by filter
         * @param {TelegramGetPostByFilterV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} filterMode 
         * @param {TelegramGetPostByFilterV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        telegramGetPostByFilterV1: async (language: TelegramGetPostByFilterV1LanguageEnum, projectId: number, channelId: number, filterMode: number, v?: TelegramGetPostByFilterV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('telegramGetPostByFilterV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('telegramGetPostByFilterV1', 'projectId', projectId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('telegramGetPostByFilterV1', 'channelId', channelId)
            // verify required parameter 'filterMode' is not null or undefined
            assertParamExists('telegramGetPostByFilterV1', 'filterMode', filterMode)
            const localVarPath = `/method/channel_settings/chat/telegram/posts/get-by-filter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (filterMode !== undefined) {
                localVarQueryParameter['filter_mode'] = filterMode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelSettingsApi - functional programming interface
 * @export
 */
export const ChannelSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChannelSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get telegram settings
         * @param {ChannelChatGetTelegramSettingV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelChatGetTelegramSettingV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelChatGetTelegramSettingV1(language: ChannelChatGetTelegramSettingV1LanguageEnum, projectId: number, channelId: number, v?: ChannelChatGetTelegramSettingV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TelegramSettingsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelChatGetTelegramSettingV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelChatGetTelegramSettingV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get code for connected chat
         * @param {ChannelChatInitTelegramChatConnectV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelChatInitTelegramChatConnectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelChatInitTelegramChatConnectV1(language: ChannelChatInitTelegramChatConnectV1LanguageEnum, projectId: number, channelId: number, v?: ChannelChatInitTelegramChatConnectV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TelegramInitConnectResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelChatInitTelegramChatConnectV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelChatInitTelegramChatConnectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Disconnect telegram chat
         * @param {ChannelChatRemoveTelegramChatV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelChatRemoveTelegramChatV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelChatRemoveTelegramChatV1(language: ChannelChatRemoveTelegramChatV1LanguageEnum, projectId: number, channelId: number, v?: ChannelChatRemoveTelegramChatV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelChatRemoveTelegramChatV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelChatRemoveTelegramChatV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set telegram settings
         * @param {ChannelChatSetTelegramSettingV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {TelegramSetSettingsRequestDto} telegramSetSettingsRequestDto 
         * @param {ChannelChatSetTelegramSettingV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelChatSetTelegramSettingV1(language: ChannelChatSetTelegramSettingV1LanguageEnum, projectId: number, channelId: number, telegramSetSettingsRequestDto: TelegramSetSettingsRequestDto, v?: ChannelChatSetTelegramSettingV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelChatSetTelegramSettingV1(language, projectId, channelId, telegramSetSettingsRequestDto, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelChatSetTelegramSettingV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get telegram post list
         * @param {ChannelChatTelegramPostsV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelChatTelegramPostsV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelChatTelegramPostsV1(language: ChannelChatTelegramPostsV1LanguageEnum, projectId: number, channelId: number, v?: ChannelChatTelegramPostsV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TelegramChatPostsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelChatTelegramPostsV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelChatTelegramPostsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Optional settings for telegram
         * @param {SiteUpdateChatTelegramRequest} siteUpdateChatTelegramRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelChatUpdateOptionsTelegramV1(siteUpdateChatTelegramRequest: SiteUpdateChatTelegramRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelChatUpdateOptionsTelegramV1(siteUpdateChatTelegramRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelChatUpdateOptionsTelegramV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get planned list
         * @param {ChannelOptionsGetPlannedV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelOptionsGetPlannedV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelOptionsGetPlannedV1(language: ChannelOptionsGetPlannedV1LanguageEnum, projectId: number, channelId: number, v?: ChannelOptionsGetPlannedV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfSitePlannedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelOptionsGetPlannedV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelOptionsGetPlannedV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get playlists from the platform
         * @param {ChannelOptionsGetPlayListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelOptionsGetPlayListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelOptionsGetPlayListV1(language: ChannelOptionsGetPlayListV1LanguageEnum, projectId: number, channelId: number, v?: ChannelOptionsGetPlayListV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfPlaylistItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelOptionsGetPlayListV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelOptionsGetPlayListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Optional settings for ok. Depends on the tariff.
         * @param {SiteUpdateOptionsOkRequest} siteUpdateOptionsOkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelOptionsUpdateOptionsOkV1(siteUpdateOptionsOkRequest: SiteUpdateOptionsOkRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelOptionsUpdateOptionsOkV1(siteUpdateOptionsOkRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelOptionsUpdateOptionsOkV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Optional settings for trovo. Depends on the tariff.
         * @param {SiteUpdateOptionsTrovoRequest} siteUpdateOptionsTrovoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelOptionsUpdateOptionsTrovoV1(siteUpdateOptionsTrovoRequest: SiteUpdateOptionsTrovoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelOptionsUpdateOptionsTrovoV1(siteUpdateOptionsTrovoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelOptionsUpdateOptionsTrovoV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Optional settings for twitch. Depends on the tariff.
         * @param {SiteUpdateOptionsTwitchRequest} siteUpdateOptionsTwitchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelOptionsUpdateOptionsTwitchV1(siteUpdateOptionsTwitchRequest: SiteUpdateOptionsTwitchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelOptionsUpdateOptionsTwitchV1(siteUpdateOptionsTwitchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelOptionsUpdateOptionsTwitchV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Optional settings for vk. Depends on the tariff.
         * @param {SiteUpdateOptionsVkRequest} siteUpdateOptionsVkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelOptionsUpdateOptionsVkV1(siteUpdateOptionsVkRequest: SiteUpdateOptionsVkRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelOptionsUpdateOptionsVkV1(siteUpdateOptionsVkRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelOptionsUpdateOptionsVkV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Optional settings for vk video live. Depends on the tariff.
         * @param {SiteUpdateOptionsVkVideoLiveRequest} siteUpdateOptionsVkVideoLiveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelOptionsUpdateOptionsVkVideoLiveV1(siteUpdateOptionsVkVideoLiveRequest: SiteUpdateOptionsVkVideoLiveRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelOptionsUpdateOptionsVkVideoLiveV1(siteUpdateOptionsVkVideoLiveRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelOptionsUpdateOptionsVkVideoLiveV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Optional settings for youtube. Depends on the tariff.
         * @param {SiteUpdateOptionsYoutubeRequest} siteUpdateOptionsYoutubeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelOptionsUpdateOptionsYoutubeV1(siteUpdateOptionsYoutubeRequest: SiteUpdateOptionsYoutubeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelOptionsUpdateOptionsYoutubeV1(siteUpdateOptionsYoutubeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelOptionsUpdateOptionsYoutubeV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set planned id. Depends on the tariff.
         * @param {SiteSetPlannedRequest} siteSetPlannedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelOptionsUpdatePlannedV1(siteSetPlannedRequest: SiteSetPlannedRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SitePlannedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelOptionsUpdatePlannedV1(siteSetPlannedRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelOptionsUpdatePlannedV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get status platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelSettingGetStatusV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteChannelStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelSettingGetStatusV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelSettingGetStatusV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set name from custom channel. Global settings.
         * @param {SiteSetNameRequest} siteSetNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelSettingSetNameV1(siteSetNameRequest: SiteSetNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelSettingSetNameV1(siteSetNameRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelSettingSetNameV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set rtmp url from channel. Global settings.
         * @param {SiteSetUrlRequest} siteSetUrlRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelSettingUpdateRtmpV1(siteSetUrlRequest: SiteSetUrlRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelSettingUpdateRtmpV1(siteSetUrlRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelSettingUpdateRtmpV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get status platform
         * @param {ChannelSettingUpdateTokenV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelSettingUpdateTokenV1RoleEnum} role Token role
         * @param {ChannelSettingUpdateTokenV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelSettingUpdateTokenV1(language: ChannelSettingUpdateTokenV1LanguageEnum, projectId: number, channelId: number, role: ChannelSettingUpdateTokenV1RoleEnum, v?: ChannelSettingUpdateTokenV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelSettingUpdateTokenV1(language, projectId, channelId, role, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelSettingUpdateTokenV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set transcoder from channel. Personal settings.
         * @param {SiteSetTranscoderRequest} siteSetTranscoderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelSettingUpdateTranscoderV1(siteSetTranscoderRequest: SiteSetTranscoderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelSettingUpdateTranscoderV1(siteSetTranscoderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.channelSettingUpdateTranscoderV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get telegram post by filter
         * @param {TelegramGetPostByFilterV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} filterMode 
         * @param {TelegramGetPostByFilterV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async telegramGetPostByFilterV1(language: TelegramGetPostByFilterV1LanguageEnum, projectId: number, channelId: number, filterMode: number, v?: TelegramGetPostByFilterV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TelegramChatPostsItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.telegramGetPostByFilterV1(language, projectId, channelId, filterMode, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChannelSettingsApi.telegramGetPostByFilterV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChannelSettingsApi - factory interface
 * @export
 */
export const ChannelSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChannelSettingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get telegram settings
         * @param {ChannelSettingsApiChannelChatGetTelegramSettingV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatGetTelegramSettingV1(requestParameters: ChannelSettingsApiChannelChatGetTelegramSettingV1Request, options?: RawAxiosRequestConfig): AxiosPromise<TelegramSettingsResponseDto> {
            return localVarFp.channelChatGetTelegramSettingV1(requestParameters.language, requestParameters.project_id, requestParameters.channel_id, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get code for connected chat
         * @param {ChannelSettingsApiChannelChatInitTelegramChatConnectV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatInitTelegramChatConnectV1(requestParameters: ChannelSettingsApiChannelChatInitTelegramChatConnectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<TelegramInitConnectResponseDto> {
            return localVarFp.channelChatInitTelegramChatConnectV1(requestParameters.language, requestParameters.project_id, requestParameters.channel_id, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Disconnect telegram chat
         * @param {ChannelSettingsApiChannelChatRemoveTelegramChatV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatRemoveTelegramChatV1(requestParameters: ChannelSettingsApiChannelChatRemoveTelegramChatV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.channelChatRemoveTelegramChatV1(requestParameters.language, requestParameters.project_id, requestParameters.channel_id, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set telegram settings
         * @param {ChannelSettingsApiChannelChatSetTelegramSettingV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatSetTelegramSettingV1(requestParameters: ChannelSettingsApiChannelChatSetTelegramSettingV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.channelChatSetTelegramSettingV1(requestParameters.language, requestParameters.project_id, requestParameters.channel_id, requestParameters.TelegramSetSettingsRequestDto, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get telegram post list
         * @param {ChannelSettingsApiChannelChatTelegramPostsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatTelegramPostsV1(requestParameters: ChannelSettingsApiChannelChatTelegramPostsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<TelegramChatPostsResponseDto> {
            return localVarFp.channelChatTelegramPostsV1(requestParameters.language, requestParameters.project_id, requestParameters.channel_id, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Optional settings for telegram
         * @param {ChannelSettingsApiChannelChatUpdateOptionsTelegramV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatUpdateOptionsTelegramV1(requestParameters: ChannelSettingsApiChannelChatUpdateOptionsTelegramV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.channelChatUpdateOptionsTelegramV1(requestParameters.SiteUpdateChatTelegramRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get planned list
         * @param {ChannelSettingsApiChannelOptionsGetPlannedV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsGetPlannedV1(requestParameters: ChannelSettingsApiChannelOptionsGetPlannedV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfSitePlannedResponse> {
            return localVarFp.channelOptionsGetPlannedV1(requestParameters.language, requestParameters.project_id, requestParameters.channel_id, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get playlists from the platform
         * @param {ChannelSettingsApiChannelOptionsGetPlayListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsGetPlayListV1(requestParameters: ChannelSettingsApiChannelOptionsGetPlayListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfPlaylistItemResponse> {
            return localVarFp.channelOptionsGetPlayListV1(requestParameters.language, requestParameters.project_id, requestParameters.channel_id, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Optional settings for ok. Depends on the tariff.
         * @param {ChannelSettingsApiChannelOptionsUpdateOptionsOkV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsOkV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsOkV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.channelOptionsUpdateOptionsOkV1(requestParameters.SiteUpdateOptionsOkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Optional settings for trovo. Depends on the tariff.
         * @param {ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsTrovoV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.channelOptionsUpdateOptionsTrovoV1(requestParameters.SiteUpdateOptionsTrovoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Optional settings for twitch. Depends on the tariff.
         * @param {ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsTwitchV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.channelOptionsUpdateOptionsTwitchV1(requestParameters.SiteUpdateOptionsTwitchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Optional settings for vk. Depends on the tariff.
         * @param {ChannelSettingsApiChannelOptionsUpdateOptionsVkV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsVkV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsVkV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.channelOptionsUpdateOptionsVkV1(requestParameters.SiteUpdateOptionsVkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Optional settings for vk video live. Depends on the tariff.
         * @param {ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsVkVideoLiveV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.channelOptionsUpdateOptionsVkVideoLiveV1(requestParameters.SiteUpdateOptionsVkVideoLiveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Optional settings for youtube. Depends on the tariff.
         * @param {ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsYoutubeV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.channelOptionsUpdateOptionsYoutubeV1(requestParameters.SiteUpdateOptionsYoutubeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set planned id. Depends on the tariff.
         * @param {ChannelSettingsApiChannelOptionsUpdatePlannedV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdatePlannedV1(requestParameters: ChannelSettingsApiChannelOptionsUpdatePlannedV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SitePlannedResponse> {
            return localVarFp.channelOptionsUpdatePlannedV1(requestParameters.SiteSetPlannedRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get status platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingGetStatusV1(options?: RawAxiosRequestConfig): AxiosPromise<SiteChannelStatusResponse> {
            return localVarFp.channelSettingGetStatusV1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set name from custom channel. Global settings.
         * @param {ChannelSettingsApiChannelSettingSetNameV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingSetNameV1(requestParameters: ChannelSettingsApiChannelSettingSetNameV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.channelSettingSetNameV1(requestParameters.SiteSetNameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set rtmp url from channel. Global settings.
         * @param {ChannelSettingsApiChannelSettingUpdateRtmpV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingUpdateRtmpV1(requestParameters: ChannelSettingsApiChannelSettingUpdateRtmpV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.channelSettingUpdateRtmpV1(requestParameters.SiteSetUrlRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get status platform
         * @param {ChannelSettingsApiChannelSettingUpdateTokenV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingUpdateTokenV1(requestParameters: ChannelSettingsApiChannelSettingUpdateTokenV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.channelSettingUpdateTokenV1(requestParameters.language, requestParameters.project_id, requestParameters.channel_id, requestParameters.role, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set transcoder from channel. Personal settings.
         * @param {ChannelSettingsApiChannelSettingUpdateTranscoderV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingUpdateTranscoderV1(requestParameters: ChannelSettingsApiChannelSettingUpdateTranscoderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.channelSettingUpdateTranscoderV1(requestParameters.SiteSetTranscoderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get telegram post by filter
         * @param {ChannelSettingsApiTelegramGetPostByFilterV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        telegramGetPostByFilterV1(requestParameters: ChannelSettingsApiTelegramGetPostByFilterV1Request, options?: RawAxiosRequestConfig): AxiosPromise<TelegramChatPostsItem> {
            return localVarFp.telegramGetPostByFilterV1(requestParameters.language, requestParameters.project_id, requestParameters.channel_id, requestParameters.filter_mode, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChannelSettingsApi - interface
 * @export
 * @interface ChannelSettingsApi
 */
export interface ChannelSettingsApiInterface {
    /**
     * 
     * @summary Get telegram settings
     * @param {ChannelSettingsApiChannelChatGetTelegramSettingV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatGetTelegramSettingV1(requestParameters: ChannelSettingsApiChannelChatGetTelegramSettingV1Request, options?: RawAxiosRequestConfig): AxiosPromise<TelegramSettingsResponseDto>;

    /**
     * 
     * @summary Get code for connected chat
     * @param {ChannelSettingsApiChannelChatInitTelegramChatConnectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatInitTelegramChatConnectV1(requestParameters: ChannelSettingsApiChannelChatInitTelegramChatConnectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<TelegramInitConnectResponseDto>;

    /**
     * 
     * @summary Disconnect telegram chat
     * @param {ChannelSettingsApiChannelChatRemoveTelegramChatV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatRemoveTelegramChatV1(requestParameters: ChannelSettingsApiChannelChatRemoveTelegramChatV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Set telegram settings
     * @param {ChannelSettingsApiChannelChatSetTelegramSettingV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatSetTelegramSettingV1(requestParameters: ChannelSettingsApiChannelChatSetTelegramSettingV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Get telegram post list
     * @param {ChannelSettingsApiChannelChatTelegramPostsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatTelegramPostsV1(requestParameters: ChannelSettingsApiChannelChatTelegramPostsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<TelegramChatPostsResponseDto>;

    /**
     * 
     * @summary Optional settings for telegram
     * @param {ChannelSettingsApiChannelChatUpdateOptionsTelegramV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatUpdateOptionsTelegramV1(requestParameters: ChannelSettingsApiChannelChatUpdateOptionsTelegramV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Get planned list
     * @param {ChannelSettingsApiChannelOptionsGetPlannedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsGetPlannedV1(requestParameters: ChannelSettingsApiChannelOptionsGetPlannedV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfSitePlannedResponse>;

    /**
     * 
     * @summary Get playlists from the platform
     * @param {ChannelSettingsApiChannelOptionsGetPlayListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsGetPlayListV1(requestParameters: ChannelSettingsApiChannelOptionsGetPlayListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfPlaylistItemResponse>;

    /**
     * 
     * @summary Optional settings for ok. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsOkV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsOkV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsOkV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Optional settings for trovo. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsTrovoV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Optional settings for twitch. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsTwitchV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Optional settings for vk. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsVkV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsVkV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsVkV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Optional settings for vk video live. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsVkVideoLiveV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Optional settings for youtube. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsYoutubeV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Set planned id. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdatePlannedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdatePlannedV1(requestParameters: ChannelSettingsApiChannelOptionsUpdatePlannedV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SitePlannedResponse>;

    /**
     * 
     * @summary Get status platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingGetStatusV1(options?: RawAxiosRequestConfig): AxiosPromise<SiteChannelStatusResponse>;

    /**
     * 
     * @summary Set name from custom channel. Global settings.
     * @param {ChannelSettingsApiChannelSettingSetNameV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingSetNameV1(requestParameters: ChannelSettingsApiChannelSettingSetNameV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Set rtmp url from channel. Global settings.
     * @param {ChannelSettingsApiChannelSettingUpdateRtmpV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingUpdateRtmpV1(requestParameters: ChannelSettingsApiChannelSettingUpdateRtmpV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Get status platform
     * @param {ChannelSettingsApiChannelSettingUpdateTokenV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingUpdateTokenV1(requestParameters: ChannelSettingsApiChannelSettingUpdateTokenV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Set transcoder from channel. Personal settings.
     * @param {ChannelSettingsApiChannelSettingUpdateTranscoderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingUpdateTranscoderV1(requestParameters: ChannelSettingsApiChannelSettingUpdateTranscoderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Get telegram post by filter
     * @param {ChannelSettingsApiTelegramGetPostByFilterV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    telegramGetPostByFilterV1(requestParameters: ChannelSettingsApiTelegramGetPostByFilterV1Request, options?: RawAxiosRequestConfig): AxiosPromise<TelegramChatPostsItem>;

}

/**
 * Request parameters for channelChatGetTelegramSettingV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelChatGetTelegramSettingV1Request
 */
export interface ChannelSettingsApiChannelChatGetTelegramSettingV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelSettingsApiChannelChatGetTelegramSettingV1
     */
    readonly language: ChannelChatGetTelegramSettingV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatGetTelegramSettingV1
     */
    readonly project_id: number

    /**
     * Channel id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatGetTelegramSettingV1
     */
    readonly channel_id: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelSettingsApiChannelChatGetTelegramSettingV1
     */
    readonly v?: ChannelChatGetTelegramSettingV1VEnum
}

/**
 * Request parameters for channelChatInitTelegramChatConnectV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelChatInitTelegramChatConnectV1Request
 */
export interface ChannelSettingsApiChannelChatInitTelegramChatConnectV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelSettingsApiChannelChatInitTelegramChatConnectV1
     */
    readonly language: ChannelChatInitTelegramChatConnectV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatInitTelegramChatConnectV1
     */
    readonly project_id: number

    /**
     * Channel id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatInitTelegramChatConnectV1
     */
    readonly channel_id: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelSettingsApiChannelChatInitTelegramChatConnectV1
     */
    readonly v?: ChannelChatInitTelegramChatConnectV1VEnum
}

/**
 * Request parameters for channelChatRemoveTelegramChatV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelChatRemoveTelegramChatV1Request
 */
export interface ChannelSettingsApiChannelChatRemoveTelegramChatV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelSettingsApiChannelChatRemoveTelegramChatV1
     */
    readonly language: ChannelChatRemoveTelegramChatV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatRemoveTelegramChatV1
     */
    readonly project_id: number

    /**
     * Channel id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatRemoveTelegramChatV1
     */
    readonly channel_id: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelSettingsApiChannelChatRemoveTelegramChatV1
     */
    readonly v?: ChannelChatRemoveTelegramChatV1VEnum
}

/**
 * Request parameters for channelChatSetTelegramSettingV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelChatSetTelegramSettingV1Request
 */
export interface ChannelSettingsApiChannelChatSetTelegramSettingV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelSettingsApiChannelChatSetTelegramSettingV1
     */
    readonly language: ChannelChatSetTelegramSettingV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatSetTelegramSettingV1
     */
    readonly project_id: number

    /**
     * Channel id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatSetTelegramSettingV1
     */
    readonly channel_id: number

    /**
     * 
     * @type {TelegramSetSettingsRequestDto}
     * @memberof ChannelSettingsApiChannelChatSetTelegramSettingV1
     */
    readonly TelegramSetSettingsRequestDto: TelegramSetSettingsRequestDto

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelSettingsApiChannelChatSetTelegramSettingV1
     */
    readonly v?: ChannelChatSetTelegramSettingV1VEnum
}

/**
 * Request parameters for channelChatTelegramPostsV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelChatTelegramPostsV1Request
 */
export interface ChannelSettingsApiChannelChatTelegramPostsV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelSettingsApiChannelChatTelegramPostsV1
     */
    readonly language: ChannelChatTelegramPostsV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatTelegramPostsV1
     */
    readonly project_id: number

    /**
     * Channel id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatTelegramPostsV1
     */
    readonly channel_id: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelSettingsApiChannelChatTelegramPostsV1
     */
    readonly v?: ChannelChatTelegramPostsV1VEnum
}

/**
 * Request parameters for channelChatUpdateOptionsTelegramV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelChatUpdateOptionsTelegramV1Request
 */
export interface ChannelSettingsApiChannelChatUpdateOptionsTelegramV1Request {
    /**
     * 
     * @type {SiteUpdateChatTelegramRequest}
     * @memberof ChannelSettingsApiChannelChatUpdateOptionsTelegramV1
     */
    readonly SiteUpdateChatTelegramRequest: SiteUpdateChatTelegramRequest
}

/**
 * Request parameters for channelOptionsGetPlannedV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelOptionsGetPlannedV1Request
 */
export interface ChannelSettingsApiChannelOptionsGetPlannedV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelSettingsApiChannelOptionsGetPlannedV1
     */
    readonly language: ChannelOptionsGetPlannedV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof ChannelSettingsApiChannelOptionsGetPlannedV1
     */
    readonly project_id: number

    /**
     * Channel id
     * @type {number}
     * @memberof ChannelSettingsApiChannelOptionsGetPlannedV1
     */
    readonly channel_id: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelSettingsApiChannelOptionsGetPlannedV1
     */
    readonly v?: ChannelOptionsGetPlannedV1VEnum
}

/**
 * Request parameters for channelOptionsGetPlayListV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelOptionsGetPlayListV1Request
 */
export interface ChannelSettingsApiChannelOptionsGetPlayListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelSettingsApiChannelOptionsGetPlayListV1
     */
    readonly language: ChannelOptionsGetPlayListV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof ChannelSettingsApiChannelOptionsGetPlayListV1
     */
    readonly project_id: number

    /**
     * Channel id
     * @type {number}
     * @memberof ChannelSettingsApiChannelOptionsGetPlayListV1
     */
    readonly channel_id: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelSettingsApiChannelOptionsGetPlayListV1
     */
    readonly v?: ChannelOptionsGetPlayListV1VEnum
}

/**
 * Request parameters for channelOptionsUpdateOptionsOkV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelOptionsUpdateOptionsOkV1Request
 */
export interface ChannelSettingsApiChannelOptionsUpdateOptionsOkV1Request {
    /**
     * 
     * @type {SiteUpdateOptionsOkRequest}
     * @memberof ChannelSettingsApiChannelOptionsUpdateOptionsOkV1
     */
    readonly SiteUpdateOptionsOkRequest: SiteUpdateOptionsOkRequest
}

/**
 * Request parameters for channelOptionsUpdateOptionsTrovoV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1Request
 */
export interface ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1Request {
    /**
     * 
     * @type {SiteUpdateOptionsTrovoRequest}
     * @memberof ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1
     */
    readonly SiteUpdateOptionsTrovoRequest: SiteUpdateOptionsTrovoRequest
}

/**
 * Request parameters for channelOptionsUpdateOptionsTwitchV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1Request
 */
export interface ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1Request {
    /**
     * 
     * @type {SiteUpdateOptionsTwitchRequest}
     * @memberof ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1
     */
    readonly SiteUpdateOptionsTwitchRequest: SiteUpdateOptionsTwitchRequest
}

/**
 * Request parameters for channelOptionsUpdateOptionsVkV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelOptionsUpdateOptionsVkV1Request
 */
export interface ChannelSettingsApiChannelOptionsUpdateOptionsVkV1Request {
    /**
     * 
     * @type {SiteUpdateOptionsVkRequest}
     * @memberof ChannelSettingsApiChannelOptionsUpdateOptionsVkV1
     */
    readonly SiteUpdateOptionsVkRequest: SiteUpdateOptionsVkRequest
}

/**
 * Request parameters for channelOptionsUpdateOptionsVkVideoLiveV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1Request
 */
export interface ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1Request {
    /**
     * 
     * @type {SiteUpdateOptionsVkVideoLiveRequest}
     * @memberof ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1
     */
    readonly SiteUpdateOptionsVkVideoLiveRequest: SiteUpdateOptionsVkVideoLiveRequest
}

/**
 * Request parameters for channelOptionsUpdateOptionsYoutubeV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1Request
 */
export interface ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1Request {
    /**
     * 
     * @type {SiteUpdateOptionsYoutubeRequest}
     * @memberof ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1
     */
    readonly SiteUpdateOptionsYoutubeRequest: SiteUpdateOptionsYoutubeRequest
}

/**
 * Request parameters for channelOptionsUpdatePlannedV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelOptionsUpdatePlannedV1Request
 */
export interface ChannelSettingsApiChannelOptionsUpdatePlannedV1Request {
    /**
     * 
     * @type {SiteSetPlannedRequest}
     * @memberof ChannelSettingsApiChannelOptionsUpdatePlannedV1
     */
    readonly SiteSetPlannedRequest: SiteSetPlannedRequest
}

/**
 * Request parameters for channelSettingSetNameV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelSettingSetNameV1Request
 */
export interface ChannelSettingsApiChannelSettingSetNameV1Request {
    /**
     * 
     * @type {SiteSetNameRequest}
     * @memberof ChannelSettingsApiChannelSettingSetNameV1
     */
    readonly SiteSetNameRequest: SiteSetNameRequest
}

/**
 * Request parameters for channelSettingUpdateRtmpV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelSettingUpdateRtmpV1Request
 */
export interface ChannelSettingsApiChannelSettingUpdateRtmpV1Request {
    /**
     * 
     * @type {SiteSetUrlRequest}
     * @memberof ChannelSettingsApiChannelSettingUpdateRtmpV1
     */
    readonly SiteSetUrlRequest: SiteSetUrlRequest
}

/**
 * Request parameters for channelSettingUpdateTokenV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelSettingUpdateTokenV1Request
 */
export interface ChannelSettingsApiChannelSettingUpdateTokenV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelSettingsApiChannelSettingUpdateTokenV1
     */
    readonly language: ChannelSettingUpdateTokenV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof ChannelSettingsApiChannelSettingUpdateTokenV1
     */
    readonly project_id: number

    /**
     * Channel id
     * @type {number}
     * @memberof ChannelSettingsApiChannelSettingUpdateTokenV1
     */
    readonly channel_id: number

    /**
     * Token role
     * @type {'account' | 'group'}
     * @memberof ChannelSettingsApiChannelSettingUpdateTokenV1
     */
    readonly role: ChannelSettingUpdateTokenV1RoleEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelSettingsApiChannelSettingUpdateTokenV1
     */
    readonly v?: ChannelSettingUpdateTokenV1VEnum
}

/**
 * Request parameters for channelSettingUpdateTranscoderV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelSettingUpdateTranscoderV1Request
 */
export interface ChannelSettingsApiChannelSettingUpdateTranscoderV1Request {
    /**
     * 
     * @type {SiteSetTranscoderRequest}
     * @memberof ChannelSettingsApiChannelSettingUpdateTranscoderV1
     */
    readonly SiteSetTranscoderRequest: SiteSetTranscoderRequest
}

/**
 * Request parameters for telegramGetPostByFilterV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiTelegramGetPostByFilterV1Request
 */
export interface ChannelSettingsApiTelegramGetPostByFilterV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelSettingsApiTelegramGetPostByFilterV1
     */
    readonly language: TelegramGetPostByFilterV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof ChannelSettingsApiTelegramGetPostByFilterV1
     */
    readonly project_id: number

    /**
     * Channel id
     * @type {number}
     * @memberof ChannelSettingsApiTelegramGetPostByFilterV1
     */
    readonly channel_id: number

    /**
     * 
     * @type {number}
     * @memberof ChannelSettingsApiTelegramGetPostByFilterV1
     */
    readonly filter_mode: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelSettingsApiTelegramGetPostByFilterV1
     */
    readonly v?: TelegramGetPostByFilterV1VEnum
}

/**
 * ChannelSettingsApi - object-oriented interface
 * @export
 * @class ChannelSettingsApi
 * @extends {BaseAPI}
 */
export class ChannelSettingsApi extends BaseAPI implements ChannelSettingsApiInterface {
    /**
     * 
     * @summary Get telegram settings
     * @param {ChannelSettingsApiChannelChatGetTelegramSettingV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelChatGetTelegramSettingV1(requestParameters: ChannelSettingsApiChannelChatGetTelegramSettingV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelChatGetTelegramSettingV1(requestParameters.language, requestParameters.project_id, requestParameters.channel_id, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get code for connected chat
     * @param {ChannelSettingsApiChannelChatInitTelegramChatConnectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelChatInitTelegramChatConnectV1(requestParameters: ChannelSettingsApiChannelChatInitTelegramChatConnectV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelChatInitTelegramChatConnectV1(requestParameters.language, requestParameters.project_id, requestParameters.channel_id, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Disconnect telegram chat
     * @param {ChannelSettingsApiChannelChatRemoveTelegramChatV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelChatRemoveTelegramChatV1(requestParameters: ChannelSettingsApiChannelChatRemoveTelegramChatV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelChatRemoveTelegramChatV1(requestParameters.language, requestParameters.project_id, requestParameters.channel_id, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set telegram settings
     * @param {ChannelSettingsApiChannelChatSetTelegramSettingV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelChatSetTelegramSettingV1(requestParameters: ChannelSettingsApiChannelChatSetTelegramSettingV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelChatSetTelegramSettingV1(requestParameters.language, requestParameters.project_id, requestParameters.channel_id, requestParameters.TelegramSetSettingsRequestDto, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get telegram post list
     * @param {ChannelSettingsApiChannelChatTelegramPostsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelChatTelegramPostsV1(requestParameters: ChannelSettingsApiChannelChatTelegramPostsV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelChatTelegramPostsV1(requestParameters.language, requestParameters.project_id, requestParameters.channel_id, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Optional settings for telegram
     * @param {ChannelSettingsApiChannelChatUpdateOptionsTelegramV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelChatUpdateOptionsTelegramV1(requestParameters: ChannelSettingsApiChannelChatUpdateOptionsTelegramV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelChatUpdateOptionsTelegramV1(requestParameters.SiteUpdateChatTelegramRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get planned list
     * @param {ChannelSettingsApiChannelOptionsGetPlannedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelOptionsGetPlannedV1(requestParameters: ChannelSettingsApiChannelOptionsGetPlannedV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelOptionsGetPlannedV1(requestParameters.language, requestParameters.project_id, requestParameters.channel_id, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get playlists from the platform
     * @param {ChannelSettingsApiChannelOptionsGetPlayListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelOptionsGetPlayListV1(requestParameters: ChannelSettingsApiChannelOptionsGetPlayListV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelOptionsGetPlayListV1(requestParameters.language, requestParameters.project_id, requestParameters.channel_id, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Optional settings for ok. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsOkV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelOptionsUpdateOptionsOkV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsOkV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelOptionsUpdateOptionsOkV1(requestParameters.SiteUpdateOptionsOkRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Optional settings for trovo. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelOptionsUpdateOptionsTrovoV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelOptionsUpdateOptionsTrovoV1(requestParameters.SiteUpdateOptionsTrovoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Optional settings for twitch. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelOptionsUpdateOptionsTwitchV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelOptionsUpdateOptionsTwitchV1(requestParameters.SiteUpdateOptionsTwitchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Optional settings for vk. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsVkV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelOptionsUpdateOptionsVkV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsVkV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelOptionsUpdateOptionsVkV1(requestParameters.SiteUpdateOptionsVkRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Optional settings for vk video live. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelOptionsUpdateOptionsVkVideoLiveV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelOptionsUpdateOptionsVkVideoLiveV1(requestParameters.SiteUpdateOptionsVkVideoLiveRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Optional settings for youtube. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelOptionsUpdateOptionsYoutubeV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelOptionsUpdateOptionsYoutubeV1(requestParameters.SiteUpdateOptionsYoutubeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set planned id. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdatePlannedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelOptionsUpdatePlannedV1(requestParameters: ChannelSettingsApiChannelOptionsUpdatePlannedV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelOptionsUpdatePlannedV1(requestParameters.SiteSetPlannedRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get status platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelSettingGetStatusV1(options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelSettingGetStatusV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set name from custom channel. Global settings.
     * @param {ChannelSettingsApiChannelSettingSetNameV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelSettingSetNameV1(requestParameters: ChannelSettingsApiChannelSettingSetNameV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelSettingSetNameV1(requestParameters.SiteSetNameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set rtmp url from channel. Global settings.
     * @param {ChannelSettingsApiChannelSettingUpdateRtmpV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelSettingUpdateRtmpV1(requestParameters: ChannelSettingsApiChannelSettingUpdateRtmpV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelSettingUpdateRtmpV1(requestParameters.SiteSetUrlRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get status platform
     * @param {ChannelSettingsApiChannelSettingUpdateTokenV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelSettingUpdateTokenV1(requestParameters: ChannelSettingsApiChannelSettingUpdateTokenV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelSettingUpdateTokenV1(requestParameters.language, requestParameters.project_id, requestParameters.channel_id, requestParameters.role, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set transcoder from channel. Personal settings.
     * @param {ChannelSettingsApiChannelSettingUpdateTranscoderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public channelSettingUpdateTranscoderV1(requestParameters: ChannelSettingsApiChannelSettingUpdateTranscoderV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).channelSettingUpdateTranscoderV1(requestParameters.SiteSetTranscoderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get telegram post by filter
     * @param {ChannelSettingsApiTelegramGetPostByFilterV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    public telegramGetPostByFilterV1(requestParameters: ChannelSettingsApiTelegramGetPostByFilterV1Request, options?: RawAxiosRequestConfig) {
        return ChannelSettingsApiFp(this.configuration).telegramGetPostByFilterV1(requestParameters.language, requestParameters.project_id, requestParameters.channel_id, requestParameters.filter_mode, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ChannelChatGetTelegramSettingV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ChannelChatGetTelegramSettingV1LanguageEnum = typeof ChannelChatGetTelegramSettingV1LanguageEnum[keyof typeof ChannelChatGetTelegramSettingV1LanguageEnum];
/**
 * @export
 */
export const ChannelChatGetTelegramSettingV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ChannelChatGetTelegramSettingV1VEnum = typeof ChannelChatGetTelegramSettingV1VEnum[keyof typeof ChannelChatGetTelegramSettingV1VEnum];
/**
 * @export
 */
export const ChannelChatInitTelegramChatConnectV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ChannelChatInitTelegramChatConnectV1LanguageEnum = typeof ChannelChatInitTelegramChatConnectV1LanguageEnum[keyof typeof ChannelChatInitTelegramChatConnectV1LanguageEnum];
/**
 * @export
 */
export const ChannelChatInitTelegramChatConnectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ChannelChatInitTelegramChatConnectV1VEnum = typeof ChannelChatInitTelegramChatConnectV1VEnum[keyof typeof ChannelChatInitTelegramChatConnectV1VEnum];
/**
 * @export
 */
export const ChannelChatRemoveTelegramChatV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ChannelChatRemoveTelegramChatV1LanguageEnum = typeof ChannelChatRemoveTelegramChatV1LanguageEnum[keyof typeof ChannelChatRemoveTelegramChatV1LanguageEnum];
/**
 * @export
 */
export const ChannelChatRemoveTelegramChatV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ChannelChatRemoveTelegramChatV1VEnum = typeof ChannelChatRemoveTelegramChatV1VEnum[keyof typeof ChannelChatRemoveTelegramChatV1VEnum];
/**
 * @export
 */
export const ChannelChatSetTelegramSettingV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ChannelChatSetTelegramSettingV1LanguageEnum = typeof ChannelChatSetTelegramSettingV1LanguageEnum[keyof typeof ChannelChatSetTelegramSettingV1LanguageEnum];
/**
 * @export
 */
export const ChannelChatSetTelegramSettingV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ChannelChatSetTelegramSettingV1VEnum = typeof ChannelChatSetTelegramSettingV1VEnum[keyof typeof ChannelChatSetTelegramSettingV1VEnum];
/**
 * @export
 */
export const ChannelChatTelegramPostsV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ChannelChatTelegramPostsV1LanguageEnum = typeof ChannelChatTelegramPostsV1LanguageEnum[keyof typeof ChannelChatTelegramPostsV1LanguageEnum];
/**
 * @export
 */
export const ChannelChatTelegramPostsV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ChannelChatTelegramPostsV1VEnum = typeof ChannelChatTelegramPostsV1VEnum[keyof typeof ChannelChatTelegramPostsV1VEnum];
/**
 * @export
 */
export const ChannelOptionsGetPlannedV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ChannelOptionsGetPlannedV1LanguageEnum = typeof ChannelOptionsGetPlannedV1LanguageEnum[keyof typeof ChannelOptionsGetPlannedV1LanguageEnum];
/**
 * @export
 */
export const ChannelOptionsGetPlannedV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ChannelOptionsGetPlannedV1VEnum = typeof ChannelOptionsGetPlannedV1VEnum[keyof typeof ChannelOptionsGetPlannedV1VEnum];
/**
 * @export
 */
export const ChannelOptionsGetPlayListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ChannelOptionsGetPlayListV1LanguageEnum = typeof ChannelOptionsGetPlayListV1LanguageEnum[keyof typeof ChannelOptionsGetPlayListV1LanguageEnum];
/**
 * @export
 */
export const ChannelOptionsGetPlayListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ChannelOptionsGetPlayListV1VEnum = typeof ChannelOptionsGetPlayListV1VEnum[keyof typeof ChannelOptionsGetPlayListV1VEnum];
/**
 * @export
 */
export const ChannelSettingUpdateTokenV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type ChannelSettingUpdateTokenV1LanguageEnum = typeof ChannelSettingUpdateTokenV1LanguageEnum[keyof typeof ChannelSettingUpdateTokenV1LanguageEnum];
/**
 * @export
 */
export const ChannelSettingUpdateTokenV1RoleEnum = {
    Account: 'account',
    Group: 'group'
} as const;
export type ChannelSettingUpdateTokenV1RoleEnum = typeof ChannelSettingUpdateTokenV1RoleEnum[keyof typeof ChannelSettingUpdateTokenV1RoleEnum];
/**
 * @export
 */
export const ChannelSettingUpdateTokenV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type ChannelSettingUpdateTokenV1VEnum = typeof ChannelSettingUpdateTokenV1VEnum[keyof typeof ChannelSettingUpdateTokenV1VEnum];
/**
 * @export
 */
export const TelegramGetPostByFilterV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type TelegramGetPostByFilterV1LanguageEnum = typeof TelegramGetPostByFilterV1LanguageEnum[keyof typeof TelegramGetPostByFilterV1LanguageEnum];
/**
 * @export
 */
export const TelegramGetPostByFilterV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type TelegramGetPostByFilterV1VEnum = typeof TelegramGetPostByFilterV1VEnum[keyof typeof TelegramGetPostByFilterV1VEnum];
