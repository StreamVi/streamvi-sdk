/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { ListOfRtmpServerLocationResponse } from '../models';
// @ts-ignore
import type { RtmpServerGraphResponse } from '../models';
// @ts-ignore
import type { RtmpServerListResponse } from '../models';
// @ts-ignore
import type { RtmpServerStateResponse } from '../models';
/**
 * RtmpServerApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Rtmp locations server list example for unauthorized
         * @param {listLocationsUnauthorizedVEnum} v Version
         * @param {listLocationsUnauthorizedLanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocationsUnauthorized: async (v: listLocationsUnauthorizedVEnum, language: listLocationsUnauthorizedLanguageEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('listLocationsUnauthorized', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('listLocationsUnauthorized', 'language', language)
            const localVarPath = `/method/rtmp_server/list_locations_unauthorized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Graph of rtmp servers
         * @param {graph1VEnum} v Version
         * @param {graph1LanguageEnum} language Current language
         * @param {graph1IntervalEnum} interval Interval state in hours
         * @param {graph1TypeEnum} type Type graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        graph1: async (v: graph1VEnum, language: graph1LanguageEnum, interval: graph1IntervalEnum, type: graph1TypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('graph1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('graph1', 'language', language)
            // verify required parameter 'interval' is not null or undefined
            assertParamExists('graph1', 'interval', interval)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('graph1', 'type', type)
            const localVarPath = `/method/rtmp_server/graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List rtmp servers
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {list1IntervalEnum} interval Interval state in hours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1: async (v: list1VEnum, language: list1LanguageEnum, projectId: number, interval: list1IntervalEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('list1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('list1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('list1', 'projectId', projectId)
            // verify required parameter 'interval' is not null or undefined
            assertParamExists('list1', 'interval', interval)
            const localVarPath = `/method/rtmp_server/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary State of rtmp servers
         * @param {state1VEnum} v Version
         * @param {state1LanguageEnum} language Current language
         * @param {state1IntervalEnum} interval Interval state in hours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        state1: async (v: state1VEnum, language: state1LanguageEnum, interval: state1IntervalEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('state1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('state1', 'language', language)
            // verify required parameter 'interval' is not null or undefined
            assertParamExists('state1', 'interval', interval)
            const localVarPath = `/method/rtmp_server/state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary State of rtmp servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        up1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/method/rtmp_server/up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RtmpServerApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Rtmp locations server list example for unauthorized
         * @param {listLocationsUnauthorizedVEnum} v Version
         * @param {listLocationsUnauthorizedLanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLocationsUnauthorized(v: listLocationsUnauthorizedVEnum, language: listLocationsUnauthorizedLanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfRtmpServerLocationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLocationsUnauthorized(v, language, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RtmpServerApi.listLocationsUnauthorized']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Graph of rtmp servers
         * @param {graph1VEnum} v Version
         * @param {graph1LanguageEnum} language Current language
         * @param {graph1IntervalEnum} interval Interval state in hours
         * @param {graph1TypeEnum} type Type graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async graph1(v: graph1VEnum, language: graph1LanguageEnum, interval: graph1IntervalEnum, type: graph1TypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RtmpServerGraphResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.graph1(v, language, interval, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RtmpServerApi.graph1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List rtmp servers
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {list1IntervalEnum} interval Interval state in hours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list1(v: list1VEnum, language: list1LanguageEnum, projectId: number, interval: list1IntervalEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RtmpServerListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list1(v, language, projectId, interval, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RtmpServerApi.list1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary State of rtmp servers
         * @param {state1VEnum} v Version
         * @param {state1LanguageEnum} language Current language
         * @param {state1IntervalEnum} interval Interval state in hours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async state1(v: state1VEnum, language: state1LanguageEnum, interval: state1IntervalEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RtmpServerStateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.state1(v, language, interval, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RtmpServerApi.state1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary State of rtmp servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async up1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.up1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RtmpServerApi.up1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RtmpServerApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Rtmp locations server list example for unauthorized
         * @param {listLocationsUnauthorizedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocationsUnauthorized(requestParameters: listLocationsUnauthorizedRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListOfRtmpServerLocationResponse> {
            return localVarFp.listLocationsUnauthorized(requestParameters.v, requestParameters.language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Graph of rtmp servers
         * @param {graph1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        graph1(requestParameters: graph1Request, options?: RawAxiosRequestConfig): AxiosPromise<RtmpServerGraphResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: graph1VEnum = requestParameters.v || graph1VEnum._1;
            return localVarFp.graph1(actualV, requestParameters.language, requestParameters.interval, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List rtmp servers
         * @param {list1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): AxiosPromise<RtmpServerListResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: list1VEnum = requestParameters.v || list1VEnum._1;
            return localVarFp.list1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.interval, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary State of rtmp servers
         * @param {state1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        state1(requestParameters: state1Request, options?: RawAxiosRequestConfig): AxiosPromise<RtmpServerStateResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: state1VEnum = requestParameters.v || state1VEnum._1;
            return localVarFp.state1(actualV, requestParameters.language, requestParameters.interval, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary State of rtmp servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        up1(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.up1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listLocationsUnauthorized operation in RtmpServerApi.
 * @export
 * @interface listLocationsUnauthorizedRequest
 */
export interface listLocationsUnauthorizedRequest {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof listLocationsUnauthorized
     */
    readonly v: listLocationsUnauthorizedVEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof listLocationsUnauthorized
     */
    readonly language: listLocationsUnauthorizedLanguageEnum
}

/**
 * Request parameters for graph1 operation in RtmpServerApi.
 * @export
 * @interface graph1Request
 */
export interface graph1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof graph1
     */
    readonly v?: graph1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof graph1
     */
    readonly language: graph1LanguageEnum

    /**
     * Interval state in hours
     * @type {1 | 3 | 6 | 12 | 24}
     * @memberof graph1
     */
    readonly interval: graph1IntervalEnum

    /**
     * Type graph
     * @type {'performance' | 'network' | 'cpu' | 'ram' | 'deliveredPackages'}
     * @memberof graph1
     */
    readonly type: graph1TypeEnum
}

/**
 * Request parameters for list1 operation in RtmpServerApi.
 * @export
 * @interface list1Request
 */
export interface list1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof list1
     */
    readonly v?: list1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof list1
     */
    readonly language: list1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof list1
     */
    readonly projectId: number

    /**
     * Interval state in hours
     * @type {1 | 3 | 6 | 12 | 24}
     * @memberof list1
     */
    readonly interval: list1IntervalEnum
}

/**
 * Request parameters for state1 operation in RtmpServerApi.
 * @export
 * @interface state1Request
 */
export interface state1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof state1
     */
    readonly v?: state1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof state1
     */
    readonly language: state1LanguageEnum

    /**
     * Interval state in hours
     * @type {1 | 3 | 6 | 12 | 24}
     * @memberof state1
     */
    readonly interval: state1IntervalEnum
}

/**
 * RtmpServerApi - object-oriented interface
 * @export
 * @class RtmpServerApi
 * @extends {BaseAPI}
 */
export class RtmpServerApi extends BaseAPI {
    /**
     * 
     * @summary Rtmp locations server list example for unauthorized
     * @param {listLocationsUnauthorizedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    public listLocationsUnauthorized(requestParameters: listLocationsUnauthorizedRequest, options?: RawAxiosRequestConfig) {
        return fp(this.configuration).listLocationsUnauthorized(requestParameters.v, requestParameters.language, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Graph of rtmp servers
     * @param {graph1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    public graph1(requestParameters: graph1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: graph1VEnum = requestParameters.v || graph1VEnum._1;
        return fp(this.configuration).graph1(actualV, requestParameters.language, requestParameters.interval, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List rtmp servers
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    public list1(requestParameters: list1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: list1VEnum = requestParameters.v || list1VEnum._1;
        return fp(this.configuration).list1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.interval, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary State of rtmp servers
     * @param {state1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    public state1(requestParameters: state1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: state1VEnum = requestParameters.v || state1VEnum._1;
        return fp(this.configuration).state1(actualV, requestParameters.language, requestParameters.interval, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary State of rtmp servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    public up1(options?: RawAxiosRequestConfig) {
        return fp(this.configuration).up1(options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum listLocationsUnauthorizedVEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum listLocationsUnauthorizedLanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum graph1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum graph1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum graph1IntervalEnum {
    NUMBER_1 = 1,
    NUMBER_3 = 3,
    NUMBER_6 = 6,
    NUMBER_12 = 12,
    NUMBER_24 = 24
}
/**
  * @export
  * @enum {string}
  */
export enum graph1TypeEnum {
    performance = 'performance',
    network = 'network',
    cpu = 'cpu',
    ram = 'ram',
    deliveredPackages = 'deliveredPackages'
}
/**
  * @export
  * @enum {string}
  */
export enum list1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum list1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum list1IntervalEnum {
    NUMBER_1 = 1,
    NUMBER_3 = 3,
    NUMBER_6 = 6,
    NUMBER_12 = 12,
    NUMBER_24 = 24
}
/**
  * @export
  * @enum {string}
  */
export enum state1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum state1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum state1IntervalEnum {
    NUMBER_1 = 1,
    NUMBER_3 = 3,
    NUMBER_6 = 6,
    NUMBER_12 = 12,
    NUMBER_24 = 24
}
