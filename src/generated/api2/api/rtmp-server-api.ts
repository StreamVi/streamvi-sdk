/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { ListOfRtmpServerLocationResponse } from '../models';
// @ts-ignore
import type { RtmpServerGraphResponse } from '../models';
// @ts-ignore
import type { RtmpServerListResponse } from '../models';
// @ts-ignore
import type { RtmpServerStateResponse } from '../models';
/**
 * RtmpServerApi - axios parameter creator
 * @export
 */
export const RtmpServerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Rtmp locations server list example for unauthorized
         * @param {MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum} language Current language
         * @param {MethodRtmpServerListLocationsUnauthorizedV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodRtmpServerListLocationsUnauthorizedV1: async (language: MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum, v?: MethodRtmpServerListLocationsUnauthorizedV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('methodRtmpServerListLocationsUnauthorizedV1', 'language', language)
            const localVarPath = `/method/rtmp_server/list_locations_unauthorized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Graph of rtmp servers
         * @param {RtmpServerGraphV1LanguageEnum} language Current language
         * @param {RtmpServerGraphV1IntervalEnum} interval Interval state in hours
         * @param {RtmpServerGraphV1TypeEnum} type Type graph
         * @param {RtmpServerGraphV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rtmpServerGraphV1: async (language: RtmpServerGraphV1LanguageEnum, interval: RtmpServerGraphV1IntervalEnum, type: RtmpServerGraphV1TypeEnum, v?: RtmpServerGraphV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('rtmpServerGraphV1', 'language', language)
            // verify required parameter 'interval' is not null or undefined
            assertParamExists('rtmpServerGraphV1', 'interval', interval)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('rtmpServerGraphV1', 'type', type)
            const localVarPath = `/method/rtmp_server/graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List rtmp servers
         * @param {RtmpServerListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {RtmpServerListV1IntervalEnum} interval Interval state in hours
         * @param {RtmpServerListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rtmpServerListV1: async (language: RtmpServerListV1LanguageEnum, projectId: number, interval: RtmpServerListV1IntervalEnum, v?: RtmpServerListV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('rtmpServerListV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('rtmpServerListV1', 'projectId', projectId)
            // verify required parameter 'interval' is not null or undefined
            assertParamExists('rtmpServerListV1', 'interval', interval)
            const localVarPath = `/method/rtmp_server/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary State of rtmp servers
         * @param {RtmpServerStateV1LanguageEnum} language Current language
         * @param {RtmpServerStateV1IntervalEnum} interval Interval state in hours
         * @param {RtmpServerStateV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rtmpServerStateV1: async (language: RtmpServerStateV1LanguageEnum, interval: RtmpServerStateV1IntervalEnum, v?: RtmpServerStateV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('rtmpServerStateV1', 'language', language)
            // verify required parameter 'interval' is not null or undefined
            assertParamExists('rtmpServerStateV1', 'interval', interval)
            const localVarPath = `/method/rtmp_server/state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary State of rtmp servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rtmpServerUpV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/method/rtmp_server/up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RtmpServerApi - functional programming interface
 * @export
 */
export const RtmpServerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RtmpServerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Rtmp locations server list example for unauthorized
         * @param {MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum} language Current language
         * @param {MethodRtmpServerListLocationsUnauthorizedV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async methodRtmpServerListLocationsUnauthorizedV1(language: MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum, v?: MethodRtmpServerListLocationsUnauthorizedV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfRtmpServerLocationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.methodRtmpServerListLocationsUnauthorizedV1(language, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RtmpServerApi.methodRtmpServerListLocationsUnauthorizedV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Graph of rtmp servers
         * @param {RtmpServerGraphV1LanguageEnum} language Current language
         * @param {RtmpServerGraphV1IntervalEnum} interval Interval state in hours
         * @param {RtmpServerGraphV1TypeEnum} type Type graph
         * @param {RtmpServerGraphV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rtmpServerGraphV1(language: RtmpServerGraphV1LanguageEnum, interval: RtmpServerGraphV1IntervalEnum, type: RtmpServerGraphV1TypeEnum, v?: RtmpServerGraphV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RtmpServerGraphResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rtmpServerGraphV1(language, interval, type, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RtmpServerApi.rtmpServerGraphV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List rtmp servers
         * @param {RtmpServerListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {RtmpServerListV1IntervalEnum} interval Interval state in hours
         * @param {RtmpServerListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rtmpServerListV1(language: RtmpServerListV1LanguageEnum, projectId: number, interval: RtmpServerListV1IntervalEnum, v?: RtmpServerListV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RtmpServerListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rtmpServerListV1(language, projectId, interval, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RtmpServerApi.rtmpServerListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary State of rtmp servers
         * @param {RtmpServerStateV1LanguageEnum} language Current language
         * @param {RtmpServerStateV1IntervalEnum} interval Interval state in hours
         * @param {RtmpServerStateV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rtmpServerStateV1(language: RtmpServerStateV1LanguageEnum, interval: RtmpServerStateV1IntervalEnum, v?: RtmpServerStateV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RtmpServerStateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rtmpServerStateV1(language, interval, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RtmpServerApi.rtmpServerStateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary State of rtmp servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rtmpServerUpV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rtmpServerUpV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RtmpServerApi.rtmpServerUpV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RtmpServerApi - factory interface
 * @export
 */
export const RtmpServerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RtmpServerApiFp(configuration)
    return {
        /**
         * 
         * @summary Rtmp locations server list example for unauthorized
         * @param {RtmpServerApiMethodRtmpServerListLocationsUnauthorizedV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodRtmpServerListLocationsUnauthorizedV1(requestParameters: RtmpServerApiMethodRtmpServerListLocationsUnauthorizedV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfRtmpServerLocationResponse> {
            return localVarFp.methodRtmpServerListLocationsUnauthorizedV1(requestParameters.language, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Graph of rtmp servers
         * @param {RtmpServerApiRtmpServerGraphV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rtmpServerGraphV1(requestParameters: RtmpServerApiRtmpServerGraphV1Request, options?: RawAxiosRequestConfig): AxiosPromise<RtmpServerGraphResponse> {
            return localVarFp.rtmpServerGraphV1(requestParameters.language, requestParameters.interval, requestParameters.type, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List rtmp servers
         * @param {RtmpServerApiRtmpServerListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rtmpServerListV1(requestParameters: RtmpServerApiRtmpServerListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<RtmpServerListResponse> {
            return localVarFp.rtmpServerListV1(requestParameters.language, requestParameters.project_id, requestParameters.interval, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary State of rtmp servers
         * @param {RtmpServerApiRtmpServerStateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rtmpServerStateV1(requestParameters: RtmpServerApiRtmpServerStateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<RtmpServerStateResponse> {
            return localVarFp.rtmpServerStateV1(requestParameters.language, requestParameters.interval, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary State of rtmp servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rtmpServerUpV1(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.rtmpServerUpV1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RtmpServerApi - interface
 * @export
 * @interface RtmpServerApi
 */
export interface RtmpServerApiInterface {
    /**
     * 
     * @summary Rtmp locations server list example for unauthorized
     * @param {RtmpServerApiMethodRtmpServerListLocationsUnauthorizedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApiInterface
     */
    methodRtmpServerListLocationsUnauthorizedV1(requestParameters: RtmpServerApiMethodRtmpServerListLocationsUnauthorizedV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfRtmpServerLocationResponse>;

    /**
     * 
     * @summary Graph of rtmp servers
     * @param {RtmpServerApiRtmpServerGraphV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApiInterface
     */
    rtmpServerGraphV1(requestParameters: RtmpServerApiRtmpServerGraphV1Request, options?: RawAxiosRequestConfig): AxiosPromise<RtmpServerGraphResponse>;

    /**
     * 
     * @summary List rtmp servers
     * @param {RtmpServerApiRtmpServerListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApiInterface
     */
    rtmpServerListV1(requestParameters: RtmpServerApiRtmpServerListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<RtmpServerListResponse>;

    /**
     * 
     * @summary State of rtmp servers
     * @param {RtmpServerApiRtmpServerStateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApiInterface
     */
    rtmpServerStateV1(requestParameters: RtmpServerApiRtmpServerStateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<RtmpServerStateResponse>;

    /**
     * 
     * @summary State of rtmp servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApiInterface
     */
    rtmpServerUpV1(options?: RawAxiosRequestConfig): AxiosPromise<object>;

}

/**
 * Request parameters for methodRtmpServerListLocationsUnauthorizedV1 operation in RtmpServerApi.
 * @export
 * @interface RtmpServerApiMethodRtmpServerListLocationsUnauthorizedV1Request
 */
export interface RtmpServerApiMethodRtmpServerListLocationsUnauthorizedV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof RtmpServerApiMethodRtmpServerListLocationsUnauthorizedV1
     */
    readonly language: MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof RtmpServerApiMethodRtmpServerListLocationsUnauthorizedV1
     */
    readonly v?: MethodRtmpServerListLocationsUnauthorizedV1VEnum
}

/**
 * Request parameters for rtmpServerGraphV1 operation in RtmpServerApi.
 * @export
 * @interface RtmpServerApiRtmpServerGraphV1Request
 */
export interface RtmpServerApiRtmpServerGraphV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof RtmpServerApiRtmpServerGraphV1
     */
    readonly language: RtmpServerGraphV1LanguageEnum

    /**
     * Interval state in hours
     * @type {1 | 3 | 6 | 12 | 24}
     * @memberof RtmpServerApiRtmpServerGraphV1
     */
    readonly interval: RtmpServerGraphV1IntervalEnum

    /**
     * Type graph
     * @type {'performance' | 'network' | 'cpu' | 'ram' | 'deliveredPackages'}
     * @memberof RtmpServerApiRtmpServerGraphV1
     */
    readonly type: RtmpServerGraphV1TypeEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof RtmpServerApiRtmpServerGraphV1
     */
    readonly v?: RtmpServerGraphV1VEnum
}

/**
 * Request parameters for rtmpServerListV1 operation in RtmpServerApi.
 * @export
 * @interface RtmpServerApiRtmpServerListV1Request
 */
export interface RtmpServerApiRtmpServerListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof RtmpServerApiRtmpServerListV1
     */
    readonly language: RtmpServerListV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof RtmpServerApiRtmpServerListV1
     */
    readonly project_id: number

    /**
     * Interval state in hours
     * @type {1 | 3 | 6 | 12 | 24}
     * @memberof RtmpServerApiRtmpServerListV1
     */
    readonly interval: RtmpServerListV1IntervalEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof RtmpServerApiRtmpServerListV1
     */
    readonly v?: RtmpServerListV1VEnum
}

/**
 * Request parameters for rtmpServerStateV1 operation in RtmpServerApi.
 * @export
 * @interface RtmpServerApiRtmpServerStateV1Request
 */
export interface RtmpServerApiRtmpServerStateV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof RtmpServerApiRtmpServerStateV1
     */
    readonly language: RtmpServerStateV1LanguageEnum

    /**
     * Interval state in hours
     * @type {1 | 3 | 6 | 12 | 24}
     * @memberof RtmpServerApiRtmpServerStateV1
     */
    readonly interval: RtmpServerStateV1IntervalEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof RtmpServerApiRtmpServerStateV1
     */
    readonly v?: RtmpServerStateV1VEnum
}

/**
 * RtmpServerApi - object-oriented interface
 * @export
 * @class RtmpServerApi
 * @extends {BaseAPI}
 */
export class RtmpServerApi extends BaseAPI implements RtmpServerApiInterface {
    /**
     * 
     * @summary Rtmp locations server list example for unauthorized
     * @param {RtmpServerApiMethodRtmpServerListLocationsUnauthorizedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    public methodRtmpServerListLocationsUnauthorizedV1(requestParameters: RtmpServerApiMethodRtmpServerListLocationsUnauthorizedV1Request, options?: RawAxiosRequestConfig) {
        return RtmpServerApiFp(this.configuration).methodRtmpServerListLocationsUnauthorizedV1(requestParameters.language, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Graph of rtmp servers
     * @param {RtmpServerApiRtmpServerGraphV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    public rtmpServerGraphV1(requestParameters: RtmpServerApiRtmpServerGraphV1Request, options?: RawAxiosRequestConfig) {
        return RtmpServerApiFp(this.configuration).rtmpServerGraphV1(requestParameters.language, requestParameters.interval, requestParameters.type, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List rtmp servers
     * @param {RtmpServerApiRtmpServerListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    public rtmpServerListV1(requestParameters: RtmpServerApiRtmpServerListV1Request, options?: RawAxiosRequestConfig) {
        return RtmpServerApiFp(this.configuration).rtmpServerListV1(requestParameters.language, requestParameters.project_id, requestParameters.interval, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary State of rtmp servers
     * @param {RtmpServerApiRtmpServerStateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    public rtmpServerStateV1(requestParameters: RtmpServerApiRtmpServerStateV1Request, options?: RawAxiosRequestConfig) {
        return RtmpServerApiFp(this.configuration).rtmpServerStateV1(requestParameters.language, requestParameters.interval, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary State of rtmp servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    public rtmpServerUpV1(options?: RawAxiosRequestConfig) {
        return RtmpServerApiFp(this.configuration).rtmpServerUpV1(options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum = typeof MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum[keyof typeof MethodRtmpServerListLocationsUnauthorizedV1LanguageEnum];
/**
 * @export
 */
export const MethodRtmpServerListLocationsUnauthorizedV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type MethodRtmpServerListLocationsUnauthorizedV1VEnum = typeof MethodRtmpServerListLocationsUnauthorizedV1VEnum[keyof typeof MethodRtmpServerListLocationsUnauthorizedV1VEnum];
/**
 * @export
 */
export const RtmpServerGraphV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type RtmpServerGraphV1LanguageEnum = typeof RtmpServerGraphV1LanguageEnum[keyof typeof RtmpServerGraphV1LanguageEnum];
/**
 * @export
 */
export const RtmpServerGraphV1IntervalEnum = {
    NUMBER_1: 1,
    NUMBER_3: 3,
    NUMBER_6: 6,
    NUMBER_12: 12,
    NUMBER_24: 24
} as const;
export type RtmpServerGraphV1IntervalEnum = typeof RtmpServerGraphV1IntervalEnum[keyof typeof RtmpServerGraphV1IntervalEnum];
/**
 * @export
 */
export const RtmpServerGraphV1TypeEnum = {
    Performance: 'performance',
    Network: 'network',
    Cpu: 'cpu',
    Ram: 'ram',
    DeliveredPackages: 'deliveredPackages'
} as const;
export type RtmpServerGraphV1TypeEnum = typeof RtmpServerGraphV1TypeEnum[keyof typeof RtmpServerGraphV1TypeEnum];
/**
 * @export
 */
export const RtmpServerGraphV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type RtmpServerGraphV1VEnum = typeof RtmpServerGraphV1VEnum[keyof typeof RtmpServerGraphV1VEnum];
/**
 * @export
 */
export const RtmpServerListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type RtmpServerListV1LanguageEnum = typeof RtmpServerListV1LanguageEnum[keyof typeof RtmpServerListV1LanguageEnum];
/**
 * @export
 */
export const RtmpServerListV1IntervalEnum = {
    NUMBER_1: 1,
    NUMBER_3: 3,
    NUMBER_6: 6,
    NUMBER_12: 12,
    NUMBER_24: 24
} as const;
export type RtmpServerListV1IntervalEnum = typeof RtmpServerListV1IntervalEnum[keyof typeof RtmpServerListV1IntervalEnum];
/**
 * @export
 */
export const RtmpServerListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type RtmpServerListV1VEnum = typeof RtmpServerListV1VEnum[keyof typeof RtmpServerListV1VEnum];
/**
 * @export
 */
export const RtmpServerStateV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type RtmpServerStateV1LanguageEnum = typeof RtmpServerStateV1LanguageEnum[keyof typeof RtmpServerStateV1LanguageEnum];
/**
 * @export
 */
export const RtmpServerStateV1IntervalEnum = {
    NUMBER_1: 1,
    NUMBER_3: 3,
    NUMBER_6: 6,
    NUMBER_12: 12,
    NUMBER_24: 24
} as const;
export type RtmpServerStateV1IntervalEnum = typeof RtmpServerStateV1IntervalEnum[keyof typeof RtmpServerStateV1IntervalEnum];
/**
 * @export
 */
export const RtmpServerStateV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type RtmpServerStateV1VEnum = typeof RtmpServerStateV1VEnum[keyof typeof RtmpServerStateV1VEnum];
