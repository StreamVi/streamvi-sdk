/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { ListOfCategoryItemResponse } from '../models';
// @ts-ignore
import type { SitePlatformsSupportedResponse } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
/**
 * PlatformsApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get url for start oauth
         * @param {addAccount1VEnum} v Version
         * @param {addAccount1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {addAccount1PlatformEnum} platform Provider oauth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccount1: async (v: addAccount1VEnum, language: addAccount1LanguageEnum, projectId: number, platform: addAccount1PlatformEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('addAccount1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('addAccount1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('addAccount1', 'projectId', projectId)
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('addAccount1', 'platform', platform)
            const localVarPath = `/method/platforms/connect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get category from the platform
         * @param {getCategory1VEnum} v Version
         * @param {getCategory1LanguageEnum} language Current language
         * @param {getCategory1TypeEnum} type Category search bar
         * @param {string} [q] Category search bar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategory1: async (v: getCategory1VEnum, language: getCategory1LanguageEnum, type: getCategory1TypeEnum, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('getCategory1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getCategory1', 'language', language)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getCategory1', 'type', type)
            const localVarPath = `/method/platforms/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get category from the platform
         * @param {logoutAccount1VEnum} v Version
         * @param {logoutAccount1LanguageEnum} language Current language
         * @param {string} id Category search bar
         * @param {logoutAccount1PlatformEnum} platform Provider oauth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutAccount1: async (v: logoutAccount1VEnum, language: logoutAccount1LanguageEnum, id: string, platform: logoutAccount1PlatformEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('logoutAccount1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('logoutAccount1', 'language', language)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logoutAccount1', 'id', id)
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('logoutAccount1', 'platform', platform)
            const localVarPath = `/method/platforms/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Supported platforms
         * @param {platformList1VEnum} v Version
         * @param {platformList1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformList1: async (v: platformList1VEnum, language: platformList1LanguageEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('platformList1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('platformList1', 'language', language)
            const localVarPath = `/method/platforms/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlatformsApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get url for start oauth
         * @param {addAccount1VEnum} v Version
         * @param {addAccount1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {addAccount1PlatformEnum} platform Provider oauth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAccount1(v: addAccount1VEnum, language: addAccount1LanguageEnum, projectId: number, platform: addAccount1PlatformEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAccount1(v, language, projectId, platform, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlatformsApi.addAccount1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get category from the platform
         * @param {getCategory1VEnum} v Version
         * @param {getCategory1LanguageEnum} language Current language
         * @param {getCategory1TypeEnum} type Category search bar
         * @param {string} [q] Category search bar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategory1(v: getCategory1VEnum, language: getCategory1LanguageEnum, type: getCategory1TypeEnum, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfCategoryItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategory1(v, language, type, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlatformsApi.getCategory1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get category from the platform
         * @param {logoutAccount1VEnum} v Version
         * @param {logoutAccount1LanguageEnum} language Current language
         * @param {string} id Category search bar
         * @param {logoutAccount1PlatformEnum} platform Provider oauth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutAccount1(v: logoutAccount1VEnum, language: logoutAccount1LanguageEnum, id: string, platform: logoutAccount1PlatformEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfCategoryItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutAccount1(v, language, id, platform, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlatformsApi.logoutAccount1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Supported platforms
         * @param {platformList1VEnum} v Version
         * @param {platformList1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async platformList1(v: platformList1VEnum, language: platformList1LanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SitePlatformsSupportedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.platformList1(v, language, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlatformsApi.platformList1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlatformsApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Get url for start oauth
         * @param {addAccount1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccount1(requestParameters: addAccount1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: addAccount1VEnum = requestParameters.v || addAccount1VEnum._1;
            return localVarFp.addAccount1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.platform, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get category from the platform
         * @param {getCategory1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategory1(requestParameters: getCategory1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfCategoryItemResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: getCategory1VEnum = requestParameters.v || getCategory1VEnum._1;
            return localVarFp.getCategory1(actualV, requestParameters.language, requestParameters.type, requestParameters.q, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get category from the platform
         * @param {logoutAccount1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutAccount1(requestParameters: logoutAccount1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfCategoryItemResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: logoutAccount1VEnum = requestParameters.v || logoutAccount1VEnum._1;
            return localVarFp.logoutAccount1(actualV, requestParameters.language, requestParameters.id, requestParameters.platform, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Supported platforms
         * @param {platformList1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformList1(requestParameters: platformList1Request, options?: RawAxiosRequestConfig): AxiosPromise<SitePlatformsSupportedResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: platformList1VEnum = requestParameters.v || platformList1VEnum._1;
            return localVarFp.platformList1(actualV, requestParameters.language, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addAccount1 operation in PlatformsApi.
 * @export
 * @interface addAccount1Request
 */
export interface addAccount1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof addAccount1
     */
    readonly v?: addAccount1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof addAccount1
     */
    readonly language: addAccount1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof addAccount1
     */
    readonly projectId: number

    /**
     * Provider oauth
     * @type {'vk' | 'vk-id' | 'ok' | 'youtube' | 'trovo' | 'twitch'}
     * @memberof addAccount1
     */
    readonly platform: addAccount1PlatformEnum
}

/**
 * Request parameters for getCategory1 operation in PlatformsApi.
 * @export
 * @interface getCategory1Request
 */
export interface getCategory1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getCategory1
     */
    readonly v?: getCategory1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getCategory1
     */
    readonly language: getCategory1LanguageEnum

    /**
     * Category search bar
     * @type {'vk' | 'youtube' | 'trovo' | 'twitch' | 'vkvideolive'}
     * @memberof getCategory1
     */
    readonly type: getCategory1TypeEnum

    /**
     * Category search bar
     * @type {string}
     * @memberof getCategory1
     */
    readonly q?: string
}

/**
 * Request parameters for logoutAccount1 operation in PlatformsApi.
 * @export
 * @interface logoutAccount1Request
 */
export interface logoutAccount1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof logoutAccount1
     */
    readonly v?: logoutAccount1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof logoutAccount1
     */
    readonly language: logoutAccount1LanguageEnum

    /**
     * Category search bar
     * @type {string}
     * @memberof logoutAccount1
     */
    readonly id: string

    /**
     * Provider oauth
     * @type {'vk' | 'vk-id' | 'ok' | 'youtube' | 'trovo' | 'twitch'}
     * @memberof logoutAccount1
     */
    readonly platform: logoutAccount1PlatformEnum
}

/**
 * Request parameters for platformList1 operation in PlatformsApi.
 * @export
 * @interface platformList1Request
 */
export interface platformList1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof platformList1
     */
    readonly v?: platformList1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof platformList1
     */
    readonly language: platformList1LanguageEnum
}

/**
 * PlatformsApi - object-oriented interface
 * @export
 * @class PlatformsApi
 * @extends {BaseAPI}
 */
export class PlatformsApi extends BaseAPI {
    /**
     * 
     * @summary Get url for start oauth
     * @param {addAccount1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    public addAccount1(requestParameters: addAccount1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: addAccount1VEnum = requestParameters.v || addAccount1VEnum._1;
        return fp(this.configuration).addAccount1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.platform, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get category from the platform
     * @param {getCategory1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    public getCategory1(requestParameters: getCategory1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: getCategory1VEnum = requestParameters.v || getCategory1VEnum._1;
        return fp(this.configuration).getCategory1(actualV, requestParameters.language, requestParameters.type, requestParameters.q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get category from the platform
     * @param {logoutAccount1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    public logoutAccount1(requestParameters: logoutAccount1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: logoutAccount1VEnum = requestParameters.v || logoutAccount1VEnum._1;
        return fp(this.configuration).logoutAccount1(actualV, requestParameters.language, requestParameters.id, requestParameters.platform, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Supported platforms
     * @param {platformList1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    public platformList1(requestParameters: platformList1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: platformList1VEnum = requestParameters.v || platformList1VEnum._1;
        return fp(this.configuration).platformList1(actualV, requestParameters.language, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum addAccount1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum addAccount1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum addAccount1PlatformEnum {
    vk = 'vk',
    vk_id = 'vk-id',
    ok = 'ok',
    youtube = 'youtube',
    trovo = 'trovo',
    twitch = 'twitch'
}
/**
  * @export
  * @enum {string}
  */
export enum getCategory1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum getCategory1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum getCategory1TypeEnum {
    vk = 'vk',
    youtube = 'youtube',
    trovo = 'trovo',
    twitch = 'twitch',
    vkvideolive = 'vkvideolive'
}
/**
  * @export
  * @enum {string}
  */
export enum logoutAccount1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum logoutAccount1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum logoutAccount1PlatformEnum {
    vk = 'vk',
    vk_id = 'vk-id',
    ok = 'ok',
    youtube = 'youtube',
    trovo = 'trovo',
    twitch = 'twitch'
}
/**
  * @export
  * @enum {string}
  */
export enum platformList1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum platformList1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
