/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { PaginatedResponseOfMoneyFlowResponse } from '../models';
/**
 * MoneyFlowApi - axios parameter creator
 * @export
 */
export const MoneyFlowApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Transaction list for frontend
         * @param {MoneyFlowListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {MoneyFlowListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {string} [type] Filter code transaction. example 1 or 1,2,3
         * @param {string} [balanceType] Filter code transaction. example 1 or 1,2,3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moneyFlowListV1: async (language: MoneyFlowListV1LanguageEnum, projectId: number, v?: MoneyFlowListV1VEnum, limit?: number, offset?: number, dateFrom?: string, dateTo?: string, type?: string, balanceType?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('moneyFlowListV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('moneyFlowListV1', 'projectId', projectId)
            const localVarPath = `/method/money_flow/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString() :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString() :
                    dateTo;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (balanceType !== undefined) {
                localVarQueryParameter['balance_type'] = balanceType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MoneyFlowApi - functional programming interface
 * @export
 */
export const MoneyFlowApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MoneyFlowApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Transaction list for frontend
         * @param {MoneyFlowListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {MoneyFlowListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {string} [type] Filter code transaction. example 1 or 1,2,3
         * @param {string} [balanceType] Filter code transaction. example 1 or 1,2,3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moneyFlowListV1(language: MoneyFlowListV1LanguageEnum, projectId: number, v?: MoneyFlowListV1VEnum, limit?: number, offset?: number, dateFrom?: string, dateTo?: string, type?: string, balanceType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseOfMoneyFlowResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moneyFlowListV1(language, projectId, v, limit, offset, dateFrom, dateTo, type, balanceType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MoneyFlowApi.moneyFlowListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MoneyFlowApi - factory interface
 * @export
 */
export const MoneyFlowApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MoneyFlowApiFp(configuration)
    return {
        /**
         * 
         * @summary Transaction list for frontend
         * @param {MoneyFlowApiMoneyFlowListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moneyFlowListV1(requestParameters: MoneyFlowApiMoneyFlowListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfMoneyFlowResponse> {
            return localVarFp.moneyFlowListV1(requestParameters.language, requestParameters.projectId, requestParameters.v, requestParameters.limit, requestParameters.offset, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.type, requestParameters.balanceType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MoneyFlowApi - interface
 * @export
 * @interface MoneyFlowApi
 */
export interface MoneyFlowApiInterface {
    /**
     * 
     * @summary Transaction list for frontend
     * @param {MoneyFlowApiMoneyFlowListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoneyFlowApiInterface
     */
    moneyFlowListV1(requestParameters: MoneyFlowApiMoneyFlowListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfMoneyFlowResponse>;

}

/**
 * Request parameters for moneyFlowListV1 operation in MoneyFlowApi.
 * @export
 * @interface MoneyFlowApiMoneyFlowListV1Request
 */
export interface MoneyFlowApiMoneyFlowListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof MoneyFlowApiMoneyFlowListV1
     */
    readonly language: MoneyFlowListV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof MoneyFlowApiMoneyFlowListV1
     */
    readonly projectId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof MoneyFlowApiMoneyFlowListV1
     */
    readonly v?: MoneyFlowListV1VEnum

    /**
     * Number of results
     * @type {number}
     * @memberof MoneyFlowApiMoneyFlowListV1
     */
    readonly limit?: number

    /**
     * Page offset number
     * @type {number}
     * @memberof MoneyFlowApiMoneyFlowListV1
     */
    readonly offset?: number

    /**
     * Date from
     * @type {string}
     * @memberof MoneyFlowApiMoneyFlowListV1
     */
    readonly dateFrom?: string

    /**
     * Date to
     * @type {string}
     * @memberof MoneyFlowApiMoneyFlowListV1
     */
    readonly dateTo?: string

    /**
     * Filter code transaction. example 1 or 1,2,3
     * @type {string}
     * @memberof MoneyFlowApiMoneyFlowListV1
     */
    readonly type?: string

    /**
     * Filter code transaction. example 1 or 1,2,3
     * @type {string}
     * @memberof MoneyFlowApiMoneyFlowListV1
     */
    readonly balanceType?: string
}

/**
 * MoneyFlowApi - object-oriented interface
 * @export
 * @class MoneyFlowApi
 * @extends {BaseAPI}
 */
export class MoneyFlowApi extends BaseAPI implements MoneyFlowApiInterface {
    /**
     * 
     * @summary Transaction list for frontend
     * @param {MoneyFlowApiMoneyFlowListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoneyFlowApi
     */
    public moneyFlowListV1(requestParameters: MoneyFlowApiMoneyFlowListV1Request, options?: RawAxiosRequestConfig) {
        return MoneyFlowApiFp(this.configuration).moneyFlowListV1(requestParameters.language, requestParameters.projectId, requestParameters.v, requestParameters.limit, requestParameters.offset, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.type, requestParameters.balanceType, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const MoneyFlowListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type MoneyFlowListV1LanguageEnum = typeof MoneyFlowListV1LanguageEnum[keyof typeof MoneyFlowListV1LanguageEnum];
/**
 * @export
 */
export const MoneyFlowListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type MoneyFlowListV1VEnum = typeof MoneyFlowListV1VEnum[keyof typeof MoneyFlowListV1VEnum];
