/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { GetPaySettingResponseV3 } from '../models';
// @ts-ignore
import type { PayCheckCountryResponse } from '../models';
// @ts-ignore
import type { PaySettingBodyDto } from '../models';
/**
 * PaySettingApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check country after update user
         * @param {checkCountry1VEnum} v Version
         * @param {checkCountry1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} countryId country id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCountry1: async (v: checkCountry1VEnum, language: checkCountry1LanguageEnum, projectId: number, countryId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('checkCountry1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('checkCountry1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('checkCountry1', 'projectId', projectId)
            // verify required parameter 'countryId' is not null or undefined
            assertParamExists('checkCountry1', 'countryId', countryId)
            const localVarPath = `/method/pay-setting/check-country`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (countryId !== undefined) {
                localVarQueryParameter['country_id'] = countryId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get pay settings for profile v3
         * @param {getSettingV31VEnum} v Version
         * @param {getSettingV31LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingV31: async (v: getSettingV31VEnum, language: getSettingV31LanguageEnum, projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('getSettingV31', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getSettingV31', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getSettingV31', 'projectId', projectId)
            const localVarPath = `/method/pay-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set pay settings for profile
         * @param {PaySettingBodyDto} paySettingBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSetting1: async (paySettingBodyDto: PaySettingBodyDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paySettingBodyDto' is not null or undefined
            assertParamExists('setSetting1', 'paySettingBodyDto', paySettingBodyDto)
            const localVarPath = `/method/pay-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paySettingBodyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaySettingApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Check country after update user
         * @param {checkCountry1VEnum} v Version
         * @param {checkCountry1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} countryId country id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkCountry1(v: checkCountry1VEnum, language: checkCountry1LanguageEnum, projectId: number, countryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayCheckCountryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkCountry1(v, language, projectId, countryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaySettingApi.checkCountry1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get pay settings for profile v3
         * @param {getSettingV31VEnum} v Version
         * @param {getSettingV31LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettingV31(v: getSettingV31VEnum, language: getSettingV31LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPaySettingResponseV3>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettingV31(v, language, projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaySettingApi.getSettingV31']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set pay settings for profile
         * @param {PaySettingBodyDto} paySettingBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setSetting1(paySettingBodyDto: PaySettingBodyDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setSetting1(paySettingBodyDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaySettingApi.setSetting1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PaySettingApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Check country after update user
         * @param {checkCountry1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCountry1(requestParameters: checkCountry1Request, options?: RawAxiosRequestConfig): AxiosPromise<PayCheckCountryResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: checkCountry1VEnum = requestParameters.v || checkCountry1VEnum._1;
            return localVarFp.checkCountry1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.countryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get pay settings for profile v3
         * @param {getSettingV31Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingV31(requestParameters: getSettingV31Request, options?: RawAxiosRequestConfig): AxiosPromise<GetPaySettingResponseV3> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: getSettingV31VEnum = requestParameters.v || getSettingV31VEnum._1;
            return localVarFp.getSettingV31(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set pay settings for profile
         * @param {setSetting1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSetting1(requestParameters: setSetting1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setSetting1(requestParameters.paySettingBodyDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkCountry1 operation in PaySettingApi.
 * @export
 * @interface checkCountry1Request
 */
export interface checkCountry1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof checkCountry1
     */
    readonly v?: checkCountry1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof checkCountry1
     */
    readonly language: checkCountry1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof checkCountry1
     */
    readonly projectId: number

    /**
     * country id
     * @type {number}
     * @memberof checkCountry1
     */
    readonly countryId: number
}

/**
 * Request parameters for getSettingV31 operation in PaySettingApi.
 * @export
 * @interface getSettingV31Request
 */
export interface getSettingV31Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getSettingV31
     */
    readonly v?: getSettingV31VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getSettingV31
     */
    readonly language: getSettingV31LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof getSettingV31
     */
    readonly projectId: number
}

/**
 * Request parameters for setSetting1 operation in PaySettingApi.
 * @export
 * @interface setSetting1Request
 */
export interface setSetting1Request {
    /**
     * 
     * @type {PaySettingBodyDto}
     * @memberof setSetting1
     */
    readonly paySettingBodyDto: PaySettingBodyDto
}

/**
 * PaySettingApi - object-oriented interface
 * @export
 * @class PaySettingApi
 * @extends {BaseAPI}
 */
export class PaySettingApi extends BaseAPI {
    /**
     * 
     * @summary Check country after update user
     * @param {checkCountry1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    public checkCountry1(requestParameters: checkCountry1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: checkCountry1VEnum = requestParameters.v || checkCountry1VEnum._1;
        return fp(this.configuration).checkCountry1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.countryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get pay settings for profile v3
     * @param {getSettingV31Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    public getSettingV31(requestParameters: getSettingV31Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: getSettingV31VEnum = requestParameters.v || getSettingV31VEnum._1;
        return fp(this.configuration).getSettingV31(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set pay settings for profile
     * @param {setSetting1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    public setSetting1(requestParameters: setSetting1Request, options?: RawAxiosRequestConfig) {
        return fp(this.configuration).setSetting1(requestParameters.paySettingBodyDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum checkCountry1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum checkCountry1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum getSettingV31VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum getSettingV31LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
