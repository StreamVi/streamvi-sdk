/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { GetPaySettingResponseV3 } from '../models';
// @ts-ignore
import type { PayCheckCountryResponse } from '../models';
// @ts-ignore
import type { PaySettingBodyDto } from '../models';
/**
 * PaySettingApi - axios parameter creator
 * @export
 */
export const PaySettingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check country after update user
         * @param {PaySettingCheckCountryV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} countryId country id
         * @param {PaySettingCheckCountryV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySettingCheckCountryV1: async (language: PaySettingCheckCountryV1LanguageEnum, projectId: number, countryId: number, v?: PaySettingCheckCountryV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('paySettingCheckCountryV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('paySettingCheckCountryV1', 'projectId', projectId)
            // verify required parameter 'countryId' is not null or undefined
            assertParamExists('paySettingCheckCountryV1', 'countryId', countryId)
            const localVarPath = `/method/pay-setting/check-country`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (countryId !== undefined) {
                localVarQueryParameter['country_id'] = countryId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get pay settings for profile v3
         * @param {PaySettingGetSettingV3LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PaySettingGetSettingV3VEnum} [v] Version (automatically defaults to 3 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySettingGetSettingV3: async (language: PaySettingGetSettingV3LanguageEnum, projectId: number, v?: PaySettingGetSettingV3VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('paySettingGetSettingV3', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('paySettingGetSettingV3', 'projectId', projectId)
            const localVarPath = `/method/pay-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set pay settings for profile
         * @param {PaySettingBodyDto} paySettingBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySettingSetSettingV1: async (paySettingBodyDto: PaySettingBodyDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paySettingBodyDto' is not null or undefined
            assertParamExists('paySettingSetSettingV1', 'paySettingBodyDto', paySettingBodyDto)
            const localVarPath = `/method/pay-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paySettingBodyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaySettingApi - functional programming interface
 * @export
 */
export const PaySettingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaySettingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Check country after update user
         * @param {PaySettingCheckCountryV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} countryId country id
         * @param {PaySettingCheckCountryV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paySettingCheckCountryV1(language: PaySettingCheckCountryV1LanguageEnum, projectId: number, countryId: number, v?: PaySettingCheckCountryV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayCheckCountryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paySettingCheckCountryV1(language, projectId, countryId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaySettingApi.paySettingCheckCountryV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get pay settings for profile v3
         * @param {PaySettingGetSettingV3LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PaySettingGetSettingV3VEnum} [v] Version (automatically defaults to 3 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paySettingGetSettingV3(language: PaySettingGetSettingV3LanguageEnum, projectId: number, v?: PaySettingGetSettingV3VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPaySettingResponseV3>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paySettingGetSettingV3(language, projectId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaySettingApi.paySettingGetSettingV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set pay settings for profile
         * @param {PaySettingBodyDto} paySettingBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paySettingSetSettingV1(paySettingBodyDto: PaySettingBodyDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paySettingSetSettingV1(paySettingBodyDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaySettingApi.paySettingSetSettingV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PaySettingApi - factory interface
 * @export
 */
export const PaySettingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaySettingApiFp(configuration)
    return {
        /**
         * 
         * @summary Check country after update user
         * @param {PaySettingApiPaySettingCheckCountryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySettingCheckCountryV1(requestParameters: PaySettingApiPaySettingCheckCountryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PayCheckCountryResponse> {
            return localVarFp.paySettingCheckCountryV1(requestParameters.language, requestParameters.projectId, requestParameters.countryId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get pay settings for profile v3
         * @param {PaySettingApiPaySettingGetSettingV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySettingGetSettingV3(requestParameters: PaySettingApiPaySettingGetSettingV3Request, options?: RawAxiosRequestConfig): AxiosPromise<GetPaySettingResponseV3> {
            return localVarFp.paySettingGetSettingV3(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set pay settings for profile
         * @param {PaySettingApiPaySettingSetSettingV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySettingSetSettingV1(requestParameters: PaySettingApiPaySettingSetSettingV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.paySettingSetSettingV1(requestParameters.paySettingBodyDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaySettingApi - interface
 * @export
 * @interface PaySettingApi
 */
export interface PaySettingApiInterface {
    /**
     * 
     * @summary Check country after update user
     * @param {PaySettingApiPaySettingCheckCountryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApiInterface
     */
    paySettingCheckCountryV1(requestParameters: PaySettingApiPaySettingCheckCountryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PayCheckCountryResponse>;

    /**
     * 
     * @summary Get pay settings for profile v3
     * @param {PaySettingApiPaySettingGetSettingV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApiInterface
     */
    paySettingGetSettingV3(requestParameters: PaySettingApiPaySettingGetSettingV3Request, options?: RawAxiosRequestConfig): AxiosPromise<GetPaySettingResponseV3>;

    /**
     * 
     * @summary Set pay settings for profile
     * @param {PaySettingApiPaySettingSetSettingV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApiInterface
     */
    paySettingSetSettingV1(requestParameters: PaySettingApiPaySettingSetSettingV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for paySettingCheckCountryV1 operation in PaySettingApi.
 * @export
 * @interface PaySettingApiPaySettingCheckCountryV1Request
 */
export interface PaySettingApiPaySettingCheckCountryV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PaySettingApiPaySettingCheckCountryV1
     */
    readonly language: PaySettingCheckCountryV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof PaySettingApiPaySettingCheckCountryV1
     */
    readonly projectId: number

    /**
     * country id
     * @type {number}
     * @memberof PaySettingApiPaySettingCheckCountryV1
     */
    readonly countryId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PaySettingApiPaySettingCheckCountryV1
     */
    readonly v?: PaySettingCheckCountryV1VEnum
}

/**
 * Request parameters for paySettingGetSettingV3 operation in PaySettingApi.
 * @export
 * @interface PaySettingApiPaySettingGetSettingV3Request
 */
export interface PaySettingApiPaySettingGetSettingV3Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PaySettingApiPaySettingGetSettingV3
     */
    readonly language: PaySettingGetSettingV3LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof PaySettingApiPaySettingGetSettingV3
     */
    readonly projectId: number

    /**
     * Version (automatically defaults to 3 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PaySettingApiPaySettingGetSettingV3
     */
    readonly v?: PaySettingGetSettingV3VEnum
}

/**
 * Request parameters for paySettingSetSettingV1 operation in PaySettingApi.
 * @export
 * @interface PaySettingApiPaySettingSetSettingV1Request
 */
export interface PaySettingApiPaySettingSetSettingV1Request {
    /**
     * 
     * @type {PaySettingBodyDto}
     * @memberof PaySettingApiPaySettingSetSettingV1
     */
    readonly paySettingBodyDto: PaySettingBodyDto
}

/**
 * PaySettingApi - object-oriented interface
 * @export
 * @class PaySettingApi
 * @extends {BaseAPI}
 */
export class PaySettingApi extends BaseAPI implements PaySettingApiInterface {
    /**
     * 
     * @summary Check country after update user
     * @param {PaySettingApiPaySettingCheckCountryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    public paySettingCheckCountryV1(requestParameters: PaySettingApiPaySettingCheckCountryV1Request, options?: RawAxiosRequestConfig) {
        return PaySettingApiFp(this.configuration).paySettingCheckCountryV1(requestParameters.language, requestParameters.projectId, requestParameters.countryId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get pay settings for profile v3
     * @param {PaySettingApiPaySettingGetSettingV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    public paySettingGetSettingV3(requestParameters: PaySettingApiPaySettingGetSettingV3Request, options?: RawAxiosRequestConfig) {
        return PaySettingApiFp(this.configuration).paySettingGetSettingV3(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set pay settings for profile
     * @param {PaySettingApiPaySettingSetSettingV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    public paySettingSetSettingV1(requestParameters: PaySettingApiPaySettingSetSettingV1Request, options?: RawAxiosRequestConfig) {
        return PaySettingApiFp(this.configuration).paySettingSetSettingV1(requestParameters.paySettingBodyDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const PaySettingCheckCountryV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PaySettingCheckCountryV1LanguageEnum = typeof PaySettingCheckCountryV1LanguageEnum[keyof typeof PaySettingCheckCountryV1LanguageEnum];
/**
 * @export
 */
export const PaySettingCheckCountryV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PaySettingCheckCountryV1VEnum = typeof PaySettingCheckCountryV1VEnum[keyof typeof PaySettingCheckCountryV1VEnum];
/**
 * @export
 */
export const PaySettingGetSettingV3LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PaySettingGetSettingV3LanguageEnum = typeof PaySettingGetSettingV3LanguageEnum[keyof typeof PaySettingGetSettingV3LanguageEnum];
/**
 * @export
 */
export const PaySettingGetSettingV3VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PaySettingGetSettingV3VEnum = typeof PaySettingGetSettingV3VEnum[keyof typeof PaySettingGetSettingV3VEnum];
