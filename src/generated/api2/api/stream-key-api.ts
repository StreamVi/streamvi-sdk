/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { GetStreamKeyResponse } from '../models';
// @ts-ignore
import type { SetRecordStreamRequest } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
/**
 * StreamKeyApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get stream credentials
         * @param {key1VEnum} v Version
         * @param {key1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        key1: async (v: key1VEnum, language: key1LanguageEnum, projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('key1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('key1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('key1', 'projectId', projectId)
            const localVarPath = `/method/stream-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update record
         * @param {SetRecordStreamRequest} setRecordStreamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecord1: async (setRecordStreamRequest: SetRecordStreamRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setRecordStreamRequest' is not null or undefined
            assertParamExists('updateRecord1', 'setRecordStreamRequest', setRecordStreamRequest)
            const localVarPath = `/method/stream-keys/record`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setRecordStreamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StreamKeyApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get stream credentials
         * @param {key1VEnum} v Version
         * @param {key1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async key1(v: key1VEnum, language: key1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStreamKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.key1(v, language, projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreamKeyApi.key1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update record
         * @param {SetRecordStreamRequest} setRecordStreamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRecord1(setRecordStreamRequest: SetRecordStreamRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRecord1(setRecordStreamRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreamKeyApi.updateRecord1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StreamKeyApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Get stream credentials
         * @param {key1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        key1(requestParameters: key1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetStreamKeyResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: key1VEnum = requestParameters.v || key1VEnum._1;
            return localVarFp.key1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update record
         * @param {updateRecord1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecord1(requestParameters: updateRecord1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.updateRecord1(requestParameters.setRecordStreamRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for key1 operation in StreamKeyApi.
 * @export
 * @interface key1Request
 */
export interface key1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof key1
     */
    readonly v?: key1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof key1
     */
    readonly language: key1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof key1
     */
    readonly projectId: number
}

/**
 * Request parameters for updateRecord1 operation in StreamKeyApi.
 * @export
 * @interface updateRecord1Request
 */
export interface updateRecord1Request {
    /**
     * 
     * @type {SetRecordStreamRequest}
     * @memberof updateRecord1
     */
    readonly setRecordStreamRequest: SetRecordStreamRequest
}

/**
 * StreamKeyApi - object-oriented interface
 * @export
 * @class StreamKeyApi
 * @extends {BaseAPI}
 */
export class StreamKeyApi extends BaseAPI {
    /**
     * 
     * @summary Get stream credentials
     * @param {key1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamKeyApi
     */
    public key1(requestParameters: key1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: key1VEnum = requestParameters.v || key1VEnum._1;
        return fp(this.configuration).key1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update record
     * @param {updateRecord1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamKeyApi
     */
    public updateRecord1(requestParameters: updateRecord1Request, options?: RawAxiosRequestConfig) {
        return fp(this.configuration).updateRecord1(requestParameters.setRecordStreamRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum key1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum key1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
