/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { SiteGetPolicyStructureDto } from '../models';
/**
 * PolicyPageApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get policy page
         * @param {getItem1VEnum} v Version
         * @param {getItem1LanguageEnum} language Current language
         * @param {getItem1FileNameEnum} fileName Policy file name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem1: async (v: getItem1VEnum, language: getItem1LanguageEnum, fileName: getItem1FileNameEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('getItem1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getItem1', 'language', language)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('getItem1', 'fileName', fileName)
            const localVarPath = `/method/policy/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['file_name'] = fileName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get policy structure
         * @param {getStructure1VEnum} v Version
         * @param {getStructure1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStructure1: async (v: getStructure1VEnum, language: getStructure1LanguageEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('getStructure1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getStructure1', 'language', language)
            const localVarPath = `/method/policy/structure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PolicyPageApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get policy page
         * @param {getItem1VEnum} v Version
         * @param {getItem1LanguageEnum} language Current language
         * @param {getItem1FileNameEnum} fileName Policy file name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItem1(v: getItem1VEnum, language: getItem1LanguageEnum, fileName: getItem1FileNameEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItem1(v, language, fileName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PolicyPageApi.getItem1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get policy structure
         * @param {getStructure1VEnum} v Version
         * @param {getStructure1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStructure1(v: getStructure1VEnum, language: getStructure1LanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteGetPolicyStructureDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStructure1(v, language, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PolicyPageApi.getStructure1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PolicyPageApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Get policy page
         * @param {getItem1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem1(requestParameters: getItem1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: getItem1VEnum = requestParameters.v || getItem1VEnum._1;
            return localVarFp.getItem1(actualV, requestParameters.language, requestParameters.fileName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get policy structure
         * @param {getStructure1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStructure1(requestParameters: getStructure1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteGetPolicyStructureDto> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: getStructure1VEnum = requestParameters.v || getStructure1VEnum._1;
            return localVarFp.getStructure1(actualV, requestParameters.language, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getItem1 operation in PolicyPageApi.
 * @export
 * @interface getItem1Request
 */
export interface getItem1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getItem1
     */
    readonly v?: getItem1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getItem1
     */
    readonly language: getItem1LanguageEnum

    /**
     * Policy file name
     * @type {'refund-policy' | 'terms-of-use' | 'using-cookie' | 'acceptable-use' | 'privacy-notice'}
     * @memberof getItem1
     */
    readonly fileName: getItem1FileNameEnum
}

/**
 * Request parameters for getStructure1 operation in PolicyPageApi.
 * @export
 * @interface getStructure1Request
 */
export interface getStructure1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getStructure1
     */
    readonly v?: getStructure1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getStructure1
     */
    readonly language: getStructure1LanguageEnum
}

/**
 * PolicyPageApi - object-oriented interface
 * @export
 * @class PolicyPageApi
 * @extends {BaseAPI}
 */
export class PolicyPageApi extends BaseAPI {
    /**
     * 
     * @summary Get policy page
     * @param {getItem1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyPageApi
     */
    public getItem1(requestParameters: getItem1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: getItem1VEnum = requestParameters.v || getItem1VEnum._1;
        return fp(this.configuration).getItem1(actualV, requestParameters.language, requestParameters.fileName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get policy structure
     * @param {getStructure1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyPageApi
     */
    public getStructure1(requestParameters: getStructure1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: getStructure1VEnum = requestParameters.v || getStructure1VEnum._1;
        return fp(this.configuration).getStructure1(actualV, requestParameters.language, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum getItem1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum getItem1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum getItem1FileNameEnum {
    refund_policy = 'refund-policy',
    terms_of_use = 'terms-of-use',
    using_cookie = 'using-cookie',
    acceptable_use = 'acceptable-use',
    privacy_notice = 'privacy-notice'
}
/**
  * @export
  * @enum {string}
  */
export enum getStructure1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum getStructure1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
