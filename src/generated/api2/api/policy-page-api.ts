/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { GetPolicyStructureDto } from '../models';
/**
 * PolicyPageApi - axios parameter creator
 * @export
 */
export const PolicyPageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get policy page
         * @param {PolicyPageGetItemV1LanguageEnum} language Current language
         * @param {PolicyPageGetItemV1FileNameEnum} fileName Policy file name
         * @param {PolicyPageGetItemV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPageGetItemV1: async (language: PolicyPageGetItemV1LanguageEnum, fileName: PolicyPageGetItemV1FileNameEnum, v?: PolicyPageGetItemV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('policyPageGetItemV1', 'language', language)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('policyPageGetItemV1', 'fileName', fileName)
            const localVarPath = `/method/policy/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['file_name'] = fileName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get policy structure
         * @param {PolicyPageGetStructureV1LanguageEnum} language Current language
         * @param {PolicyPageGetStructureV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPageGetStructureV1: async (language: PolicyPageGetStructureV1LanguageEnum, v?: PolicyPageGetStructureV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('policyPageGetStructureV1', 'language', language)
            const localVarPath = `/method/policy/structure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PolicyPageApi - functional programming interface
 * @export
 */
export const PolicyPageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PolicyPageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get policy page
         * @param {PolicyPageGetItemV1LanguageEnum} language Current language
         * @param {PolicyPageGetItemV1FileNameEnum} fileName Policy file name
         * @param {PolicyPageGetItemV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPageGetItemV1(language: PolicyPageGetItemV1LanguageEnum, fileName: PolicyPageGetItemV1FileNameEnum, v?: PolicyPageGetItemV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPageGetItemV1(language, fileName, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PolicyPageApi.policyPageGetItemV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get policy structure
         * @param {PolicyPageGetStructureV1LanguageEnum} language Current language
         * @param {PolicyPageGetStructureV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPageGetStructureV1(language: PolicyPageGetStructureV1LanguageEnum, v?: PolicyPageGetStructureV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPolicyStructureDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPageGetStructureV1(language, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PolicyPageApi.policyPageGetStructureV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PolicyPageApi - factory interface
 * @export
 */
export const PolicyPageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PolicyPageApiFp(configuration)
    return {
        /**
         * 
         * @summary Get policy page
         * @param {PolicyPageApiPolicyPageGetItemV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPageGetItemV1(requestParameters: PolicyPageApiPolicyPageGetItemV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.policyPageGetItemV1(requestParameters.language, requestParameters.file_name, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get policy structure
         * @param {PolicyPageApiPolicyPageGetStructureV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPageGetStructureV1(requestParameters: PolicyPageApiPolicyPageGetStructureV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetPolicyStructureDto> {
            return localVarFp.policyPageGetStructureV1(requestParameters.language, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PolicyPageApi - interface
 * @export
 * @interface PolicyPageApi
 */
export interface PolicyPageApiInterface {
    /**
     * 
     * @summary Get policy page
     * @param {PolicyPageApiPolicyPageGetItemV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyPageApiInterface
     */
    policyPageGetItemV1(requestParameters: PolicyPageApiPolicyPageGetItemV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get policy structure
     * @param {PolicyPageApiPolicyPageGetStructureV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyPageApiInterface
     */
    policyPageGetStructureV1(requestParameters: PolicyPageApiPolicyPageGetStructureV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetPolicyStructureDto>;

}

/**
 * Request parameters for policyPageGetItemV1 operation in PolicyPageApi.
 * @export
 * @interface PolicyPageApiPolicyPageGetItemV1Request
 */
export interface PolicyPageApiPolicyPageGetItemV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PolicyPageApiPolicyPageGetItemV1
     */
    readonly language: PolicyPageGetItemV1LanguageEnum

    /**
     * Policy file name
     * @type {'refund' | 'terms-of-use' | 'using-cookie' | 'acceptable-use' | 'privacy-notice'}
     * @memberof PolicyPageApiPolicyPageGetItemV1
     */
    readonly file_name: PolicyPageGetItemV1FileNameEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PolicyPageApiPolicyPageGetItemV1
     */
    readonly v?: PolicyPageGetItemV1VEnum
}

/**
 * Request parameters for policyPageGetStructureV1 operation in PolicyPageApi.
 * @export
 * @interface PolicyPageApiPolicyPageGetStructureV1Request
 */
export interface PolicyPageApiPolicyPageGetStructureV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PolicyPageApiPolicyPageGetStructureV1
     */
    readonly language: PolicyPageGetStructureV1LanguageEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PolicyPageApiPolicyPageGetStructureV1
     */
    readonly v?: PolicyPageGetStructureV1VEnum
}

/**
 * PolicyPageApi - object-oriented interface
 * @export
 * @class PolicyPageApi
 * @extends {BaseAPI}
 */
export class PolicyPageApi extends BaseAPI implements PolicyPageApiInterface {
    /**
     * 
     * @summary Get policy page
     * @param {PolicyPageApiPolicyPageGetItemV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyPageApi
     */
    public policyPageGetItemV1(requestParameters: PolicyPageApiPolicyPageGetItemV1Request, options?: RawAxiosRequestConfig) {
        return PolicyPageApiFp(this.configuration).policyPageGetItemV1(requestParameters.language, requestParameters.file_name, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get policy structure
     * @param {PolicyPageApiPolicyPageGetStructureV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyPageApi
     */
    public policyPageGetStructureV1(requestParameters: PolicyPageApiPolicyPageGetStructureV1Request, options?: RawAxiosRequestConfig) {
        return PolicyPageApiFp(this.configuration).policyPageGetStructureV1(requestParameters.language, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const PolicyPageGetItemV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PolicyPageGetItemV1LanguageEnum = typeof PolicyPageGetItemV1LanguageEnum[keyof typeof PolicyPageGetItemV1LanguageEnum];
/**
 * @export
 */
export const PolicyPageGetItemV1FileNameEnum = {
    Refund: 'refund',
    TermsOfUse: 'terms-of-use',
    UsingCookie: 'using-cookie',
    AcceptableUse: 'acceptable-use',
    PrivacyNotice: 'privacy-notice'
} as const;
export type PolicyPageGetItemV1FileNameEnum = typeof PolicyPageGetItemV1FileNameEnum[keyof typeof PolicyPageGetItemV1FileNameEnum];
/**
 * @export
 */
export const PolicyPageGetItemV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PolicyPageGetItemV1VEnum = typeof PolicyPageGetItemV1VEnum[keyof typeof PolicyPageGetItemV1VEnum];
/**
 * @export
 */
export const PolicyPageGetStructureV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PolicyPageGetStructureV1LanguageEnum = typeof PolicyPageGetStructureV1LanguageEnum[keyof typeof PolicyPageGetStructureV1LanguageEnum];
/**
 * @export
 */
export const PolicyPageGetStructureV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PolicyPageGetStructureV1VEnum = typeof PolicyPageGetStructureV1VEnum[keyof typeof PolicyPageGetStructureV1VEnum];
