/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { NotifyHistorySiteResponse } from '../models';
// @ts-ignore
import type { NotifyHistoryStatusUserResponse } from '../models';
// @ts-ignore
import type { PaginatedResponseOfNotifyHistorySiteResponse } from '../models';
// @ts-ignore
import type { SiteMarkReadHistoryRequest } from '../models';
// @ts-ignore
import type { SiteMarkReadHistoryResponse } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
/**
 * NotifyHistoryApi - axios parameter creator
 * @export
 */
export const NotifyHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get list of my notifications
         * @param {NotifyHistoryGetListMyV1LanguageEnum} language Current language
         * @param {NotifyHistoryGetListMyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {number} [projectId] Project id
         * @param {NotifyHistoryGetListMyV1NameEnum} [name] Name
         * @param {NotifyHistoryGetListMyV1ChannelEnum} [channel] Channel
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {NotifyHistoryGetListMyV1StatusReadEnum} [statusRead] Status read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyHistoryGetListMyV1: async (language: NotifyHistoryGetListMyV1LanguageEnum, v?: NotifyHistoryGetListMyV1VEnum, limit?: number, offset?: number, projectId?: number, name?: NotifyHistoryGetListMyV1NameEnum, channel?: NotifyHistoryGetListMyV1ChannelEnum, dateFrom?: string, dateTo?: string, statusRead?: NotifyHistoryGetListMyV1StatusReadEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('notifyHistoryGetListMyV1', 'language', language)
            const localVarPath = `/method/notify_history/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString() :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString() :
                    dateTo;
            }

            if (statusRead !== undefined) {
                localVarQueryParameter['status_read'] = statusRead;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get my status unread message for user
         * @param {NotifyHistoryGetStatusMyV1LanguageEnum} language Current language
         * @param {NotifyHistoryGetStatusMyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyHistoryGetStatusMyV1: async (language: NotifyHistoryGetStatusMyV1LanguageEnum, v?: NotifyHistoryGetStatusMyV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('notifyHistoryGetStatusMyV1', 'language', language)
            const localVarPath = `/method/notify_history/get_status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get my NotifyHistory item by id
         * @param {string} id Id of page in mongodb
         * @param {NotifyHistoryGetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyHistoryGetV1: async (id: string, v?: NotifyHistoryGetV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notifyHistoryGetV1', 'id', id)
            const localVarPath = `/method/notify_history/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (id !== undefined) {
                localVarQueryParameter['_id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set notification in cabinet as read
         * @param {NotifyHistoryMarkOfReadV1LanguageEnum} language Current language
         * @param {SiteMarkReadHistoryRequest} siteMarkReadHistoryRequest 
         * @param {NotifyHistoryMarkOfReadV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyHistoryMarkOfReadV1: async (language: NotifyHistoryMarkOfReadV1LanguageEnum, siteMarkReadHistoryRequest: SiteMarkReadHistoryRequest, v?: NotifyHistoryMarkOfReadV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('notifyHistoryMarkOfReadV1', 'language', language)
            // verify required parameter 'siteMarkReadHistoryRequest' is not null or undefined
            assertParamExists('notifyHistoryMarkOfReadV1', 'siteMarkReadHistoryRequest', siteMarkReadHistoryRequest)
            const localVarPath = `/method/notify_history/read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteMarkReadHistoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Run action in my notify item
         * @param {string} notifyHistoryId Id of page in mongodb
         * @param {string} actionName Action name
         * @param {string} groupId Group id
         * @param {NotifyHistoryRunActionV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyHistoryRunActionV1: async (notifyHistoryId: string, actionName: string, groupId: string, v?: NotifyHistoryRunActionV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notifyHistoryId' is not null or undefined
            assertParamExists('notifyHistoryRunActionV1', 'notifyHistoryId', notifyHistoryId)
            // verify required parameter 'actionName' is not null or undefined
            assertParamExists('notifyHistoryRunActionV1', 'actionName', actionName)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('notifyHistoryRunActionV1', 'groupId', groupId)
            const localVarPath = `/method/notify_history/run_action`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '1';
            }

            if (notifyHistoryId !== undefined) {
                localVarQueryParameter['notify_history_id'] = notifyHistoryId;
            }

            if (actionName !== undefined) {
                localVarQueryParameter['action_name'] = actionName;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set all notification in cabinet as read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyHistorySetAllCabinetReadV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/method/notify_history/set_all_cabinet_read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotifyHistoryApi - functional programming interface
 * @export
 */
export const NotifyHistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotifyHistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get list of my notifications
         * @param {NotifyHistoryGetListMyV1LanguageEnum} language Current language
         * @param {NotifyHistoryGetListMyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {number} [projectId] Project id
         * @param {NotifyHistoryGetListMyV1NameEnum} [name] Name
         * @param {NotifyHistoryGetListMyV1ChannelEnum} [channel] Channel
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {NotifyHistoryGetListMyV1StatusReadEnum} [statusRead] Status read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyHistoryGetListMyV1(language: NotifyHistoryGetListMyV1LanguageEnum, v?: NotifyHistoryGetListMyV1VEnum, limit?: number, offset?: number, projectId?: number, name?: NotifyHistoryGetListMyV1NameEnum, channel?: NotifyHistoryGetListMyV1ChannelEnum, dateFrom?: string, dateTo?: string, statusRead?: NotifyHistoryGetListMyV1StatusReadEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseOfNotifyHistorySiteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyHistoryGetListMyV1(language, v, limit, offset, projectId, name, channel, dateFrom, dateTo, statusRead, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotifyHistoryApi.notifyHistoryGetListMyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get my status unread message for user
         * @param {NotifyHistoryGetStatusMyV1LanguageEnum} language Current language
         * @param {NotifyHistoryGetStatusMyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyHistoryGetStatusMyV1(language: NotifyHistoryGetStatusMyV1LanguageEnum, v?: NotifyHistoryGetStatusMyV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotifyHistoryStatusUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyHistoryGetStatusMyV1(language, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotifyHistoryApi.notifyHistoryGetStatusMyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get my NotifyHistory item by id
         * @param {string} id Id of page in mongodb
         * @param {NotifyHistoryGetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyHistoryGetV1(id: string, v?: NotifyHistoryGetV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotifyHistorySiteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyHistoryGetV1(id, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotifyHistoryApi.notifyHistoryGetV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set notification in cabinet as read
         * @param {NotifyHistoryMarkOfReadV1LanguageEnum} language Current language
         * @param {SiteMarkReadHistoryRequest} siteMarkReadHistoryRequest 
         * @param {NotifyHistoryMarkOfReadV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyHistoryMarkOfReadV1(language: NotifyHistoryMarkOfReadV1LanguageEnum, siteMarkReadHistoryRequest: SiteMarkReadHistoryRequest, v?: NotifyHistoryMarkOfReadV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteMarkReadHistoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyHistoryMarkOfReadV1(language, siteMarkReadHistoryRequest, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotifyHistoryApi.notifyHistoryMarkOfReadV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Run action in my notify item
         * @param {string} notifyHistoryId Id of page in mongodb
         * @param {string} actionName Action name
         * @param {string} groupId Group id
         * @param {NotifyHistoryRunActionV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyHistoryRunActionV1(notifyHistoryId: string, actionName: string, groupId: string, v?: NotifyHistoryRunActionV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotifyHistorySiteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyHistoryRunActionV1(notifyHistoryId, actionName, groupId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotifyHistoryApi.notifyHistoryRunActionV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set all notification in cabinet as read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyHistorySetAllCabinetReadV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyHistorySetAllCabinetReadV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotifyHistoryApi.notifyHistorySetAllCabinetReadV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NotifyHistoryApi - factory interface
 * @export
 */
export const NotifyHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotifyHistoryApiFp(configuration)
    return {
        /**
         * 
         * @summary Get list of my notifications
         * @param {NotifyHistoryApiNotifyHistoryGetListMyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyHistoryGetListMyV1(requestParameters: NotifyHistoryApiNotifyHistoryGetListMyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfNotifyHistorySiteResponse> {
            return localVarFp.notifyHistoryGetListMyV1(requestParameters.language, requestParameters.v, requestParameters.limit, requestParameters.offset, requestParameters.projectId, requestParameters.name, requestParameters.channel, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.statusRead, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get my status unread message for user
         * @param {NotifyHistoryApiNotifyHistoryGetStatusMyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyHistoryGetStatusMyV1(requestParameters: NotifyHistoryApiNotifyHistoryGetStatusMyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<NotifyHistoryStatusUserResponse> {
            return localVarFp.notifyHistoryGetStatusMyV1(requestParameters.language, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get my NotifyHistory item by id
         * @param {NotifyHistoryApiNotifyHistoryGetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyHistoryGetV1(requestParameters: NotifyHistoryApiNotifyHistoryGetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<NotifyHistorySiteResponse> {
            return localVarFp.notifyHistoryGetV1(requestParameters.id, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set notification in cabinet as read
         * @param {NotifyHistoryApiNotifyHistoryMarkOfReadV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyHistoryMarkOfReadV1(requestParameters: NotifyHistoryApiNotifyHistoryMarkOfReadV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteMarkReadHistoryResponse> {
            return localVarFp.notifyHistoryMarkOfReadV1(requestParameters.language, requestParameters.siteMarkReadHistoryRequest, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Run action in my notify item
         * @param {NotifyHistoryApiNotifyHistoryRunActionV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyHistoryRunActionV1(requestParameters: NotifyHistoryApiNotifyHistoryRunActionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<NotifyHistorySiteResponse> {
            return localVarFp.notifyHistoryRunActionV1(requestParameters.notifyHistoryId, requestParameters.actionName, requestParameters.groupId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set all notification in cabinet as read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyHistorySetAllCabinetReadV1(options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.notifyHistorySetAllCabinetReadV1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotifyHistoryApi - interface
 * @export
 * @interface NotifyHistoryApi
 */
export interface NotifyHistoryApiInterface {
    /**
     * 
     * @summary Get list of my notifications
     * @param {NotifyHistoryApiNotifyHistoryGetListMyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApiInterface
     */
    notifyHistoryGetListMyV1(requestParameters: NotifyHistoryApiNotifyHistoryGetListMyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfNotifyHistorySiteResponse>;

    /**
     * 
     * @summary Get my status unread message for user
     * @param {NotifyHistoryApiNotifyHistoryGetStatusMyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApiInterface
     */
    notifyHistoryGetStatusMyV1(requestParameters: NotifyHistoryApiNotifyHistoryGetStatusMyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<NotifyHistoryStatusUserResponse>;

    /**
     * 
     * @summary Get my NotifyHistory item by id
     * @param {NotifyHistoryApiNotifyHistoryGetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApiInterface
     */
    notifyHistoryGetV1(requestParameters: NotifyHistoryApiNotifyHistoryGetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<NotifyHistorySiteResponse>;

    /**
     * 
     * @summary Set notification in cabinet as read
     * @param {NotifyHistoryApiNotifyHistoryMarkOfReadV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApiInterface
     */
    notifyHistoryMarkOfReadV1(requestParameters: NotifyHistoryApiNotifyHistoryMarkOfReadV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteMarkReadHistoryResponse>;

    /**
     * 
     * @summary Run action in my notify item
     * @param {NotifyHistoryApiNotifyHistoryRunActionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApiInterface
     */
    notifyHistoryRunActionV1(requestParameters: NotifyHistoryApiNotifyHistoryRunActionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<NotifyHistorySiteResponse>;

    /**
     * 
     * @summary Set all notification in cabinet as read
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApiInterface
     */
    notifyHistorySetAllCabinetReadV1(options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

}

/**
 * Request parameters for notifyHistoryGetListMyV1 operation in NotifyHistoryApi.
 * @export
 * @interface NotifyHistoryApiNotifyHistoryGetListMyV1Request
 */
export interface NotifyHistoryApiNotifyHistoryGetListMyV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof NotifyHistoryApiNotifyHistoryGetListMyV1
     */
    readonly language: NotifyHistoryGetListMyV1LanguageEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof NotifyHistoryApiNotifyHistoryGetListMyV1
     */
    readonly v?: NotifyHistoryGetListMyV1VEnum

    /**
     * Number of results
     * @type {number}
     * @memberof NotifyHistoryApiNotifyHistoryGetListMyV1
     */
    readonly limit?: number

    /**
     * Page offset number
     * @type {number}
     * @memberof NotifyHistoryApiNotifyHistoryGetListMyV1
     */
    readonly offset?: number

    /**
     * Project id
     * @type {number}
     * @memberof NotifyHistoryApiNotifyHistoryGetListMyV1
     */
    readonly projectId?: number

    /**
     * Name
     * @type {'high_bitrate' | 'request_access_channel' | 'request_access_project' | 'promocode_test' | 'stream_test' | 'plan_restream_expires' | 'plan_restream_expired' | 'plan_restream_renewed' | 'plan_transcoder_expires' | 'plan_transcoder_expired' | 'plan_transcoder_renewed' | 'plan_storage_expires' | 'plan_storage_expired' | 'plan_storage_renewed' | 'broadcast_unsupported_codec' | 'broadcast_unsupported_codec_screen' | 'broadcast_bitrate_exceeded_screen' | 'rtmp_connect_old_server_screen' | 'broadcast_not_audio' | 'broadcast_bitrate_exceeded' | 'broadcast_started' | 'broadcast_stopped' | 'restream_check_twitch_bitrate_1' | 'api_pause_start' | 'api_pause_end' | 'api_wait_edit' | 'api_restream_start' | 'api_restream_stop' | 'api_drop_broadcast' | 'api_drop_broadcast_remove_company' | 'api_drop_broadcast_update_key' | 'publisher_disconnected' | 'publisher_connected' | 'publisher_initializing' | 'publisher_close' | 'broadcast_connected_start' | 'broadcast_connected_end' | 'broadcast_connecting_stream' | 'broadcast_started_new_stream' | 'broadcast_connecting_lost' | 'broadcast_video_lost_start' | 'broadcast_video_lost_end' | 'broadcast_video_pause_start' | 'broadcast_video_pause_end' | 'broadcast_init_restream' | 'start_stream' | 'create_reader' | 'start_channel' | 'stop_channel' | 'stop_stream_video_timeout' | 'stop_stream_no_start_video' | 'stop_stream' | 'delete_reader' | 'transcoder_start' | 'transcoder_stop' | 'start_channel_failed' | 'start_channel_success' | 'api_channel_initializing_start' | 'api_channel_initializing_failed' | 'api_channel_initializing_success' | 'channel_api_update_settings_success' | 'channel_api_update_settings_error' | 'channel_api_update_playlist_success' | 'channel_api_update_playlist_error' | 'channel_api_update_chat_error' | 'channel_api_stream_key_success' | 'channel_api_stream_key_error' | 'channel_api_auto_stop_disable_success' | 'channel_api_auto_stop_disable_error' | 'channel_api_unbinding_stream_key_error' | 'channel_api_create_broadcast_success' | 'channel_api_create_broadcast_error' | 'channel_api_set_planned_success' | 'channel_api_set_planned_error' | 'channel_api_set_thumbnail_success' | 'channel_api_set_thumbnail_error' | 'channel_token_error' | 'channel_api_group_failed' | 'no_audio_reader' | 'restream_check_twitch_bitrate_2' | 'transcoder_support_error_screen' | 'transcoder_tariff_end_screen' | 'transcoder_count_flow_screen' | 'transcoder_resolution_screen' | 'stream_key_banned' | 'broadcast_change_codec' | 'broadcast_change_region' | 'video_upload_error' | 'stop_channel_error' | 'broadcast_user_action_stop'}
     * @memberof NotifyHistoryApiNotifyHistoryGetListMyV1
     */
    readonly name?: NotifyHistoryGetListMyV1NameEnum

    /**
     * Channel
     * @type {'telegram' | 'cabinet' | 'mobile'}
     * @memberof NotifyHistoryApiNotifyHistoryGetListMyV1
     */
    readonly channel?: NotifyHistoryGetListMyV1ChannelEnum

    /**
     * Date from
     * @type {string}
     * @memberof NotifyHistoryApiNotifyHistoryGetListMyV1
     */
    readonly dateFrom?: string

    /**
     * Date to
     * @type {string}
     * @memberof NotifyHistoryApiNotifyHistoryGetListMyV1
     */
    readonly dateTo?: string

    /**
     * Status read
     * @type {'unread' | 'read'}
     * @memberof NotifyHistoryApiNotifyHistoryGetListMyV1
     */
    readonly statusRead?: NotifyHistoryGetListMyV1StatusReadEnum
}

/**
 * Request parameters for notifyHistoryGetStatusMyV1 operation in NotifyHistoryApi.
 * @export
 * @interface NotifyHistoryApiNotifyHistoryGetStatusMyV1Request
 */
export interface NotifyHistoryApiNotifyHistoryGetStatusMyV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof NotifyHistoryApiNotifyHistoryGetStatusMyV1
     */
    readonly language: NotifyHistoryGetStatusMyV1LanguageEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof NotifyHistoryApiNotifyHistoryGetStatusMyV1
     */
    readonly v?: NotifyHistoryGetStatusMyV1VEnum
}

/**
 * Request parameters for notifyHistoryGetV1 operation in NotifyHistoryApi.
 * @export
 * @interface NotifyHistoryApiNotifyHistoryGetV1Request
 */
export interface NotifyHistoryApiNotifyHistoryGetV1Request {
    /**
     * Id of page in mongodb
     * @type {string}
     * @memberof NotifyHistoryApiNotifyHistoryGetV1
     */
    readonly id: string

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1'}
     * @memberof NotifyHistoryApiNotifyHistoryGetV1
     */
    readonly v?: NotifyHistoryGetV1VEnum
}

/**
 * Request parameters for notifyHistoryMarkOfReadV1 operation in NotifyHistoryApi.
 * @export
 * @interface NotifyHistoryApiNotifyHistoryMarkOfReadV1Request
 */
export interface NotifyHistoryApiNotifyHistoryMarkOfReadV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof NotifyHistoryApiNotifyHistoryMarkOfReadV1
     */
    readonly language: NotifyHistoryMarkOfReadV1LanguageEnum

    /**
     * 
     * @type {SiteMarkReadHistoryRequest}
     * @memberof NotifyHistoryApiNotifyHistoryMarkOfReadV1
     */
    readonly siteMarkReadHistoryRequest: SiteMarkReadHistoryRequest

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof NotifyHistoryApiNotifyHistoryMarkOfReadV1
     */
    readonly v?: NotifyHistoryMarkOfReadV1VEnum
}

/**
 * Request parameters for notifyHistoryRunActionV1 operation in NotifyHistoryApi.
 * @export
 * @interface NotifyHistoryApiNotifyHistoryRunActionV1Request
 */
export interface NotifyHistoryApiNotifyHistoryRunActionV1Request {
    /**
     * Id of page in mongodb
     * @type {string}
     * @memberof NotifyHistoryApiNotifyHistoryRunActionV1
     */
    readonly notifyHistoryId: string

    /**
     * Action name
     * @type {string}
     * @memberof NotifyHistoryApiNotifyHistoryRunActionV1
     */
    readonly actionName: string

    /**
     * Group id
     * @type {string}
     * @memberof NotifyHistoryApiNotifyHistoryRunActionV1
     */
    readonly groupId: string

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1'}
     * @memberof NotifyHistoryApiNotifyHistoryRunActionV1
     */
    readonly v?: NotifyHistoryRunActionV1VEnum
}

/**
 * NotifyHistoryApi - object-oriented interface
 * @export
 * @class NotifyHistoryApi
 * @extends {BaseAPI}
 */
export class NotifyHistoryApi extends BaseAPI implements NotifyHistoryApiInterface {
    /**
     * 
     * @summary Get list of my notifications
     * @param {NotifyHistoryApiNotifyHistoryGetListMyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    public notifyHistoryGetListMyV1(requestParameters: NotifyHistoryApiNotifyHistoryGetListMyV1Request, options?: RawAxiosRequestConfig) {
        return NotifyHistoryApiFp(this.configuration).notifyHistoryGetListMyV1(requestParameters.language, requestParameters.v, requestParameters.limit, requestParameters.offset, requestParameters.projectId, requestParameters.name, requestParameters.channel, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.statusRead, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get my status unread message for user
     * @param {NotifyHistoryApiNotifyHistoryGetStatusMyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    public notifyHistoryGetStatusMyV1(requestParameters: NotifyHistoryApiNotifyHistoryGetStatusMyV1Request, options?: RawAxiosRequestConfig) {
        return NotifyHistoryApiFp(this.configuration).notifyHistoryGetStatusMyV1(requestParameters.language, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get my NotifyHistory item by id
     * @param {NotifyHistoryApiNotifyHistoryGetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    public notifyHistoryGetV1(requestParameters: NotifyHistoryApiNotifyHistoryGetV1Request, options?: RawAxiosRequestConfig) {
        return NotifyHistoryApiFp(this.configuration).notifyHistoryGetV1(requestParameters.id, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set notification in cabinet as read
     * @param {NotifyHistoryApiNotifyHistoryMarkOfReadV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    public notifyHistoryMarkOfReadV1(requestParameters: NotifyHistoryApiNotifyHistoryMarkOfReadV1Request, options?: RawAxiosRequestConfig) {
        return NotifyHistoryApiFp(this.configuration).notifyHistoryMarkOfReadV1(requestParameters.language, requestParameters.siteMarkReadHistoryRequest, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Run action in my notify item
     * @param {NotifyHistoryApiNotifyHistoryRunActionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    public notifyHistoryRunActionV1(requestParameters: NotifyHistoryApiNotifyHistoryRunActionV1Request, options?: RawAxiosRequestConfig) {
        return NotifyHistoryApiFp(this.configuration).notifyHistoryRunActionV1(requestParameters.notifyHistoryId, requestParameters.actionName, requestParameters.groupId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set all notification in cabinet as read
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    public notifyHistorySetAllCabinetReadV1(options?: RawAxiosRequestConfig) {
        return NotifyHistoryApiFp(this.configuration).notifyHistorySetAllCabinetReadV1(options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const NotifyHistoryGetListMyV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type NotifyHistoryGetListMyV1LanguageEnum = typeof NotifyHistoryGetListMyV1LanguageEnum[keyof typeof NotifyHistoryGetListMyV1LanguageEnum];
/**
 * @export
 */
export const NotifyHistoryGetListMyV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type NotifyHistoryGetListMyV1VEnum = typeof NotifyHistoryGetListMyV1VEnum[keyof typeof NotifyHistoryGetListMyV1VEnum];
/**
 * @export
 */
export const NotifyHistoryGetListMyV1NameEnum = {
    HighBitrate: 'high_bitrate',
    RequestAccessChannel: 'request_access_channel',
    RequestAccessProject: 'request_access_project',
    PromocodeTest: 'promocode_test',
    StreamTest: 'stream_test',
    PlanRestreamExpires: 'plan_restream_expires',
    PlanRestreamExpired: 'plan_restream_expired',
    PlanRestreamRenewed: 'plan_restream_renewed',
    PlanTranscoderExpires: 'plan_transcoder_expires',
    PlanTranscoderExpired: 'plan_transcoder_expired',
    PlanTranscoderRenewed: 'plan_transcoder_renewed',
    PlanStorageExpires: 'plan_storage_expires',
    PlanStorageExpired: 'plan_storage_expired',
    PlanStorageRenewed: 'plan_storage_renewed',
    BroadcastUnsupportedCodec: 'broadcast_unsupported_codec',
    BroadcastUnsupportedCodecScreen: 'broadcast_unsupported_codec_screen',
    BroadcastBitrateExceededScreen: 'broadcast_bitrate_exceeded_screen',
    RtmpConnectOldServerScreen: 'rtmp_connect_old_server_screen',
    BroadcastNotAudio: 'broadcast_not_audio',
    BroadcastBitrateExceeded: 'broadcast_bitrate_exceeded',
    BroadcastStarted: 'broadcast_started',
    BroadcastStopped: 'broadcast_stopped',
    RestreamCheckTwitchBitrate1: 'restream_check_twitch_bitrate_1',
    ApiPauseStart: 'api_pause_start',
    ApiPauseEnd: 'api_pause_end',
    ApiWaitEdit: 'api_wait_edit',
    ApiRestreamStart: 'api_restream_start',
    ApiRestreamStop: 'api_restream_stop',
    ApiDropBroadcast: 'api_drop_broadcast',
    ApiDropBroadcastRemoveCompany: 'api_drop_broadcast_remove_company',
    ApiDropBroadcastUpdateKey: 'api_drop_broadcast_update_key',
    PublisherDisconnected: 'publisher_disconnected',
    PublisherConnected: 'publisher_connected',
    PublisherInitializing: 'publisher_initializing',
    PublisherClose: 'publisher_close',
    BroadcastConnectedStart: 'broadcast_connected_start',
    BroadcastConnectedEnd: 'broadcast_connected_end',
    BroadcastConnectingStream: 'broadcast_connecting_stream',
    BroadcastStartedNewStream: 'broadcast_started_new_stream',
    BroadcastConnectingLost: 'broadcast_connecting_lost',
    BroadcastVideoLostStart: 'broadcast_video_lost_start',
    BroadcastVideoLostEnd: 'broadcast_video_lost_end',
    BroadcastVideoPauseStart: 'broadcast_video_pause_start',
    BroadcastVideoPauseEnd: 'broadcast_video_pause_end',
    BroadcastInitRestream: 'broadcast_init_restream',
    StartStream: 'start_stream',
    CreateReader: 'create_reader',
    StartChannel: 'start_channel',
    StopChannel: 'stop_channel',
    StopStreamVideoTimeout: 'stop_stream_video_timeout',
    StopStreamNoStartVideo: 'stop_stream_no_start_video',
    StopStream: 'stop_stream',
    DeleteReader: 'delete_reader',
    TranscoderStart: 'transcoder_start',
    TranscoderStop: 'transcoder_stop',
    StartChannelFailed: 'start_channel_failed',
    StartChannelSuccess: 'start_channel_success',
    ApiChannelInitializingStart: 'api_channel_initializing_start',
    ApiChannelInitializingFailed: 'api_channel_initializing_failed',
    ApiChannelInitializingSuccess: 'api_channel_initializing_success',
    ChannelApiUpdateSettingsSuccess: 'channel_api_update_settings_success',
    ChannelApiUpdateSettingsError: 'channel_api_update_settings_error',
    ChannelApiUpdatePlaylistSuccess: 'channel_api_update_playlist_success',
    ChannelApiUpdatePlaylistError: 'channel_api_update_playlist_error',
    ChannelApiUpdateChatError: 'channel_api_update_chat_error',
    ChannelApiStreamKeySuccess: 'channel_api_stream_key_success',
    ChannelApiStreamKeyError: 'channel_api_stream_key_error',
    ChannelApiAutoStopDisableSuccess: 'channel_api_auto_stop_disable_success',
    ChannelApiAutoStopDisableError: 'channel_api_auto_stop_disable_error',
    ChannelApiUnbindingStreamKeyError: 'channel_api_unbinding_stream_key_error',
    ChannelApiCreateBroadcastSuccess: 'channel_api_create_broadcast_success',
    ChannelApiCreateBroadcastError: 'channel_api_create_broadcast_error',
    ChannelApiSetPlannedSuccess: 'channel_api_set_planned_success',
    ChannelApiSetPlannedError: 'channel_api_set_planned_error',
    ChannelApiSetThumbnailSuccess: 'channel_api_set_thumbnail_success',
    ChannelApiSetThumbnailError: 'channel_api_set_thumbnail_error',
    ChannelTokenError: 'channel_token_error',
    ChannelApiGroupFailed: 'channel_api_group_failed',
    NoAudioReader: 'no_audio_reader',
    RestreamCheckTwitchBitrate2: 'restream_check_twitch_bitrate_2',
    TranscoderSupportErrorScreen: 'transcoder_support_error_screen',
    TranscoderTariffEndScreen: 'transcoder_tariff_end_screen',
    TranscoderCountFlowScreen: 'transcoder_count_flow_screen',
    TranscoderResolutionScreen: 'transcoder_resolution_screen',
    StreamKeyBanned: 'stream_key_banned',
    BroadcastChangeCodec: 'broadcast_change_codec',
    BroadcastChangeRegion: 'broadcast_change_region',
    VideoUploadError: 'video_upload_error',
    StopChannelError: 'stop_channel_error',
    BroadcastUserActionStop: 'broadcast_user_action_stop'
} as const;
export type NotifyHistoryGetListMyV1NameEnum = typeof NotifyHistoryGetListMyV1NameEnum[keyof typeof NotifyHistoryGetListMyV1NameEnum];
/**
 * @export
 */
export const NotifyHistoryGetListMyV1ChannelEnum = {
    Telegram: 'telegram',
    Cabinet: 'cabinet',
    Mobile: 'mobile'
} as const;
export type NotifyHistoryGetListMyV1ChannelEnum = typeof NotifyHistoryGetListMyV1ChannelEnum[keyof typeof NotifyHistoryGetListMyV1ChannelEnum];
/**
 * @export
 */
export const NotifyHistoryGetListMyV1StatusReadEnum = {
    Unread: 'unread',
    Read: 'read'
} as const;
export type NotifyHistoryGetListMyV1StatusReadEnum = typeof NotifyHistoryGetListMyV1StatusReadEnum[keyof typeof NotifyHistoryGetListMyV1StatusReadEnum];
/**
 * @export
 */
export const NotifyHistoryGetStatusMyV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type NotifyHistoryGetStatusMyV1LanguageEnum = typeof NotifyHistoryGetStatusMyV1LanguageEnum[keyof typeof NotifyHistoryGetStatusMyV1LanguageEnum];
/**
 * @export
 */
export const NotifyHistoryGetStatusMyV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type NotifyHistoryGetStatusMyV1VEnum = typeof NotifyHistoryGetStatusMyV1VEnum[keyof typeof NotifyHistoryGetStatusMyV1VEnum];
/**
 * @export
 */
export const NotifyHistoryGetV1VEnum = {
    _1: '1'
} as const;
export type NotifyHistoryGetV1VEnum = typeof NotifyHistoryGetV1VEnum[keyof typeof NotifyHistoryGetV1VEnum];
/**
 * @export
 */
export const NotifyHistoryMarkOfReadV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type NotifyHistoryMarkOfReadV1LanguageEnum = typeof NotifyHistoryMarkOfReadV1LanguageEnum[keyof typeof NotifyHistoryMarkOfReadV1LanguageEnum];
/**
 * @export
 */
export const NotifyHistoryMarkOfReadV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type NotifyHistoryMarkOfReadV1VEnum = typeof NotifyHistoryMarkOfReadV1VEnum[keyof typeof NotifyHistoryMarkOfReadV1VEnum];
/**
 * @export
 */
export const NotifyHistoryRunActionV1VEnum = {
    _1: '1'
} as const;
export type NotifyHistoryRunActionV1VEnum = typeof NotifyHistoryRunActionV1VEnum[keyof typeof NotifyHistoryRunActionV1VEnum];
