/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, keyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { NotifyHistorySiteResponse } from '../models';
// @ts-ignore
import type { NotifyHistoryStatusUserResponse } from '../models';
// @ts-ignore
import type { PaginatedResponseOfNotifyHistorySiteResponse } from '../models';
// @ts-ignore
import type { SiteMarkReadHistoryRequest } from '../models';
// @ts-ignore
import type { SiteMarkReadHistoryResponse } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
/**
 * NotifyHistoryApi - axios parameter creator
 * @export
 */
export const axiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get my NotifyHistory item by id
         * @param {get1VEnum} v Version
         * @param {string} id Id of page in mongodb
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get1: async (v: get1VEnum, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('get1', 'v', v)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get1', 'id', id)
            const localVarPath = `/method/notify_history/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (id !== undefined) {
                localVarQueryParameter['_id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of my notifications
         * @param {getListMy1VEnum} v Version
         * @param {getListMy1LanguageEnum} language Current language
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {number} [projectId] Project id
         * @param {getListMy1NameEnum} [name] Name
         * @param {getListMy1ChannelEnum} [channel] Channel
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {getListMy1StatusReadEnum} [statusRead] Status read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListMy1: async (v: getListMy1VEnum, language: getListMy1LanguageEnum, limit?: number, offset?: number, projectId?: number, name?: getListMy1NameEnum, channel?: getListMy1ChannelEnum, dateFrom?: string, dateTo?: string, statusRead?: getListMy1StatusReadEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('getListMy1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getListMy1', 'language', language)
            const localVarPath = `/method/notify_history/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString() :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString() :
                    dateTo;
            }

            if (statusRead !== undefined) {
                localVarQueryParameter['status_read'] = statusRead;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get my status unread message for user
         * @param {getStatusMy1VEnum} v Version
         * @param {getStatusMy1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusMy1: async (v: getStatusMy1VEnum, language: getStatusMy1LanguageEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('getStatusMy1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getStatusMy1', 'language', language)
            const localVarPath = `/method/notify_history/get_status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set notification in cabinet as read
         * @param {markOfRead1VEnum} v Version
         * @param {markOfRead1LanguageEnum} language Current language
         * @param {SiteMarkReadHistoryRequest} siteMarkReadHistoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markOfRead1: async (v: markOfRead1VEnum, language: markOfRead1LanguageEnum, siteMarkReadHistoryRequest: SiteMarkReadHistoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('markOfRead1', 'v', v)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('markOfRead1', 'language', language)
            // verify required parameter 'siteMarkReadHistoryRequest' is not null or undefined
            assertParamExists('markOfRead1', 'siteMarkReadHistoryRequest', siteMarkReadHistoryRequest)
            const localVarPath = `/method/notify_history/read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteMarkReadHistoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Run action in my notify item
         * @param {runAction1VEnum} v Version
         * @param {string} notifyHistoryId Id of page in mongodb
         * @param {string} actionName Action name
         * @param {string} groupId Group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runAction1: async (v: runAction1VEnum, notifyHistoryId: string, actionName: string, groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v' is not null or undefined
            assertParamExists('runAction1', 'v', v)
            // verify required parameter 'notifyHistoryId' is not null or undefined
            assertParamExists('runAction1', 'notifyHistoryId', notifyHistoryId)
            // verify required parameter 'actionName' is not null or undefined
            assertParamExists('runAction1', 'actionName', actionName)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('runAction1', 'groupId', groupId)
            const localVarPath = `/method/notify_history/run_action`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (notifyHistoryId !== undefined) {
                localVarQueryParameter['notify_history_id'] = notifyHistoryId;
            }

            if (actionName !== undefined) {
                localVarQueryParameter['action_name'] = actionName;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set all notification in cabinet as read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAllCabinetRead1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/method/notify_history/set_all_cabinet_read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotifyHistoryApi - functional programming interface
 * @export
 */
export const fp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = axiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get my NotifyHistory item by id
         * @param {get1VEnum} v Version
         * @param {string} id Id of page in mongodb
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get1(v: get1VEnum, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotifyHistorySiteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get1(v, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotifyHistoryApi.get1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of my notifications
         * @param {getListMy1VEnum} v Version
         * @param {getListMy1LanguageEnum} language Current language
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {number} [projectId] Project id
         * @param {getListMy1NameEnum} [name] Name
         * @param {getListMy1ChannelEnum} [channel] Channel
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {getListMy1StatusReadEnum} [statusRead] Status read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListMy1(v: getListMy1VEnum, language: getListMy1LanguageEnum, limit?: number, offset?: number, projectId?: number, name?: getListMy1NameEnum, channel?: getListMy1ChannelEnum, dateFrom?: string, dateTo?: string, statusRead?: getListMy1StatusReadEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseOfNotifyHistorySiteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListMy1(v, language, limit, offset, projectId, name, channel, dateFrom, dateTo, statusRead, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotifyHistoryApi.getListMy1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get my status unread message for user
         * @param {getStatusMy1VEnum} v Version
         * @param {getStatusMy1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatusMy1(v: getStatusMy1VEnum, language: getStatusMy1LanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotifyHistoryStatusUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatusMy1(v, language, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotifyHistoryApi.getStatusMy1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set notification in cabinet as read
         * @param {markOfRead1VEnum} v Version
         * @param {markOfRead1LanguageEnum} language Current language
         * @param {SiteMarkReadHistoryRequest} siteMarkReadHistoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markOfRead1(v: markOfRead1VEnum, language: markOfRead1LanguageEnum, siteMarkReadHistoryRequest: SiteMarkReadHistoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteMarkReadHistoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markOfRead1(v, language, siteMarkReadHistoryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotifyHistoryApi.markOfRead1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Run action in my notify item
         * @param {runAction1VEnum} v Version
         * @param {string} notifyHistoryId Id of page in mongodb
         * @param {string} actionName Action name
         * @param {string} groupId Group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runAction1(v: runAction1VEnum, notifyHistoryId: string, actionName: string, groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotifyHistorySiteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runAction1(v, notifyHistoryId, actionName, groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotifyHistoryApi.runAction1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set all notification in cabinet as read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setAllCabinetRead1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setAllCabinetRead1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotifyHistoryApi.setAllCabinetRead1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NotifyHistoryApi - factory interface
 * @export
 */
export const factory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = fp(configuration)
    return {
        /**
         * 
         * @summary Get my NotifyHistory item by id
         * @param {get1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get1(requestParameters: get1Request, options?: RawAxiosRequestConfig): AxiosPromise<NotifyHistorySiteResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: get1VEnum = requestParameters.v || get1VEnum._1;
            return localVarFp.get1(actualV, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of my notifications
         * @param {getListMy1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListMy1(requestParameters: getListMy1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfNotifyHistorySiteResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: getListMy1VEnum = requestParameters.v || getListMy1VEnum._1;
            return localVarFp.getListMy1(actualV, requestParameters.language, requestParameters.limit, requestParameters.offset, requestParameters.projectId, requestParameters.name, requestParameters.channel, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.statusRead, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get my status unread message for user
         * @param {getStatusMy1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusMy1(requestParameters: getStatusMy1Request, options?: RawAxiosRequestConfig): AxiosPromise<NotifyHistoryStatusUserResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: getStatusMy1VEnum = requestParameters.v || getStatusMy1VEnum._1;
            return localVarFp.getStatusMy1(actualV, requestParameters.language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set notification in cabinet as read
         * @param {markOfRead1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markOfRead1(requestParameters: markOfRead1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteMarkReadHistoryResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: markOfRead1VEnum = requestParameters.v || markOfRead1VEnum._1;
            return localVarFp.markOfRead1(actualV, requestParameters.language, requestParameters.siteMarkReadHistoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Run action in my notify item
         * @param {runAction1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runAction1(requestParameters: runAction1Request, options?: RawAxiosRequestConfig): AxiosPromise<NotifyHistorySiteResponse> {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV: runAction1VEnum = requestParameters.v || runAction1VEnum._1;
            return localVarFp.runAction1(actualV, requestParameters.notifyHistoryId, requestParameters.actionName, requestParameters.groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set all notification in cabinet as read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAllCabinetRead1(options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.setAllCabinetRead1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for get1 operation in NotifyHistoryApi.
 * @export
 * @interface get1Request
 */
export interface get1Request {
    /**
     * Version
     * @type {'1'}
     * @memberof get1
     */
    readonly v?: get1VEnum

    /**
     * Id of page in mongodb
     * @type {string}
     * @memberof get1
     */
    readonly id: string
}

/**
 * Request parameters for getListMy1 operation in NotifyHistoryApi.
 * @export
 * @interface getListMy1Request
 */
export interface getListMy1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getListMy1
     */
    readonly v?: getListMy1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getListMy1
     */
    readonly language: getListMy1LanguageEnum

    /**
     * Number of results
     * @type {number}
     * @memberof getListMy1
     */
    readonly limit?: number

    /**
     * Page offset number
     * @type {number}
     * @memberof getListMy1
     */
    readonly offset?: number

    /**
     * Project id
     * @type {number}
     * @memberof getListMy1
     */
    readonly projectId?: number

    /**
     * Name
     * @type {'high_bitrate' | 'request_access_channel' | 'request_access_project' | 'promocode_test' | 'stream_test' | 'plan_restream_expires' | 'plan_restream_expired' | 'plan_restream_renewed' | 'plan_transcoder_expires' | 'plan_transcoder_expired' | 'plan_transcoder_renewed' | 'plan_storage_expires' | 'plan_storage_expired' | 'plan_storage_renewed' | 'broadcast_unsupported_codec' | 'broadcast_unsupported_codec_screen' | 'broadcast_bitrate_exceeded_screen' | 'rtmp_connect_old_server_screen' | 'broadcast_not_audio' | 'broadcast_bitrate_exceeded' | 'broadcast_started' | 'broadcast_stopped' | 'restream_check_twitch_bitrate_1' | 'api_pause_start' | 'api_pause_end' | 'api_wait_edit' | 'api_restream_start' | 'api_restream_stop' | 'api_drop_broadcast' | 'api_drop_broadcast_remove_company' | 'api_drop_broadcast_update_key' | 'publisher_disconnected' | 'publisher_connected' | 'publisher_initializing' | 'publisher_close' | 'broadcast_connected_start' | 'broadcast_connected_end' | 'broadcast_connecting_stream' | 'broadcast_started_new_stream' | 'broadcast_connecting_lost' | 'broadcast_video_lost_start' | 'broadcast_video_lost_end' | 'broadcast_video_pause_start' | 'broadcast_video_pause_end' | 'broadcast_init_restream' | 'start_stream' | 'create_reader' | 'start_channel' | 'stop_channel' | 'stop_stream_video_timeout' | 'stop_stream_no_start_video' | 'stop_stream' | 'delete_reader' | 'transcoder_start' | 'transcoder_stop' | 'start_channel_failed' | 'start_channel_success' | 'api_channel_initializing_start' | 'api_channel_initializing_failed' | 'api_channel_initializing_success' | 'channel_api_update_settings_success' | 'channel_api_update_settings_error' | 'channel_api_update_playlist_success' | 'channel_api_update_playlist_error' | 'channel_api_update_chat_error' | 'channel_api_stream_key_success' | 'channel_api_stream_key_error' | 'channel_api_auto_stop_disable_success' | 'channel_api_auto_stop_disable_error' | 'channel_api_unbinding_stream_key_error' | 'channel_api_create_broadcast_success' | 'channel_api_create_broadcast_error' | 'channel_api_set_planned_success' | 'channel_api_set_planned_error' | 'channel_api_set_thumbnail_success' | 'channel_api_set_thumbnail_error' | 'channel_token_error' | 'channel_api_group_failed' | 'no_audio_reader' | 'restream_check_twitch_bitrate_2' | 'transcoder_support_error_screen' | 'transcoder_tariff_end_screen' | 'transcoder_count_flow_screen' | 'transcoder_resolution_screen' | 'stream_key_banned' | 'broadcast_change_codec' | 'broadcast_change_region' | 'video_upload_error' | 'stop_channel_error' | 'broadcast_user_action_stop'}
     * @memberof getListMy1
     */
    readonly name?: getListMy1NameEnum

    /**
     * Channel
     * @type {'telegram' | 'cabinet' | 'mobile'}
     * @memberof getListMy1
     */
    readonly channel?: getListMy1ChannelEnum

    /**
     * Date from
     * @type {string}
     * @memberof getListMy1
     */
    readonly dateFrom?: string

    /**
     * Date to
     * @type {string}
     * @memberof getListMy1
     */
    readonly dateTo?: string

    /**
     * Status read
     * @type {'unread' | 'read'}
     * @memberof getListMy1
     */
    readonly statusRead?: getListMy1StatusReadEnum
}

/**
 * Request parameters for getStatusMy1 operation in NotifyHistoryApi.
 * @export
 * @interface getStatusMy1Request
 */
export interface getStatusMy1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getStatusMy1
     */
    readonly v?: getStatusMy1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getStatusMy1
     */
    readonly language: getStatusMy1LanguageEnum
}

/**
 * Request parameters for markOfRead1 operation in NotifyHistoryApi.
 * @export
 * @interface markOfRead1Request
 */
export interface markOfRead1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof markOfRead1
     */
    readonly v?: markOfRead1VEnum

    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof markOfRead1
     */
    readonly language: markOfRead1LanguageEnum

    /**
     * 
     * @type {SiteMarkReadHistoryRequest}
     * @memberof markOfRead1
     */
    readonly siteMarkReadHistoryRequest: SiteMarkReadHistoryRequest
}

/**
 * Request parameters for runAction1 operation in NotifyHistoryApi.
 * @export
 * @interface runAction1Request
 */
export interface runAction1Request {
    /**
     * Version
     * @type {'1'}
     * @memberof runAction1
     */
    readonly v?: runAction1VEnum

    /**
     * Id of page in mongodb
     * @type {string}
     * @memberof runAction1
     */
    readonly notifyHistoryId: string

    /**
     * Action name
     * @type {string}
     * @memberof runAction1
     */
    readonly actionName: string

    /**
     * Group id
     * @type {string}
     * @memberof runAction1
     */
    readonly groupId: string
}

/**
 * NotifyHistoryApi - object-oriented interface
 * @export
 * @class NotifyHistoryApi
 * @extends {BaseAPI}
 */
export class NotifyHistoryApi extends BaseAPI {
    /**
     * 
     * @summary Get my NotifyHistory item by id
     * @param {get1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    public get1(requestParameters: get1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: get1VEnum = requestParameters.v || get1VEnum._1;
        return fp(this.configuration).get1(actualV, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of my notifications
     * @param {getListMy1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    public getListMy1(requestParameters: getListMy1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: getListMy1VEnum = requestParameters.v || getListMy1VEnum._1;
        return fp(this.configuration).getListMy1(actualV, requestParameters.language, requestParameters.limit, requestParameters.offset, requestParameters.projectId, requestParameters.name, requestParameters.channel, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.statusRead, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get my status unread message for user
     * @param {getStatusMy1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    public getStatusMy1(requestParameters: getStatusMy1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: getStatusMy1VEnum = requestParameters.v || getStatusMy1VEnum._1;
        return fp(this.configuration).getStatusMy1(actualV, requestParameters.language, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set notification in cabinet as read
     * @param {markOfRead1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    public markOfRead1(requestParameters: markOfRead1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: markOfRead1VEnum = requestParameters.v || markOfRead1VEnum._1;
        return fp(this.configuration).markOfRead1(actualV, requestParameters.language, requestParameters.siteMarkReadHistoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Run action in my notify item
     * @param {runAction1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    public runAction1(requestParameters: runAction1Request, options?: RawAxiosRequestConfig) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV: runAction1VEnum = requestParameters.v || runAction1VEnum._1;
        return fp(this.configuration).runAction1(actualV, requestParameters.notifyHistoryId, requestParameters.actionName, requestParameters.groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set all notification in cabinet as read
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    public setAllCabinetRead1(options?: RawAxiosRequestConfig) {
        return fp(this.configuration).setAllCabinetRead1(options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum get1VEnum {
    _1 = '1'
}
/**
  * @export
  * @enum {string}
  */
export enum getListMy1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum getListMy1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum getListMy1NameEnum {
    high_bitrate = 'high_bitrate',
    request_access_channel = 'request_access_channel',
    request_access_project = 'request_access_project',
    promocode_test = 'promocode_test',
    stream_test = 'stream_test',
    plan_restream_expires = 'plan_restream_expires',
    plan_restream_expired = 'plan_restream_expired',
    plan_restream_renewed = 'plan_restream_renewed',
    plan_transcoder_expires = 'plan_transcoder_expires',
    plan_transcoder_expired = 'plan_transcoder_expired',
    plan_transcoder_renewed = 'plan_transcoder_renewed',
    plan_storage_expires = 'plan_storage_expires',
    plan_storage_expired = 'plan_storage_expired',
    plan_storage_renewed = 'plan_storage_renewed',
    broadcast_unsupported_codec = 'broadcast_unsupported_codec',
    broadcast_unsupported_codec_screen = 'broadcast_unsupported_codec_screen',
    broadcast_bitrate_exceeded_screen = 'broadcast_bitrate_exceeded_screen',
    rtmp_connect_old_server_screen = 'rtmp_connect_old_server_screen',
    broadcast_not_audio = 'broadcast_not_audio',
    broadcast_bitrate_exceeded = 'broadcast_bitrate_exceeded',
    broadcast_started = 'broadcast_started',
    broadcast_stopped = 'broadcast_stopped',
    restream_check_twitch_bitrate_1 = 'restream_check_twitch_bitrate_1',
    api_pause_start = 'api_pause_start',
    api_pause_end = 'api_pause_end',
    api_wait_edit = 'api_wait_edit',
    api_restream_start = 'api_restream_start',
    api_restream_stop = 'api_restream_stop',
    api_drop_broadcast = 'api_drop_broadcast',
    api_drop_broadcast_remove_company = 'api_drop_broadcast_remove_company',
    api_drop_broadcast_update_key = 'api_drop_broadcast_update_key',
    publisher_disconnected = 'publisher_disconnected',
    publisher_connected = 'publisher_connected',
    publisher_initializing = 'publisher_initializing',
    publisher_close = 'publisher_close',
    broadcast_connected_start = 'broadcast_connected_start',
    broadcast_connected_end = 'broadcast_connected_end',
    broadcast_connecting_stream = 'broadcast_connecting_stream',
    broadcast_started_new_stream = 'broadcast_started_new_stream',
    broadcast_connecting_lost = 'broadcast_connecting_lost',
    broadcast_video_lost_start = 'broadcast_video_lost_start',
    broadcast_video_lost_end = 'broadcast_video_lost_end',
    broadcast_video_pause_start = 'broadcast_video_pause_start',
    broadcast_video_pause_end = 'broadcast_video_pause_end',
    broadcast_init_restream = 'broadcast_init_restream',
    start_stream = 'start_stream',
    create_reader = 'create_reader',
    start_channel = 'start_channel',
    stop_channel = 'stop_channel',
    stop_stream_video_timeout = 'stop_stream_video_timeout',
    stop_stream_no_start_video = 'stop_stream_no_start_video',
    stop_stream = 'stop_stream',
    delete_reader = 'delete_reader',
    transcoder_start = 'transcoder_start',
    transcoder_stop = 'transcoder_stop',
    start_channel_failed = 'start_channel_failed',
    start_channel_success = 'start_channel_success',
    api_channel_initializing_start = 'api_channel_initializing_start',
    api_channel_initializing_failed = 'api_channel_initializing_failed',
    api_channel_initializing_success = 'api_channel_initializing_success',
    channel_api_update_settings_success = 'channel_api_update_settings_success',
    channel_api_update_settings_error = 'channel_api_update_settings_error',
    channel_api_update_playlist_success = 'channel_api_update_playlist_success',
    channel_api_update_playlist_error = 'channel_api_update_playlist_error',
    channel_api_update_chat_error = 'channel_api_update_chat_error',
    channel_api_stream_key_success = 'channel_api_stream_key_success',
    channel_api_stream_key_error = 'channel_api_stream_key_error',
    channel_api_auto_stop_disable_success = 'channel_api_auto_stop_disable_success',
    channel_api_auto_stop_disable_error = 'channel_api_auto_stop_disable_error',
    channel_api_unbinding_stream_key_error = 'channel_api_unbinding_stream_key_error',
    channel_api_create_broadcast_success = 'channel_api_create_broadcast_success',
    channel_api_create_broadcast_error = 'channel_api_create_broadcast_error',
    channel_api_set_planned_success = 'channel_api_set_planned_success',
    channel_api_set_planned_error = 'channel_api_set_planned_error',
    channel_api_set_thumbnail_success = 'channel_api_set_thumbnail_success',
    channel_api_set_thumbnail_error = 'channel_api_set_thumbnail_error',
    channel_token_error = 'channel_token_error',
    channel_api_group_failed = 'channel_api_group_failed',
    no_audio_reader = 'no_audio_reader',
    restream_check_twitch_bitrate_2 = 'restream_check_twitch_bitrate_2',
    transcoder_support_error_screen = 'transcoder_support_error_screen',
    transcoder_tariff_end_screen = 'transcoder_tariff_end_screen',
    transcoder_count_flow_screen = 'transcoder_count_flow_screen',
    transcoder_resolution_screen = 'transcoder_resolution_screen',
    stream_key_banned = 'stream_key_banned',
    broadcast_change_codec = 'broadcast_change_codec',
    broadcast_change_region = 'broadcast_change_region',
    video_upload_error = 'video_upload_error',
    stop_channel_error = 'stop_channel_error',
    broadcast_user_action_stop = 'broadcast_user_action_stop'
}
/**
  * @export
  * @enum {string}
  */
export enum getListMy1ChannelEnum {
    telegram = 'telegram',
    cabinet = 'cabinet',
    mobile = 'mobile'
}
/**
  * @export
  * @enum {string}
  */
export enum getListMy1StatusReadEnum {
    unread = 'unread',
    read = 'read'
}
/**
  * @export
  * @enum {string}
  */
export enum getStatusMy1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum getStatusMy1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum markOfRead1VEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3'
}
/**
  * @export
  * @enum {string}
  */
export enum markOfRead1LanguageEnum {
    ru = 'ru',
    en = 'en',
    cn = 'cn'
}
/**
  * @export
  * @enum {string}
  */
export enum runAction1VEnum {
    _1 = '1'
}
