/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { PlanTranscodingCheckResponse } from '../models';
// @ts-ignore
import type { PlanTranscodingDiscountResponse } from '../models';
// @ts-ignore
import type { PlanTranscodingForProject } from '../models';
// @ts-ignore
import type { PlanTranscodingResponseDto } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
/**
 * PlanTranscodingApi - axios parameter creator
 * @export
 */
export const PlanTranscodingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Buy transcoder tariff
         * @param {PlanTranscodingBuyV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanTranscodingBuyV1PeriodEnum} period Period
         * @param {number} planTranscodingId Transcoding plan id
         * @param {PlanTranscodingBuyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [count] Count flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planTranscodingBuyV1: async (language: PlanTranscodingBuyV1LanguageEnum, projectId: number, period: PlanTranscodingBuyV1PeriodEnum, planTranscodingId: number, v?: PlanTranscodingBuyV1VEnum, count?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('planTranscodingBuyV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('planTranscodingBuyV1', 'projectId', projectId)
            // verify required parameter 'period' is not null or undefined
            assertParamExists('planTranscodingBuyV1', 'period', period)
            // verify required parameter 'planTranscodingId' is not null or undefined
            assertParamExists('planTranscodingBuyV1', 'planTranscodingId', planTranscodingId)
            const localVarPath = `/method/plan_transcoding`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            if (planTranscodingId !== undefined) {
                localVarQueryParameter['plan_transcoding_id'] = planTranscodingId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove after tariff
         * @param {PlanTranscodingCancelV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanTranscodingCancelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planTranscodingCancelV1: async (language: PlanTranscodingCancelV1LanguageEnum, projectId: number, v?: PlanTranscodingCancelV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('planTranscodingCancelV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('planTranscodingCancelV1', 'projectId', projectId)
            const localVarPath = `/method/plan_transcoding`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check transcoding tariff before buy
         * @param {PlanTranscodingCheckV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanTranscodingCheckV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planTranscodingCheckV1: async (language: PlanTranscodingCheckV1LanguageEnum, projectId: number, v?: PlanTranscodingCheckV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('planTranscodingCheckV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('planTranscodingCheckV1', 'projectId', projectId)
            const localVarPath = `/method/plan_transcoding/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get discount transcoding
         * @param {PlanTranscodingGetDiscountV1LanguageEnum} language Current language
         * @param {PlanTranscodingGetDiscountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planTranscodingGetDiscountV1: async (language: PlanTranscodingGetDiscountV1LanguageEnum, v?: PlanTranscodingGetDiscountV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('planTranscodingGetDiscountV1', 'language', language)
            const localVarPath = `/method/plan_transcoding/get_discount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of transcoding tariffs
         * @param {PlanTranscodingListV1LanguageEnum} language Current language
         * @param {PlanTranscodingListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planTranscodingListV1: async (language: PlanTranscodingListV1LanguageEnum, v?: PlanTranscodingListV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('planTranscodingListV1', 'language', language)
            const localVarPath = `/method/plan_transcoding/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get tariff for project
         * @param {PlanTranscodingTariffV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanTranscodingTariffV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planTranscodingTariffV1: async (language: PlanTranscodingTariffV1LanguageEnum, projectId: number, v?: PlanTranscodingTariffV1VEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('planTranscodingTariffV1', 'language', language)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('planTranscodingTariffV1', 'projectId', projectId)
            const localVarPath = `/method/plan_transcoding`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlanTranscodingApi - functional programming interface
 * @export
 */
export const PlanTranscodingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlanTranscodingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Buy transcoder tariff
         * @param {PlanTranscodingBuyV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanTranscodingBuyV1PeriodEnum} period Period
         * @param {number} planTranscodingId Transcoding plan id
         * @param {PlanTranscodingBuyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [count] Count flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planTranscodingBuyV1(language: PlanTranscodingBuyV1LanguageEnum, projectId: number, period: PlanTranscodingBuyV1PeriodEnum, planTranscodingId: number, v?: PlanTranscodingBuyV1VEnum, count?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planTranscodingBuyV1(language, projectId, period, planTranscodingId, v, count, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanTranscodingApi.planTranscodingBuyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove after tariff
         * @param {PlanTranscodingCancelV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanTranscodingCancelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planTranscodingCancelV1(language: PlanTranscodingCancelV1LanguageEnum, projectId: number, v?: PlanTranscodingCancelV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planTranscodingCancelV1(language, projectId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanTranscodingApi.planTranscodingCancelV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Check transcoding tariff before buy
         * @param {PlanTranscodingCheckV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanTranscodingCheckV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planTranscodingCheckV1(language: PlanTranscodingCheckV1LanguageEnum, projectId: number, v?: PlanTranscodingCheckV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanTranscodingCheckResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planTranscodingCheckV1(language, projectId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanTranscodingApi.planTranscodingCheckV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get discount transcoding
         * @param {PlanTranscodingGetDiscountV1LanguageEnum} language Current language
         * @param {PlanTranscodingGetDiscountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planTranscodingGetDiscountV1(language: PlanTranscodingGetDiscountV1LanguageEnum, v?: PlanTranscodingGetDiscountV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanTranscodingDiscountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planTranscodingGetDiscountV1(language, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanTranscodingApi.planTranscodingGetDiscountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of transcoding tariffs
         * @param {PlanTranscodingListV1LanguageEnum} language Current language
         * @param {PlanTranscodingListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planTranscodingListV1(language: PlanTranscodingListV1LanguageEnum, v?: PlanTranscodingListV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanTranscodingResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planTranscodingListV1(language, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanTranscodingApi.planTranscodingListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get tariff for project
         * @param {PlanTranscodingTariffV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanTranscodingTariffV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planTranscodingTariffV1(language: PlanTranscodingTariffV1LanguageEnum, projectId: number, v?: PlanTranscodingTariffV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanTranscodingForProject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planTranscodingTariffV1(language, projectId, v, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanTranscodingApi.planTranscodingTariffV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlanTranscodingApi - factory interface
 * @export
 */
export const PlanTranscodingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlanTranscodingApiFp(configuration)
    return {
        /**
         * 
         * @summary Buy transcoder tariff
         * @param {PlanTranscodingApiPlanTranscodingBuyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planTranscodingBuyV1(requestParameters: PlanTranscodingApiPlanTranscodingBuyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.planTranscodingBuyV1(requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planTranscodingId, requestParameters.v, requestParameters.count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove after tariff
         * @param {PlanTranscodingApiPlanTranscodingCancelV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planTranscodingCancelV1(requestParameters: PlanTranscodingApiPlanTranscodingCancelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.planTranscodingCancelV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check transcoding tariff before buy
         * @param {PlanTranscodingApiPlanTranscodingCheckV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planTranscodingCheckV1(requestParameters: PlanTranscodingApiPlanTranscodingCheckV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingCheckResponse> {
            return localVarFp.planTranscodingCheckV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get discount transcoding
         * @param {PlanTranscodingApiPlanTranscodingGetDiscountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planTranscodingGetDiscountV1(requestParameters: PlanTranscodingApiPlanTranscodingGetDiscountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingDiscountResponse> {
            return localVarFp.planTranscodingGetDiscountV1(requestParameters.language, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of transcoding tariffs
         * @param {PlanTranscodingApiPlanTranscodingListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planTranscodingListV1(requestParameters: PlanTranscodingApiPlanTranscodingListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingResponseDto> {
            return localVarFp.planTranscodingListV1(requestParameters.language, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get tariff for project
         * @param {PlanTranscodingApiPlanTranscodingTariffV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planTranscodingTariffV1(requestParameters: PlanTranscodingApiPlanTranscodingTariffV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingForProject> {
            return localVarFp.planTranscodingTariffV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlanTranscodingApi - interface
 * @export
 * @interface PlanTranscodingApi
 */
export interface PlanTranscodingApiInterface {
    /**
     * 
     * @summary Buy transcoder tariff
     * @param {PlanTranscodingApiPlanTranscodingBuyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingBuyV1(requestParameters: PlanTranscodingApiPlanTranscodingBuyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Remove after tariff
     * @param {PlanTranscodingApiPlanTranscodingCancelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingCancelV1(requestParameters: PlanTranscodingApiPlanTranscodingCancelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * 
     * @summary Check transcoding tariff before buy
     * @param {PlanTranscodingApiPlanTranscodingCheckV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingCheckV1(requestParameters: PlanTranscodingApiPlanTranscodingCheckV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingCheckResponse>;

    /**
     * 
     * @summary Get discount transcoding
     * @param {PlanTranscodingApiPlanTranscodingGetDiscountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingGetDiscountV1(requestParameters: PlanTranscodingApiPlanTranscodingGetDiscountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingDiscountResponse>;

    /**
     * 
     * @summary Get list of transcoding tariffs
     * @param {PlanTranscodingApiPlanTranscodingListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingListV1(requestParameters: PlanTranscodingApiPlanTranscodingListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingResponseDto>;

    /**
     * 
     * @summary Get tariff for project
     * @param {PlanTranscodingApiPlanTranscodingTariffV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingTariffV1(requestParameters: PlanTranscodingApiPlanTranscodingTariffV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingForProject>;

}

/**
 * Request parameters for planTranscodingBuyV1 operation in PlanTranscodingApi.
 * @export
 * @interface PlanTranscodingApiPlanTranscodingBuyV1Request
 */
export interface PlanTranscodingApiPlanTranscodingBuyV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanTranscodingApiPlanTranscodingBuyV1
     */
    readonly language: PlanTranscodingBuyV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof PlanTranscodingApiPlanTranscodingBuyV1
     */
    readonly projectId: number

    /**
     * Period
     * @type {'month' | 'year'}
     * @memberof PlanTranscodingApiPlanTranscodingBuyV1
     */
    readonly period: PlanTranscodingBuyV1PeriodEnum

    /**
     * Transcoding plan id
     * @type {number}
     * @memberof PlanTranscodingApiPlanTranscodingBuyV1
     */
    readonly planTranscodingId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanTranscodingApiPlanTranscodingBuyV1
     */
    readonly v?: PlanTranscodingBuyV1VEnum

    /**
     * Count flow
     * @type {number}
     * @memberof PlanTranscodingApiPlanTranscodingBuyV1
     */
    readonly count?: number
}

/**
 * Request parameters for planTranscodingCancelV1 operation in PlanTranscodingApi.
 * @export
 * @interface PlanTranscodingApiPlanTranscodingCancelV1Request
 */
export interface PlanTranscodingApiPlanTranscodingCancelV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanTranscodingApiPlanTranscodingCancelV1
     */
    readonly language: PlanTranscodingCancelV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof PlanTranscodingApiPlanTranscodingCancelV1
     */
    readonly projectId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanTranscodingApiPlanTranscodingCancelV1
     */
    readonly v?: PlanTranscodingCancelV1VEnum
}

/**
 * Request parameters for planTranscodingCheckV1 operation in PlanTranscodingApi.
 * @export
 * @interface PlanTranscodingApiPlanTranscodingCheckV1Request
 */
export interface PlanTranscodingApiPlanTranscodingCheckV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanTranscodingApiPlanTranscodingCheckV1
     */
    readonly language: PlanTranscodingCheckV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof PlanTranscodingApiPlanTranscodingCheckV1
     */
    readonly projectId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanTranscodingApiPlanTranscodingCheckV1
     */
    readonly v?: PlanTranscodingCheckV1VEnum
}

/**
 * Request parameters for planTranscodingGetDiscountV1 operation in PlanTranscodingApi.
 * @export
 * @interface PlanTranscodingApiPlanTranscodingGetDiscountV1Request
 */
export interface PlanTranscodingApiPlanTranscodingGetDiscountV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanTranscodingApiPlanTranscodingGetDiscountV1
     */
    readonly language: PlanTranscodingGetDiscountV1LanguageEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanTranscodingApiPlanTranscodingGetDiscountV1
     */
    readonly v?: PlanTranscodingGetDiscountV1VEnum
}

/**
 * Request parameters for planTranscodingListV1 operation in PlanTranscodingApi.
 * @export
 * @interface PlanTranscodingApiPlanTranscodingListV1Request
 */
export interface PlanTranscodingApiPlanTranscodingListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanTranscodingApiPlanTranscodingListV1
     */
    readonly language: PlanTranscodingListV1LanguageEnum

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanTranscodingApiPlanTranscodingListV1
     */
    readonly v?: PlanTranscodingListV1VEnum
}

/**
 * Request parameters for planTranscodingTariffV1 operation in PlanTranscodingApi.
 * @export
 * @interface PlanTranscodingApiPlanTranscodingTariffV1Request
 */
export interface PlanTranscodingApiPlanTranscodingTariffV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanTranscodingApiPlanTranscodingTariffV1
     */
    readonly language: PlanTranscodingTariffV1LanguageEnum

    /**
     * Project id
     * @type {number}
     * @memberof PlanTranscodingApiPlanTranscodingTariffV1
     */
    readonly projectId: number

    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanTranscodingApiPlanTranscodingTariffV1
     */
    readonly v?: PlanTranscodingTariffV1VEnum
}

/**
 * PlanTranscodingApi - object-oriented interface
 * @export
 * @class PlanTranscodingApi
 * @extends {BaseAPI}
 */
export class PlanTranscodingApi extends BaseAPI implements PlanTranscodingApiInterface {
    /**
     * 
     * @summary Buy transcoder tariff
     * @param {PlanTranscodingApiPlanTranscodingBuyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    public planTranscodingBuyV1(requestParameters: PlanTranscodingApiPlanTranscodingBuyV1Request, options?: RawAxiosRequestConfig) {
        return PlanTranscodingApiFp(this.configuration).planTranscodingBuyV1(requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planTranscodingId, requestParameters.v, requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove after tariff
     * @param {PlanTranscodingApiPlanTranscodingCancelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    public planTranscodingCancelV1(requestParameters: PlanTranscodingApiPlanTranscodingCancelV1Request, options?: RawAxiosRequestConfig) {
        return PlanTranscodingApiFp(this.configuration).planTranscodingCancelV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check transcoding tariff before buy
     * @param {PlanTranscodingApiPlanTranscodingCheckV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    public planTranscodingCheckV1(requestParameters: PlanTranscodingApiPlanTranscodingCheckV1Request, options?: RawAxiosRequestConfig) {
        return PlanTranscodingApiFp(this.configuration).planTranscodingCheckV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get discount transcoding
     * @param {PlanTranscodingApiPlanTranscodingGetDiscountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    public planTranscodingGetDiscountV1(requestParameters: PlanTranscodingApiPlanTranscodingGetDiscountV1Request, options?: RawAxiosRequestConfig) {
        return PlanTranscodingApiFp(this.configuration).planTranscodingGetDiscountV1(requestParameters.language, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of transcoding tariffs
     * @param {PlanTranscodingApiPlanTranscodingListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    public planTranscodingListV1(requestParameters: PlanTranscodingApiPlanTranscodingListV1Request, options?: RawAxiosRequestConfig) {
        return PlanTranscodingApiFp(this.configuration).planTranscodingListV1(requestParameters.language, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get tariff for project
     * @param {PlanTranscodingApiPlanTranscodingTariffV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    public planTranscodingTariffV1(requestParameters: PlanTranscodingApiPlanTranscodingTariffV1Request, options?: RawAxiosRequestConfig) {
        return PlanTranscodingApiFp(this.configuration).planTranscodingTariffV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const PlanTranscodingBuyV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PlanTranscodingBuyV1LanguageEnum = typeof PlanTranscodingBuyV1LanguageEnum[keyof typeof PlanTranscodingBuyV1LanguageEnum];
/**
 * @export
 */
export const PlanTranscodingBuyV1PeriodEnum = {
    Month: 'month',
    Year: 'year'
} as const;
export type PlanTranscodingBuyV1PeriodEnum = typeof PlanTranscodingBuyV1PeriodEnum[keyof typeof PlanTranscodingBuyV1PeriodEnum];
/**
 * @export
 */
export const PlanTranscodingBuyV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanTranscodingBuyV1VEnum = typeof PlanTranscodingBuyV1VEnum[keyof typeof PlanTranscodingBuyV1VEnum];
/**
 * @export
 */
export const PlanTranscodingCancelV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PlanTranscodingCancelV1LanguageEnum = typeof PlanTranscodingCancelV1LanguageEnum[keyof typeof PlanTranscodingCancelV1LanguageEnum];
/**
 * @export
 */
export const PlanTranscodingCancelV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanTranscodingCancelV1VEnum = typeof PlanTranscodingCancelV1VEnum[keyof typeof PlanTranscodingCancelV1VEnum];
/**
 * @export
 */
export const PlanTranscodingCheckV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PlanTranscodingCheckV1LanguageEnum = typeof PlanTranscodingCheckV1LanguageEnum[keyof typeof PlanTranscodingCheckV1LanguageEnum];
/**
 * @export
 */
export const PlanTranscodingCheckV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanTranscodingCheckV1VEnum = typeof PlanTranscodingCheckV1VEnum[keyof typeof PlanTranscodingCheckV1VEnum];
/**
 * @export
 */
export const PlanTranscodingGetDiscountV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PlanTranscodingGetDiscountV1LanguageEnum = typeof PlanTranscodingGetDiscountV1LanguageEnum[keyof typeof PlanTranscodingGetDiscountV1LanguageEnum];
/**
 * @export
 */
export const PlanTranscodingGetDiscountV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanTranscodingGetDiscountV1VEnum = typeof PlanTranscodingGetDiscountV1VEnum[keyof typeof PlanTranscodingGetDiscountV1VEnum];
/**
 * @export
 */
export const PlanTranscodingListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PlanTranscodingListV1LanguageEnum = typeof PlanTranscodingListV1LanguageEnum[keyof typeof PlanTranscodingListV1LanguageEnum];
/**
 * @export
 */
export const PlanTranscodingListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanTranscodingListV1VEnum = typeof PlanTranscodingListV1VEnum[keyof typeof PlanTranscodingListV1VEnum];
/**
 * @export
 */
export const PlanTranscodingTariffV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
} as const;
export type PlanTranscodingTariffV1LanguageEnum = typeof PlanTranscodingTariffV1LanguageEnum[keyof typeof PlanTranscodingTariffV1LanguageEnum];
/**
 * @export
 */
export const PlanTranscodingTariffV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
} as const;
export type PlanTranscodingTariffV1VEnum = typeof PlanTranscodingTariffV1VEnum[keyof typeof PlanTranscodingTariffV1VEnum];
