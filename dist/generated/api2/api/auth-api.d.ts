/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { CodeAppAuthResponse } from '../models';
import type { RefreshAuthResponse } from '../models';
import type { SiteAuthExchangeRequest } from '../models';
import type { SiteLogoutAuthRequest } from '../models';
import type { SiteRefreshAuthBodyRequest } from '../models';
import type { SuccessResponse } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Auth telegram
     * @param {authTelegram1VEnum} v Version
     * @param {authTelegram1LanguageEnum} language Current language
     * @param {number} authDate Time auth
     * @param {number} id Telegram userId
     * @param {string} firstName First name
     * @param {string} hash Hash
     * @param {authTelegram1AppEnum} app App oauth
     * @param {string} [lastName] Last name
     * @param {string} [username] Nickname
     * @param {string} [photoUrl] Photo
     * @param {string} [languageCode] IETF language tag of the user\&#39;s language
     * @param {boolean} [isPremium] True, if this user is a Telegram Premium user
     * @param {boolean} [addedToAttachmentMenu] True, if this user added the bot to the attachment menu
     * @param {string} [refId] Referal id
     * @param {string} [redirect] Redirect url
     * @param {string} [country] Country code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTelegram1: (v: authTelegram1VEnum, language: authTelegram1LanguageEnum, authDate: number, id: number, firstName: string, hash: string, app: authTelegram1AppEnum, lastName?: string, username?: string, photoUrl?: string, languageCode?: string, isPremium?: boolean, addedToAttachmentMenu?: boolean, refId?: string, redirect?: string, country?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Internal request of auth google
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    callbackGoogle1: (state: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Internal request of auth old vk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    callbackVk1: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Internal request of auth new vk
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    callbackVkId1: (state: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get code for auth
     * @param {code1VEnum} v Version
     * @param {code1LanguageEnum} language Current language
     * @param {code1AppEnum} app Create auth code for app
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    code1: (v: code1VEnum, language: code1LanguageEnum, app: code1AppEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Connected social account
     * @param {connect1VEnum} v Version
     * @param {connect1LanguageEnum} language Current language
     * @param {connect1ProviderEnum} provider Provider oauth
     * @param {connect1AppEnum} [app] App oauth
     * @param {string} [redirect] Redirect url
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connect1: (v: connect1VEnum, language: connect1LanguageEnum, provider: connect1ProviderEnum, app?: connect1AppEnum, redirect?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary CallBack for connect social
     * @param {connectResult1VEnum} v Version
     * @param {connectResult1LanguageEnum} language Current language
     * @param {string} message Result message for connect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectResult1: (v: connectResult1VEnum, language: connectResult1LanguageEnum, message: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Connect telegram in account
     * @param {connectTelegram1VEnum} v Version
     * @param {connectTelegram1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectTelegram1: (v: connectTelegram1VEnum, language: connectTelegram1LanguageEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Disconnected social account
     * @param {disconnect1VEnum} v Version
     * @param {disconnect1LanguageEnum} language Current language
     * @param {number} socialId Social id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disconnect1: (v: disconnect1VEnum, language: disconnect1LanguageEnum, socialId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Code exchange
     * @param {SiteAuthExchangeRequest} siteAuthExchangeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exchange1: (siteAuthExchangeRequest: SiteAuthExchangeRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get url for start oauth
     * @param {getAuthUrl1VEnum} v Version
     * @param {getAuthUrl1LanguageEnum} language Current language
     * @param {getAuthUrl1ProviderEnum} provider Provider oauth
     * @param {getAuthUrl1AppEnum} [app] App oauth
     * @param {string} [redirect] Redirect url
     * @param {string} [refId] Referal id
     * @param {string} [country] Country code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthUrl1: (v: getAuthUrl1VEnum, language: getAuthUrl1LanguageEnum, provider: getAuthUrl1ProviderEnum, app?: getAuthUrl1AppEnum, redirect?: string, refId?: string, country?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get basic data for auth user
     * @param {getProfile1VEnum} v Version
     * @param {getProfile1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfile1: (v: getProfile1VEnum, language: getProfile1LanguageEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Guest request of auth
     * @param {string} refId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    guest1: (refId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Logout
     * @param {SiteLogoutAuthRequest} siteLogoutAuthRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout1: (siteLogoutAuthRequest: SiteLogoutAuthRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update access token
     * @param {string} userAgent
     * @param {SiteRefreshAuthBodyRequest} siteRefreshAuthBodyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshAccess1: (userAgent: string, siteRefreshAuthBodyRequest: SiteRefreshAuthBodyRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Auth telegram
     * @param {authTelegram1VEnum} v Version
     * @param {authTelegram1LanguageEnum} language Current language
     * @param {number} authDate Time auth
     * @param {number} id Telegram userId
     * @param {string} firstName First name
     * @param {string} hash Hash
     * @param {authTelegram1AppEnum} app App oauth
     * @param {string} [lastName] Last name
     * @param {string} [username] Nickname
     * @param {string} [photoUrl] Photo
     * @param {string} [languageCode] IETF language tag of the user\&#39;s language
     * @param {boolean} [isPremium] True, if this user is a Telegram Premium user
     * @param {boolean} [addedToAttachmentMenu] True, if this user added the bot to the attachment menu
     * @param {string} [refId] Referal id
     * @param {string} [redirect] Redirect url
     * @param {string} [country] Country code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTelegram1(v: authTelegram1VEnum, language: authTelegram1LanguageEnum, authDate: number, id: number, firstName: string, hash: string, app: authTelegram1AppEnum, lastName?: string, username?: string, photoUrl?: string, languageCode?: string, isPremium?: boolean, addedToAttachmentMenu?: boolean, refId?: string, redirect?: string, country?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Internal request of auth google
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    callbackGoogle1(state: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Internal request of auth old vk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    callbackVk1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Internal request of auth new vk
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    callbackVkId1(state: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get code for auth
     * @param {code1VEnum} v Version
     * @param {code1LanguageEnum} language Current language
     * @param {code1AppEnum} app Create auth code for app
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    code1(v: code1VEnum, language: code1LanguageEnum, app: code1AppEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeAppAuthResponse>>;
    /**
     *
     * @summary Connected social account
     * @param {connect1VEnum} v Version
     * @param {connect1LanguageEnum} language Current language
     * @param {connect1ProviderEnum} provider Provider oauth
     * @param {connect1AppEnum} [app] App oauth
     * @param {string} [redirect] Redirect url
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connect1(v: connect1VEnum, language: connect1LanguageEnum, provider: connect1ProviderEnum, app?: connect1AppEnum, redirect?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary CallBack for connect social
     * @param {connectResult1VEnum} v Version
     * @param {connectResult1LanguageEnum} language Current language
     * @param {string} message Result message for connect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectResult1(v: connectResult1VEnum, language: connectResult1LanguageEnum, message: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Connect telegram in account
     * @param {connectTelegram1VEnum} v Version
     * @param {connectTelegram1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectTelegram1(v: connectTelegram1VEnum, language: connectTelegram1LanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Disconnected social account
     * @param {disconnect1VEnum} v Version
     * @param {disconnect1LanguageEnum} language Current language
     * @param {number} socialId Social id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disconnect1(v: disconnect1VEnum, language: disconnect1LanguageEnum, socialId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Code exchange
     * @param {SiteAuthExchangeRequest} siteAuthExchangeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exchange1(siteAuthExchangeRequest: SiteAuthExchangeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshAuthResponse>>;
    /**
     *
     * @summary Get url for start oauth
     * @param {getAuthUrl1VEnum} v Version
     * @param {getAuthUrl1LanguageEnum} language Current language
     * @param {getAuthUrl1ProviderEnum} provider Provider oauth
     * @param {getAuthUrl1AppEnum} [app] App oauth
     * @param {string} [redirect] Redirect url
     * @param {string} [refId] Referal id
     * @param {string} [country] Country code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthUrl1(v: getAuthUrl1VEnum, language: getAuthUrl1LanguageEnum, provider: getAuthUrl1ProviderEnum, app?: getAuthUrl1AppEnum, redirect?: string, refId?: string, country?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get basic data for auth user
     * @param {getProfile1VEnum} v Version
     * @param {getProfile1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfile1(v: getProfile1VEnum, language: getProfile1LanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Guest request of auth
     * @param {string} refId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    guest1(refId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Logout
     * @param {SiteLogoutAuthRequest} siteLogoutAuthRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout1(siteLogoutAuthRequest: SiteLogoutAuthRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Update access token
     * @param {string} userAgent
     * @param {SiteRefreshAuthBodyRequest} siteRefreshAuthBodyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshAccess1(userAgent: string, siteRefreshAuthBodyRequest: SiteRefreshAuthBodyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshAuthResponse>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Auth telegram
     * @param {authTelegram1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTelegram1(requestParameters: authTelegram1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Internal request of auth google
     * @param {callbackGoogle1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    callbackGoogle1(requestParameters: callbackGoogle1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Internal request of auth old vk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    callbackVk1(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Internal request of auth new vk
     * @param {callbackVkId1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    callbackVkId1(requestParameters: callbackVkId1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get code for auth
     * @param {code1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    code1(requestParameters: code1Request, options?: RawAxiosRequestConfig): AxiosPromise<CodeAppAuthResponse>;
    /**
     *
     * @summary Connected social account
     * @param {connect1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connect1(requestParameters: connect1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary CallBack for connect social
     * @param {connectResult1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectResult1(requestParameters: connectResult1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Connect telegram in account
     * @param {connectTelegram1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectTelegram1(requestParameters: connectTelegram1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Disconnected social account
     * @param {disconnect1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disconnect1(requestParameters: disconnect1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Code exchange
     * @param {exchange1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exchange1(requestParameters: exchange1Request, options?: RawAxiosRequestConfig): AxiosPromise<RefreshAuthResponse>;
    /**
     *
     * @summary Get url for start oauth
     * @param {getAuthUrl1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthUrl1(requestParameters: getAuthUrl1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get basic data for auth user
     * @param {getProfile1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfile1(requestParameters: getProfile1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Guest request of auth
     * @param {guest1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    guest1(requestParameters: guest1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Logout
     * @param {logout1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout1(requestParameters: logout1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Update access token
     * @param {refreshAccess1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshAccess1(requestParameters: refreshAccess1Request, options?: RawAxiosRequestConfig): AxiosPromise<RefreshAuthResponse>;
};
/**
 * Request parameters for authTelegram1 operation in AuthApi.
 * @export
 * @interface authTelegram1Request
 */
export interface authTelegram1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof authTelegram1
     */
    readonly v?: authTelegram1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof authTelegram1
     */
    readonly language: authTelegram1LanguageEnum;
    /**
     * Time auth
     * @type {number}
     * @memberof authTelegram1
     */
    readonly authDate: number;
    /**
     * Telegram userId
     * @type {number}
     * @memberof authTelegram1
     */
    readonly id: number;
    /**
     * First name
     * @type {string}
     * @memberof authTelegram1
     */
    readonly firstName: string;
    /**
     * Hash
     * @type {string}
     * @memberof authTelegram1
     */
    readonly hash: string;
    /**
     * App oauth
     * @type {'site' | 'admin' | 'mobile' | 'desktop'}
     * @memberof authTelegram1
     */
    readonly app: authTelegram1AppEnum;
    /**
     * Last name
     * @type {string}
     * @memberof authTelegram1
     */
    readonly lastName?: string;
    /**
     * Nickname
     * @type {string}
     * @memberof authTelegram1
     */
    readonly username?: string;
    /**
     * Photo
     * @type {string}
     * @memberof authTelegram1
     */
    readonly photoUrl?: string;
    /**
     * IETF language tag of the user\&#39;s language
     * @type {string}
     * @memberof authTelegram1
     */
    readonly languageCode?: string;
    /**
     * True, if this user is a Telegram Premium user
     * @type {boolean}
     * @memberof authTelegram1
     */
    readonly isPremium?: boolean;
    /**
     * True, if this user added the bot to the attachment menu
     * @type {boolean}
     * @memberof authTelegram1
     */
    readonly addedToAttachmentMenu?: boolean;
    /**
     * Referal id
     * @type {string}
     * @memberof authTelegram1
     */
    readonly refId?: string;
    /**
     * Redirect url
     * @type {string}
     * @memberof authTelegram1
     */
    readonly redirect?: string;
    /**
     * Country code
     * @type {string}
     * @memberof authTelegram1
     */
    readonly country?: string;
}
/**
 * Request parameters for callbackGoogle1 operation in AuthApi.
 * @export
 * @interface callbackGoogle1Request
 */
export interface callbackGoogle1Request {
    /**
     *
     * @type {string}
     * @memberof callbackGoogle1
     */
    readonly state: string;
}
/**
 * Request parameters for callbackVkId1 operation in AuthApi.
 * @export
 * @interface callbackVkId1Request
 */
export interface callbackVkId1Request {
    /**
     *
     * @type {string}
     * @memberof callbackVkId1
     */
    readonly state: string;
}
/**
 * Request parameters for code1 operation in AuthApi.
 * @export
 * @interface code1Request
 */
export interface code1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof code1
     */
    readonly v?: code1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof code1
     */
    readonly language: code1LanguageEnum;
    /**
     * Create auth code for app
     * @type {'site' | 'admin' | 'mobile' | 'desktop'}
     * @memberof code1
     */
    readonly app: code1AppEnum;
}
/**
 * Request parameters for connect1 operation in AuthApi.
 * @export
 * @interface connect1Request
 */
export interface connect1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof connect1
     */
    readonly v?: connect1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof connect1
     */
    readonly language: connect1LanguageEnum;
    /**
     * Provider oauth
     * @type {'google' | 'vk' | 'vk-id' | 'telegram'}
     * @memberof connect1
     */
    readonly provider: connect1ProviderEnum;
    /**
     * App oauth
     * @type {'site' | 'admin' | 'mobile' | 'desktop'}
     * @memberof connect1
     */
    readonly app?: connect1AppEnum;
    /**
     * Redirect url
     * @type {string}
     * @memberof connect1
     */
    readonly redirect?: string;
}
/**
 * Request parameters for connectResult1 operation in AuthApi.
 * @export
 * @interface connectResult1Request
 */
export interface connectResult1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof connectResult1
     */
    readonly v?: connectResult1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof connectResult1
     */
    readonly language: connectResult1LanguageEnum;
    /**
     * Result message for connect
     * @type {string}
     * @memberof connectResult1
     */
    readonly message: string;
}
/**
 * Request parameters for connectTelegram1 operation in AuthApi.
 * @export
 * @interface connectTelegram1Request
 */
export interface connectTelegram1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof connectTelegram1
     */
    readonly v?: connectTelegram1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof connectTelegram1
     */
    readonly language: connectTelegram1LanguageEnum;
}
/**
 * Request parameters for disconnect1 operation in AuthApi.
 * @export
 * @interface disconnect1Request
 */
export interface disconnect1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof disconnect1
     */
    readonly v?: disconnect1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof disconnect1
     */
    readonly language: disconnect1LanguageEnum;
    /**
     * Social id
     * @type {number}
     * @memberof disconnect1
     */
    readonly socialId: number;
}
/**
 * Request parameters for exchange1 operation in AuthApi.
 * @export
 * @interface exchange1Request
 */
export interface exchange1Request {
    /**
     *
     * @type {SiteAuthExchangeRequest}
     * @memberof exchange1
     */
    readonly siteAuthExchangeRequest: SiteAuthExchangeRequest;
}
/**
 * Request parameters for getAuthUrl1 operation in AuthApi.
 * @export
 * @interface getAuthUrl1Request
 */
export interface getAuthUrl1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getAuthUrl1
     */
    readonly v?: getAuthUrl1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getAuthUrl1
     */
    readonly language: getAuthUrl1LanguageEnum;
    /**
     * Provider oauth
     * @type {'google' | 'vk' | 'vk-id' | 'telegram'}
     * @memberof getAuthUrl1
     */
    readonly provider: getAuthUrl1ProviderEnum;
    /**
     * App oauth
     * @type {'site' | 'admin' | 'mobile' | 'desktop'}
     * @memberof getAuthUrl1
     */
    readonly app?: getAuthUrl1AppEnum;
    /**
     * Redirect url
     * @type {string}
     * @memberof getAuthUrl1
     */
    readonly redirect?: string;
    /**
     * Referal id
     * @type {string}
     * @memberof getAuthUrl1
     */
    readonly refId?: string;
    /**
     * Country code
     * @type {string}
     * @memberof getAuthUrl1
     */
    readonly country?: string;
}
/**
 * Request parameters for getProfile1 operation in AuthApi.
 * @export
 * @interface getProfile1Request
 */
export interface getProfile1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getProfile1
     */
    readonly v?: getProfile1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getProfile1
     */
    readonly language: getProfile1LanguageEnum;
}
/**
 * Request parameters for guest1 operation in AuthApi.
 * @export
 * @interface guest1Request
 */
export interface guest1Request {
    /**
     *
     * @type {string}
     * @memberof guest1
     */
    readonly refId: string;
}
/**
 * Request parameters for logout1 operation in AuthApi.
 * @export
 * @interface logout1Request
 */
export interface logout1Request {
    /**
     *
     * @type {SiteLogoutAuthRequest}
     * @memberof logout1
     */
    readonly siteLogoutAuthRequest: SiteLogoutAuthRequest;
}
/**
 * Request parameters for refreshAccess1 operation in AuthApi.
 * @export
 * @interface refreshAccess1Request
 */
export interface refreshAccess1Request {
    /**
     *
     * @type {string}
     * @memberof refreshAccess1
     */
    readonly userAgent: string;
    /**
     *
     * @type {SiteRefreshAuthBodyRequest}
     * @memberof refreshAccess1
     */
    readonly siteRefreshAuthBodyRequest: SiteRefreshAuthBodyRequest;
}
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     *
     * @summary Auth telegram
     * @param {authTelegram1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authTelegram1(requestParameters: authTelegram1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Internal request of auth google
     * @param {callbackGoogle1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    callbackGoogle1(requestParameters: callbackGoogle1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Internal request of auth old vk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    callbackVk1(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Internal request of auth new vk
     * @param {callbackVkId1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    callbackVkId1(requestParameters: callbackVkId1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get code for auth
     * @param {code1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    code1(requestParameters: code1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CodeAppAuthResponse, any>>;
    /**
     *
     * @summary Connected social account
     * @param {connect1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    connect1(requestParameters: connect1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary CallBack for connect social
     * @param {connectResult1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    connectResult1(requestParameters: connectResult1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Connect telegram in account
     * @param {connectTelegram1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    connectTelegram1(requestParameters: connectTelegram1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Disconnected social account
     * @param {disconnect1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    disconnect1(requestParameters: disconnect1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Code exchange
     * @param {exchange1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    exchange1(requestParameters: exchange1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RefreshAuthResponse, any>>;
    /**
     *
     * @summary Get url for start oauth
     * @param {getAuthUrl1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    getAuthUrl1(requestParameters: getAuthUrl1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get basic data for auth user
     * @param {getProfile1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    getProfile1(requestParameters: getProfile1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Guest request of auth
     * @param {guest1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    guest1(requestParameters: guest1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Logout
     * @param {logout1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    logout1(requestParameters: logout1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Update access token
     * @param {refreshAccess1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    refreshAccess1(requestParameters: refreshAccess1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RefreshAuthResponse, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum authTelegram1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum authTelegram1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum authTelegram1AppEnum {
    site = "site",
    admin = "admin",
    mobile = "mobile",
    desktop = "desktop"
}
/**
  * @export
  * @enum {string}
  */
export declare enum code1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum code1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum code1AppEnum {
    site = "site",
    admin = "admin",
    mobile = "mobile",
    desktop = "desktop"
}
/**
  * @export
  * @enum {string}
  */
export declare enum connect1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum connect1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum connect1ProviderEnum {
    google = "google",
    vk = "vk",
    vk_id = "vk-id",
    telegram = "telegram"
}
/**
  * @export
  * @enum {string}
  */
export declare enum connect1AppEnum {
    site = "site",
    admin = "admin",
    mobile = "mobile",
    desktop = "desktop"
}
/**
  * @export
  * @enum {string}
  */
export declare enum connectResult1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum connectResult1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum connectTelegram1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum connectTelegram1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum disconnect1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum disconnect1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getAuthUrl1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getAuthUrl1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getAuthUrl1ProviderEnum {
    google = "google",
    vk = "vk",
    vk_id = "vk-id",
    telegram = "telegram"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getAuthUrl1AppEnum {
    site = "site",
    admin = "admin",
    mobile = "mobile",
    desktop = "desktop"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getProfile1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getProfile1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=auth-api.d.ts.map