/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { CodeAppAuthResponse } from '../models';
import type { RefreshAuthResponse } from '../models';
import type { SiteAuthExchangeRequest } from '../models';
import type { SiteLogoutAuthRequest } from '../models';
import type { SiteRefreshAuthBodyRequest } from '../models';
import type { SuccessResponse } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Auth telegram
     * @param {AuthAuthTelegramV1LanguageEnum} language Current language
     * @param {number} authDate Time auth
     * @param {number} id Telegram userId
     * @param {string} firstName First name
     * @param {string} hash Hash
     * @param {AuthAuthTelegramV1AppEnum} app App oauth
     * @param {AuthAuthTelegramV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {string} [lastName] Last name
     * @param {string} [username] Nickname
     * @param {string} [photoUrl] Photo
     * @param {string} [languageCode] IETF language tag of the user\&#39;s language
     * @param {boolean} [isPremium] True, if this user is a Telegram Premium user
     * @param {boolean} [addedToAttachmentMenu] True, if this user added the bot to the attachment menu
     * @param {string} [refId] Referal id
     * @param {string} [redirect] Redirect url
     * @param {string} [country] Country code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authAuthTelegramV1: (language: AuthAuthTelegramV1LanguageEnum, authDate: number, id: number, firstName: string, hash: string, app: AuthAuthTelegramV1AppEnum, v?: AuthAuthTelegramV1VEnum, lastName?: string, username?: string, photoUrl?: string, languageCode?: string, isPremium?: boolean, addedToAttachmentMenu?: boolean, refId?: string, redirect?: string, country?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Internal request of auth google
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCallbackGoogleV1: (state: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Internal request of auth new vk
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCallbackVkIdV1: (state: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Internal request of auth old vk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCallbackVkV1: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get code for auth
     * @param {AuthCodeV1LanguageEnum} language Current language
     * @param {AuthCodeV1AppEnum} app Create auth code for app
     * @param {AuthCodeV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCodeV1: (language: AuthCodeV1LanguageEnum, app: AuthCodeV1AppEnum, v?: AuthCodeV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary CallBack for connect social
     * @param {AuthConnectResultV1LanguageEnum} language Current language
     * @param {string} message Result message for connect
     * @param {AuthConnectResultV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authConnectResultV1: (language: AuthConnectResultV1LanguageEnum, message: string, v?: AuthConnectResultV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Connect telegram in account
     * @param {AuthConnectTelegramV1LanguageEnum} language Current language
     * @param {AuthConnectTelegramV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authConnectTelegramV1: (language: AuthConnectTelegramV1LanguageEnum, v?: AuthConnectTelegramV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Connected social account
     * @param {AuthConnectV1LanguageEnum} language Current language
     * @param {AuthConnectV1ProviderEnum} provider Provider oauth
     * @param {AuthConnectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {AuthConnectV1AppEnum} [app] App oauth
     * @param {string} [redirect] Redirect url
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authConnectV1: (language: AuthConnectV1LanguageEnum, provider: AuthConnectV1ProviderEnum, v?: AuthConnectV1VEnum, app?: AuthConnectV1AppEnum, redirect?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Disconnected social account
     * @param {AuthDisconnectV1LanguageEnum} language Current language
     * @param {number} socialId Social id
     * @param {AuthDisconnectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authDisconnectV1: (language: AuthDisconnectV1LanguageEnum, socialId: number, v?: AuthDisconnectV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Code exchange
     * @param {SiteAuthExchangeRequest} siteAuthExchangeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authExchangeV1: (siteAuthExchangeRequest: SiteAuthExchangeRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get url for start oauth
     * @param {AuthGetAuthUrlV1LanguageEnum} language Current language
     * @param {AuthGetAuthUrlV1ProviderEnum} provider Provider oauth
     * @param {AuthGetAuthUrlV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {AuthGetAuthUrlV1AppEnum} [app] App oauth
     * @param {string} [redirect] Redirect url
     * @param {string} [refId] Referal id
     * @param {string} [country] Country code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authGetAuthUrlV1: (language: AuthGetAuthUrlV1LanguageEnum, provider: AuthGetAuthUrlV1ProviderEnum, v?: AuthGetAuthUrlV1VEnum, app?: AuthGetAuthUrlV1AppEnum, redirect?: string, refId?: string, country?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get basic data for auth user
     * @param {AuthGetProfileV1LanguageEnum} language Current language
     * @param {AuthGetProfileV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authGetProfileV1: (language: AuthGetProfileV1LanguageEnum, v?: AuthGetProfileV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Guest request of auth
     * @param {string} refId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authGuestV1: (refId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Logout
     * @param {SiteLogoutAuthRequest} siteLogoutAuthRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLogoutV1: (siteLogoutAuthRequest: SiteLogoutAuthRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update access token
     * @param {string} userAgent
     * @param {SiteRefreshAuthBodyRequest} siteRefreshAuthBodyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRefreshAccessV1: (userAgent: string, siteRefreshAuthBodyRequest: SiteRefreshAuthBodyRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Auth telegram
     * @param {AuthAuthTelegramV1LanguageEnum} language Current language
     * @param {number} authDate Time auth
     * @param {number} id Telegram userId
     * @param {string} firstName First name
     * @param {string} hash Hash
     * @param {AuthAuthTelegramV1AppEnum} app App oauth
     * @param {AuthAuthTelegramV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {string} [lastName] Last name
     * @param {string} [username] Nickname
     * @param {string} [photoUrl] Photo
     * @param {string} [languageCode] IETF language tag of the user\&#39;s language
     * @param {boolean} [isPremium] True, if this user is a Telegram Premium user
     * @param {boolean} [addedToAttachmentMenu] True, if this user added the bot to the attachment menu
     * @param {string} [refId] Referal id
     * @param {string} [redirect] Redirect url
     * @param {string} [country] Country code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authAuthTelegramV1(language: AuthAuthTelegramV1LanguageEnum, authDate: number, id: number, firstName: string, hash: string, app: AuthAuthTelegramV1AppEnum, v?: AuthAuthTelegramV1VEnum, lastName?: string, username?: string, photoUrl?: string, languageCode?: string, isPremium?: boolean, addedToAttachmentMenu?: boolean, refId?: string, redirect?: string, country?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Internal request of auth google
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCallbackGoogleV1(state: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Internal request of auth new vk
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCallbackVkIdV1(state: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Internal request of auth old vk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCallbackVkV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get code for auth
     * @param {AuthCodeV1LanguageEnum} language Current language
     * @param {AuthCodeV1AppEnum} app Create auth code for app
     * @param {AuthCodeV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCodeV1(language: AuthCodeV1LanguageEnum, app: AuthCodeV1AppEnum, v?: AuthCodeV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeAppAuthResponse>>;
    /**
     *
     * @summary CallBack for connect social
     * @param {AuthConnectResultV1LanguageEnum} language Current language
     * @param {string} message Result message for connect
     * @param {AuthConnectResultV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authConnectResultV1(language: AuthConnectResultV1LanguageEnum, message: string, v?: AuthConnectResultV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Connect telegram in account
     * @param {AuthConnectTelegramV1LanguageEnum} language Current language
     * @param {AuthConnectTelegramV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authConnectTelegramV1(language: AuthConnectTelegramV1LanguageEnum, v?: AuthConnectTelegramV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Connected social account
     * @param {AuthConnectV1LanguageEnum} language Current language
     * @param {AuthConnectV1ProviderEnum} provider Provider oauth
     * @param {AuthConnectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {AuthConnectV1AppEnum} [app] App oauth
     * @param {string} [redirect] Redirect url
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authConnectV1(language: AuthConnectV1LanguageEnum, provider: AuthConnectV1ProviderEnum, v?: AuthConnectV1VEnum, app?: AuthConnectV1AppEnum, redirect?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Disconnected social account
     * @param {AuthDisconnectV1LanguageEnum} language Current language
     * @param {number} socialId Social id
     * @param {AuthDisconnectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authDisconnectV1(language: AuthDisconnectV1LanguageEnum, socialId: number, v?: AuthDisconnectV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Code exchange
     * @param {SiteAuthExchangeRequest} siteAuthExchangeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authExchangeV1(siteAuthExchangeRequest: SiteAuthExchangeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshAuthResponse>>;
    /**
     *
     * @summary Get url for start oauth
     * @param {AuthGetAuthUrlV1LanguageEnum} language Current language
     * @param {AuthGetAuthUrlV1ProviderEnum} provider Provider oauth
     * @param {AuthGetAuthUrlV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {AuthGetAuthUrlV1AppEnum} [app] App oauth
     * @param {string} [redirect] Redirect url
     * @param {string} [refId] Referal id
     * @param {string} [country] Country code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authGetAuthUrlV1(language: AuthGetAuthUrlV1LanguageEnum, provider: AuthGetAuthUrlV1ProviderEnum, v?: AuthGetAuthUrlV1VEnum, app?: AuthGetAuthUrlV1AppEnum, redirect?: string, refId?: string, country?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get basic data for auth user
     * @param {AuthGetProfileV1LanguageEnum} language Current language
     * @param {AuthGetProfileV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authGetProfileV1(language: AuthGetProfileV1LanguageEnum, v?: AuthGetProfileV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Guest request of auth
     * @param {string} refId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authGuestV1(refId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Logout
     * @param {SiteLogoutAuthRequest} siteLogoutAuthRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLogoutV1(siteLogoutAuthRequest: SiteLogoutAuthRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Update access token
     * @param {string} userAgent
     * @param {SiteRefreshAuthBodyRequest} siteRefreshAuthBodyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRefreshAccessV1(userAgent: string, siteRefreshAuthBodyRequest: SiteRefreshAuthBodyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshAuthResponse>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Auth telegram
     * @param {AuthApiAuthAuthTelegramV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authAuthTelegramV1(requestParameters: AuthApiAuthAuthTelegramV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Internal request of auth google
     * @param {AuthApiAuthCallbackGoogleV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCallbackGoogleV1(requestParameters: AuthApiAuthCallbackGoogleV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Internal request of auth new vk
     * @param {AuthApiAuthCallbackVkIdV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCallbackVkIdV1(requestParameters: AuthApiAuthCallbackVkIdV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Internal request of auth old vk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCallbackVkV1(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get code for auth
     * @param {AuthApiAuthCodeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCodeV1(requestParameters: AuthApiAuthCodeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CodeAppAuthResponse>;
    /**
     *
     * @summary CallBack for connect social
     * @param {AuthApiAuthConnectResultV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authConnectResultV1(requestParameters: AuthApiAuthConnectResultV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Connect telegram in account
     * @param {AuthApiAuthConnectTelegramV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authConnectTelegramV1(requestParameters: AuthApiAuthConnectTelegramV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Connected social account
     * @param {AuthApiAuthConnectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authConnectV1(requestParameters: AuthApiAuthConnectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Disconnected social account
     * @param {AuthApiAuthDisconnectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authDisconnectV1(requestParameters: AuthApiAuthDisconnectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Code exchange
     * @param {AuthApiAuthExchangeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authExchangeV1(requestParameters: AuthApiAuthExchangeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<RefreshAuthResponse>;
    /**
     *
     * @summary Get url for start oauth
     * @param {AuthApiAuthGetAuthUrlV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authGetAuthUrlV1(requestParameters: AuthApiAuthGetAuthUrlV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get basic data for auth user
     * @param {AuthApiAuthGetProfileV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authGetProfileV1(requestParameters: AuthApiAuthGetProfileV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Guest request of auth
     * @param {AuthApiAuthGuestV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authGuestV1(requestParameters: AuthApiAuthGuestV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Logout
     * @param {AuthApiAuthLogoutV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLogoutV1(requestParameters: AuthApiAuthLogoutV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Update access token
     * @param {AuthApiAuthRefreshAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRefreshAccessV1(requestParameters: AuthApiAuthRefreshAccessV1Request, options?: RawAxiosRequestConfig): AxiosPromise<RefreshAuthResponse>;
};
/**
 * AuthApi - interface
 * @export
 * @interface AuthApi
 */
export interface AuthApiInterface {
    /**
     *
     * @summary Auth telegram
     * @param {AuthApiAuthAuthTelegramV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authAuthTelegramV1(requestParameters: AuthApiAuthAuthTelegramV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Internal request of auth google
     * @param {AuthApiAuthCallbackGoogleV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authCallbackGoogleV1(requestParameters: AuthApiAuthCallbackGoogleV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Internal request of auth new vk
     * @param {AuthApiAuthCallbackVkIdV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authCallbackVkIdV1(requestParameters: AuthApiAuthCallbackVkIdV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Internal request of auth old vk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authCallbackVkV1(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get code for auth
     * @param {AuthApiAuthCodeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authCodeV1(requestParameters: AuthApiAuthCodeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CodeAppAuthResponse>;
    /**
     *
     * @summary CallBack for connect social
     * @param {AuthApiAuthConnectResultV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authConnectResultV1(requestParameters: AuthApiAuthConnectResultV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Connect telegram in account
     * @param {AuthApiAuthConnectTelegramV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authConnectTelegramV1(requestParameters: AuthApiAuthConnectTelegramV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Connected social account
     * @param {AuthApiAuthConnectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authConnectV1(requestParameters: AuthApiAuthConnectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Disconnected social account
     * @param {AuthApiAuthDisconnectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authDisconnectV1(requestParameters: AuthApiAuthDisconnectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Code exchange
     * @param {AuthApiAuthExchangeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authExchangeV1(requestParameters: AuthApiAuthExchangeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<RefreshAuthResponse>;
    /**
     *
     * @summary Get url for start oauth
     * @param {AuthApiAuthGetAuthUrlV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authGetAuthUrlV1(requestParameters: AuthApiAuthGetAuthUrlV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get basic data for auth user
     * @param {AuthApiAuthGetProfileV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authGetProfileV1(requestParameters: AuthApiAuthGetProfileV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Guest request of auth
     * @param {AuthApiAuthGuestV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authGuestV1(requestParameters: AuthApiAuthGuestV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Logout
     * @param {AuthApiAuthLogoutV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authLogoutV1(requestParameters: AuthApiAuthLogoutV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Update access token
     * @param {AuthApiAuthRefreshAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authRefreshAccessV1(requestParameters: AuthApiAuthRefreshAccessV1Request, options?: RawAxiosRequestConfig): AxiosPromise<RefreshAuthResponse>;
}
/**
 * Request parameters for authAuthTelegramV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthAuthTelegramV1Request
 */
export interface AuthApiAuthAuthTelegramV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly language: AuthAuthTelegramV1LanguageEnum;
    /**
     * Time auth
     * @type {number}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly authDate: number;
    /**
     * Telegram userId
     * @type {number}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly id: number;
    /**
     * First name
     * @type {string}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly firstName: string;
    /**
     * Hash
     * @type {string}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly hash: string;
    /**
     * App oauth
     * @type {'site' | 'admin' | 'mobile' | 'desktop'}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly app: AuthAuthTelegramV1AppEnum;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly v?: AuthAuthTelegramV1VEnum;
    /**
     * Last name
     * @type {string}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly lastName?: string;
    /**
     * Nickname
     * @type {string}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly username?: string;
    /**
     * Photo
     * @type {string}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly photoUrl?: string;
    /**
     * IETF language tag of the user\&#39;s language
     * @type {string}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly languageCode?: string;
    /**
     * True, if this user is a Telegram Premium user
     * @type {boolean}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly isPremium?: boolean;
    /**
     * True, if this user added the bot to the attachment menu
     * @type {boolean}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly addedToAttachmentMenu?: boolean;
    /**
     * Referal id
     * @type {string}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly refId?: string;
    /**
     * Redirect url
     * @type {string}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly redirect?: string;
    /**
     * Country code
     * @type {string}
     * @memberof AuthApiAuthAuthTelegramV1
     */
    readonly country?: string;
}
/**
 * Request parameters for authCallbackGoogleV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthCallbackGoogleV1Request
 */
export interface AuthApiAuthCallbackGoogleV1Request {
    /**
     *
     * @type {string}
     * @memberof AuthApiAuthCallbackGoogleV1
     */
    readonly state: string;
}
/**
 * Request parameters for authCallbackVkIdV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthCallbackVkIdV1Request
 */
export interface AuthApiAuthCallbackVkIdV1Request {
    /**
     *
     * @type {string}
     * @memberof AuthApiAuthCallbackVkIdV1
     */
    readonly state: string;
}
/**
 * Request parameters for authCodeV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthCodeV1Request
 */
export interface AuthApiAuthCodeV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof AuthApiAuthCodeV1
     */
    readonly language: AuthCodeV1LanguageEnum;
    /**
     * Create auth code for app
     * @type {'site' | 'admin' | 'mobile' | 'desktop'}
     * @memberof AuthApiAuthCodeV1
     */
    readonly app: AuthCodeV1AppEnum;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof AuthApiAuthCodeV1
     */
    readonly v?: AuthCodeV1VEnum;
}
/**
 * Request parameters for authConnectResultV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthConnectResultV1Request
 */
export interface AuthApiAuthConnectResultV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof AuthApiAuthConnectResultV1
     */
    readonly language: AuthConnectResultV1LanguageEnum;
    /**
     * Result message for connect
     * @type {string}
     * @memberof AuthApiAuthConnectResultV1
     */
    readonly message: string;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof AuthApiAuthConnectResultV1
     */
    readonly v?: AuthConnectResultV1VEnum;
}
/**
 * Request parameters for authConnectTelegramV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthConnectTelegramV1Request
 */
export interface AuthApiAuthConnectTelegramV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof AuthApiAuthConnectTelegramV1
     */
    readonly language: AuthConnectTelegramV1LanguageEnum;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof AuthApiAuthConnectTelegramV1
     */
    readonly v?: AuthConnectTelegramV1VEnum;
}
/**
 * Request parameters for authConnectV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthConnectV1Request
 */
export interface AuthApiAuthConnectV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof AuthApiAuthConnectV1
     */
    readonly language: AuthConnectV1LanguageEnum;
    /**
     * Provider oauth
     * @type {'google' | 'vk' | 'vk-id' | 'telegram'}
     * @memberof AuthApiAuthConnectV1
     */
    readonly provider: AuthConnectV1ProviderEnum;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof AuthApiAuthConnectV1
     */
    readonly v?: AuthConnectV1VEnum;
    /**
     * App oauth
     * @type {'site' | 'admin' | 'mobile' | 'desktop'}
     * @memberof AuthApiAuthConnectV1
     */
    readonly app?: AuthConnectV1AppEnum;
    /**
     * Redirect url
     * @type {string}
     * @memberof AuthApiAuthConnectV1
     */
    readonly redirect?: string;
}
/**
 * Request parameters for authDisconnectV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthDisconnectV1Request
 */
export interface AuthApiAuthDisconnectV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof AuthApiAuthDisconnectV1
     */
    readonly language: AuthDisconnectV1LanguageEnum;
    /**
     * Social id
     * @type {number}
     * @memberof AuthApiAuthDisconnectV1
     */
    readonly socialId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof AuthApiAuthDisconnectV1
     */
    readonly v?: AuthDisconnectV1VEnum;
}
/**
 * Request parameters for authExchangeV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthExchangeV1Request
 */
export interface AuthApiAuthExchangeV1Request {
    /**
     *
     * @type {SiteAuthExchangeRequest}
     * @memberof AuthApiAuthExchangeV1
     */
    readonly siteAuthExchangeRequest: SiteAuthExchangeRequest;
}
/**
 * Request parameters for authGetAuthUrlV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthGetAuthUrlV1Request
 */
export interface AuthApiAuthGetAuthUrlV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof AuthApiAuthGetAuthUrlV1
     */
    readonly language: AuthGetAuthUrlV1LanguageEnum;
    /**
     * Provider oauth
     * @type {'google' | 'vk' | 'vk-id' | 'telegram'}
     * @memberof AuthApiAuthGetAuthUrlV1
     */
    readonly provider: AuthGetAuthUrlV1ProviderEnum;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof AuthApiAuthGetAuthUrlV1
     */
    readonly v?: AuthGetAuthUrlV1VEnum;
    /**
     * App oauth
     * @type {'site' | 'admin' | 'mobile' | 'desktop'}
     * @memberof AuthApiAuthGetAuthUrlV1
     */
    readonly app?: AuthGetAuthUrlV1AppEnum;
    /**
     * Redirect url
     * @type {string}
     * @memberof AuthApiAuthGetAuthUrlV1
     */
    readonly redirect?: string;
    /**
     * Referal id
     * @type {string}
     * @memberof AuthApiAuthGetAuthUrlV1
     */
    readonly refId?: string;
    /**
     * Country code
     * @type {string}
     * @memberof AuthApiAuthGetAuthUrlV1
     */
    readonly country?: string;
}
/**
 * Request parameters for authGetProfileV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthGetProfileV1Request
 */
export interface AuthApiAuthGetProfileV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof AuthApiAuthGetProfileV1
     */
    readonly language: AuthGetProfileV1LanguageEnum;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof AuthApiAuthGetProfileV1
     */
    readonly v?: AuthGetProfileV1VEnum;
}
/**
 * Request parameters for authGuestV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthGuestV1Request
 */
export interface AuthApiAuthGuestV1Request {
    /**
     *
     * @type {string}
     * @memberof AuthApiAuthGuestV1
     */
    readonly refId: string;
}
/**
 * Request parameters for authLogoutV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthLogoutV1Request
 */
export interface AuthApiAuthLogoutV1Request {
    /**
     *
     * @type {SiteLogoutAuthRequest}
     * @memberof AuthApiAuthLogoutV1
     */
    readonly siteLogoutAuthRequest: SiteLogoutAuthRequest;
}
/**
 * Request parameters for authRefreshAccessV1 operation in AuthApi.
 * @export
 * @interface AuthApiAuthRefreshAccessV1Request
 */
export interface AuthApiAuthRefreshAccessV1Request {
    /**
     *
     * @type {string}
     * @memberof AuthApiAuthRefreshAccessV1
     */
    readonly userAgent: string;
    /**
     *
     * @type {SiteRefreshAuthBodyRequest}
     * @memberof AuthApiAuthRefreshAccessV1
     */
    readonly siteRefreshAuthBodyRequest: SiteRefreshAuthBodyRequest;
}
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI implements AuthApiInterface {
    /**
     *
     * @summary Auth telegram
     * @param {AuthApiAuthAuthTelegramV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authAuthTelegramV1(requestParameters: AuthApiAuthAuthTelegramV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Internal request of auth google
     * @param {AuthApiAuthCallbackGoogleV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authCallbackGoogleV1(requestParameters: AuthApiAuthCallbackGoogleV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Internal request of auth new vk
     * @param {AuthApiAuthCallbackVkIdV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authCallbackVkIdV1(requestParameters: AuthApiAuthCallbackVkIdV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Internal request of auth old vk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authCallbackVkV1(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get code for auth
     * @param {AuthApiAuthCodeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authCodeV1(requestParameters: AuthApiAuthCodeV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CodeAppAuthResponse, any>>;
    /**
     *
     * @summary CallBack for connect social
     * @param {AuthApiAuthConnectResultV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authConnectResultV1(requestParameters: AuthApiAuthConnectResultV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Connect telegram in account
     * @param {AuthApiAuthConnectTelegramV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authConnectTelegramV1(requestParameters: AuthApiAuthConnectTelegramV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Connected social account
     * @param {AuthApiAuthConnectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authConnectV1(requestParameters: AuthApiAuthConnectV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Disconnected social account
     * @param {AuthApiAuthDisconnectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authDisconnectV1(requestParameters: AuthApiAuthDisconnectV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Code exchange
     * @param {AuthApiAuthExchangeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authExchangeV1(requestParameters: AuthApiAuthExchangeV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RefreshAuthResponse, any>>;
    /**
     *
     * @summary Get url for start oauth
     * @param {AuthApiAuthGetAuthUrlV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authGetAuthUrlV1(requestParameters: AuthApiAuthGetAuthUrlV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get basic data for auth user
     * @param {AuthApiAuthGetProfileV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authGetProfileV1(requestParameters: AuthApiAuthGetProfileV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Guest request of auth
     * @param {AuthApiAuthGuestV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authGuestV1(requestParameters: AuthApiAuthGuestV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Logout
     * @param {AuthApiAuthLogoutV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authLogoutV1(requestParameters: AuthApiAuthLogoutV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Update access token
     * @param {AuthApiAuthRefreshAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authRefreshAccessV1(requestParameters: AuthApiAuthRefreshAccessV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RefreshAuthResponse, any>>;
}
/**
 * @export
 */
export declare const AuthAuthTelegramV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type AuthAuthTelegramV1LanguageEnum = typeof AuthAuthTelegramV1LanguageEnum[keyof typeof AuthAuthTelegramV1LanguageEnum];
/**
 * @export
 */
export declare const AuthAuthTelegramV1AppEnum: {
    readonly Site: "site";
    readonly Admin: "admin";
    readonly Mobile: "mobile";
    readonly Desktop: "desktop";
};
export type AuthAuthTelegramV1AppEnum = typeof AuthAuthTelegramV1AppEnum[keyof typeof AuthAuthTelegramV1AppEnum];
/**
 * @export
 */
export declare const AuthAuthTelegramV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type AuthAuthTelegramV1VEnum = typeof AuthAuthTelegramV1VEnum[keyof typeof AuthAuthTelegramV1VEnum];
/**
 * @export
 */
export declare const AuthCodeV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type AuthCodeV1LanguageEnum = typeof AuthCodeV1LanguageEnum[keyof typeof AuthCodeV1LanguageEnum];
/**
 * @export
 */
export declare const AuthCodeV1AppEnum: {
    readonly Site: "site";
    readonly Admin: "admin";
    readonly Mobile: "mobile";
    readonly Desktop: "desktop";
};
export type AuthCodeV1AppEnum = typeof AuthCodeV1AppEnum[keyof typeof AuthCodeV1AppEnum];
/**
 * @export
 */
export declare const AuthCodeV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type AuthCodeV1VEnum = typeof AuthCodeV1VEnum[keyof typeof AuthCodeV1VEnum];
/**
 * @export
 */
export declare const AuthConnectResultV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type AuthConnectResultV1LanguageEnum = typeof AuthConnectResultV1LanguageEnum[keyof typeof AuthConnectResultV1LanguageEnum];
/**
 * @export
 */
export declare const AuthConnectResultV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type AuthConnectResultV1VEnum = typeof AuthConnectResultV1VEnum[keyof typeof AuthConnectResultV1VEnum];
/**
 * @export
 */
export declare const AuthConnectTelegramV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type AuthConnectTelegramV1LanguageEnum = typeof AuthConnectTelegramV1LanguageEnum[keyof typeof AuthConnectTelegramV1LanguageEnum];
/**
 * @export
 */
export declare const AuthConnectTelegramV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type AuthConnectTelegramV1VEnum = typeof AuthConnectTelegramV1VEnum[keyof typeof AuthConnectTelegramV1VEnum];
/**
 * @export
 */
export declare const AuthConnectV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type AuthConnectV1LanguageEnum = typeof AuthConnectV1LanguageEnum[keyof typeof AuthConnectV1LanguageEnum];
/**
 * @export
 */
export declare const AuthConnectV1ProviderEnum: {
    readonly Google: "google";
    readonly Vk: "vk";
    readonly VkId: "vk-id";
    readonly Telegram: "telegram";
};
export type AuthConnectV1ProviderEnum = typeof AuthConnectV1ProviderEnum[keyof typeof AuthConnectV1ProviderEnum];
/**
 * @export
 */
export declare const AuthConnectV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type AuthConnectV1VEnum = typeof AuthConnectV1VEnum[keyof typeof AuthConnectV1VEnum];
/**
 * @export
 */
export declare const AuthConnectV1AppEnum: {
    readonly Site: "site";
    readonly Admin: "admin";
    readonly Mobile: "mobile";
    readonly Desktop: "desktop";
};
export type AuthConnectV1AppEnum = typeof AuthConnectV1AppEnum[keyof typeof AuthConnectV1AppEnum];
/**
 * @export
 */
export declare const AuthDisconnectV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type AuthDisconnectV1LanguageEnum = typeof AuthDisconnectV1LanguageEnum[keyof typeof AuthDisconnectV1LanguageEnum];
/**
 * @export
 */
export declare const AuthDisconnectV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type AuthDisconnectV1VEnum = typeof AuthDisconnectV1VEnum[keyof typeof AuthDisconnectV1VEnum];
/**
 * @export
 */
export declare const AuthGetAuthUrlV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type AuthGetAuthUrlV1LanguageEnum = typeof AuthGetAuthUrlV1LanguageEnum[keyof typeof AuthGetAuthUrlV1LanguageEnum];
/**
 * @export
 */
export declare const AuthGetAuthUrlV1ProviderEnum: {
    readonly Google: "google";
    readonly Vk: "vk";
    readonly VkId: "vk-id";
    readonly Telegram: "telegram";
};
export type AuthGetAuthUrlV1ProviderEnum = typeof AuthGetAuthUrlV1ProviderEnum[keyof typeof AuthGetAuthUrlV1ProviderEnum];
/**
 * @export
 */
export declare const AuthGetAuthUrlV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type AuthGetAuthUrlV1VEnum = typeof AuthGetAuthUrlV1VEnum[keyof typeof AuthGetAuthUrlV1VEnum];
/**
 * @export
 */
export declare const AuthGetAuthUrlV1AppEnum: {
    readonly Site: "site";
    readonly Admin: "admin";
    readonly Mobile: "mobile";
    readonly Desktop: "desktop";
};
export type AuthGetAuthUrlV1AppEnum = typeof AuthGetAuthUrlV1AppEnum[keyof typeof AuthGetAuthUrlV1AppEnum];
/**
 * @export
 */
export declare const AuthGetProfileV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type AuthGetProfileV1LanguageEnum = typeof AuthGetProfileV1LanguageEnum[keyof typeof AuthGetProfileV1LanguageEnum];
/**
 * @export
 */
export declare const AuthGetProfileV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type AuthGetProfileV1VEnum = typeof AuthGetProfileV1VEnum[keyof typeof AuthGetProfileV1VEnum];
//# sourceMappingURL=auth-api.d.ts.map