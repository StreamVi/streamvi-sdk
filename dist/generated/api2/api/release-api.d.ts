/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { GetVersionAppResponse } from '../models';
/**
 * ReleaseApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get current version app
     * @param {cabinet1VEnum} v Version
     * @param {cabinet1LanguageEnum} language Current language
     * @param {cabinet1AppEnum} [app] Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cabinet1: (v: cabinet1VEnum, language: cabinet1LanguageEnum, app?: cabinet1AppEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ReleaseApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get current version app
     * @param {cabinet1VEnum} v Version
     * @param {cabinet1LanguageEnum} language Current language
     * @param {cabinet1AppEnum} [app] Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cabinet1(v: cabinet1VEnum, language: cabinet1LanguageEnum, app?: cabinet1AppEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVersionAppResponse>>;
};
/**
 * ReleaseApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get current version app
     * @param {cabinet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cabinet1(requestParameters: cabinet1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetVersionAppResponse>;
};
/**
 * Request parameters for cabinet1 operation in ReleaseApi.
 * @export
 * @interface cabinet1Request
 */
export interface cabinet1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof cabinet1
     */
    readonly v?: cabinet1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof cabinet1
     */
    readonly language: cabinet1LanguageEnum;
    /**
     * Apps
     * @type {'cabinet'}
     * @memberof cabinet1
     */
    readonly app?: cabinet1AppEnum;
}
/**
 * ReleaseApi - object-oriented interface
 * @export
 * @class ReleaseApi
 * @extends {BaseAPI}
 */
export declare class ReleaseApi extends BaseAPI {
    /**
     *
     * @summary Get current version app
     * @param {cabinet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleaseApi
     */
    cabinet1(requestParameters: cabinet1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetVersionAppResponse, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum cabinet1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum cabinet1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum cabinet1AppEnum {
    cabinet = "cabinet"
}
//# sourceMappingURL=release-api.d.ts.map