"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepare1LanguageEnum = exports.prepare1VEnum = exports.create1LanguageEnum = exports.create1VEnum = exports.PayoutApi = exports.factory = exports.fp = exports.axiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PayoutApi - axios parameter creator
 * @export
 */
const axiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create payout
         * @param {create1VEnum} v Version
         * @param {create1LanguageEnum} language Current language
         * @param {PayoutCreateRequestBodyDto} payoutCreateRequestBodyDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1: async (v, language, payoutCreateRequestBodyDto, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('create1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('create1', 'language', language);
            // verify required parameter 'payoutCreateRequestBodyDto' is not null or undefined
            (0, common_1.assertParamExists)('create1', 'payoutCreateRequestBodyDto', payoutCreateRequestBodyDto);
            const localVarPath = `/method/payout/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(payoutCreateRequestBodyDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get payout data for create
         * @param {prepare1VEnum} v Version
         * @param {prepare1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prepare1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('prepare1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('prepare1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('prepare1', 'projectId', projectId);
            const localVarPath = `/method/payout/prepare`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.axiosParamCreator = axiosParamCreator;
/**
 * PayoutApi - functional programming interface
 * @export
 */
const fp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.axiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create payout
         * @param {create1VEnum} v Version
         * @param {create1LanguageEnum} language Current language
         * @param {PayoutCreateRequestBodyDto} payoutCreateRequestBodyDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create1(v, language, payoutCreateRequestBodyDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.create1(v, language, payoutCreateRequestBodyDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PayoutApi.create1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get payout data for create
         * @param {prepare1VEnum} v Version
         * @param {prepare1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prepare1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.prepare1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PayoutApi.prepare1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.fp = fp;
/**
 * PayoutApi - factory interface
 * @export
 */
const factory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.fp)(configuration);
    return {
        /**
         *
         * @summary Create payout
         * @param {create1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || create1VEnum._1;
            return localVarFp.create1(actualV, requestParameters.language, requestParameters.payoutCreateRequestBodyDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get payout data for create
         * @param {prepare1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prepare1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || prepare1VEnum._1;
            return localVarFp.prepare1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.factory = factory;
/**
 * PayoutApi - object-oriented interface
 * @export
 * @class PayoutApi
 * @extends {BaseAPI}
 */
class PayoutApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create payout
     * @param {create1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApi
     */
    create1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || create1VEnum._1;
        return (0, exports.fp)(this.configuration).create1(actualV, requestParameters.language, requestParameters.payoutCreateRequestBodyDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get payout data for create
     * @param {prepare1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApi
     */
    prepare1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || prepare1VEnum._1;
        return (0, exports.fp)(this.configuration).prepare1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PayoutApi = PayoutApi;
/**
  * @export
  * @enum {string}
  */
var create1VEnum;
(function (create1VEnum) {
    create1VEnum["_1"] = "1";
    create1VEnum["_2"] = "2";
    create1VEnum["_3"] = "3";
})(create1VEnum || (exports.create1VEnum = create1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var create1LanguageEnum;
(function (create1LanguageEnum) {
    create1LanguageEnum["ru"] = "ru";
    create1LanguageEnum["en"] = "en";
    create1LanguageEnum["cn"] = "cn";
})(create1LanguageEnum || (exports.create1LanguageEnum = create1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var prepare1VEnum;
(function (prepare1VEnum) {
    prepare1VEnum["_1"] = "1";
    prepare1VEnum["_2"] = "2";
    prepare1VEnum["_3"] = "3";
})(prepare1VEnum || (exports.prepare1VEnum = prepare1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var prepare1LanguageEnum;
(function (prepare1LanguageEnum) {
    prepare1LanguageEnum["ru"] = "ru";
    prepare1LanguageEnum["en"] = "en";
    prepare1LanguageEnum["cn"] = "cn";
})(prepare1LanguageEnum || (exports.prepare1LanguageEnum = prepare1LanguageEnum = {}));
