"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayoutPrepareV1VEnum = exports.PayoutPrepareV1LanguageEnum = exports.PayoutCreateV1VEnum = exports.PayoutCreateV1LanguageEnum = exports.PayoutApi = exports.PayoutApiFactory = exports.PayoutApiFp = exports.PayoutApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PayoutApi - axios parameter creator
 * @export
 */
const PayoutApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create payout
         * @param {PayoutCreateV1LanguageEnum} language Current language
         * @param {PayoutCreateRequestBodyDto} payoutCreateRequestBodyDto
         * @param {PayoutCreateV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payoutCreateV1: async (language, payoutCreateRequestBodyDto, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('payoutCreateV1', 'language', language);
            // verify required parameter 'payoutCreateRequestBodyDto' is not null or undefined
            (0, common_1.assertParamExists)('payoutCreateV1', 'payoutCreateRequestBodyDto', payoutCreateRequestBodyDto);
            const localVarPath = `/method/payout/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(payoutCreateRequestBodyDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get payout data for create
         * @param {PayoutPrepareV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PayoutPrepareV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payoutPrepareV1: async (language, projectId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('payoutPrepareV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('payoutPrepareV1', 'projectId', projectId);
            const localVarPath = `/method/payout/prepare`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PayoutApiAxiosParamCreator = PayoutApiAxiosParamCreator;
/**
 * PayoutApi - functional programming interface
 * @export
 */
const PayoutApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PayoutApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create payout
         * @param {PayoutCreateV1LanguageEnum} language Current language
         * @param {PayoutCreateRequestBodyDto} payoutCreateRequestBodyDto
         * @param {PayoutCreateV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payoutCreateV1(language, payoutCreateRequestBodyDto, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.payoutCreateV1(language, payoutCreateRequestBodyDto, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PayoutApi.payoutCreateV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get payout data for create
         * @param {PayoutPrepareV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PayoutPrepareV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payoutPrepareV1(language, projectId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.payoutPrepareV1(language, projectId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PayoutApi.payoutPrepareV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PayoutApiFp = PayoutApiFp;
/**
 * PayoutApi - factory interface
 * @export
 */
const PayoutApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PayoutApiFp)(configuration);
    return {
        /**
         *
         * @summary Create payout
         * @param {PayoutApiPayoutCreateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payoutCreateV1(requestParameters, options) {
            return localVarFp.payoutCreateV1(requestParameters.language, requestParameters.payoutCreateRequestBodyDto, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get payout data for create
         * @param {PayoutApiPayoutPrepareV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payoutPrepareV1(requestParameters, options) {
            return localVarFp.payoutPrepareV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PayoutApiFactory = PayoutApiFactory;
/**
 * PayoutApi - object-oriented interface
 * @export
 * @class PayoutApi
 * @extends {BaseAPI}
 */
class PayoutApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create payout
     * @param {PayoutApiPayoutCreateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApi
     */
    payoutCreateV1(requestParameters, options) {
        return (0, exports.PayoutApiFp)(this.configuration).payoutCreateV1(requestParameters.language, requestParameters.payoutCreateRequestBodyDto, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get payout data for create
     * @param {PayoutApiPayoutPrepareV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApi
     */
    payoutPrepareV1(requestParameters, options) {
        return (0, exports.PayoutApiFp)(this.configuration).payoutPrepareV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PayoutApi = PayoutApi;
/**
 * @export
 */
exports.PayoutCreateV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PayoutCreateV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PayoutPrepareV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PayoutPrepareV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
