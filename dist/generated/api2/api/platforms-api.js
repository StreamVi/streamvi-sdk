"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.platformList1LanguageEnum = exports.platformList1VEnum = exports.logoutAccount1PlatformEnum = exports.logoutAccount1LanguageEnum = exports.logoutAccount1VEnum = exports.getCategory1TypeEnum = exports.getCategory1LanguageEnum = exports.getCategory1VEnum = exports.addAccount1PlatformEnum = exports.addAccount1LanguageEnum = exports.addAccount1VEnum = exports.PlatformsApi = exports.factory = exports.fp = exports.axiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PlatformsApi - axios parameter creator
 * @export
 */
const axiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get url for start oauth
         * @param {addAccount1VEnum} v Version
         * @param {addAccount1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {addAccount1PlatformEnum} platform Provider oauth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccount1: async (v, language, projectId, platform, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('addAccount1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('addAccount1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('addAccount1', 'projectId', projectId);
            // verify required parameter 'platform' is not null or undefined
            (0, common_1.assertParamExists)('addAccount1', 'platform', platform);
            const localVarPath = `/method/platforms/connect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get category from the platform
         * @param {getCategory1VEnum} v Version
         * @param {getCategory1LanguageEnum} language Current language
         * @param {getCategory1TypeEnum} type Category search bar
         * @param {string} [q] Category search bar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategory1: async (v, language, type, q, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('getCategory1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('getCategory1', 'language', language);
            // verify required parameter 'type' is not null or undefined
            (0, common_1.assertParamExists)('getCategory1', 'type', type);
            const localVarPath = `/method/platforms/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get category from the platform
         * @param {logoutAccount1VEnum} v Version
         * @param {logoutAccount1LanguageEnum} language Current language
         * @param {string} id Category search bar
         * @param {logoutAccount1PlatformEnum} platform Provider oauth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutAccount1: async (v, language, id, platform, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('logoutAccount1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('logoutAccount1', 'language', language);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('logoutAccount1', 'id', id);
            // verify required parameter 'platform' is not null or undefined
            (0, common_1.assertParamExists)('logoutAccount1', 'platform', platform);
            const localVarPath = `/method/platforms/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Supported platforms
         * @param {platformList1VEnum} v Version
         * @param {platformList1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformList1: async (v, language, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('platformList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('platformList1', 'language', language);
            const localVarPath = `/method/platforms/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.axiosParamCreator = axiosParamCreator;
/**
 * PlatformsApi - functional programming interface
 * @export
 */
const fp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.axiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get url for start oauth
         * @param {addAccount1VEnum} v Version
         * @param {addAccount1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {addAccount1PlatformEnum} platform Provider oauth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAccount1(v, language, projectId, platform, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAccount1(v, language, projectId, platform, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlatformsApi.addAccount1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get category from the platform
         * @param {getCategory1VEnum} v Version
         * @param {getCategory1LanguageEnum} language Current language
         * @param {getCategory1TypeEnum} type Category search bar
         * @param {string} [q] Category search bar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategory1(v, language, type, q, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategory1(v, language, type, q, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlatformsApi.getCategory1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get category from the platform
         * @param {logoutAccount1VEnum} v Version
         * @param {logoutAccount1LanguageEnum} language Current language
         * @param {string} id Category search bar
         * @param {logoutAccount1PlatformEnum} platform Provider oauth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutAccount1(v, language, id, platform, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutAccount1(v, language, id, platform, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlatformsApi.logoutAccount1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Supported platforms
         * @param {platformList1VEnum} v Version
         * @param {platformList1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async platformList1(v, language, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.platformList1(v, language, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlatformsApi.platformList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.fp = fp;
/**
 * PlatformsApi - factory interface
 * @export
 */
const factory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.fp)(configuration);
    return {
        /**
         *
         * @summary Get url for start oauth
         * @param {addAccount1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccount1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || addAccount1VEnum._1;
            return localVarFp.addAccount1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.platform, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get category from the platform
         * @param {getCategory1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategory1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || getCategory1VEnum._1;
            return localVarFp.getCategory1(actualV, requestParameters.language, requestParameters.type, requestParameters.q, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get category from the platform
         * @param {logoutAccount1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutAccount1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || logoutAccount1VEnum._1;
            return localVarFp.logoutAccount1(actualV, requestParameters.language, requestParameters.id, requestParameters.platform, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Supported platforms
         * @param {platformList1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformList1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || platformList1VEnum._1;
            return localVarFp.platformList1(actualV, requestParameters.language, options).then((request) => request(axios, basePath));
        },
    };
};
exports.factory = factory;
/**
 * PlatformsApi - object-oriented interface
 * @export
 * @class PlatformsApi
 * @extends {BaseAPI}
 */
class PlatformsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get url for start oauth
     * @param {addAccount1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    addAccount1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || addAccount1VEnum._1;
        return (0, exports.fp)(this.configuration).addAccount1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.platform, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get category from the platform
     * @param {getCategory1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    getCategory1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || getCategory1VEnum._1;
        return (0, exports.fp)(this.configuration).getCategory1(actualV, requestParameters.language, requestParameters.type, requestParameters.q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get category from the platform
     * @param {logoutAccount1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    logoutAccount1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || logoutAccount1VEnum._1;
        return (0, exports.fp)(this.configuration).logoutAccount1(actualV, requestParameters.language, requestParameters.id, requestParameters.platform, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Supported platforms
     * @param {platformList1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    platformList1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || platformList1VEnum._1;
        return (0, exports.fp)(this.configuration).platformList1(actualV, requestParameters.language, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PlatformsApi = PlatformsApi;
/**
  * @export
  * @enum {string}
  */
var addAccount1VEnum;
(function (addAccount1VEnum) {
    addAccount1VEnum["_1"] = "1";
    addAccount1VEnum["_2"] = "2";
    addAccount1VEnum["_3"] = "3";
})(addAccount1VEnum || (exports.addAccount1VEnum = addAccount1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var addAccount1LanguageEnum;
(function (addAccount1LanguageEnum) {
    addAccount1LanguageEnum["ru"] = "ru";
    addAccount1LanguageEnum["en"] = "en";
    addAccount1LanguageEnum["cn"] = "cn";
})(addAccount1LanguageEnum || (exports.addAccount1LanguageEnum = addAccount1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var addAccount1PlatformEnum;
(function (addAccount1PlatformEnum) {
    addAccount1PlatformEnum["vk"] = "vk";
    addAccount1PlatformEnum["vk_id"] = "vk-id";
    addAccount1PlatformEnum["ok"] = "ok";
    addAccount1PlatformEnum["youtube"] = "youtube";
    addAccount1PlatformEnum["trovo"] = "trovo";
    addAccount1PlatformEnum["twitch"] = "twitch";
})(addAccount1PlatformEnum || (exports.addAccount1PlatformEnum = addAccount1PlatformEnum = {}));
/**
  * @export
  * @enum {string}
  */
var getCategory1VEnum;
(function (getCategory1VEnum) {
    getCategory1VEnum["_1"] = "1";
    getCategory1VEnum["_2"] = "2";
    getCategory1VEnum["_3"] = "3";
})(getCategory1VEnum || (exports.getCategory1VEnum = getCategory1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var getCategory1LanguageEnum;
(function (getCategory1LanguageEnum) {
    getCategory1LanguageEnum["ru"] = "ru";
    getCategory1LanguageEnum["en"] = "en";
    getCategory1LanguageEnum["cn"] = "cn";
})(getCategory1LanguageEnum || (exports.getCategory1LanguageEnum = getCategory1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var getCategory1TypeEnum;
(function (getCategory1TypeEnum) {
    getCategory1TypeEnum["vk"] = "vk";
    getCategory1TypeEnum["youtube"] = "youtube";
    getCategory1TypeEnum["trovo"] = "trovo";
    getCategory1TypeEnum["twitch"] = "twitch";
    getCategory1TypeEnum["vkvideolive"] = "vkvideolive";
})(getCategory1TypeEnum || (exports.getCategory1TypeEnum = getCategory1TypeEnum = {}));
/**
  * @export
  * @enum {string}
  */
var logoutAccount1VEnum;
(function (logoutAccount1VEnum) {
    logoutAccount1VEnum["_1"] = "1";
    logoutAccount1VEnum["_2"] = "2";
    logoutAccount1VEnum["_3"] = "3";
})(logoutAccount1VEnum || (exports.logoutAccount1VEnum = logoutAccount1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var logoutAccount1LanguageEnum;
(function (logoutAccount1LanguageEnum) {
    logoutAccount1LanguageEnum["ru"] = "ru";
    logoutAccount1LanguageEnum["en"] = "en";
    logoutAccount1LanguageEnum["cn"] = "cn";
})(logoutAccount1LanguageEnum || (exports.logoutAccount1LanguageEnum = logoutAccount1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var logoutAccount1PlatformEnum;
(function (logoutAccount1PlatformEnum) {
    logoutAccount1PlatformEnum["vk"] = "vk";
    logoutAccount1PlatformEnum["vk_id"] = "vk-id";
    logoutAccount1PlatformEnum["ok"] = "ok";
    logoutAccount1PlatformEnum["youtube"] = "youtube";
    logoutAccount1PlatformEnum["trovo"] = "trovo";
    logoutAccount1PlatformEnum["twitch"] = "twitch";
})(logoutAccount1PlatformEnum || (exports.logoutAccount1PlatformEnum = logoutAccount1PlatformEnum = {}));
/**
  * @export
  * @enum {string}
  */
var platformList1VEnum;
(function (platformList1VEnum) {
    platformList1VEnum["_1"] = "1";
    platformList1VEnum["_2"] = "2";
    platformList1VEnum["_3"] = "3";
})(platformList1VEnum || (exports.platformList1VEnum = platformList1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var platformList1LanguageEnum;
(function (platformList1LanguageEnum) {
    platformList1LanguageEnum["ru"] = "ru";
    platformList1LanguageEnum["en"] = "en";
    platformList1LanguageEnum["cn"] = "cn";
})(platformList1LanguageEnum || (exports.platformList1LanguageEnum = platformList1LanguageEnum = {}));
