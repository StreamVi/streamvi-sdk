"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformsPlatformListV1VEnum = exports.PlatformsPlatformListV1LanguageEnum = exports.PlatformsLogoutAccountV1VEnum = exports.PlatformsLogoutAccountV1PlatformEnum = exports.PlatformsLogoutAccountV1LanguageEnum = exports.PlatformsGetCategoryV1VEnum = exports.PlatformsGetCategoryV1TypeEnum = exports.PlatformsGetCategoryV1LanguageEnum = exports.PlatformsAddAccountV1VEnum = exports.PlatformsAddAccountV1PlatformEnum = exports.PlatformsAddAccountV1LanguageEnum = exports.PlatformsApi = exports.PlatformsApiFactory = exports.PlatformsApiFp = exports.PlatformsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PlatformsApi - axios parameter creator
 * @export
 */
const PlatformsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get url for start oauth
         * @param {PlatformsAddAccountV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlatformsAddAccountV1PlatformEnum} platform Provider oauth
         * @param {PlatformsAddAccountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsAddAccountV1: async (language, projectId, platform, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('platformsAddAccountV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('platformsAddAccountV1', 'projectId', projectId);
            // verify required parameter 'platform' is not null or undefined
            (0, common_1.assertParamExists)('platformsAddAccountV1', 'platform', platform);
            const localVarPath = `/method/platforms/connect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get category from the platform
         * @param {PlatformsGetCategoryV1LanguageEnum} language Current language
         * @param {PlatformsGetCategoryV1TypeEnum} type Category search bar
         * @param {PlatformsGetCategoryV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {string} [q] Category search bar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsGetCategoryV1: async (language, type, v, q, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('platformsGetCategoryV1', 'language', language);
            // verify required parameter 'type' is not null or undefined
            (0, common_1.assertParamExists)('platformsGetCategoryV1', 'type', type);
            const localVarPath = `/method/platforms/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get category from the platform
         * @param {PlatformsLogoutAccountV1LanguageEnum} language Current language
         * @param {string} id Category search bar
         * @param {PlatformsLogoutAccountV1PlatformEnum} platform Provider oauth
         * @param {PlatformsLogoutAccountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsLogoutAccountV1: async (language, id, platform, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('platformsLogoutAccountV1', 'language', language);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('platformsLogoutAccountV1', 'id', id);
            // verify required parameter 'platform' is not null or undefined
            (0, common_1.assertParamExists)('platformsLogoutAccountV1', 'platform', platform);
            const localVarPath = `/method/platforms/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Supported platforms
         * @param {PlatformsPlatformListV1LanguageEnum} language Current language
         * @param {PlatformsPlatformListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsPlatformListV1: async (language, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('platformsPlatformListV1', 'language', language);
            const localVarPath = `/method/platforms/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PlatformsApiAxiosParamCreator = PlatformsApiAxiosParamCreator;
/**
 * PlatformsApi - functional programming interface
 * @export
 */
const PlatformsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PlatformsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get url for start oauth
         * @param {PlatformsAddAccountV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlatformsAddAccountV1PlatformEnum} platform Provider oauth
         * @param {PlatformsAddAccountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async platformsAddAccountV1(language, projectId, platform, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.platformsAddAccountV1(language, projectId, platform, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlatformsApi.platformsAddAccountV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get category from the platform
         * @param {PlatformsGetCategoryV1LanguageEnum} language Current language
         * @param {PlatformsGetCategoryV1TypeEnum} type Category search bar
         * @param {PlatformsGetCategoryV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {string} [q] Category search bar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async platformsGetCategoryV1(language, type, v, q, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.platformsGetCategoryV1(language, type, v, q, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlatformsApi.platformsGetCategoryV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get category from the platform
         * @param {PlatformsLogoutAccountV1LanguageEnum} language Current language
         * @param {string} id Category search bar
         * @param {PlatformsLogoutAccountV1PlatformEnum} platform Provider oauth
         * @param {PlatformsLogoutAccountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async platformsLogoutAccountV1(language, id, platform, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.platformsLogoutAccountV1(language, id, platform, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlatformsApi.platformsLogoutAccountV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Supported platforms
         * @param {PlatformsPlatformListV1LanguageEnum} language Current language
         * @param {PlatformsPlatformListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async platformsPlatformListV1(language, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.platformsPlatformListV1(language, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlatformsApi.platformsPlatformListV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PlatformsApiFp = PlatformsApiFp;
/**
 * PlatformsApi - factory interface
 * @export
 */
const PlatformsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PlatformsApiFp)(configuration);
    return {
        /**
         *
         * @summary Get url for start oauth
         * @param {PlatformsApiPlatformsAddAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsAddAccountV1(requestParameters, options) {
            return localVarFp.platformsAddAccountV1(requestParameters.language, requestParameters.projectId, requestParameters.platform, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get category from the platform
         * @param {PlatformsApiPlatformsGetCategoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsGetCategoryV1(requestParameters, options) {
            return localVarFp.platformsGetCategoryV1(requestParameters.language, requestParameters.type, requestParameters.v, requestParameters.q, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get category from the platform
         * @param {PlatformsApiPlatformsLogoutAccountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsLogoutAccountV1(requestParameters, options) {
            return localVarFp.platformsLogoutAccountV1(requestParameters.language, requestParameters.id, requestParameters.platform, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Supported platforms
         * @param {PlatformsApiPlatformsPlatformListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsPlatformListV1(requestParameters, options) {
            return localVarFp.platformsPlatformListV1(requestParameters.language, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PlatformsApiFactory = PlatformsApiFactory;
/**
 * PlatformsApi - object-oriented interface
 * @export
 * @class PlatformsApi
 * @extends {BaseAPI}
 */
class PlatformsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get url for start oauth
     * @param {PlatformsApiPlatformsAddAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    platformsAddAccountV1(requestParameters, options) {
        return (0, exports.PlatformsApiFp)(this.configuration).platformsAddAccountV1(requestParameters.language, requestParameters.projectId, requestParameters.platform, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get category from the platform
     * @param {PlatformsApiPlatformsGetCategoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    platformsGetCategoryV1(requestParameters, options) {
        return (0, exports.PlatformsApiFp)(this.configuration).platformsGetCategoryV1(requestParameters.language, requestParameters.type, requestParameters.v, requestParameters.q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get category from the platform
     * @param {PlatformsApiPlatformsLogoutAccountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    platformsLogoutAccountV1(requestParameters, options) {
        return (0, exports.PlatformsApiFp)(this.configuration).platformsLogoutAccountV1(requestParameters.language, requestParameters.id, requestParameters.platform, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Supported platforms
     * @param {PlatformsApiPlatformsPlatformListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    platformsPlatformListV1(requestParameters, options) {
        return (0, exports.PlatformsApiFp)(this.configuration).platformsPlatformListV1(requestParameters.language, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PlatformsApi = PlatformsApi;
/**
 * @export
 */
exports.PlatformsAddAccountV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlatformsAddAccountV1PlatformEnum = {
    Vk: 'vk',
    VkId: 'vk-id',
    Ok: 'ok',
    Youtube: 'youtube',
    Trovo: 'trovo',
    Twitch: 'twitch'
};
/**
 * @export
 */
exports.PlatformsAddAccountV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlatformsGetCategoryV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlatformsGetCategoryV1TypeEnum = {
    Vk: 'vk',
    Youtube: 'youtube',
    Trovo: 'trovo',
    Twitch: 'twitch',
    Vkvideolive: 'vkvideolive'
};
/**
 * @export
 */
exports.PlatformsGetCategoryV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlatformsLogoutAccountV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlatformsLogoutAccountV1PlatformEnum = {
    Vk: 'vk',
    VkId: 'vk-id',
    Ok: 'ok',
    Youtube: 'youtube',
    Trovo: 'trovo',
    Twitch: 'twitch'
};
/**
 * @export
 */
exports.PlatformsLogoutAccountV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlatformsPlatformListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlatformsPlatformListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
