/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { PlanStorageCheckResponse } from '../models';
import type { PlanStorageDiscountResponse } from '../models';
import type { PlanStorageForProject } from '../models';
import type { PlanStorageResponseDto } from '../models';
import type { SuccessResponse } from '../models';
/**
 * PlanStorageApi - axios parameter creator
 * @export
 */
export declare const PlanStorageApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Buy storage tariff
     * @param {PlanStorageBuyV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanStorageBuyV1PeriodEnum} period Period
     * @param {number} planStorageId Storage plan id
     * @param {PlanStorageBuyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [size] Size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planStorageBuyV1: (language: PlanStorageBuyV1LanguageEnum, projectId: number, period: PlanStorageBuyV1PeriodEnum, planStorageId: number, v?: PlanStorageBuyV1VEnum, size?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove next tariff
     * @param {PlanStorageCancelV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanStorageCancelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planStorageCancelV1: (language: PlanStorageCancelV1LanguageEnum, projectId: number, v?: PlanStorageCancelV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Check storage tariff before buy
     * @param {PlanStorageCheckV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanStorageCheckV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planStorageCheckV1: (language: PlanStorageCheckV1LanguageEnum, projectId: number, v?: PlanStorageCheckV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get discount of storage
     * @param {PlanStorageGetDiscountV1LanguageEnum} language Current language
     * @param {PlanStorageGetDiscountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planStorageGetDiscountV1: (language: PlanStorageGetDiscountV1LanguageEnum, v?: PlanStorageGetDiscountV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get info for storage tariff
     * @param {PlanStorageListV1LanguageEnum} language Current language
     * @param {PlanStorageListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planStorageListV1: (language: PlanStorageListV1LanguageEnum, v?: PlanStorageListV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get tariff for project
     * @param {PlanStorageTariffV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanStorageTariffV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planStorageTariffV1: (language: PlanStorageTariffV1LanguageEnum, projectId: number, v?: PlanStorageTariffV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PlanStorageApi - functional programming interface
 * @export
 */
export declare const PlanStorageApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Buy storage tariff
     * @param {PlanStorageBuyV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanStorageBuyV1PeriodEnum} period Period
     * @param {number} planStorageId Storage plan id
     * @param {PlanStorageBuyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [size] Size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planStorageBuyV1(language: PlanStorageBuyV1LanguageEnum, projectId: number, period: PlanStorageBuyV1PeriodEnum, planStorageId: number, v?: PlanStorageBuyV1VEnum, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Remove next tariff
     * @param {PlanStorageCancelV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanStorageCancelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planStorageCancelV1(language: PlanStorageCancelV1LanguageEnum, projectId: number, v?: PlanStorageCancelV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Check storage tariff before buy
     * @param {PlanStorageCheckV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanStorageCheckV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planStorageCheckV1(language: PlanStorageCheckV1LanguageEnum, projectId: number, v?: PlanStorageCheckV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanStorageCheckResponse>>;
    /**
     *
     * @summary Get discount of storage
     * @param {PlanStorageGetDiscountV1LanguageEnum} language Current language
     * @param {PlanStorageGetDiscountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planStorageGetDiscountV1(language: PlanStorageGetDiscountV1LanguageEnum, v?: PlanStorageGetDiscountV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanStorageDiscountResponse>>;
    /**
     *
     * @summary Get info for storage tariff
     * @param {PlanStorageListV1LanguageEnum} language Current language
     * @param {PlanStorageListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planStorageListV1(language: PlanStorageListV1LanguageEnum, v?: PlanStorageListV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanStorageResponseDto>>;
    /**
     *
     * @summary Get tariff for project
     * @param {PlanStorageTariffV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanStorageTariffV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planStorageTariffV1(language: PlanStorageTariffV1LanguageEnum, projectId: number, v?: PlanStorageTariffV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanStorageForProject>>;
};
/**
 * PlanStorageApi - factory interface
 * @export
 */
export declare const PlanStorageApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Buy storage tariff
     * @param {PlanStorageApiPlanStorageBuyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planStorageBuyV1(requestParameters: PlanStorageApiPlanStorageBuyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Remove next tariff
     * @param {PlanStorageApiPlanStorageCancelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planStorageCancelV1(requestParameters: PlanStorageApiPlanStorageCancelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Check storage tariff before buy
     * @param {PlanStorageApiPlanStorageCheckV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planStorageCheckV1(requestParameters: PlanStorageApiPlanStorageCheckV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanStorageCheckResponse>;
    /**
     *
     * @summary Get discount of storage
     * @param {PlanStorageApiPlanStorageGetDiscountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planStorageGetDiscountV1(requestParameters: PlanStorageApiPlanStorageGetDiscountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanStorageDiscountResponse>;
    /**
     *
     * @summary Get info for storage tariff
     * @param {PlanStorageApiPlanStorageListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planStorageListV1(requestParameters: PlanStorageApiPlanStorageListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanStorageResponseDto>;
    /**
     *
     * @summary Get tariff for project
     * @param {PlanStorageApiPlanStorageTariffV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planStorageTariffV1(requestParameters: PlanStorageApiPlanStorageTariffV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanStorageForProject>;
};
/**
 * PlanStorageApi - interface
 * @export
 * @interface PlanStorageApi
 */
export interface PlanStorageApiInterface {
    /**
     *
     * @summary Buy storage tariff
     * @param {PlanStorageApiPlanStorageBuyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageBuyV1(requestParameters: PlanStorageApiPlanStorageBuyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Remove next tariff
     * @param {PlanStorageApiPlanStorageCancelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageCancelV1(requestParameters: PlanStorageApiPlanStorageCancelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Check storage tariff before buy
     * @param {PlanStorageApiPlanStorageCheckV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageCheckV1(requestParameters: PlanStorageApiPlanStorageCheckV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanStorageCheckResponse>;
    /**
     *
     * @summary Get discount of storage
     * @param {PlanStorageApiPlanStorageGetDiscountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageGetDiscountV1(requestParameters: PlanStorageApiPlanStorageGetDiscountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanStorageDiscountResponse>;
    /**
     *
     * @summary Get info for storage tariff
     * @param {PlanStorageApiPlanStorageListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageListV1(requestParameters: PlanStorageApiPlanStorageListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanStorageResponseDto>;
    /**
     *
     * @summary Get tariff for project
     * @param {PlanStorageApiPlanStorageTariffV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApiInterface
     */
    planStorageTariffV1(requestParameters: PlanStorageApiPlanStorageTariffV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanStorageForProject>;
}
/**
 * Request parameters for planStorageBuyV1 operation in PlanStorageApi.
 * @export
 * @interface PlanStorageApiPlanStorageBuyV1Request
 */
export interface PlanStorageApiPlanStorageBuyV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanStorageApiPlanStorageBuyV1
     */
    readonly language: PlanStorageBuyV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof PlanStorageApiPlanStorageBuyV1
     */
    readonly projectId: number;
    /**
     * Period
     * @type {'month' | 'year'}
     * @memberof PlanStorageApiPlanStorageBuyV1
     */
    readonly period: PlanStorageBuyV1PeriodEnum;
    /**
     * Storage plan id
     * @type {number}
     * @memberof PlanStorageApiPlanStorageBuyV1
     */
    readonly planStorageId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanStorageApiPlanStorageBuyV1
     */
    readonly v?: PlanStorageBuyV1VEnum;
    /**
     * Size
     * @type {number}
     * @memberof PlanStorageApiPlanStorageBuyV1
     */
    readonly size?: number;
}
/**
 * Request parameters for planStorageCancelV1 operation in PlanStorageApi.
 * @export
 * @interface PlanStorageApiPlanStorageCancelV1Request
 */
export interface PlanStorageApiPlanStorageCancelV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanStorageApiPlanStorageCancelV1
     */
    readonly language: PlanStorageCancelV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof PlanStorageApiPlanStorageCancelV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanStorageApiPlanStorageCancelV1
     */
    readonly v?: PlanStorageCancelV1VEnum;
}
/**
 * Request parameters for planStorageCheckV1 operation in PlanStorageApi.
 * @export
 * @interface PlanStorageApiPlanStorageCheckV1Request
 */
export interface PlanStorageApiPlanStorageCheckV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanStorageApiPlanStorageCheckV1
     */
    readonly language: PlanStorageCheckV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof PlanStorageApiPlanStorageCheckV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanStorageApiPlanStorageCheckV1
     */
    readonly v?: PlanStorageCheckV1VEnum;
}
/**
 * Request parameters for planStorageGetDiscountV1 operation in PlanStorageApi.
 * @export
 * @interface PlanStorageApiPlanStorageGetDiscountV1Request
 */
export interface PlanStorageApiPlanStorageGetDiscountV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanStorageApiPlanStorageGetDiscountV1
     */
    readonly language: PlanStorageGetDiscountV1LanguageEnum;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanStorageApiPlanStorageGetDiscountV1
     */
    readonly v?: PlanStorageGetDiscountV1VEnum;
}
/**
 * Request parameters for planStorageListV1 operation in PlanStorageApi.
 * @export
 * @interface PlanStorageApiPlanStorageListV1Request
 */
export interface PlanStorageApiPlanStorageListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanStorageApiPlanStorageListV1
     */
    readonly language: PlanStorageListV1LanguageEnum;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanStorageApiPlanStorageListV1
     */
    readonly v?: PlanStorageListV1VEnum;
}
/**
 * Request parameters for planStorageTariffV1 operation in PlanStorageApi.
 * @export
 * @interface PlanStorageApiPlanStorageTariffV1Request
 */
export interface PlanStorageApiPlanStorageTariffV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanStorageApiPlanStorageTariffV1
     */
    readonly language: PlanStorageTariffV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof PlanStorageApiPlanStorageTariffV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanStorageApiPlanStorageTariffV1
     */
    readonly v?: PlanStorageTariffV1VEnum;
}
/**
 * PlanStorageApi - object-oriented interface
 * @export
 * @class PlanStorageApi
 * @extends {BaseAPI}
 */
export declare class PlanStorageApi extends BaseAPI implements PlanStorageApiInterface {
    /**
     *
     * @summary Buy storage tariff
     * @param {PlanStorageApiPlanStorageBuyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    planStorageBuyV1(requestParameters: PlanStorageApiPlanStorageBuyV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Remove next tariff
     * @param {PlanStorageApiPlanStorageCancelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    planStorageCancelV1(requestParameters: PlanStorageApiPlanStorageCancelV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Check storage tariff before buy
     * @param {PlanStorageApiPlanStorageCheckV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    planStorageCheckV1(requestParameters: PlanStorageApiPlanStorageCheckV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanStorageCheckResponse, any>>;
    /**
     *
     * @summary Get discount of storage
     * @param {PlanStorageApiPlanStorageGetDiscountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    planStorageGetDiscountV1(requestParameters: PlanStorageApiPlanStorageGetDiscountV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanStorageDiscountResponse, any>>;
    /**
     *
     * @summary Get info for storage tariff
     * @param {PlanStorageApiPlanStorageListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    planStorageListV1(requestParameters: PlanStorageApiPlanStorageListV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanStorageResponseDto, any>>;
    /**
     *
     * @summary Get tariff for project
     * @param {PlanStorageApiPlanStorageTariffV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    planStorageTariffV1(requestParameters: PlanStorageApiPlanStorageTariffV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanStorageForProject, any>>;
}
/**
 * @export
 */
export declare const PlanStorageBuyV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanStorageBuyV1LanguageEnum = typeof PlanStorageBuyV1LanguageEnum[keyof typeof PlanStorageBuyV1LanguageEnum];
/**
 * @export
 */
export declare const PlanStorageBuyV1PeriodEnum: {
    readonly Month: "month";
    readonly Year: "year";
};
export type PlanStorageBuyV1PeriodEnum = typeof PlanStorageBuyV1PeriodEnum[keyof typeof PlanStorageBuyV1PeriodEnum];
/**
 * @export
 */
export declare const PlanStorageBuyV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanStorageBuyV1VEnum = typeof PlanStorageBuyV1VEnum[keyof typeof PlanStorageBuyV1VEnum];
/**
 * @export
 */
export declare const PlanStorageCancelV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanStorageCancelV1LanguageEnum = typeof PlanStorageCancelV1LanguageEnum[keyof typeof PlanStorageCancelV1LanguageEnum];
/**
 * @export
 */
export declare const PlanStorageCancelV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanStorageCancelV1VEnum = typeof PlanStorageCancelV1VEnum[keyof typeof PlanStorageCancelV1VEnum];
/**
 * @export
 */
export declare const PlanStorageCheckV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanStorageCheckV1LanguageEnum = typeof PlanStorageCheckV1LanguageEnum[keyof typeof PlanStorageCheckV1LanguageEnum];
/**
 * @export
 */
export declare const PlanStorageCheckV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanStorageCheckV1VEnum = typeof PlanStorageCheckV1VEnum[keyof typeof PlanStorageCheckV1VEnum];
/**
 * @export
 */
export declare const PlanStorageGetDiscountV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanStorageGetDiscountV1LanguageEnum = typeof PlanStorageGetDiscountV1LanguageEnum[keyof typeof PlanStorageGetDiscountV1LanguageEnum];
/**
 * @export
 */
export declare const PlanStorageGetDiscountV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanStorageGetDiscountV1VEnum = typeof PlanStorageGetDiscountV1VEnum[keyof typeof PlanStorageGetDiscountV1VEnum];
/**
 * @export
 */
export declare const PlanStorageListV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanStorageListV1LanguageEnum = typeof PlanStorageListV1LanguageEnum[keyof typeof PlanStorageListV1LanguageEnum];
/**
 * @export
 */
export declare const PlanStorageListV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanStorageListV1VEnum = typeof PlanStorageListV1VEnum[keyof typeof PlanStorageListV1VEnum];
/**
 * @export
 */
export declare const PlanStorageTariffV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanStorageTariffV1LanguageEnum = typeof PlanStorageTariffV1LanguageEnum[keyof typeof PlanStorageTariffV1LanguageEnum];
/**
 * @export
 */
export declare const PlanStorageTariffV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanStorageTariffV1VEnum = typeof PlanStorageTariffV1VEnum[keyof typeof PlanStorageTariffV1VEnum];
//# sourceMappingURL=plan-storage-api.d.ts.map