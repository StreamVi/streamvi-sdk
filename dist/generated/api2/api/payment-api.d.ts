/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { create1Request } from '../models';
import type { PaymentCreateResponse } from '../models';
import type { PaymentStatusResponse } from '../models';
/**
 * PaymentApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create payment item for pay system
     * @param {create1VEnum} v Version
     * @param {create1LanguageEnum} language Current language
     * @param {create1Request} create1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create1: (v: create1VEnum, language: create1LanguageEnum, create1Request: create1Request, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {getStatus1VEnum} v Version
     * @param {getStatus1LanguageEnum} language Current language
     * @param {number} payId Pay order id
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatus1: (v: getStatus1VEnum, language: getStatus1LanguageEnum, payId: number, projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {list1VEnum} v Version
     * @param {list1LanguageEnum} language Current language
     * @param {number} [pageSize] Number of results
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1: (v: list1VEnum, language: list1LanguageEnum, pageSize?: number, page?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PaymentApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create payment item for pay system
     * @param {create1VEnum} v Version
     * @param {create1LanguageEnum} language Current language
     * @param {create1Request} create1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create1(v: create1VEnum, language: create1LanguageEnum, create1Request: create1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentCreateResponse>>;
    /**
     *
     * @param {getStatus1VEnum} v Version
     * @param {getStatus1LanguageEnum} language Current language
     * @param {number} payId Pay order id
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatus1(v: getStatus1VEnum, language: getStatus1LanguageEnum, payId: number, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentStatusResponse>>;
    /**
     *
     * @param {list1VEnum} v Version
     * @param {list1LanguageEnum} language Current language
     * @param {number} [pageSize] Number of results
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(v: list1VEnum, language: list1LanguageEnum, pageSize?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * PaymentApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create payment item for pay system
     * @param {create1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create1(requestParameters: create1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaymentCreateResponse>;
    /**
     *
     * @param {getStatus1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatus1(requestParameters: getStatus1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaymentStatusResponse>;
    /**
     *
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for create1 operation in PaymentApi.
 * @export
 * @interface create1Request
 */
export interface create1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof create1
     */
    readonly v?: create1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof create1
     */
    readonly language: create1LanguageEnum;
    /**
     *
     * @type {create1Request}
     * @memberof create1
     */
    readonly create1Request: create1Request;
}
/**
 * Request parameters for getStatus1 operation in PaymentApi.
 * @export
 * @interface getStatus1Request
 */
export interface getStatus1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getStatus1
     */
    readonly v?: getStatus1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getStatus1
     */
    readonly language: getStatus1LanguageEnum;
    /**
     * Pay order id
     * @type {number}
     * @memberof getStatus1
     */
    readonly payId: number;
    /**
     * Project id
     * @type {number}
     * @memberof getStatus1
     */
    readonly projectId: number;
}
/**
 * Request parameters for list1 operation in PaymentApi.
 * @export
 * @interface list1Request
 */
export interface list1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof list1
     */
    readonly v?: list1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof list1
     */
    readonly language: list1LanguageEnum;
    /**
     * Number of results
     * @type {number}
     * @memberof list1
     */
    readonly pageSize?: number;
    /**
     * Page number
     * @type {number}
     * @memberof list1
     */
    readonly page?: number;
}
/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
export declare class PaymentApi extends BaseAPI {
    /**
     *
     * @summary Create payment item for pay system
     * @param {create1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    create1(requestParameters: create1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaymentCreateResponse, any>>;
    /**
     *
     * @param {getStatus1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    getStatus1(requestParameters: getStatus1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaymentStatusResponse, any>>;
    /**
     *
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum create1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum create1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getStatus1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getStatus1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum list1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum list1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=payment-api.d.ts.map