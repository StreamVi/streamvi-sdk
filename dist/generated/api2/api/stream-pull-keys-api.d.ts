/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { CheckPullKeyResponse } from '../models';
import type { CreatePullKeyRequest } from '../models';
import type { CreatePullKeyResponse } from '../models';
import type { PullKeyListResponse } from '../models';
import type { SuccessResponse } from '../models';
import type { UpdatePullKeyRequest } from '../models';
/**
 * StreamPullKeysApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Check key
     * @param {check1VEnum} v Version
     * @param {check1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {string} key Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    check1: (v: check1VEnum, language: check1LanguageEnum, projectId: number, key: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create key
     * @param {CreatePullKeyRequest} createPullKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create1: (createPullKeyRequest: CreatePullKeyRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List keys
     * @param {get1VEnum} v Version
     * @param {get1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get1: (v: get1VEnum, language: get1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete key
     * @param {remove1VEnum} v Version
     * @param {remove1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {string} key Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    remove1: (v: remove1VEnum, language: remove1LanguageEnum, projectId: number, key: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update key
     * @param {UpdatePullKeyRequest} updatePullKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update1: (updatePullKeyRequest: UpdatePullKeyRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StreamPullKeysApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Check key
     * @param {check1VEnum} v Version
     * @param {check1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {string} key Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    check1(v: check1VEnum, language: check1LanguageEnum, projectId: number, key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckPullKeyResponse>>;
    /**
     *
     * @summary Create key
     * @param {CreatePullKeyRequest} createPullKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create1(createPullKeyRequest: CreatePullKeyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePullKeyResponse>>;
    /**
     *
     * @summary List keys
     * @param {get1VEnum} v Version
     * @param {get1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get1(v: get1VEnum, language: get1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PullKeyListResponse>>;
    /**
     *
     * @summary Delete key
     * @param {remove1VEnum} v Version
     * @param {remove1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {string} key Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    remove1(v: remove1VEnum, language: remove1LanguageEnum, projectId: number, key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Update key
     * @param {UpdatePullKeyRequest} updatePullKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update1(updatePullKeyRequest: UpdatePullKeyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
};
/**
 * StreamPullKeysApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Check key
     * @param {check1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    check1(requestParameters: check1Request, options?: RawAxiosRequestConfig): AxiosPromise<CheckPullKeyResponse>;
    /**
     *
     * @summary Create key
     * @param {create1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create1(requestParameters: create1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreatePullKeyResponse>;
    /**
     *
     * @summary List keys
     * @param {get1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get1(requestParameters: get1Request, options?: RawAxiosRequestConfig): AxiosPromise<PullKeyListResponse>;
    /**
     *
     * @summary Delete key
     * @param {remove1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    remove1(requestParameters: remove1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Update key
     * @param {update1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update1(requestParameters: update1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
};
/**
 * Request parameters for check1 operation in StreamPullKeysApi.
 * @export
 * @interface check1Request
 */
export interface check1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof check1
     */
    readonly v?: check1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof check1
     */
    readonly language: check1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof check1
     */
    readonly projectId: number;
    /**
     * Key
     * @type {string}
     * @memberof check1
     */
    readonly key: string;
}
/**
 * Request parameters for create1 operation in StreamPullKeysApi.
 * @export
 * @interface create1Request
 */
export interface create1Request {
    /**
     *
     * @type {CreatePullKeyRequest}
     * @memberof create1
     */
    readonly createPullKeyRequest: CreatePullKeyRequest;
}
/**
 * Request parameters for get1 operation in StreamPullKeysApi.
 * @export
 * @interface get1Request
 */
export interface get1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof get1
     */
    readonly v?: get1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof get1
     */
    readonly language: get1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof get1
     */
    readonly projectId: number;
}
/**
 * Request parameters for remove1 operation in StreamPullKeysApi.
 * @export
 * @interface remove1Request
 */
export interface remove1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof remove1
     */
    readonly v?: remove1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof remove1
     */
    readonly language: remove1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof remove1
     */
    readonly projectId: number;
    /**
     * Key
     * @type {string}
     * @memberof remove1
     */
    readonly key: string;
}
/**
 * Request parameters for update1 operation in StreamPullKeysApi.
 * @export
 * @interface update1Request
 */
export interface update1Request {
    /**
     *
     * @type {UpdatePullKeyRequest}
     * @memberof update1
     */
    readonly updatePullKeyRequest: UpdatePullKeyRequest;
}
/**
 * StreamPullKeysApi - object-oriented interface
 * @export
 * @class StreamPullKeysApi
 * @extends {BaseAPI}
 */
export declare class StreamPullKeysApi extends BaseAPI {
    /**
     *
     * @summary Check key
     * @param {check1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    check1(requestParameters: check1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CheckPullKeyResponse, any>>;
    /**
     *
     * @summary Create key
     * @param {create1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    create1(requestParameters: create1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreatePullKeyResponse, any>>;
    /**
     *
     * @summary List keys
     * @param {get1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    get1(requestParameters: get1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PullKeyListResponse, any>>;
    /**
     *
     * @summary Delete key
     * @param {remove1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    remove1(requestParameters: remove1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Update key
     * @param {update1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    update1(requestParameters: update1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum check1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum check1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum get1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum get1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum remove1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum remove1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=stream-pull-keys-api.d.ts.map