/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { GetPaySettingResponseV3 } from '../models';
import type { PayCheckCountryResponse } from '../models';
import type { PaySettingBodyDto } from '../models';
/**
 * PaySettingApi - axios parameter creator
 * @export
 */
export declare const PaySettingApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Check country after update user
     * @param {PaySettingCheckCountryV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} countryId country id
     * @param {PaySettingCheckCountryV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paySettingCheckCountryV1: (language: PaySettingCheckCountryV1LanguageEnum, projectId: number, countryId: number, v?: PaySettingCheckCountryV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get pay settings for profile v3
     * @param {PaySettingGetSettingV3LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PaySettingGetSettingV3VEnum} [v] Version (automatically defaults to 3 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paySettingGetSettingV3: (language: PaySettingGetSettingV3LanguageEnum, projectId: number, v?: PaySettingGetSettingV3VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set pay settings for profile
     * @param {PaySettingBodyDto} paySettingBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paySettingSetSettingV1: (paySettingBodyDto: PaySettingBodyDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PaySettingApi - functional programming interface
 * @export
 */
export declare const PaySettingApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Check country after update user
     * @param {PaySettingCheckCountryV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} countryId country id
     * @param {PaySettingCheckCountryV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paySettingCheckCountryV1(language: PaySettingCheckCountryV1LanguageEnum, projectId: number, countryId: number, v?: PaySettingCheckCountryV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayCheckCountryResponse>>;
    /**
     *
     * @summary Get pay settings for profile v3
     * @param {PaySettingGetSettingV3LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PaySettingGetSettingV3VEnum} [v] Version (automatically defaults to 3 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paySettingGetSettingV3(language: PaySettingGetSettingV3LanguageEnum, projectId: number, v?: PaySettingGetSettingV3VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPaySettingResponseV3>>;
    /**
     *
     * @summary Set pay settings for profile
     * @param {PaySettingBodyDto} paySettingBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paySettingSetSettingV1(paySettingBodyDto: PaySettingBodyDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * PaySettingApi - factory interface
 * @export
 */
export declare const PaySettingApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Check country after update user
     * @param {PaySettingApiPaySettingCheckCountryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paySettingCheckCountryV1(requestParameters: PaySettingApiPaySettingCheckCountryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PayCheckCountryResponse>;
    /**
     *
     * @summary Get pay settings for profile v3
     * @param {PaySettingApiPaySettingGetSettingV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paySettingGetSettingV3(requestParameters: PaySettingApiPaySettingGetSettingV3Request, options?: RawAxiosRequestConfig): AxiosPromise<GetPaySettingResponseV3>;
    /**
     *
     * @summary Set pay settings for profile
     * @param {PaySettingApiPaySettingSetSettingV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paySettingSetSettingV1(requestParameters: PaySettingApiPaySettingSetSettingV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * PaySettingApi - interface
 * @export
 * @interface PaySettingApi
 */
export interface PaySettingApiInterface {
    /**
     *
     * @summary Check country after update user
     * @param {PaySettingApiPaySettingCheckCountryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApiInterface
     */
    paySettingCheckCountryV1(requestParameters: PaySettingApiPaySettingCheckCountryV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PayCheckCountryResponse>;
    /**
     *
     * @summary Get pay settings for profile v3
     * @param {PaySettingApiPaySettingGetSettingV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApiInterface
     */
    paySettingGetSettingV3(requestParameters: PaySettingApiPaySettingGetSettingV3Request, options?: RawAxiosRequestConfig): AxiosPromise<GetPaySettingResponseV3>;
    /**
     *
     * @summary Set pay settings for profile
     * @param {PaySettingApiPaySettingSetSettingV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApiInterface
     */
    paySettingSetSettingV1(requestParameters: PaySettingApiPaySettingSetSettingV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
}
/**
 * Request parameters for paySettingCheckCountryV1 operation in PaySettingApi.
 * @export
 * @interface PaySettingApiPaySettingCheckCountryV1Request
 */
export interface PaySettingApiPaySettingCheckCountryV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PaySettingApiPaySettingCheckCountryV1
     */
    readonly language: PaySettingCheckCountryV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof PaySettingApiPaySettingCheckCountryV1
     */
    readonly projectId: number;
    /**
     * country id
     * @type {number}
     * @memberof PaySettingApiPaySettingCheckCountryV1
     */
    readonly countryId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PaySettingApiPaySettingCheckCountryV1
     */
    readonly v?: PaySettingCheckCountryV1VEnum;
}
/**
 * Request parameters for paySettingGetSettingV3 operation in PaySettingApi.
 * @export
 * @interface PaySettingApiPaySettingGetSettingV3Request
 */
export interface PaySettingApiPaySettingGetSettingV3Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PaySettingApiPaySettingGetSettingV3
     */
    readonly language: PaySettingGetSettingV3LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof PaySettingApiPaySettingGetSettingV3
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 3 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PaySettingApiPaySettingGetSettingV3
     */
    readonly v?: PaySettingGetSettingV3VEnum;
}
/**
 * Request parameters for paySettingSetSettingV1 operation in PaySettingApi.
 * @export
 * @interface PaySettingApiPaySettingSetSettingV1Request
 */
export interface PaySettingApiPaySettingSetSettingV1Request {
    /**
     *
     * @type {PaySettingBodyDto}
     * @memberof PaySettingApiPaySettingSetSettingV1
     */
    readonly paySettingBodyDto: PaySettingBodyDto;
}
/**
 * PaySettingApi - object-oriented interface
 * @export
 * @class PaySettingApi
 * @extends {BaseAPI}
 */
export declare class PaySettingApi extends BaseAPI implements PaySettingApiInterface {
    /**
     *
     * @summary Check country after update user
     * @param {PaySettingApiPaySettingCheckCountryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    paySettingCheckCountryV1(requestParameters: PaySettingApiPaySettingCheckCountryV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PayCheckCountryResponse, any>>;
    /**
     *
     * @summary Get pay settings for profile v3
     * @param {PaySettingApiPaySettingGetSettingV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    paySettingGetSettingV3(requestParameters: PaySettingApiPaySettingGetSettingV3Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetPaySettingResponseV3, any>>;
    /**
     *
     * @summary Set pay settings for profile
     * @param {PaySettingApiPaySettingSetSettingV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    paySettingSetSettingV1(requestParameters: PaySettingApiPaySettingSetSettingV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * @export
 */
export declare const PaySettingCheckCountryV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PaySettingCheckCountryV1LanguageEnum = typeof PaySettingCheckCountryV1LanguageEnum[keyof typeof PaySettingCheckCountryV1LanguageEnum];
/**
 * @export
 */
export declare const PaySettingCheckCountryV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PaySettingCheckCountryV1VEnum = typeof PaySettingCheckCountryV1VEnum[keyof typeof PaySettingCheckCountryV1VEnum];
/**
 * @export
 */
export declare const PaySettingGetSettingV3LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PaySettingGetSettingV3LanguageEnum = typeof PaySettingGetSettingV3LanguageEnum[keyof typeof PaySettingGetSettingV3LanguageEnum];
/**
 * @export
 */
export declare const PaySettingGetSettingV3VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PaySettingGetSettingV3VEnum = typeof PaySettingGetSettingV3VEnum[keyof typeof PaySettingGetSettingV3VEnum];
//# sourceMappingURL=pay-setting-api.d.ts.map