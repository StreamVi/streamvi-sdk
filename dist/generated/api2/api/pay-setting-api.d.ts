/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { GetPaySettingResponseV3 } from '../models';
import type { PayCheckCountryResponse } from '../models';
import type { PaySettingBodyDto } from '../models';
/**
 * PaySettingApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Check country after update user
     * @param {checkCountry1VEnum} v Version
     * @param {checkCountry1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} countryId country id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkCountry1: (v: checkCountry1VEnum, language: checkCountry1LanguageEnum, projectId: number, countryId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get pay settings for profile v3
     * @param {getSettingV31VEnum} v Version
     * @param {getSettingV31LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSettingV31: (v: getSettingV31VEnum, language: getSettingV31LanguageEnum, projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set pay settings for profile
     * @param {PaySettingBodyDto} paySettingBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setSetting1: (paySettingBodyDto: PaySettingBodyDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PaySettingApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Check country after update user
     * @param {checkCountry1VEnum} v Version
     * @param {checkCountry1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} countryId country id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkCountry1(v: checkCountry1VEnum, language: checkCountry1LanguageEnum, projectId: number, countryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayCheckCountryResponse>>;
    /**
     *
     * @summary Get pay settings for profile v3
     * @param {getSettingV31VEnum} v Version
     * @param {getSettingV31LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSettingV31(v: getSettingV31VEnum, language: getSettingV31LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPaySettingResponseV3>>;
    /**
     *
     * @summary Set pay settings for profile
     * @param {PaySettingBodyDto} paySettingBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setSetting1(paySettingBodyDto: PaySettingBodyDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * PaySettingApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Check country after update user
     * @param {checkCountry1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkCountry1(requestParameters: checkCountry1Request, options?: RawAxiosRequestConfig): AxiosPromise<PayCheckCountryResponse>;
    /**
     *
     * @summary Get pay settings for profile v3
     * @param {getSettingV31Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSettingV31(requestParameters: getSettingV31Request, options?: RawAxiosRequestConfig): AxiosPromise<GetPaySettingResponseV3>;
    /**
     *
     * @summary Set pay settings for profile
     * @param {setSetting1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setSetting1(requestParameters: setSetting1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for checkCountry1 operation in PaySettingApi.
 * @export
 * @interface checkCountry1Request
 */
export interface checkCountry1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof checkCountry1
     */
    readonly v?: checkCountry1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof checkCountry1
     */
    readonly language: checkCountry1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof checkCountry1
     */
    readonly projectId: number;
    /**
     * country id
     * @type {number}
     * @memberof checkCountry1
     */
    readonly countryId: number;
}
/**
 * Request parameters for getSettingV31 operation in PaySettingApi.
 * @export
 * @interface getSettingV31Request
 */
export interface getSettingV31Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getSettingV31
     */
    readonly v?: getSettingV31VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getSettingV31
     */
    readonly language: getSettingV31LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof getSettingV31
     */
    readonly projectId: number;
}
/**
 * Request parameters for setSetting1 operation in PaySettingApi.
 * @export
 * @interface setSetting1Request
 */
export interface setSetting1Request {
    /**
     *
     * @type {PaySettingBodyDto}
     * @memberof setSetting1
     */
    readonly paySettingBodyDto: PaySettingBodyDto;
}
/**
 * PaySettingApi - object-oriented interface
 * @export
 * @class PaySettingApi
 * @extends {BaseAPI}
 */
export declare class PaySettingApi extends BaseAPI {
    /**
     *
     * @summary Check country after update user
     * @param {checkCountry1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    checkCountry1(requestParameters: checkCountry1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PayCheckCountryResponse, any>>;
    /**
     *
     * @summary Get pay settings for profile v3
     * @param {getSettingV31Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    getSettingV31(requestParameters: getSettingV31Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetPaySettingResponseV3, any>>;
    /**
     *
     * @summary Set pay settings for profile
     * @param {setSetting1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    setSetting1(requestParameters: setSetting1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum checkCountry1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum checkCountry1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getSettingV31VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getSettingV31LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=pay-setting-api.d.ts.map