/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { SiteAuthCentrifugeResponse } from '../models';
/**
 * CentrifugeApi - axios parameter creator
 * @export
 */
export declare const CentrifugeApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Auth centrifuge
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    centrifugeAuthV2: (projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor
     * @summary Auth token for project
     * @param {CentrifugeProjectV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {CentrifugeProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    centrifugeProjectV1: (language: CentrifugeProjectV1LanguageEnum, projectId: number, v?: CentrifugeProjectV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min
     * @summary Auth token for broadcast
     * @param {number} broadcastId
     * @param {GetTokenBroadcastV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {GetTokenBroadcastV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenBroadcastV1: (broadcastId: number, language: GetTokenBroadcastV1LanguageEnum, projectId: number, v?: GetTokenBroadcastV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CentrifugeApi - functional programming interface
 * @export
 */
export declare const CentrifugeApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Auth centrifuge
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    centrifugeAuthV2(projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteAuthCentrifugeResponse>>;
    /**
     *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor
     * @summary Auth token for project
     * @param {CentrifugeProjectV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {CentrifugeProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    centrifugeProjectV1(language: CentrifugeProjectV1LanguageEnum, projectId: number, v?: CentrifugeProjectV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteAuthCentrifugeResponse>>;
    /**
     *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min
     * @summary Auth token for broadcast
     * @param {number} broadcastId
     * @param {GetTokenBroadcastV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {GetTokenBroadcastV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenBroadcastV1(broadcastId: number, language: GetTokenBroadcastV1LanguageEnum, projectId: number, v?: GetTokenBroadcastV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteAuthCentrifugeResponse>>;
};
/**
 * CentrifugeApi - factory interface
 * @export
 */
export declare const CentrifugeApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Auth centrifuge
     * @param {CentrifugeApiCentrifugeAuthV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    centrifugeAuthV2(requestParameters: CentrifugeApiCentrifugeAuthV2Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteAuthCentrifugeResponse>;
    /**
     *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor
     * @summary Auth token for project
     * @param {CentrifugeApiCentrifugeProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    centrifugeProjectV1(requestParameters: CentrifugeApiCentrifugeProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteAuthCentrifugeResponse>;
    /**
     *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min
     * @summary Auth token for broadcast
     * @param {CentrifugeApiGetTokenBroadcastV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenBroadcastV1(requestParameters: CentrifugeApiGetTokenBroadcastV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteAuthCentrifugeResponse>;
};
/**
 * CentrifugeApi - interface
 * @export
 * @interface CentrifugeApi
 */
export interface CentrifugeApiInterface {
    /**
     *
     * @summary Auth centrifuge
     * @param {CentrifugeApiCentrifugeAuthV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApiInterface
     */
    centrifugeAuthV2(requestParameters: CentrifugeApiCentrifugeAuthV2Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteAuthCentrifugeResponse>;
    /**
     *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor
     * @summary Auth token for project
     * @param {CentrifugeApiCentrifugeProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApiInterface
     */
    centrifugeProjectV1(requestParameters: CentrifugeApiCentrifugeProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteAuthCentrifugeResponse>;
    /**
     *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min
     * @summary Auth token for broadcast
     * @param {CentrifugeApiGetTokenBroadcastV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApiInterface
     */
    getTokenBroadcastV1(requestParameters: CentrifugeApiGetTokenBroadcastV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteAuthCentrifugeResponse>;
}
/**
 * Request parameters for centrifugeAuthV2 operation in CentrifugeApi.
 * @export
 * @interface CentrifugeApiCentrifugeAuthV2Request
 */
export interface CentrifugeApiCentrifugeAuthV2Request {
    /**
     * Project id
     * @type {number}
     * @memberof CentrifugeApiCentrifugeAuthV2
     */
    readonly projectId: number;
}
/**
 * Request parameters for centrifugeProjectV1 operation in CentrifugeApi.
 * @export
 * @interface CentrifugeApiCentrifugeProjectV1Request
 */
export interface CentrifugeApiCentrifugeProjectV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof CentrifugeApiCentrifugeProjectV1
     */
    readonly language: CentrifugeProjectV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof CentrifugeApiCentrifugeProjectV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof CentrifugeApiCentrifugeProjectV1
     */
    readonly v?: CentrifugeProjectV1VEnum;
}
/**
 * Request parameters for getTokenBroadcastV1 operation in CentrifugeApi.
 * @export
 * @interface CentrifugeApiGetTokenBroadcastV1Request
 */
export interface CentrifugeApiGetTokenBroadcastV1Request {
    /**
     *
     * @type {number}
     * @memberof CentrifugeApiGetTokenBroadcastV1
     */
    readonly broadcastId: number;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof CentrifugeApiGetTokenBroadcastV1
     */
    readonly language: GetTokenBroadcastV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof CentrifugeApiGetTokenBroadcastV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof CentrifugeApiGetTokenBroadcastV1
     */
    readonly v?: GetTokenBroadcastV1VEnum;
}
/**
 * CentrifugeApi - object-oriented interface
 * @export
 * @class CentrifugeApi
 * @extends {BaseAPI}
 */
export declare class CentrifugeApi extends BaseAPI implements CentrifugeApiInterface {
    /**
     *
     * @summary Auth centrifuge
     * @param {CentrifugeApiCentrifugeAuthV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApi
     */
    centrifugeAuthV2(requestParameters: CentrifugeApiCentrifugeAuthV2Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteAuthCentrifugeResponse, any>>;
    /**
     *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor
     * @summary Auth token for project
     * @param {CentrifugeApiCentrifugeProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApi
     */
    centrifugeProjectV1(requestParameters: CentrifugeApiCentrifugeProjectV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteAuthCentrifugeResponse, any>>;
    /**
     *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min
     * @summary Auth token for broadcast
     * @param {CentrifugeApiGetTokenBroadcastV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApi
     */
    getTokenBroadcastV1(requestParameters: CentrifugeApiGetTokenBroadcastV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteAuthCentrifugeResponse, any>>;
}
/**
 * @export
 */
export declare const CentrifugeProjectV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type CentrifugeProjectV1LanguageEnum = typeof CentrifugeProjectV1LanguageEnum[keyof typeof CentrifugeProjectV1LanguageEnum];
/**
 * @export
 */
export declare const CentrifugeProjectV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type CentrifugeProjectV1VEnum = typeof CentrifugeProjectV1VEnum[keyof typeof CentrifugeProjectV1VEnum];
/**
 * @export
 */
export declare const GetTokenBroadcastV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type GetTokenBroadcastV1LanguageEnum = typeof GetTokenBroadcastV1LanguageEnum[keyof typeof GetTokenBroadcastV1LanguageEnum];
/**
 * @export
 */
export declare const GetTokenBroadcastV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type GetTokenBroadcastV1VEnum = typeof GetTokenBroadcastV1VEnum[keyof typeof GetTokenBroadcastV1VEnum];
//# sourceMappingURL=centrifuge-api.d.ts.map