/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { SiteAuthCentrifugeResponse } from '../models';
/**
 * CentrifugeApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min
     * @summary Auth token for broadcast
     * @param {number} broadcastId
     * @param {GetTokenBroadcastVEnum} v Version
     * @param {GetTokenBroadcastLanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenBroadcast: (broadcastId: number, v: GetTokenBroadcastVEnum, language: GetTokenBroadcastLanguageEnum, projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Auth centrifuge
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authV21: (projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor
     * @summary Auth token for project
     * @param {project1VEnum} v Version
     * @param {project1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    project1: (v: project1VEnum, language: project1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CentrifugeApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min
     * @summary Auth token for broadcast
     * @param {number} broadcastId
     * @param {GetTokenBroadcastVEnum} v Version
     * @param {GetTokenBroadcastLanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenBroadcast(broadcastId: number, v: GetTokenBroadcastVEnum, language: GetTokenBroadcastLanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteAuthCentrifugeResponse>>;
    /**
     *
     * @summary Auth centrifuge
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authV21(projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteAuthCentrifugeResponse>>;
    /**
     *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor
     * @summary Auth token for project
     * @param {project1VEnum} v Version
     * @param {project1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    project1(v: project1VEnum, language: project1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteAuthCentrifugeResponse>>;
};
/**
 * CentrifugeApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min
     * @summary Auth token for broadcast
     * @param {getTokenBroadcastRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenBroadcast(requestParameters: getTokenBroadcastRequest, options?: RawAxiosRequestConfig): AxiosPromise<SiteAuthCentrifugeResponse>;
    /**
     *
     * @summary Auth centrifuge
     * @param {authV21Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authV21(requestParameters: authV21Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteAuthCentrifugeResponse>;
    /**
     *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor
     * @summary Auth token for project
     * @param {project1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    project1(requestParameters: project1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteAuthCentrifugeResponse>;
};
/**
 * Request parameters for getTokenBroadcast operation in CentrifugeApi.
 * @export
 * @interface getTokenBroadcastRequest
 */
export interface getTokenBroadcastRequest {
    /**
     *
     * @type {number}
     * @memberof getTokenBroadcast
     */
    readonly broadcastId: number;
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getTokenBroadcast
     */
    readonly v: GetTokenBroadcastVEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getTokenBroadcast
     */
    readonly language: GetTokenBroadcastLanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof getTokenBroadcast
     */
    readonly projectId: number;
}
/**
 * Request parameters for authV21 operation in CentrifugeApi.
 * @export
 * @interface authV21Request
 */
export interface authV21Request {
    /**
     * Project id
     * @type {number}
     * @memberof authV21
     */
    readonly projectId: number;
}
/**
 * Request parameters for project1 operation in CentrifugeApi.
 * @export
 * @interface project1Request
 */
export interface project1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof project1
     */
    readonly v?: project1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof project1
     */
    readonly language: project1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof project1
     */
    readonly projectId: number;
}
/**
 * CentrifugeApi - object-oriented interface
 * @export
 * @class CentrifugeApi
 * @extends {BaseAPI}
 */
export declare class CentrifugeApi extends BaseAPI {
    /**
     *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min
     * @summary Auth token for broadcast
     * @param {getTokenBroadcastRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApi
     */
    getTokenBroadcast(requestParameters: getTokenBroadcastRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteAuthCentrifugeResponse, any>>;
    /**
     *
     * @summary Auth centrifuge
     * @param {authV21Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApi
     */
    authV21(requestParameters: authV21Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteAuthCentrifugeResponse, any>>;
    /**
     *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor
     * @summary Auth token for project
     * @param {project1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApi
     */
    project1(requestParameters: project1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteAuthCentrifugeResponse, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum GetTokenBroadcastVEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum GetTokenBroadcastLanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum project1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum project1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=centrifuge-api.d.ts.map