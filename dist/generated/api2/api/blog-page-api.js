"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlogPageListV1VEnum = exports.BlogPageListV1LanguageEnum = exports.BlogPageGetV1VEnum = exports.BlogPageGetV1LanguageEnum = exports.BlogPageApi = exports.BlogPageApiFactory = exports.BlogPageApiFp = exports.BlogPageApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * BlogPageApi - axios parameter creator
 * @export
 */
const BlogPageApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get blog page
         * @param {BlogPageGetV1LanguageEnum} language Current language
         * @param {string} url Url of page
         * @param {BlogPageGetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogPageGetV1: async (language, url, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('blogPageGetV1', 'language', language);
            // verify required parameter 'url' is not null or undefined
            (0, common_1.assertParamExists)('blogPageGetV1', 'url', url);
            const localVarPath = `/method/blog/page/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get list of blog pages
         * @param {BlogPageListV1LanguageEnum} language Current language
         * @param {BlogPageListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {string} [s] String for search
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogPageListV1: async (language, v, s, limit, offset, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('blogPageListV1', 'language', language);
            const localVarPath = `/method/blog/page/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (s !== undefined) {
                localVarQueryParameter['s'] = s;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.BlogPageApiAxiosParamCreator = BlogPageApiAxiosParamCreator;
/**
 * BlogPageApi - functional programming interface
 * @export
 */
const BlogPageApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.BlogPageApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get blog page
         * @param {BlogPageGetV1LanguageEnum} language Current language
         * @param {string} url Url of page
         * @param {BlogPageGetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogPageGetV1(language, url, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogPageGetV1(language, url, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BlogPageApi.blogPageGetV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get list of blog pages
         * @param {BlogPageListV1LanguageEnum} language Current language
         * @param {BlogPageListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {string} [s] String for search
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blogPageListV1(language, v, s, limit, offset, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.blogPageListV1(language, v, s, limit, offset, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BlogPageApi.blogPageListV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.BlogPageApiFp = BlogPageApiFp;
/**
 * BlogPageApi - factory interface
 * @export
 */
const BlogPageApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.BlogPageApiFp)(configuration);
    return {
        /**
         *
         * @summary Get blog page
         * @param {BlogPageApiBlogPageGetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogPageGetV1(requestParameters, options) {
            return localVarFp.blogPageGetV1(requestParameters.language, requestParameters.url, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get list of blog pages
         * @param {BlogPageApiBlogPageListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blogPageListV1(requestParameters, options) {
            return localVarFp.blogPageListV1(requestParameters.language, requestParameters.v, requestParameters.s, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
    };
};
exports.BlogPageApiFactory = BlogPageApiFactory;
/**
 * BlogPageApi - object-oriented interface
 * @export
 * @class BlogPageApi
 * @extends {BaseAPI}
 */
class BlogPageApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get blog page
     * @param {BlogPageApiBlogPageGetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPageApi
     */
    blogPageGetV1(requestParameters, options) {
        return (0, exports.BlogPageApiFp)(this.configuration).blogPageGetV1(requestParameters.language, requestParameters.url, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get list of blog pages
     * @param {BlogPageApiBlogPageListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPageApi
     */
    blogPageListV1(requestParameters, options) {
        return (0, exports.BlogPageApiFp)(this.configuration).blogPageListV1(requestParameters.language, requestParameters.v, requestParameters.s, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.BlogPageApi = BlogPageApi;
/**
 * @export
 */
exports.BlogPageGetV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.BlogPageGetV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.BlogPageListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.BlogPageListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
