/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { MethodSetStatusChannelRequest } from '../models';
import type { SiteGetShortChannelResponse } from '../models';
import type { SiteSearchChannelResponse } from '../models';
import type { SuccessResponse } from '../models';
/**
 * ChannelApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Search channel list
     * @param {searchVEnum} v Version
     * @param {searchLanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {searchTypeEnum} [type]
     * @param {string} [platform] platform type
     * @param {string} [name] name
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search: (v: searchVEnum, language: searchLanguageEnum, projectId: number, type?: searchTypeEnum, platform?: string, name?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get live status
     * @param {MethodSetStatusChannelRequest} methodSetStatusChannelRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setStatus: (methodSetStatusChannelRequest: MethodSetStatusChannelRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Minimal channel list
     * @param {shortChannelList1VEnum} v Version
     * @param {shortChannelList1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shortChannelList1: (v: shortChannelList1VEnum, language: shortChannelList1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ChannelApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Search channel list
     * @param {searchVEnum} v Version
     * @param {searchLanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {searchTypeEnum} [type]
     * @param {string} [platform] platform type
     * @param {string} [name] name
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search(v: searchVEnum, language: searchLanguageEnum, projectId: number, type?: searchTypeEnum, platform?: string, name?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteSearchChannelResponse>>;
    /**
     *
     * @summary Get live status
     * @param {MethodSetStatusChannelRequest} methodSetStatusChannelRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setStatus(methodSetStatusChannelRequest: MethodSetStatusChannelRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Minimal channel list
     * @param {shortChannelList1VEnum} v Version
     * @param {shortChannelList1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shortChannelList1(v: shortChannelList1VEnum, language: shortChannelList1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteGetShortChannelResponse>>;
};
/**
 * ChannelApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Search channel list
     * @param {searchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search(requestParameters: searchRequest, options?: RawAxiosRequestConfig): AxiosPromise<SiteSearchChannelResponse>;
    /**
     *
     * @summary Get live status
     * @param {setStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setStatus(requestParameters: setStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Minimal channel list
     * @param {shortChannelList1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shortChannelList1(requestParameters: shortChannelList1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteGetShortChannelResponse>;
};
/**
 * Request parameters for search operation in ChannelApi.
 * @export
 * @interface searchRequest
 */
export interface searchRequest {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof search
     */
    readonly v: searchVEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof search
     */
    readonly language: searchLanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof search
     */
    readonly projectId: number;
    /**
     *
     * @type {'all' | 'my' | 'available' | 'active'}
     * @memberof search
     */
    readonly type?: searchTypeEnum;
    /**
     * platform type
     * @type {string}
     * @memberof search
     */
    readonly platform?: string;
    /**
     * name
     * @type {string}
     * @memberof search
     */
    readonly name?: string;
    /**
     * Number of results
     * @type {number}
     * @memberof search
     */
    readonly limit?: number;
    /**
     * Page offset number
     * @type {number}
     * @memberof search
     */
    readonly offset?: number;
}
/**
 * Request parameters for setStatus operation in ChannelApi.
 * @export
 * @interface setStatusRequest
 */
export interface setStatusRequest {
    /**
     *
     * @type {MethodSetStatusChannelRequest}
     * @memberof setStatus
     */
    readonly methodSetStatusChannelRequest: MethodSetStatusChannelRequest;
}
/**
 * Request parameters for shortChannelList1 operation in ChannelApi.
 * @export
 * @interface shortChannelList1Request
 */
export interface shortChannelList1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof shortChannelList1
     */
    readonly v?: shortChannelList1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof shortChannelList1
     */
    readonly language: shortChannelList1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof shortChannelList1
     */
    readonly projectId: number;
}
/**
 * ChannelApi - object-oriented interface
 * @export
 * @class ChannelApi
 * @extends {BaseAPI}
 */
export declare class ChannelApi extends BaseAPI {
    /**
     *
     * @summary Search channel list
     * @param {searchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    search(requestParameters: searchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteSearchChannelResponse, any>>;
    /**
     *
     * @summary Get live status
     * @param {setStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    setStatus(requestParameters: setStatusRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Minimal channel list
     * @param {shortChannelList1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    shortChannelList1(requestParameters: shortChannelList1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteGetShortChannelResponse, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum searchVEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum searchLanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum searchTypeEnum {
    all = "all",
    my = "my",
    available = "available",
    active = "active"
}
/**
  * @export
  * @enum {string}
  */
export declare enum shortChannelList1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum shortChannelList1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=channel-api.d.ts.map