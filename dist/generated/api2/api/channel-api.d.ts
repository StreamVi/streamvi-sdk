/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { MethodSetStatusChannelRequest } from '../models';
import type { SiteGetShortChannelResponse } from '../models';
import type { SiteSearchChannelResponse } from '../models';
import type { SuccessResponse } from '../models';
/**
 * ChannelApi - axios parameter creator
 * @export
 */
export declare const ChannelApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Minimal channel list
     * @param {ChannelShortChannelListV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {ChannelShortChannelListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelShortChannelListV1: (language: ChannelShortChannelListV1LanguageEnum, projectId: number, v?: ChannelShortChannelListV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Search channel list
     * @param {MethodSearchV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {MethodSearchV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {MethodSearchV1TypeEnum} [type]
     * @param {string} [platform] platform type
     * @param {string} [name] name
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    methodSearchV1: (language: MethodSearchV1LanguageEnum, projectId: number, v?: MethodSearchV1VEnum, type?: MethodSearchV1TypeEnum, platform?: string, name?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get live status
     * @param {MethodSetStatusChannelRequest} methodSetStatusChannelRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    methodSetStatusV1: (methodSetStatusChannelRequest: MethodSetStatusChannelRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ChannelApi - functional programming interface
 * @export
 */
export declare const ChannelApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Minimal channel list
     * @param {ChannelShortChannelListV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {ChannelShortChannelListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelShortChannelListV1(language: ChannelShortChannelListV1LanguageEnum, projectId: number, v?: ChannelShortChannelListV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteGetShortChannelResponse>>;
    /**
     *
     * @summary Search channel list
     * @param {MethodSearchV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {MethodSearchV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {MethodSearchV1TypeEnum} [type]
     * @param {string} [platform] platform type
     * @param {string} [name] name
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    methodSearchV1(language: MethodSearchV1LanguageEnum, projectId: number, v?: MethodSearchV1VEnum, type?: MethodSearchV1TypeEnum, platform?: string, name?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteSearchChannelResponse>>;
    /**
     *
     * @summary Get live status
     * @param {MethodSetStatusChannelRequest} methodSetStatusChannelRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    methodSetStatusV1(methodSetStatusChannelRequest: MethodSetStatusChannelRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
};
/**
 * ChannelApi - factory interface
 * @export
 */
export declare const ChannelApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Minimal channel list
     * @param {ChannelApiChannelShortChannelListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelShortChannelListV1(requestParameters: ChannelApiChannelShortChannelListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteGetShortChannelResponse>;
    /**
     *
     * @summary Search channel list
     * @param {ChannelApiMethodSearchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    methodSearchV1(requestParameters: ChannelApiMethodSearchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteSearchChannelResponse>;
    /**
     *
     * @summary Get live status
     * @param {ChannelApiMethodSetStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    methodSetStatusV1(requestParameters: ChannelApiMethodSetStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
};
/**
 * ChannelApi - interface
 * @export
 * @interface ChannelApi
 */
export interface ChannelApiInterface {
    /**
     *
     * @summary Minimal channel list
     * @param {ChannelApiChannelShortChannelListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     */
    channelShortChannelListV1(requestParameters: ChannelApiChannelShortChannelListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteGetShortChannelResponse>;
    /**
     *
     * @summary Search channel list
     * @param {ChannelApiMethodSearchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     */
    methodSearchV1(requestParameters: ChannelApiMethodSearchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteSearchChannelResponse>;
    /**
     *
     * @summary Get live status
     * @param {ChannelApiMethodSetStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     */
    methodSetStatusV1(requestParameters: ChannelApiMethodSetStatusV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
}
/**
 * Request parameters for channelShortChannelListV1 operation in ChannelApi.
 * @export
 * @interface ChannelApiChannelShortChannelListV1Request
 */
export interface ChannelApiChannelShortChannelListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelApiChannelShortChannelListV1
     */
    readonly language: ChannelShortChannelListV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof ChannelApiChannelShortChannelListV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelApiChannelShortChannelListV1
     */
    readonly v?: ChannelShortChannelListV1VEnum;
}
/**
 * Request parameters for methodSearchV1 operation in ChannelApi.
 * @export
 * @interface ChannelApiMethodSearchV1Request
 */
export interface ChannelApiMethodSearchV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelApiMethodSearchV1
     */
    readonly language: MethodSearchV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof ChannelApiMethodSearchV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelApiMethodSearchV1
     */
    readonly v?: MethodSearchV1VEnum;
    /**
     *
     * @type {'all' | 'my' | 'available' | 'active'}
     * @memberof ChannelApiMethodSearchV1
     */
    readonly type?: MethodSearchV1TypeEnum;
    /**
     * platform type
     * @type {string}
     * @memberof ChannelApiMethodSearchV1
     */
    readonly platform?: string;
    /**
     * name
     * @type {string}
     * @memberof ChannelApiMethodSearchV1
     */
    readonly name?: string;
    /**
     * Number of results
     * @type {number}
     * @memberof ChannelApiMethodSearchV1
     */
    readonly limit?: number;
    /**
     * Page offset number
     * @type {number}
     * @memberof ChannelApiMethodSearchV1
     */
    readonly offset?: number;
}
/**
 * Request parameters for methodSetStatusV1 operation in ChannelApi.
 * @export
 * @interface ChannelApiMethodSetStatusV1Request
 */
export interface ChannelApiMethodSetStatusV1Request {
    /**
     *
     * @type {MethodSetStatusChannelRequest}
     * @memberof ChannelApiMethodSetStatusV1
     */
    readonly methodSetStatusChannelRequest: MethodSetStatusChannelRequest;
}
/**
 * ChannelApi - object-oriented interface
 * @export
 * @class ChannelApi
 * @extends {BaseAPI}
 */
export declare class ChannelApi extends BaseAPI implements ChannelApiInterface {
    /**
     *
     * @summary Minimal channel list
     * @param {ChannelApiChannelShortChannelListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelShortChannelListV1(requestParameters: ChannelApiChannelShortChannelListV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteGetShortChannelResponse, any>>;
    /**
     *
     * @summary Search channel list
     * @param {ChannelApiMethodSearchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    methodSearchV1(requestParameters: ChannelApiMethodSearchV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteSearchChannelResponse, any>>;
    /**
     *
     * @summary Get live status
     * @param {ChannelApiMethodSetStatusV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    methodSetStatusV1(requestParameters: ChannelApiMethodSetStatusV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
}
/**
 * @export
 */
export declare const ChannelShortChannelListV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type ChannelShortChannelListV1LanguageEnum = typeof ChannelShortChannelListV1LanguageEnum[keyof typeof ChannelShortChannelListV1LanguageEnum];
/**
 * @export
 */
export declare const ChannelShortChannelListV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ChannelShortChannelListV1VEnum = typeof ChannelShortChannelListV1VEnum[keyof typeof ChannelShortChannelListV1VEnum];
/**
 * @export
 */
export declare const MethodSearchV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type MethodSearchV1LanguageEnum = typeof MethodSearchV1LanguageEnum[keyof typeof MethodSearchV1LanguageEnum];
/**
 * @export
 */
export declare const MethodSearchV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type MethodSearchV1VEnum = typeof MethodSearchV1VEnum[keyof typeof MethodSearchV1VEnum];
/**
 * @export
 */
export declare const MethodSearchV1TypeEnum: {
    readonly All: "all";
    readonly My: "my";
    readonly Available: "available";
    readonly Active: "active";
};
export type MethodSearchV1TypeEnum = typeof MethodSearchV1TypeEnum[keyof typeof MethodSearchV1TypeEnum];
//# sourceMappingURL=channel-api.d.ts.map