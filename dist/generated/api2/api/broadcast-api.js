"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tokenChannelLanguageEnum = exports.tokenChannelVEnum = exports.restreamsLanguageEnum = exports.restreamsVEnum = exports.BroadcastApi = exports.factory = exports.fp = exports.axiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * BroadcastApi - axios parameter creator
 * @export
 */
const axiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get restreams
         * @param {restreamsVEnum} v Version
         * @param {restreamsLanguageEnum} language Current language
         * @param {number} broadcastId broadcast id
         * @param {string} key Chat token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restreams: async (v, language, broadcastId, key, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('restreams', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('restreams', 'language', language);
            // verify required parameter 'broadcastId' is not null or undefined
            (0, common_1.assertParamExists)('restreams', 'broadcastId', broadcastId);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('restreams', 'key', key);
            const localVarPath = `/method/broadcast/restreams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Connect channel, long polling
         * @param {tokenChannelVEnum} v Version
         * @param {tokenChannelLanguageEnum} language Current language
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenChannel: async (v, language, key, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('tokenChannel', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('tokenChannel', 'language', language);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('tokenChannel', 'key', key);
            const localVarPath = `/method/broadcast/longpoll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.axiosParamCreator = axiosParamCreator;
/**
 * BroadcastApi - functional programming interface
 * @export
 */
const fp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.axiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get restreams
         * @param {restreamsVEnum} v Version
         * @param {restreamsLanguageEnum} language Current language
         * @param {number} broadcastId broadcast id
         * @param {string} key Chat token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restreams(v, language, broadcastId, key, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.restreams(v, language, broadcastId, key, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BroadcastApi.restreams']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Connect channel, long polling
         * @param {tokenChannelVEnum} v Version
         * @param {tokenChannelLanguageEnum} language Current language
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenChannel(v, language, key, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenChannel(v, language, key, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BroadcastApi.tokenChannel']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.fp = fp;
/**
 * BroadcastApi - factory interface
 * @export
 */
const factory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.fp)(configuration);
    return {
        /**
         *
         * @summary Get restreams
         * @param {restreamsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restreams(requestParameters, options) {
            return localVarFp.restreams(requestParameters.v, requestParameters.language, requestParameters.broadcastId, requestParameters.key, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Connect channel, long polling
         * @param {tokenChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenChannel(requestParameters, options) {
            return localVarFp.tokenChannel(requestParameters.v, requestParameters.language, requestParameters.key, options).then((request) => request(axios, basePath));
        },
    };
};
exports.factory = factory;
/**
 * BroadcastApi - object-oriented interface
 * @export
 * @class BroadcastApi
 * @extends {BaseAPI}
 */
class BroadcastApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get restreams
     * @param {restreamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    restreams(requestParameters, options) {
        return (0, exports.fp)(this.configuration).restreams(requestParameters.v, requestParameters.language, requestParameters.broadcastId, requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Connect channel, long polling
     * @param {tokenChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    tokenChannel(requestParameters, options) {
        return (0, exports.fp)(this.configuration).tokenChannel(requestParameters.v, requestParameters.language, requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.BroadcastApi = BroadcastApi;
/**
  * @export
  * @enum {string}
  */
var restreamsVEnum;
(function (restreamsVEnum) {
    restreamsVEnum["_1"] = "1";
    restreamsVEnum["_2"] = "2";
    restreamsVEnum["_3"] = "3";
})(restreamsVEnum || (exports.restreamsVEnum = restreamsVEnum = {}));
/**
  * @export
  * @enum {string}
  */
var restreamsLanguageEnum;
(function (restreamsLanguageEnum) {
    restreamsLanguageEnum["ru"] = "ru";
    restreamsLanguageEnum["en"] = "en";
    restreamsLanguageEnum["cn"] = "cn";
})(restreamsLanguageEnum || (exports.restreamsLanguageEnum = restreamsLanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var tokenChannelVEnum;
(function (tokenChannelVEnum) {
    tokenChannelVEnum["_1"] = "1";
    tokenChannelVEnum["_2"] = "2";
    tokenChannelVEnum["_3"] = "3";
})(tokenChannelVEnum || (exports.tokenChannelVEnum = tokenChannelVEnum = {}));
/**
  * @export
  * @enum {string}
  */
var tokenChannelLanguageEnum;
(function (tokenChannelLanguageEnum) {
    tokenChannelLanguageEnum["ru"] = "ru";
    tokenChannelLanguageEnum["en"] = "en";
    tokenChannelLanguageEnum["cn"] = "cn";
})(tokenChannelLanguageEnum || (exports.tokenChannelLanguageEnum = tokenChannelLanguageEnum = {}));
