"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlanRestreamTariffV1VEnum = exports.PlanRestreamTariffV1LanguageEnum = exports.PlanRestreamRemoveV1VEnum = exports.PlanRestreamRemoveV1LanguageEnum = exports.PlanRestreamListV1VEnum = exports.PlanRestreamListV1LanguageEnum = exports.PlanRestreamListProjectV1VEnum = exports.PlanRestreamListProjectV1LanguageEnum = exports.PlanRestreamGetDiscountV1VEnum = exports.PlanRestreamGetDiscountV1LanguageEnum = exports.PlanRestreamCheck2V1VEnum = exports.PlanRestreamCheck2V1PeriodEnum = exports.PlanRestreamCheck2V1LanguageEnum = exports.PlanRestreamBuyV1VEnum = exports.PlanRestreamBuyV1PeriodEnum = exports.PlanRestreamBuyV1LanguageEnum = exports.PlanRestreamApi = exports.PlanRestreamApiFactory = exports.PlanRestreamApiFp = exports.PlanRestreamApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PlanRestreamApi - axios parameter creator
 * @export
 */
const PlanRestreamApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Buy restream tariff
         * @param {PlanRestreamBuyV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanRestreamBuyV1PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {PlanRestreamBuyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [countChannel] Channel count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamBuyV1: async (language, projectId, period, planRestreamId, v, countChannel, bitrate, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('planRestreamBuyV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('planRestreamBuyV1', 'projectId', projectId);
            // verify required parameter 'period' is not null or undefined
            (0, common_1.assertParamExists)('planRestreamBuyV1', 'period', period);
            // verify required parameter 'planRestreamId' is not null or undefined
            (0, common_1.assertParamExists)('planRestreamBuyV1', 'planRestreamId', planRestreamId);
            const localVarPath = `/method/plan_restream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }
            if (planRestreamId !== undefined) {
                localVarQueryParameter['plan_restream_id'] = planRestreamId;
            }
            if (countChannel !== undefined) {
                localVarQueryParameter['count_channel'] = countChannel;
            }
            if (bitrate !== undefined) {
                localVarQueryParameter['bitrate'] = bitrate;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Load data for show card the tariffs v2
         * @param {PlanRestreamCheck2V1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanRestreamCheck2V1PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {PlanRestreamCheck2V1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [useBalance] Is select balance
         * @param {number} [channels] Channels count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamCheck2V1: async (language, projectId, period, planRestreamId, v, useBalance, channels, bitrate, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('planRestreamCheck2V1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('planRestreamCheck2V1', 'projectId', projectId);
            // verify required parameter 'period' is not null or undefined
            (0, common_1.assertParamExists)('planRestreamCheck2V1', 'period', period);
            // verify required parameter 'planRestreamId' is not null or undefined
            (0, common_1.assertParamExists)('planRestreamCheck2V1', 'planRestreamId', planRestreamId);
            const localVarPath = `/method/plan_restream/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }
            if (planRestreamId !== undefined) {
                localVarQueryParameter['plan_restream_id'] = planRestreamId;
            }
            if (useBalance !== undefined) {
                localVarQueryParameter['use_balance'] = useBalance;
            }
            if (channels !== undefined) {
                localVarQueryParameter['channels'] = channels;
            }
            if (bitrate !== undefined) {
                localVarQueryParameter['bitrate'] = bitrate;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get discount restream
         * @param {PlanRestreamGetDiscountV1LanguageEnum} language Current language
         * @param {PlanRestreamGetDiscountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamGetDiscountV1: async (language, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('planRestreamGetDiscountV1', 'language', language);
            const localVarPath = `/method/plan_restream/get_discount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get list of restream tariffs for project
         * @param {PlanRestreamListProjectV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanRestreamListProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamListProjectV1: async (language, projectId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('planRestreamListProjectV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('planRestreamListProjectV1', 'projectId', projectId);
            const localVarPath = `/method/plan_restream/list/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get list of restream tariffs
         * @param {PlanRestreamListV1LanguageEnum} language Current language
         * @param {PlanRestreamListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamListV1: async (language, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('planRestreamListV1', 'language', language);
            const localVarPath = `/method/plan_restream/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove after tariff
         * @param {PlanRestreamRemoveV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} planRestreamId Restream plan id
         * @param {PlanRestreamRemoveV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamRemoveV1: async (language, projectId, planRestreamId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('planRestreamRemoveV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('planRestreamRemoveV1', 'projectId', projectId);
            // verify required parameter 'planRestreamId' is not null or undefined
            (0, common_1.assertParamExists)('planRestreamRemoveV1', 'planRestreamId', planRestreamId);
            const localVarPath = `/method/plan_restream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (planRestreamId !== undefined) {
                localVarQueryParameter['plan_restream_id'] = planRestreamId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get tariff for project
         * @param {PlanRestreamTariffV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanRestreamTariffV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamTariffV1: async (language, projectId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('planRestreamTariffV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('planRestreamTariffV1', 'projectId', projectId);
            const localVarPath = `/method/plan_restream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PlanRestreamApiAxiosParamCreator = PlanRestreamApiAxiosParamCreator;
/**
 * PlanRestreamApi - functional programming interface
 * @export
 */
const PlanRestreamApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PlanRestreamApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Buy restream tariff
         * @param {PlanRestreamBuyV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanRestreamBuyV1PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {PlanRestreamBuyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [countChannel] Channel count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planRestreamBuyV1(language, projectId, period, planRestreamId, v, countChannel, bitrate, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.planRestreamBuyV1(language, projectId, period, planRestreamId, v, countChannel, bitrate, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.planRestreamBuyV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Load data for show card the tariffs v2
         * @param {PlanRestreamCheck2V1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanRestreamCheck2V1PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {PlanRestreamCheck2V1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [useBalance] Is select balance
         * @param {number} [channels] Channels count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planRestreamCheck2V1(language, projectId, period, planRestreamId, v, useBalance, channels, bitrate, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.planRestreamCheck2V1(language, projectId, period, planRestreamId, v, useBalance, channels, bitrate, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.planRestreamCheck2V1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get discount restream
         * @param {PlanRestreamGetDiscountV1LanguageEnum} language Current language
         * @param {PlanRestreamGetDiscountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planRestreamGetDiscountV1(language, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.planRestreamGetDiscountV1(language, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.planRestreamGetDiscountV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get list of restream tariffs for project
         * @param {PlanRestreamListProjectV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanRestreamListProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planRestreamListProjectV1(language, projectId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.planRestreamListProjectV1(language, projectId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.planRestreamListProjectV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get list of restream tariffs
         * @param {PlanRestreamListV1LanguageEnum} language Current language
         * @param {PlanRestreamListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planRestreamListV1(language, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.planRestreamListV1(language, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.planRestreamListV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Remove after tariff
         * @param {PlanRestreamRemoveV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} planRestreamId Restream plan id
         * @param {PlanRestreamRemoveV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planRestreamRemoveV1(language, projectId, planRestreamId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.planRestreamRemoveV1(language, projectId, planRestreamId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.planRestreamRemoveV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get tariff for project
         * @param {PlanRestreamTariffV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanRestreamTariffV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planRestreamTariffV1(language, projectId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.planRestreamTariffV1(language, projectId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.planRestreamTariffV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PlanRestreamApiFp = PlanRestreamApiFp;
/**
 * PlanRestreamApi - factory interface
 * @export
 */
const PlanRestreamApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PlanRestreamApiFp)(configuration);
    return {
        /**
         *
         * @summary Buy restream tariff
         * @param {PlanRestreamApiPlanRestreamBuyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamBuyV1(requestParameters, options) {
            return localVarFp.planRestreamBuyV1(requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planRestreamId, requestParameters.v, requestParameters.countChannel, requestParameters.bitrate, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Load data for show card the tariffs v2
         * @param {PlanRestreamApiPlanRestreamCheck2V1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamCheck2V1(requestParameters, options) {
            return localVarFp.planRestreamCheck2V1(requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planRestreamId, requestParameters.v, requestParameters.useBalance, requestParameters.channels, requestParameters.bitrate, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get discount restream
         * @param {PlanRestreamApiPlanRestreamGetDiscountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamGetDiscountV1(requestParameters, options) {
            return localVarFp.planRestreamGetDiscountV1(requestParameters.language, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get list of restream tariffs for project
         * @param {PlanRestreamApiPlanRestreamListProjectV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamListProjectV1(requestParameters, options) {
            return localVarFp.planRestreamListProjectV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get list of restream tariffs
         * @param {PlanRestreamApiPlanRestreamListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamListV1(requestParameters, options) {
            return localVarFp.planRestreamListV1(requestParameters.language, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Remove after tariff
         * @param {PlanRestreamApiPlanRestreamRemoveV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamRemoveV1(requestParameters, options) {
            return localVarFp.planRestreamRemoveV1(requestParameters.language, requestParameters.projectId, requestParameters.planRestreamId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get tariff for project
         * @param {PlanRestreamApiPlanRestreamTariffV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planRestreamTariffV1(requestParameters, options) {
            return localVarFp.planRestreamTariffV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PlanRestreamApiFactory = PlanRestreamApiFactory;
/**
 * PlanRestreamApi - object-oriented interface
 * @export
 * @class PlanRestreamApi
 * @extends {BaseAPI}
 */
class PlanRestreamApi extends base_1.BaseAPI {
    /**
     *
     * @summary Buy restream tariff
     * @param {PlanRestreamApiPlanRestreamBuyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    planRestreamBuyV1(requestParameters, options) {
        return (0, exports.PlanRestreamApiFp)(this.configuration).planRestreamBuyV1(requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planRestreamId, requestParameters.v, requestParameters.countChannel, requestParameters.bitrate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Load data for show card the tariffs v2
     * @param {PlanRestreamApiPlanRestreamCheck2V1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    planRestreamCheck2V1(requestParameters, options) {
        return (0, exports.PlanRestreamApiFp)(this.configuration).planRestreamCheck2V1(requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planRestreamId, requestParameters.v, requestParameters.useBalance, requestParameters.channels, requestParameters.bitrate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get discount restream
     * @param {PlanRestreamApiPlanRestreamGetDiscountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    planRestreamGetDiscountV1(requestParameters, options) {
        return (0, exports.PlanRestreamApiFp)(this.configuration).planRestreamGetDiscountV1(requestParameters.language, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get list of restream tariffs for project
     * @param {PlanRestreamApiPlanRestreamListProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    planRestreamListProjectV1(requestParameters, options) {
        return (0, exports.PlanRestreamApiFp)(this.configuration).planRestreamListProjectV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get list of restream tariffs
     * @param {PlanRestreamApiPlanRestreamListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    planRestreamListV1(requestParameters, options) {
        return (0, exports.PlanRestreamApiFp)(this.configuration).planRestreamListV1(requestParameters.language, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Remove after tariff
     * @param {PlanRestreamApiPlanRestreamRemoveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    planRestreamRemoveV1(requestParameters, options) {
        return (0, exports.PlanRestreamApiFp)(this.configuration).planRestreamRemoveV1(requestParameters.language, requestParameters.projectId, requestParameters.planRestreamId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get tariff for project
     * @param {PlanRestreamApiPlanRestreamTariffV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    planRestreamTariffV1(requestParameters, options) {
        return (0, exports.PlanRestreamApiFp)(this.configuration).planRestreamTariffV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PlanRestreamApi = PlanRestreamApi;
/**
 * @export
 */
exports.PlanRestreamBuyV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanRestreamBuyV1PeriodEnum = {
    Month: 'month',
    Year: 'year'
};
/**
 * @export
 */
exports.PlanRestreamBuyV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanRestreamCheck2V1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanRestreamCheck2V1PeriodEnum = {
    Month: 'month',
    Year: 'year'
};
/**
 * @export
 */
exports.PlanRestreamCheck2V1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanRestreamGetDiscountV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanRestreamGetDiscountV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanRestreamListProjectV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanRestreamListProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanRestreamListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanRestreamListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanRestreamRemoveV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanRestreamRemoveV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanRestreamTariffV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanRestreamTariffV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
