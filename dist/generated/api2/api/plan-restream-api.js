"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tariff1LanguageEnum = exports.tariff1VEnum = exports.remove1LanguageEnum = exports.remove1VEnum = exports.listProject1LanguageEnum = exports.listProject1VEnum = exports.list1LanguageEnum = exports.list1VEnum = exports.getDiscount1LanguageEnum = exports.getDiscount1VEnum = exports.check21PeriodEnum = exports.check21LanguageEnum = exports.check21VEnum = exports.buy1PeriodEnum = exports.buy1LanguageEnum = exports.buy1VEnum = exports.PlanRestreamApi = exports.factory = exports.fp = exports.axiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PlanRestreamApi - axios parameter creator
 * @export
 */
const axiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Buy restream tariff
         * @param {buy1VEnum} v Version
         * @param {buy1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {buy1PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {number} [countChannel] Channel count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buy1: async (v, language, projectId, period, planRestreamId, countChannel, bitrate, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('buy1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('buy1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('buy1', 'projectId', projectId);
            // verify required parameter 'period' is not null or undefined
            (0, common_1.assertParamExists)('buy1', 'period', period);
            // verify required parameter 'planRestreamId' is not null or undefined
            (0, common_1.assertParamExists)('buy1', 'planRestreamId', planRestreamId);
            const localVarPath = `/method/plan_restream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }
            if (planRestreamId !== undefined) {
                localVarQueryParameter['plan_restream_id'] = planRestreamId;
            }
            if (countChannel !== undefined) {
                localVarQueryParameter['count_channel'] = countChannel;
            }
            if (bitrate !== undefined) {
                localVarQueryParameter['bitrate'] = bitrate;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Load data for show card the tariffs v2
         * @param {check21VEnum} v Version
         * @param {check21LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {check21PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {number} [useBalance] Is select balance
         * @param {number} [channels] Channels count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check21: async (v, language, projectId, period, planRestreamId, useBalance, channels, bitrate, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('check21', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('check21', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('check21', 'projectId', projectId);
            // verify required parameter 'period' is not null or undefined
            (0, common_1.assertParamExists)('check21', 'period', period);
            // verify required parameter 'planRestreamId' is not null or undefined
            (0, common_1.assertParamExists)('check21', 'planRestreamId', planRestreamId);
            const localVarPath = `/method/plan_restream/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }
            if (planRestreamId !== undefined) {
                localVarQueryParameter['plan_restream_id'] = planRestreamId;
            }
            if (useBalance !== undefined) {
                localVarQueryParameter['use_balance'] = useBalance;
            }
            if (channels !== undefined) {
                localVarQueryParameter['channels'] = channels;
            }
            if (bitrate !== undefined) {
                localVarQueryParameter['bitrate'] = bitrate;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get discount restream
         * @param {getDiscount1VEnum} v Version
         * @param {getDiscount1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscount1: async (v, language, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('getDiscount1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('getDiscount1', 'language', language);
            const localVarPath = `/method/plan_restream/get_discount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get list of restream tariffs
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1: async (v, language, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('list1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('list1', 'language', language);
            const localVarPath = `/method/plan_restream/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get list of restream tariffs for project
         * @param {listProject1VEnum} v Version
         * @param {listProject1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProject1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('listProject1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('listProject1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('listProject1', 'projectId', projectId);
            const localVarPath = `/method/plan_restream/list/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove after tariff
         * @param {remove1VEnum} v Version
         * @param {remove1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} planRestreamId Restream plan id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove1: async (v, language, projectId, planRestreamId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('remove1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('remove1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('remove1', 'projectId', projectId);
            // verify required parameter 'planRestreamId' is not null or undefined
            (0, common_1.assertParamExists)('remove1', 'planRestreamId', planRestreamId);
            const localVarPath = `/method/plan_restream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (planRestreamId !== undefined) {
                localVarQueryParameter['plan_restream_id'] = planRestreamId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get tariff for project
         * @param {tariff1VEnum} v Version
         * @param {tariff1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tariff1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('tariff1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('tariff1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('tariff1', 'projectId', projectId);
            const localVarPath = `/method/plan_restream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.axiosParamCreator = axiosParamCreator;
/**
 * PlanRestreamApi - functional programming interface
 * @export
 */
const fp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.axiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Buy restream tariff
         * @param {buy1VEnum} v Version
         * @param {buy1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {buy1PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {number} [countChannel] Channel count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buy1(v, language, projectId, period, planRestreamId, countChannel, bitrate, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.buy1(v, language, projectId, period, planRestreamId, countChannel, bitrate, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.buy1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Load data for show card the tariffs v2
         * @param {check21VEnum} v Version
         * @param {check21LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {check21PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {number} [useBalance] Is select balance
         * @param {number} [channels] Channels count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async check21(v, language, projectId, period, planRestreamId, useBalance, channels, bitrate, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.check21(v, language, projectId, period, planRestreamId, useBalance, channels, bitrate, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.check21']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get discount restream
         * @param {getDiscount1VEnum} v Version
         * @param {getDiscount1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDiscount1(v, language, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDiscount1(v, language, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.getDiscount1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get list of restream tariffs
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list1(v, language, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.list1(v, language, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.list1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get list of restream tariffs for project
         * @param {listProject1VEnum} v Version
         * @param {listProject1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProject1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProject1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.listProject1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Remove after tariff
         * @param {remove1VEnum} v Version
         * @param {remove1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} planRestreamId Restream plan id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove1(v, language, projectId, planRestreamId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.remove1(v, language, projectId, planRestreamId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.remove1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get tariff for project
         * @param {tariff1VEnum} v Version
         * @param {tariff1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tariff1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.tariff1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.tariff1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.fp = fp;
/**
 * PlanRestreamApi - factory interface
 * @export
 */
const factory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.fp)(configuration);
    return {
        /**
         *
         * @summary Buy restream tariff
         * @param {buy1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buy1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || buy1VEnum._1;
            return localVarFp.buy1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planRestreamId, requestParameters.countChannel, requestParameters.bitrate, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Load data for show card the tariffs v2
         * @param {check21Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check21(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || check21VEnum._1;
            return localVarFp.check21(actualV, requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planRestreamId, requestParameters.useBalance, requestParameters.channels, requestParameters.bitrate, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get discount restream
         * @param {getDiscount1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscount1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || getDiscount1VEnum._1;
            return localVarFp.getDiscount1(actualV, requestParameters.language, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get list of restream tariffs
         * @param {list1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || list1VEnum._1;
            return localVarFp.list1(actualV, requestParameters.language, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get list of restream tariffs for project
         * @param {listProject1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProject1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || listProject1VEnum._1;
            return localVarFp.listProject1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Remove after tariff
         * @param {remove1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || remove1VEnum._1;
            return localVarFp.remove1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.planRestreamId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get tariff for project
         * @param {tariff1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tariff1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || tariff1VEnum._1;
            return localVarFp.tariff1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.factory = factory;
/**
 * PlanRestreamApi - object-oriented interface
 * @export
 * @class PlanRestreamApi
 * @extends {BaseAPI}
 */
class PlanRestreamApi extends base_1.BaseAPI {
    /**
     *
     * @summary Buy restream tariff
     * @param {buy1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    buy1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || buy1VEnum._1;
        return (0, exports.fp)(this.configuration).buy1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planRestreamId, requestParameters.countChannel, requestParameters.bitrate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Load data for show card the tariffs v2
     * @param {check21Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    check21(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || check21VEnum._1;
        return (0, exports.fp)(this.configuration).check21(actualV, requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planRestreamId, requestParameters.useBalance, requestParameters.channels, requestParameters.bitrate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get discount restream
     * @param {getDiscount1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    getDiscount1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || getDiscount1VEnum._1;
        return (0, exports.fp)(this.configuration).getDiscount1(actualV, requestParameters.language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get list of restream tariffs
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    list1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || list1VEnum._1;
        return (0, exports.fp)(this.configuration).list1(actualV, requestParameters.language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get list of restream tariffs for project
     * @param {listProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    listProject1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || listProject1VEnum._1;
        return (0, exports.fp)(this.configuration).listProject1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Remove after tariff
     * @param {remove1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    remove1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || remove1VEnum._1;
        return (0, exports.fp)(this.configuration).remove1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.planRestreamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get tariff for project
     * @param {tariff1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    tariff1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || tariff1VEnum._1;
        return (0, exports.fp)(this.configuration).tariff1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PlanRestreamApi = PlanRestreamApi;
/**
  * @export
  * @enum {string}
  */
var buy1VEnum;
(function (buy1VEnum) {
    buy1VEnum["_1"] = "1";
    buy1VEnum["_2"] = "2";
    buy1VEnum["_3"] = "3";
})(buy1VEnum || (exports.buy1VEnum = buy1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var buy1LanguageEnum;
(function (buy1LanguageEnum) {
    buy1LanguageEnum["ru"] = "ru";
    buy1LanguageEnum["en"] = "en";
    buy1LanguageEnum["cn"] = "cn";
})(buy1LanguageEnum || (exports.buy1LanguageEnum = buy1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var buy1PeriodEnum;
(function (buy1PeriodEnum) {
    buy1PeriodEnum["month"] = "month";
    buy1PeriodEnum["year"] = "year";
})(buy1PeriodEnum || (exports.buy1PeriodEnum = buy1PeriodEnum = {}));
/**
  * @export
  * @enum {string}
  */
var check21VEnum;
(function (check21VEnum) {
    check21VEnum["_1"] = "1";
    check21VEnum["_2"] = "2";
    check21VEnum["_3"] = "3";
})(check21VEnum || (exports.check21VEnum = check21VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var check21LanguageEnum;
(function (check21LanguageEnum) {
    check21LanguageEnum["ru"] = "ru";
    check21LanguageEnum["en"] = "en";
    check21LanguageEnum["cn"] = "cn";
})(check21LanguageEnum || (exports.check21LanguageEnum = check21LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var check21PeriodEnum;
(function (check21PeriodEnum) {
    check21PeriodEnum["month"] = "month";
    check21PeriodEnum["year"] = "year";
})(check21PeriodEnum || (exports.check21PeriodEnum = check21PeriodEnum = {}));
/**
  * @export
  * @enum {string}
  */
var getDiscount1VEnum;
(function (getDiscount1VEnum) {
    getDiscount1VEnum["_1"] = "1";
    getDiscount1VEnum["_2"] = "2";
    getDiscount1VEnum["_3"] = "3";
})(getDiscount1VEnum || (exports.getDiscount1VEnum = getDiscount1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var getDiscount1LanguageEnum;
(function (getDiscount1LanguageEnum) {
    getDiscount1LanguageEnum["ru"] = "ru";
    getDiscount1LanguageEnum["en"] = "en";
    getDiscount1LanguageEnum["cn"] = "cn";
})(getDiscount1LanguageEnum || (exports.getDiscount1LanguageEnum = getDiscount1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var list1VEnum;
(function (list1VEnum) {
    list1VEnum["_1"] = "1";
    list1VEnum["_2"] = "2";
    list1VEnum["_3"] = "3";
})(list1VEnum || (exports.list1VEnum = list1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var list1LanguageEnum;
(function (list1LanguageEnum) {
    list1LanguageEnum["ru"] = "ru";
    list1LanguageEnum["en"] = "en";
    list1LanguageEnum["cn"] = "cn";
})(list1LanguageEnum || (exports.list1LanguageEnum = list1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var listProject1VEnum;
(function (listProject1VEnum) {
    listProject1VEnum["_1"] = "1";
    listProject1VEnum["_2"] = "2";
    listProject1VEnum["_3"] = "3";
})(listProject1VEnum || (exports.listProject1VEnum = listProject1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var listProject1LanguageEnum;
(function (listProject1LanguageEnum) {
    listProject1LanguageEnum["ru"] = "ru";
    listProject1LanguageEnum["en"] = "en";
    listProject1LanguageEnum["cn"] = "cn";
})(listProject1LanguageEnum || (exports.listProject1LanguageEnum = listProject1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var remove1VEnum;
(function (remove1VEnum) {
    remove1VEnum["_1"] = "1";
    remove1VEnum["_2"] = "2";
    remove1VEnum["_3"] = "3";
})(remove1VEnum || (exports.remove1VEnum = remove1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var remove1LanguageEnum;
(function (remove1LanguageEnum) {
    remove1LanguageEnum["ru"] = "ru";
    remove1LanguageEnum["en"] = "en";
    remove1LanguageEnum["cn"] = "cn";
})(remove1LanguageEnum || (exports.remove1LanguageEnum = remove1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var tariff1VEnum;
(function (tariff1VEnum) {
    tariff1VEnum["_1"] = "1";
    tariff1VEnum["_2"] = "2";
    tariff1VEnum["_3"] = "3";
})(tariff1VEnum || (exports.tariff1VEnum = tariff1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var tariff1LanguageEnum;
(function (tariff1LanguageEnum) {
    tariff1LanguageEnum["ru"] = "ru";
    tariff1LanguageEnum["en"] = "en";
    tariff1LanguageEnum["cn"] = "cn";
})(tariff1LanguageEnum || (exports.tariff1LanguageEnum = tariff1LanguageEnum = {}));
