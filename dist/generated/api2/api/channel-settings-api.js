"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramGetPostByFilterV1VEnum = exports.TelegramGetPostByFilterV1LanguageEnum = exports.ChannelSettingUpdateTokenV1VEnum = exports.ChannelSettingUpdateTokenV1RoleEnum = exports.ChannelSettingUpdateTokenV1LanguageEnum = exports.ChannelOptionsGetPlayListV1VEnum = exports.ChannelOptionsGetPlayListV1LanguageEnum = exports.ChannelOptionsGetPlannedV1VEnum = exports.ChannelOptionsGetPlannedV1LanguageEnum = exports.ChannelChatTelegramPostsV1VEnum = exports.ChannelChatTelegramPostsV1LanguageEnum = exports.ChannelChatSetTelegramSettingV1VEnum = exports.ChannelChatSetTelegramSettingV1LanguageEnum = exports.ChannelChatRemoveTelegramChatV1VEnum = exports.ChannelChatRemoveTelegramChatV1LanguageEnum = exports.ChannelChatInitTelegramChatConnectV1VEnum = exports.ChannelChatInitTelegramChatConnectV1LanguageEnum = exports.ChannelChatGetTelegramSettingV1VEnum = exports.ChannelChatGetTelegramSettingV1LanguageEnum = exports.ChannelSettingsApi = exports.ChannelSettingsApiFactory = exports.ChannelSettingsApiFp = exports.ChannelSettingsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ChannelSettingsApi - axios parameter creator
 * @export
 */
const ChannelSettingsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get telegram settings
         * @param {ChannelChatGetTelegramSettingV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelChatGetTelegramSettingV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatGetTelegramSettingV1: async (language, projectId, channelId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('channelChatGetTelegramSettingV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('channelChatGetTelegramSettingV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('channelChatGetTelegramSettingV1', 'channelId', channelId);
            const localVarPath = `/method/channel_settings/chat/telegram/setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get code for connected chat
         * @param {ChannelChatInitTelegramChatConnectV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelChatInitTelegramChatConnectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatInitTelegramChatConnectV1: async (language, projectId, channelId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('channelChatInitTelegramChatConnectV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('channelChatInitTelegramChatConnectV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('channelChatInitTelegramChatConnectV1', 'channelId', channelId);
            const localVarPath = `/method/channel_settings/chat/telegram/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Disconnect telegram chat
         * @param {ChannelChatRemoveTelegramChatV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelChatRemoveTelegramChatV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatRemoveTelegramChatV1: async (language, projectId, channelId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('channelChatRemoveTelegramChatV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('channelChatRemoveTelegramChatV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('channelChatRemoveTelegramChatV1', 'channelId', channelId);
            const localVarPath = `/method/channel_settings/chat/telegram/disconnect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set telegram settings
         * @param {ChannelChatSetTelegramSettingV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {TelegramSetSettingsRequestDto} telegramSetSettingsRequestDto
         * @param {ChannelChatSetTelegramSettingV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatSetTelegramSettingV1: async (language, projectId, channelId, telegramSetSettingsRequestDto, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('channelChatSetTelegramSettingV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('channelChatSetTelegramSettingV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('channelChatSetTelegramSettingV1', 'channelId', channelId);
            // verify required parameter 'telegramSetSettingsRequestDto' is not null or undefined
            (0, common_1.assertParamExists)('channelChatSetTelegramSettingV1', 'telegramSetSettingsRequestDto', telegramSetSettingsRequestDto);
            const localVarPath = `/method/channel_settings/chat/telegram/setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(telegramSetSettingsRequestDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get telegram post list
         * @param {ChannelChatTelegramPostsV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelChatTelegramPostsV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatTelegramPostsV1: async (language, projectId, channelId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('channelChatTelegramPostsV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('channelChatTelegramPostsV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('channelChatTelegramPostsV1', 'channelId', channelId);
            const localVarPath = `/method/channel_settings/chat/telegram/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Optional settings for telegram
         * @param {SiteUpdateChatTelegramRequest} siteUpdateChatTelegramRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatUpdateOptionsTelegramV1: async (siteUpdateChatTelegramRequest, options = {}) => {
            // verify required parameter 'siteUpdateChatTelegramRequest' is not null or undefined
            (0, common_1.assertParamExists)('channelChatUpdateOptionsTelegramV1', 'siteUpdateChatTelegramRequest', siteUpdateChatTelegramRequest);
            const localVarPath = `/method/channel_settings/chat/setTelegram`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteUpdateChatTelegramRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get planned list
         * @param {ChannelOptionsGetPlannedV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelOptionsGetPlannedV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsGetPlannedV1: async (language, projectId, channelId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('channelOptionsGetPlannedV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('channelOptionsGetPlannedV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('channelOptionsGetPlannedV1', 'channelId', channelId);
            const localVarPath = `/method/channel_settings/options/getPlanned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get playlists from the platform
         * @param {ChannelOptionsGetPlayListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelOptionsGetPlayListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsGetPlayListV1: async (language, projectId, channelId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('channelOptionsGetPlayListV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('channelOptionsGetPlayListV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('channelOptionsGetPlayListV1', 'channelId', channelId);
            const localVarPath = `/method/channel_settings/options/getPlaylist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Optional settings for ok. Depends on the tariff.
         * @param {SiteUpdateOptionsOkRequest} siteUpdateOptionsOkRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsOkV1: async (siteUpdateOptionsOkRequest, options = {}) => {
            // verify required parameter 'siteUpdateOptionsOkRequest' is not null or undefined
            (0, common_1.assertParamExists)('channelOptionsUpdateOptionsOkV1', 'siteUpdateOptionsOkRequest', siteUpdateOptionsOkRequest);
            const localVarPath = `/method/channel_settings/options/setOk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteUpdateOptionsOkRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Optional settings for trovo. Depends on the tariff.
         * @param {SiteUpdateOptionsTrovoRequest} siteUpdateOptionsTrovoRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsTrovoV1: async (siteUpdateOptionsTrovoRequest, options = {}) => {
            // verify required parameter 'siteUpdateOptionsTrovoRequest' is not null or undefined
            (0, common_1.assertParamExists)('channelOptionsUpdateOptionsTrovoV1', 'siteUpdateOptionsTrovoRequest', siteUpdateOptionsTrovoRequest);
            const localVarPath = `/method/channel_settings/options/setTrovo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteUpdateOptionsTrovoRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Optional settings for twitch. Depends on the tariff.
         * @param {SiteUpdateOptionsTwitchRequest} siteUpdateOptionsTwitchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsTwitchV1: async (siteUpdateOptionsTwitchRequest, options = {}) => {
            // verify required parameter 'siteUpdateOptionsTwitchRequest' is not null or undefined
            (0, common_1.assertParamExists)('channelOptionsUpdateOptionsTwitchV1', 'siteUpdateOptionsTwitchRequest', siteUpdateOptionsTwitchRequest);
            const localVarPath = `/method/channel_settings/options/setTwitch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteUpdateOptionsTwitchRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Optional settings for vk. Depends on the tariff.
         * @param {SiteUpdateOptionsVkRequest} siteUpdateOptionsVkRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsVkV1: async (siteUpdateOptionsVkRequest, options = {}) => {
            // verify required parameter 'siteUpdateOptionsVkRequest' is not null or undefined
            (0, common_1.assertParamExists)('channelOptionsUpdateOptionsVkV1', 'siteUpdateOptionsVkRequest', siteUpdateOptionsVkRequest);
            const localVarPath = `/method/channel_settings/options/setVk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteUpdateOptionsVkRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Optional settings for vk video live. Depends on the tariff.
         * @param {SiteUpdateOptionsVkVideoLiveRequest} siteUpdateOptionsVkVideoLiveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsVkVideoLiveV1: async (siteUpdateOptionsVkVideoLiveRequest, options = {}) => {
            // verify required parameter 'siteUpdateOptionsVkVideoLiveRequest' is not null or undefined
            (0, common_1.assertParamExists)('channelOptionsUpdateOptionsVkVideoLiveV1', 'siteUpdateOptionsVkVideoLiveRequest', siteUpdateOptionsVkVideoLiveRequest);
            const localVarPath = `/method/channel_settings/options/setVkVideoLive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteUpdateOptionsVkVideoLiveRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Optional settings for youtube. Depends on the tariff.
         * @param {SiteUpdateOptionsYoutubeRequest} siteUpdateOptionsYoutubeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsYoutubeV1: async (siteUpdateOptionsYoutubeRequest, options = {}) => {
            // verify required parameter 'siteUpdateOptionsYoutubeRequest' is not null or undefined
            (0, common_1.assertParamExists)('channelOptionsUpdateOptionsYoutubeV1', 'siteUpdateOptionsYoutubeRequest', siteUpdateOptionsYoutubeRequest);
            const localVarPath = `/method/channel_settings/options/setYoutube`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteUpdateOptionsYoutubeRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set planned id. Depends on the tariff.
         * @param {SiteSetPlannedRequest} siteSetPlannedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdatePlannedV1: async (siteSetPlannedRequest, options = {}) => {
            // verify required parameter 'siteSetPlannedRequest' is not null or undefined
            (0, common_1.assertParamExists)('channelOptionsUpdatePlannedV1', 'siteSetPlannedRequest', siteSetPlannedRequest);
            const localVarPath = `/method/channel_settings/options/setPlanned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteSetPlannedRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get status platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingGetStatusV1: async (options = {}) => {
            const localVarPath = `/method/channel_settings/getStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set name from custom channel. Global settings.
         * @param {SiteSetNameRequest} siteSetNameRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingSetNameV1: async (siteSetNameRequest, options = {}) => {
            // verify required parameter 'siteSetNameRequest' is not null or undefined
            (0, common_1.assertParamExists)('channelSettingSetNameV1', 'siteSetNameRequest', siteSetNameRequest);
            const localVarPath = `/method/channel_settings/setName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteSetNameRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set rtmp url from channel. Global settings.
         * @param {SiteSetUrlRequest} siteSetUrlRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingUpdateRtmpV1: async (siteSetUrlRequest, options = {}) => {
            // verify required parameter 'siteSetUrlRequest' is not null or undefined
            (0, common_1.assertParamExists)('channelSettingUpdateRtmpV1', 'siteSetUrlRequest', siteSetUrlRequest);
            const localVarPath = `/method/channel_settings/setRtmp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteSetUrlRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get status platform
         * @param {ChannelSettingUpdateTokenV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelSettingUpdateTokenV1RoleEnum} role Token role
         * @param {ChannelSettingUpdateTokenV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingUpdateTokenV1: async (language, projectId, channelId, role, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('channelSettingUpdateTokenV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('channelSettingUpdateTokenV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('channelSettingUpdateTokenV1', 'channelId', channelId);
            // verify required parameter 'role' is not null or undefined
            (0, common_1.assertParamExists)('channelSettingUpdateTokenV1', 'role', role);
            const localVarPath = `/method/channel_settings/update-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set transcoder from channel. Personal settings.
         * @param {SiteSetTranscoderRequest} siteSetTranscoderRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingUpdateTranscoderV1: async (siteSetTranscoderRequest, options = {}) => {
            // verify required parameter 'siteSetTranscoderRequest' is not null or undefined
            (0, common_1.assertParamExists)('channelSettingUpdateTranscoderV1', 'siteSetTranscoderRequest', siteSetTranscoderRequest);
            const localVarPath = `/method/channel_settings/setTranscoder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteSetTranscoderRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get telegram post by filter
         * @param {TelegramGetPostByFilterV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} filterMode
         * @param {TelegramGetPostByFilterV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        telegramGetPostByFilterV1: async (language, projectId, channelId, filterMode, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('telegramGetPostByFilterV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('telegramGetPostByFilterV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('telegramGetPostByFilterV1', 'channelId', channelId);
            // verify required parameter 'filterMode' is not null or undefined
            (0, common_1.assertParamExists)('telegramGetPostByFilterV1', 'filterMode', filterMode);
            const localVarPath = `/method/channel_settings/chat/telegram/posts/get-by-filter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (filterMode !== undefined) {
                localVarQueryParameter['filter_mode'] = filterMode;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ChannelSettingsApiAxiosParamCreator = ChannelSettingsApiAxiosParamCreator;
/**
 * ChannelSettingsApi - functional programming interface
 * @export
 */
const ChannelSettingsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ChannelSettingsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get telegram settings
         * @param {ChannelChatGetTelegramSettingV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelChatGetTelegramSettingV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelChatGetTelegramSettingV1(language, projectId, channelId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelChatGetTelegramSettingV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelChatGetTelegramSettingV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get code for connected chat
         * @param {ChannelChatInitTelegramChatConnectV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelChatInitTelegramChatConnectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelChatInitTelegramChatConnectV1(language, projectId, channelId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelChatInitTelegramChatConnectV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelChatInitTelegramChatConnectV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Disconnect telegram chat
         * @param {ChannelChatRemoveTelegramChatV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelChatRemoveTelegramChatV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelChatRemoveTelegramChatV1(language, projectId, channelId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelChatRemoveTelegramChatV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelChatRemoveTelegramChatV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Set telegram settings
         * @param {ChannelChatSetTelegramSettingV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {TelegramSetSettingsRequestDto} telegramSetSettingsRequestDto
         * @param {ChannelChatSetTelegramSettingV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelChatSetTelegramSettingV1(language, projectId, channelId, telegramSetSettingsRequestDto, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelChatSetTelegramSettingV1(language, projectId, channelId, telegramSetSettingsRequestDto, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelChatSetTelegramSettingV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get telegram post list
         * @param {ChannelChatTelegramPostsV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelChatTelegramPostsV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelChatTelegramPostsV1(language, projectId, channelId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelChatTelegramPostsV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelChatTelegramPostsV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Optional settings for telegram
         * @param {SiteUpdateChatTelegramRequest} siteUpdateChatTelegramRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelChatUpdateOptionsTelegramV1(siteUpdateChatTelegramRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelChatUpdateOptionsTelegramV1(siteUpdateChatTelegramRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelChatUpdateOptionsTelegramV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get planned list
         * @param {ChannelOptionsGetPlannedV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelOptionsGetPlannedV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelOptionsGetPlannedV1(language, projectId, channelId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelOptionsGetPlannedV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelOptionsGetPlannedV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get playlists from the platform
         * @param {ChannelOptionsGetPlayListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelOptionsGetPlayListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelOptionsGetPlayListV1(language, projectId, channelId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelOptionsGetPlayListV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelOptionsGetPlayListV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Optional settings for ok. Depends on the tariff.
         * @param {SiteUpdateOptionsOkRequest} siteUpdateOptionsOkRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelOptionsUpdateOptionsOkV1(siteUpdateOptionsOkRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelOptionsUpdateOptionsOkV1(siteUpdateOptionsOkRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelOptionsUpdateOptionsOkV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Optional settings for trovo. Depends on the tariff.
         * @param {SiteUpdateOptionsTrovoRequest} siteUpdateOptionsTrovoRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelOptionsUpdateOptionsTrovoV1(siteUpdateOptionsTrovoRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelOptionsUpdateOptionsTrovoV1(siteUpdateOptionsTrovoRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelOptionsUpdateOptionsTrovoV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Optional settings for twitch. Depends on the tariff.
         * @param {SiteUpdateOptionsTwitchRequest} siteUpdateOptionsTwitchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelOptionsUpdateOptionsTwitchV1(siteUpdateOptionsTwitchRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelOptionsUpdateOptionsTwitchV1(siteUpdateOptionsTwitchRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelOptionsUpdateOptionsTwitchV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Optional settings for vk. Depends on the tariff.
         * @param {SiteUpdateOptionsVkRequest} siteUpdateOptionsVkRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelOptionsUpdateOptionsVkV1(siteUpdateOptionsVkRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelOptionsUpdateOptionsVkV1(siteUpdateOptionsVkRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelOptionsUpdateOptionsVkV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Optional settings for vk video live. Depends on the tariff.
         * @param {SiteUpdateOptionsVkVideoLiveRequest} siteUpdateOptionsVkVideoLiveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelOptionsUpdateOptionsVkVideoLiveV1(siteUpdateOptionsVkVideoLiveRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelOptionsUpdateOptionsVkVideoLiveV1(siteUpdateOptionsVkVideoLiveRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelOptionsUpdateOptionsVkVideoLiveV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Optional settings for youtube. Depends on the tariff.
         * @param {SiteUpdateOptionsYoutubeRequest} siteUpdateOptionsYoutubeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelOptionsUpdateOptionsYoutubeV1(siteUpdateOptionsYoutubeRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelOptionsUpdateOptionsYoutubeV1(siteUpdateOptionsYoutubeRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelOptionsUpdateOptionsYoutubeV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Set planned id. Depends on the tariff.
         * @param {SiteSetPlannedRequest} siteSetPlannedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelOptionsUpdatePlannedV1(siteSetPlannedRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelOptionsUpdatePlannedV1(siteSetPlannedRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelOptionsUpdatePlannedV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get status platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelSettingGetStatusV1(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelSettingGetStatusV1(options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelSettingGetStatusV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Set name from custom channel. Global settings.
         * @param {SiteSetNameRequest} siteSetNameRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelSettingSetNameV1(siteSetNameRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelSettingSetNameV1(siteSetNameRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelSettingSetNameV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Set rtmp url from channel. Global settings.
         * @param {SiteSetUrlRequest} siteSetUrlRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelSettingUpdateRtmpV1(siteSetUrlRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelSettingUpdateRtmpV1(siteSetUrlRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelSettingUpdateRtmpV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get status platform
         * @param {ChannelSettingUpdateTokenV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ChannelSettingUpdateTokenV1RoleEnum} role Token role
         * @param {ChannelSettingUpdateTokenV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelSettingUpdateTokenV1(language, projectId, channelId, role, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelSettingUpdateTokenV1(language, projectId, channelId, role, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelSettingUpdateTokenV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Set transcoder from channel. Personal settings.
         * @param {SiteSetTranscoderRequest} siteSetTranscoderRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelSettingUpdateTranscoderV1(siteSetTranscoderRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelSettingUpdateTranscoderV1(siteSetTranscoderRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.channelSettingUpdateTranscoderV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get telegram post by filter
         * @param {TelegramGetPostByFilterV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} filterMode
         * @param {TelegramGetPostByFilterV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async telegramGetPostByFilterV1(language, projectId, channelId, filterMode, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.telegramGetPostByFilterV1(language, projectId, channelId, filterMode, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.telegramGetPostByFilterV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.ChannelSettingsApiFp = ChannelSettingsApiFp;
/**
 * ChannelSettingsApi - factory interface
 * @export
 */
const ChannelSettingsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ChannelSettingsApiFp)(configuration);
    return {
        /**
         *
         * @summary Get telegram settings
         * @param {ChannelSettingsApiChannelChatGetTelegramSettingV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatGetTelegramSettingV1(requestParameters, options) {
            return localVarFp.channelChatGetTelegramSettingV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get code for connected chat
         * @param {ChannelSettingsApiChannelChatInitTelegramChatConnectV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatInitTelegramChatConnectV1(requestParameters, options) {
            return localVarFp.channelChatInitTelegramChatConnectV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Disconnect telegram chat
         * @param {ChannelSettingsApiChannelChatRemoveTelegramChatV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatRemoveTelegramChatV1(requestParameters, options) {
            return localVarFp.channelChatRemoveTelegramChatV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set telegram settings
         * @param {ChannelSettingsApiChannelChatSetTelegramSettingV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatSetTelegramSettingV1(requestParameters, options) {
            return localVarFp.channelChatSetTelegramSettingV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.telegramSetSettingsRequestDto, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get telegram post list
         * @param {ChannelSettingsApiChannelChatTelegramPostsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatTelegramPostsV1(requestParameters, options) {
            return localVarFp.channelChatTelegramPostsV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Optional settings for telegram
         * @param {ChannelSettingsApiChannelChatUpdateOptionsTelegramV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelChatUpdateOptionsTelegramV1(requestParameters, options) {
            return localVarFp.channelChatUpdateOptionsTelegramV1(requestParameters.siteUpdateChatTelegramRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get planned list
         * @param {ChannelSettingsApiChannelOptionsGetPlannedV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsGetPlannedV1(requestParameters, options) {
            return localVarFp.channelOptionsGetPlannedV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get playlists from the platform
         * @param {ChannelSettingsApiChannelOptionsGetPlayListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsGetPlayListV1(requestParameters, options) {
            return localVarFp.channelOptionsGetPlayListV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Optional settings for ok. Depends on the tariff.
         * @param {ChannelSettingsApiChannelOptionsUpdateOptionsOkV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsOkV1(requestParameters, options) {
            return localVarFp.channelOptionsUpdateOptionsOkV1(requestParameters.siteUpdateOptionsOkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Optional settings for trovo. Depends on the tariff.
         * @param {ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsTrovoV1(requestParameters, options) {
            return localVarFp.channelOptionsUpdateOptionsTrovoV1(requestParameters.siteUpdateOptionsTrovoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Optional settings for twitch. Depends on the tariff.
         * @param {ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsTwitchV1(requestParameters, options) {
            return localVarFp.channelOptionsUpdateOptionsTwitchV1(requestParameters.siteUpdateOptionsTwitchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Optional settings for vk. Depends on the tariff.
         * @param {ChannelSettingsApiChannelOptionsUpdateOptionsVkV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsVkV1(requestParameters, options) {
            return localVarFp.channelOptionsUpdateOptionsVkV1(requestParameters.siteUpdateOptionsVkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Optional settings for vk video live. Depends on the tariff.
         * @param {ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsVkVideoLiveV1(requestParameters, options) {
            return localVarFp.channelOptionsUpdateOptionsVkVideoLiveV1(requestParameters.siteUpdateOptionsVkVideoLiveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Optional settings for youtube. Depends on the tariff.
         * @param {ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdateOptionsYoutubeV1(requestParameters, options) {
            return localVarFp.channelOptionsUpdateOptionsYoutubeV1(requestParameters.siteUpdateOptionsYoutubeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set planned id. Depends on the tariff.
         * @param {ChannelSettingsApiChannelOptionsUpdatePlannedV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelOptionsUpdatePlannedV1(requestParameters, options) {
            return localVarFp.channelOptionsUpdatePlannedV1(requestParameters.siteSetPlannedRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get status platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingGetStatusV1(options) {
            return localVarFp.channelSettingGetStatusV1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set name from custom channel. Global settings.
         * @param {ChannelSettingsApiChannelSettingSetNameV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingSetNameV1(requestParameters, options) {
            return localVarFp.channelSettingSetNameV1(requestParameters.siteSetNameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set rtmp url from channel. Global settings.
         * @param {ChannelSettingsApiChannelSettingUpdateRtmpV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingUpdateRtmpV1(requestParameters, options) {
            return localVarFp.channelSettingUpdateRtmpV1(requestParameters.siteSetUrlRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get status platform
         * @param {ChannelSettingsApiChannelSettingUpdateTokenV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingUpdateTokenV1(requestParameters, options) {
            return localVarFp.channelSettingUpdateTokenV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.role, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set transcoder from channel. Personal settings.
         * @param {ChannelSettingsApiChannelSettingUpdateTranscoderV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelSettingUpdateTranscoderV1(requestParameters, options) {
            return localVarFp.channelSettingUpdateTranscoderV1(requestParameters.siteSetTranscoderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get telegram post by filter
         * @param {ChannelSettingsApiTelegramGetPostByFilterV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        telegramGetPostByFilterV1(requestParameters, options) {
            return localVarFp.telegramGetPostByFilterV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.filterMode, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ChannelSettingsApiFactory = ChannelSettingsApiFactory;
/**
 * ChannelSettingsApi - object-oriented interface
 * @export
 * @class ChannelSettingsApi
 * @extends {BaseAPI}
 */
class ChannelSettingsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get telegram settings
     * @param {ChannelSettingsApiChannelChatGetTelegramSettingV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelChatGetTelegramSettingV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelChatGetTelegramSettingV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get code for connected chat
     * @param {ChannelSettingsApiChannelChatInitTelegramChatConnectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelChatInitTelegramChatConnectV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelChatInitTelegramChatConnectV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Disconnect telegram chat
     * @param {ChannelSettingsApiChannelChatRemoveTelegramChatV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelChatRemoveTelegramChatV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelChatRemoveTelegramChatV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set telegram settings
     * @param {ChannelSettingsApiChannelChatSetTelegramSettingV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelChatSetTelegramSettingV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelChatSetTelegramSettingV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.telegramSetSettingsRequestDto, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get telegram post list
     * @param {ChannelSettingsApiChannelChatTelegramPostsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelChatTelegramPostsV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelChatTelegramPostsV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Optional settings for telegram
     * @param {ChannelSettingsApiChannelChatUpdateOptionsTelegramV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelChatUpdateOptionsTelegramV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelChatUpdateOptionsTelegramV1(requestParameters.siteUpdateChatTelegramRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get planned list
     * @param {ChannelSettingsApiChannelOptionsGetPlannedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelOptionsGetPlannedV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelOptionsGetPlannedV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get playlists from the platform
     * @param {ChannelSettingsApiChannelOptionsGetPlayListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelOptionsGetPlayListV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelOptionsGetPlayListV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Optional settings for ok. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsOkV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelOptionsUpdateOptionsOkV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelOptionsUpdateOptionsOkV1(requestParameters.siteUpdateOptionsOkRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Optional settings for trovo. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelOptionsUpdateOptionsTrovoV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelOptionsUpdateOptionsTrovoV1(requestParameters.siteUpdateOptionsTrovoRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Optional settings for twitch. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelOptionsUpdateOptionsTwitchV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelOptionsUpdateOptionsTwitchV1(requestParameters.siteUpdateOptionsTwitchRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Optional settings for vk. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsVkV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelOptionsUpdateOptionsVkV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelOptionsUpdateOptionsVkV1(requestParameters.siteUpdateOptionsVkRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Optional settings for vk video live. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelOptionsUpdateOptionsVkVideoLiveV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelOptionsUpdateOptionsVkVideoLiveV1(requestParameters.siteUpdateOptionsVkVideoLiveRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Optional settings for youtube. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelOptionsUpdateOptionsYoutubeV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelOptionsUpdateOptionsYoutubeV1(requestParameters.siteUpdateOptionsYoutubeRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set planned id. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdatePlannedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelOptionsUpdatePlannedV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelOptionsUpdatePlannedV1(requestParameters.siteSetPlannedRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get status platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelSettingGetStatusV1(options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelSettingGetStatusV1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set name from custom channel. Global settings.
     * @param {ChannelSettingsApiChannelSettingSetNameV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelSettingSetNameV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelSettingSetNameV1(requestParameters.siteSetNameRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set rtmp url from channel. Global settings.
     * @param {ChannelSettingsApiChannelSettingUpdateRtmpV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelSettingUpdateRtmpV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelSettingUpdateRtmpV1(requestParameters.siteSetUrlRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get status platform
     * @param {ChannelSettingsApiChannelSettingUpdateTokenV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelSettingUpdateTokenV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelSettingUpdateTokenV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.role, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set transcoder from channel. Personal settings.
     * @param {ChannelSettingsApiChannelSettingUpdateTranscoderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelSettingUpdateTranscoderV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).channelSettingUpdateTranscoderV1(requestParameters.siteSetTranscoderRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get telegram post by filter
     * @param {ChannelSettingsApiTelegramGetPostByFilterV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    telegramGetPostByFilterV1(requestParameters, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).telegramGetPostByFilterV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.filterMode, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ChannelSettingsApi = ChannelSettingsApi;
/**
 * @export
 */
exports.ChannelChatGetTelegramSettingV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ChannelChatGetTelegramSettingV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ChannelChatInitTelegramChatConnectV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ChannelChatInitTelegramChatConnectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ChannelChatRemoveTelegramChatV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ChannelChatRemoveTelegramChatV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ChannelChatSetTelegramSettingV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ChannelChatSetTelegramSettingV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ChannelChatTelegramPostsV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ChannelChatTelegramPostsV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ChannelOptionsGetPlannedV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ChannelOptionsGetPlannedV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ChannelOptionsGetPlayListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ChannelOptionsGetPlayListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ChannelSettingUpdateTokenV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ChannelSettingUpdateTokenV1RoleEnum = {
    Account: 'account',
    Group: 'group'
};
/**
 * @export
 */
exports.ChannelSettingUpdateTokenV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.TelegramGetPostByFilterV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.TelegramGetPostByFilterV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
