"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.list1LanguageEnum = exports.list1VEnum = exports.getStatus1LanguageEnum = exports.getStatus1VEnum = exports.create1LanguageEnum = exports.create1VEnum = exports.PaymentApi = exports.factory = exports.fp = exports.axiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PaymentApi - axios parameter creator
 * @export
 */
const axiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create payment item for pay system
         * @param {create1VEnum} v Version
         * @param {create1LanguageEnum} language Current language
         * @param {create1Request} create1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1: async (v, language, create1Request, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('create1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('create1', 'language', language);
            // verify required parameter 'create1Request' is not null or undefined
            (0, common_1.assertParamExists)('create1', 'create1Request', create1Request);
            const localVarPath = `/method/payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(create1Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {getStatus1VEnum} v Version
         * @param {getStatus1LanguageEnum} language Current language
         * @param {number} payId Pay order id
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus1: async (v, language, payId, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('getStatus1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('getStatus1', 'language', language);
            // verify required parameter 'payId' is not null or undefined
            (0, common_1.assertParamExists)('getStatus1', 'payId', payId);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('getStatus1', 'projectId', projectId);
            const localVarPath = `/method/payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (payId !== undefined) {
                localVarQueryParameter['payId'] = payId;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} [pageSize] Number of results
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1: async (v, language, pageSize, page, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('list1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('list1', 'language', language);
            const localVarPath = `/method/payment/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.axiosParamCreator = axiosParamCreator;
/**
 * PaymentApi - functional programming interface
 * @export
 */
const fp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.axiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create payment item for pay system
         * @param {create1VEnum} v Version
         * @param {create1LanguageEnum} language Current language
         * @param {create1Request} create1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create1(v, language, create1Request, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.create1(v, language, create1Request, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaymentApi.create1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {getStatus1VEnum} v Version
         * @param {getStatus1LanguageEnum} language Current language
         * @param {number} payId Pay order id
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatus1(v, language, payId, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatus1(v, language, payId, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaymentApi.getStatus1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} [pageSize] Number of results
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list1(v, language, pageSize, page, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.list1(v, language, pageSize, page, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaymentApi.list1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.fp = fp;
/**
 * PaymentApi - factory interface
 * @export
 */
const factory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.fp)(configuration);
    return {
        /**
         *
         * @summary Create payment item for pay system
         * @param {create1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || create1VEnum._1;
            return localVarFp.create1(actualV, requestParameters.language, requestParameters.create1Request, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {getStatus1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || getStatus1VEnum._1;
            return localVarFp.getStatus1(actualV, requestParameters.language, requestParameters.payId, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {list1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || list1VEnum._1;
            return localVarFp.list1(actualV, requestParameters.language, requestParameters.pageSize, requestParameters.page, options).then((request) => request(axios, basePath));
        },
    };
};
exports.factory = factory;
/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
class PaymentApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create payment item for pay system
     * @param {create1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    create1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || create1VEnum._1;
        return (0, exports.fp)(this.configuration).create1(actualV, requestParameters.language, requestParameters.create1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {getStatus1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    getStatus1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || getStatus1VEnum._1;
        return (0, exports.fp)(this.configuration).getStatus1(actualV, requestParameters.language, requestParameters.payId, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    list1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || list1VEnum._1;
        return (0, exports.fp)(this.configuration).list1(actualV, requestParameters.language, requestParameters.pageSize, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PaymentApi = PaymentApi;
/**
  * @export
  * @enum {string}
  */
var create1VEnum;
(function (create1VEnum) {
    create1VEnum["_1"] = "1";
    create1VEnum["_2"] = "2";
    create1VEnum["_3"] = "3";
})(create1VEnum || (exports.create1VEnum = create1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var create1LanguageEnum;
(function (create1LanguageEnum) {
    create1LanguageEnum["ru"] = "ru";
    create1LanguageEnum["en"] = "en";
    create1LanguageEnum["cn"] = "cn";
})(create1LanguageEnum || (exports.create1LanguageEnum = create1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var getStatus1VEnum;
(function (getStatus1VEnum) {
    getStatus1VEnum["_1"] = "1";
    getStatus1VEnum["_2"] = "2";
    getStatus1VEnum["_3"] = "3";
})(getStatus1VEnum || (exports.getStatus1VEnum = getStatus1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var getStatus1LanguageEnum;
(function (getStatus1LanguageEnum) {
    getStatus1LanguageEnum["ru"] = "ru";
    getStatus1LanguageEnum["en"] = "en";
    getStatus1LanguageEnum["cn"] = "cn";
})(getStatus1LanguageEnum || (exports.getStatus1LanguageEnum = getStatus1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var list1VEnum;
(function (list1VEnum) {
    list1VEnum["_1"] = "1";
    list1VEnum["_2"] = "2";
    list1VEnum["_3"] = "3";
})(list1VEnum || (exports.list1VEnum = list1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var list1LanguageEnum;
(function (list1LanguageEnum) {
    list1LanguageEnum["ru"] = "ru";
    list1LanguageEnum["en"] = "en";
    list1LanguageEnum["cn"] = "cn";
})(list1LanguageEnum || (exports.list1LanguageEnum = list1LanguageEnum = {}));
