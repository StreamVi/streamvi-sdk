/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { MethodBroadcastRestreamsResponse } from '../models';
import type { MethodCurrentBroadcastResponse } from '../models';
/**
 * BroadcastApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get restreams
     * @param {restreamsVEnum} v Version
     * @param {restreamsLanguageEnum} language Current language
     * @param {number} broadcastId broadcast id
     * @param {string} key Chat token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restreams: (v: restreamsVEnum, language: restreamsLanguageEnum, broadcastId: number, key: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Connect channel, long polling
     * @param {tokenChannelVEnum} v Version
     * @param {tokenChannelLanguageEnum} language Current language
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenChannel: (v: tokenChannelVEnum, language: tokenChannelLanguageEnum, key: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BroadcastApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get restreams
     * @param {restreamsVEnum} v Version
     * @param {restreamsLanguageEnum} language Current language
     * @param {number} broadcastId broadcast id
     * @param {string} key Chat token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restreams(v: restreamsVEnum, language: restreamsLanguageEnum, broadcastId: number, key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MethodBroadcastRestreamsResponse>>;
    /**
     *
     * @summary Connect channel, long polling
     * @param {tokenChannelVEnum} v Version
     * @param {tokenChannelLanguageEnum} language Current language
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenChannel(v: tokenChannelVEnum, language: tokenChannelLanguageEnum, key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MethodCurrentBroadcastResponse>>;
};
/**
 * BroadcastApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get restreams
     * @param {restreamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restreams(requestParameters: restreamsRequest, options?: RawAxiosRequestConfig): AxiosPromise<MethodBroadcastRestreamsResponse>;
    /**
     *
     * @summary Connect channel, long polling
     * @param {tokenChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenChannel(requestParameters: tokenChannelRequest, options?: RawAxiosRequestConfig): AxiosPromise<MethodCurrentBroadcastResponse>;
};
/**
 * Request parameters for restreams operation in BroadcastApi.
 * @export
 * @interface restreamsRequest
 */
export interface restreamsRequest {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof restreams
     */
    readonly v: restreamsVEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof restreams
     */
    readonly language: restreamsLanguageEnum;
    /**
     * broadcast id
     * @type {number}
     * @memberof restreams
     */
    readonly broadcastId: number;
    /**
     * Chat token
     * @type {string}
     * @memberof restreams
     */
    readonly key: string;
}
/**
 * Request parameters for tokenChannel operation in BroadcastApi.
 * @export
 * @interface tokenChannelRequest
 */
export interface tokenChannelRequest {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof tokenChannel
     */
    readonly v: tokenChannelVEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof tokenChannel
     */
    readonly language: tokenChannelLanguageEnum;
    /**
     *
     * @type {string}
     * @memberof tokenChannel
     */
    readonly key: string;
}
/**
 * BroadcastApi - object-oriented interface
 * @export
 * @class BroadcastApi
 * @extends {BaseAPI}
 */
export declare class BroadcastApi extends BaseAPI {
    /**
     *
     * @summary Get restreams
     * @param {restreamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    restreams(requestParameters: restreamsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MethodBroadcastRestreamsResponse, any>>;
    /**
     *
     * @summary Connect channel, long polling
     * @param {tokenChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    tokenChannel(requestParameters: tokenChannelRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MethodCurrentBroadcastResponse, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum restreamsVEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum restreamsLanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum tokenChannelVEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum tokenChannelLanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=broadcast-api.d.ts.map