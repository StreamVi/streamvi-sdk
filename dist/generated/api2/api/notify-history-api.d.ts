/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { NotifyHistorySiteResponse } from '../models';
import type { NotifyHistoryStatusUserResponse } from '../models';
import type { PaginatedResponseOfNotifyHistorySiteResponse } from '../models';
import type { SiteMarkReadHistoryRequest } from '../models';
import type { SiteMarkReadHistoryResponse } from '../models';
import type { SuccessResponse } from '../models';
/**
 * NotifyHistoryApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get my NotifyHistory item by id
     * @param {get1VEnum} v Version
     * @param {string} id Id of page in mongodb
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get1: (v: get1VEnum, id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get list of my notifications
     * @param {getListMy1VEnum} v Version
     * @param {getListMy1LanguageEnum} language Current language
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {number} [projectId] Project id
     * @param {getListMy1NameEnum} [name] Name
     * @param {getListMy1ChannelEnum} [channel] Channel
     * @param {string} [dateFrom] Date from
     * @param {string} [dateTo] Date to
     * @param {getListMy1StatusReadEnum} [statusRead] Status read
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListMy1: (v: getListMy1VEnum, language: getListMy1LanguageEnum, limit?: number, offset?: number, projectId?: number, name?: getListMy1NameEnum, channel?: getListMy1ChannelEnum, dateFrom?: string, dateTo?: string, statusRead?: getListMy1StatusReadEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get my status unread message for user
     * @param {getStatusMy1VEnum} v Version
     * @param {getStatusMy1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatusMy1: (v: getStatusMy1VEnum, language: getStatusMy1LanguageEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set notification in cabinet as read
     * @param {markOfRead1VEnum} v Version
     * @param {markOfRead1LanguageEnum} language Current language
     * @param {SiteMarkReadHistoryRequest} siteMarkReadHistoryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    markOfRead1: (v: markOfRead1VEnum, language: markOfRead1LanguageEnum, siteMarkReadHistoryRequest: SiteMarkReadHistoryRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Run action in my notify item
     * @param {runAction1VEnum} v Version
     * @param {string} notifyHistoryId Id of page in mongodb
     * @param {string} actionName Action name
     * @param {string} groupId Group id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runAction1: (v: runAction1VEnum, notifyHistoryId: string, actionName: string, groupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set all notification in cabinet as read
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAllCabinetRead1: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * NotifyHistoryApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get my NotifyHistory item by id
     * @param {get1VEnum} v Version
     * @param {string} id Id of page in mongodb
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get1(v: get1VEnum, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotifyHistorySiteResponse>>;
    /**
     *
     * @summary Get list of my notifications
     * @param {getListMy1VEnum} v Version
     * @param {getListMy1LanguageEnum} language Current language
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {number} [projectId] Project id
     * @param {getListMy1NameEnum} [name] Name
     * @param {getListMy1ChannelEnum} [channel] Channel
     * @param {string} [dateFrom] Date from
     * @param {string} [dateTo] Date to
     * @param {getListMy1StatusReadEnum} [statusRead] Status read
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListMy1(v: getListMy1VEnum, language: getListMy1LanguageEnum, limit?: number, offset?: number, projectId?: number, name?: getListMy1NameEnum, channel?: getListMy1ChannelEnum, dateFrom?: string, dateTo?: string, statusRead?: getListMy1StatusReadEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseOfNotifyHistorySiteResponse>>;
    /**
     *
     * @summary Get my status unread message for user
     * @param {getStatusMy1VEnum} v Version
     * @param {getStatusMy1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatusMy1(v: getStatusMy1VEnum, language: getStatusMy1LanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotifyHistoryStatusUserResponse>>;
    /**
     *
     * @summary Set notification in cabinet as read
     * @param {markOfRead1VEnum} v Version
     * @param {markOfRead1LanguageEnum} language Current language
     * @param {SiteMarkReadHistoryRequest} siteMarkReadHistoryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    markOfRead1(v: markOfRead1VEnum, language: markOfRead1LanguageEnum, siteMarkReadHistoryRequest: SiteMarkReadHistoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteMarkReadHistoryResponse>>;
    /**
     *
     * @summary Run action in my notify item
     * @param {runAction1VEnum} v Version
     * @param {string} notifyHistoryId Id of page in mongodb
     * @param {string} actionName Action name
     * @param {string} groupId Group id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runAction1(v: runAction1VEnum, notifyHistoryId: string, actionName: string, groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotifyHistorySiteResponse>>;
    /**
     *
     * @summary Set all notification in cabinet as read
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAllCabinetRead1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
};
/**
 * NotifyHistoryApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get my NotifyHistory item by id
     * @param {get1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get1(requestParameters: get1Request, options?: RawAxiosRequestConfig): AxiosPromise<NotifyHistorySiteResponse>;
    /**
     *
     * @summary Get list of my notifications
     * @param {getListMy1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListMy1(requestParameters: getListMy1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfNotifyHistorySiteResponse>;
    /**
     *
     * @summary Get my status unread message for user
     * @param {getStatusMy1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatusMy1(requestParameters: getStatusMy1Request, options?: RawAxiosRequestConfig): AxiosPromise<NotifyHistoryStatusUserResponse>;
    /**
     *
     * @summary Set notification in cabinet as read
     * @param {markOfRead1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    markOfRead1(requestParameters: markOfRead1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteMarkReadHistoryResponse>;
    /**
     *
     * @summary Run action in my notify item
     * @param {runAction1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runAction1(requestParameters: runAction1Request, options?: RawAxiosRequestConfig): AxiosPromise<NotifyHistorySiteResponse>;
    /**
     *
     * @summary Set all notification in cabinet as read
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAllCabinetRead1(options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
};
/**
 * Request parameters for get1 operation in NotifyHistoryApi.
 * @export
 * @interface get1Request
 */
export interface get1Request {
    /**
     * Version
     * @type {'1'}
     * @memberof get1
     */
    readonly v?: get1VEnum;
    /**
     * Id of page in mongodb
     * @type {string}
     * @memberof get1
     */
    readonly id: string;
}
/**
 * Request parameters for getListMy1 operation in NotifyHistoryApi.
 * @export
 * @interface getListMy1Request
 */
export interface getListMy1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getListMy1
     */
    readonly v?: getListMy1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getListMy1
     */
    readonly language: getListMy1LanguageEnum;
    /**
     * Number of results
     * @type {number}
     * @memberof getListMy1
     */
    readonly limit?: number;
    /**
     * Page offset number
     * @type {number}
     * @memberof getListMy1
     */
    readonly offset?: number;
    /**
     * Project id
     * @type {number}
     * @memberof getListMy1
     */
    readonly projectId?: number;
    /**
     * Name
     * @type {'high_bitrate' | 'request_access_channel' | 'request_access_project' | 'promocode_test' | 'stream_test' | 'plan_restream_expires' | 'plan_restream_expired' | 'plan_restream_renewed' | 'plan_transcoder_expires' | 'plan_transcoder_expired' | 'plan_transcoder_renewed' | 'plan_storage_expires' | 'plan_storage_expired' | 'plan_storage_renewed' | 'broadcast_unsupported_codec' | 'broadcast_unsupported_codec_screen' | 'broadcast_bitrate_exceeded_screen' | 'rtmp_connect_old_server_screen' | 'broadcast_not_audio' | 'broadcast_bitrate_exceeded' | 'broadcast_started' | 'broadcast_stopped' | 'restream_check_twitch_bitrate_1' | 'api_pause_start' | 'api_pause_end' | 'api_wait_edit' | 'api_restream_start' | 'api_restream_stop' | 'api_drop_broadcast' | 'api_drop_broadcast_remove_company' | 'api_drop_broadcast_update_key' | 'publisher_disconnected' | 'publisher_connected' | 'publisher_initializing' | 'publisher_close' | 'broadcast_connected_start' | 'broadcast_connected_end' | 'broadcast_connecting_stream' | 'broadcast_started_new_stream' | 'broadcast_connecting_lost' | 'broadcast_video_lost_start' | 'broadcast_video_lost_end' | 'broadcast_video_pause_start' | 'broadcast_video_pause_end' | 'broadcast_init_restream' | 'start_stream' | 'create_reader' | 'start_channel' | 'stop_channel' | 'stop_stream_video_timeout' | 'stop_stream_no_start_video' | 'stop_stream' | 'delete_reader' | 'transcoder_start' | 'transcoder_stop' | 'start_channel_failed' | 'start_channel_success' | 'api_channel_initializing_start' | 'api_channel_initializing_failed' | 'api_channel_initializing_success' | 'channel_api_update_settings_success' | 'channel_api_update_settings_error' | 'channel_api_update_playlist_success' | 'channel_api_update_playlist_error' | 'channel_api_update_chat_error' | 'channel_api_stream_key_success' | 'channel_api_stream_key_error' | 'channel_api_auto_stop_disable_success' | 'channel_api_auto_stop_disable_error' | 'channel_api_unbinding_stream_key_error' | 'channel_api_create_broadcast_success' | 'channel_api_create_broadcast_error' | 'channel_api_set_planned_success' | 'channel_api_set_planned_error' | 'channel_api_set_thumbnail_success' | 'channel_api_set_thumbnail_error' | 'channel_token_error' | 'channel_api_group_failed' | 'no_audio_reader' | 'restream_check_twitch_bitrate_2' | 'transcoder_support_error_screen' | 'transcoder_tariff_end_screen' | 'transcoder_count_flow_screen' | 'transcoder_resolution_screen' | 'stream_key_banned' | 'broadcast_change_codec' | 'broadcast_change_region' | 'video_upload_error' | 'stop_channel_error' | 'broadcast_user_action_stop'}
     * @memberof getListMy1
     */
    readonly name?: getListMy1NameEnum;
    /**
     * Channel
     * @type {'telegram' | 'cabinet' | 'mobile'}
     * @memberof getListMy1
     */
    readonly channel?: getListMy1ChannelEnum;
    /**
     * Date from
     * @type {string}
     * @memberof getListMy1
     */
    readonly dateFrom?: string;
    /**
     * Date to
     * @type {string}
     * @memberof getListMy1
     */
    readonly dateTo?: string;
    /**
     * Status read
     * @type {'unread' | 'read'}
     * @memberof getListMy1
     */
    readonly statusRead?: getListMy1StatusReadEnum;
}
/**
 * Request parameters for getStatusMy1 operation in NotifyHistoryApi.
 * @export
 * @interface getStatusMy1Request
 */
export interface getStatusMy1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getStatusMy1
     */
    readonly v?: getStatusMy1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getStatusMy1
     */
    readonly language: getStatusMy1LanguageEnum;
}
/**
 * Request parameters for markOfRead1 operation in NotifyHistoryApi.
 * @export
 * @interface markOfRead1Request
 */
export interface markOfRead1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof markOfRead1
     */
    readonly v?: markOfRead1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof markOfRead1
     */
    readonly language: markOfRead1LanguageEnum;
    /**
     *
     * @type {SiteMarkReadHistoryRequest}
     * @memberof markOfRead1
     */
    readonly siteMarkReadHistoryRequest: SiteMarkReadHistoryRequest;
}
/**
 * Request parameters for runAction1 operation in NotifyHistoryApi.
 * @export
 * @interface runAction1Request
 */
export interface runAction1Request {
    /**
     * Version
     * @type {'1'}
     * @memberof runAction1
     */
    readonly v?: runAction1VEnum;
    /**
     * Id of page in mongodb
     * @type {string}
     * @memberof runAction1
     */
    readonly notifyHistoryId: string;
    /**
     * Action name
     * @type {string}
     * @memberof runAction1
     */
    readonly actionName: string;
    /**
     * Group id
     * @type {string}
     * @memberof runAction1
     */
    readonly groupId: string;
}
/**
 * NotifyHistoryApi - object-oriented interface
 * @export
 * @class NotifyHistoryApi
 * @extends {BaseAPI}
 */
export declare class NotifyHistoryApi extends BaseAPI {
    /**
     *
     * @summary Get my NotifyHistory item by id
     * @param {get1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    get1(requestParameters: get1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<NotifyHistorySiteResponse, any>>;
    /**
     *
     * @summary Get list of my notifications
     * @param {getListMy1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    getListMy1(requestParameters: getListMy1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").PaginatedResponse, any>>;
    /**
     *
     * @summary Get my status unread message for user
     * @param {getStatusMy1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    getStatusMy1(requestParameters: getStatusMy1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<NotifyHistoryStatusUserResponse, any>>;
    /**
     *
     * @summary Set notification in cabinet as read
     * @param {markOfRead1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    markOfRead1(requestParameters: markOfRead1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteMarkReadHistoryResponse, any>>;
    /**
     *
     * @summary Run action in my notify item
     * @param {runAction1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    runAction1(requestParameters: runAction1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<NotifyHistorySiteResponse, any>>;
    /**
     *
     * @summary Set all notification in cabinet as read
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    setAllCabinetRead1(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum get1VEnum {
    _1 = "1"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getListMy1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getListMy1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getListMy1NameEnum {
    high_bitrate = "high_bitrate",
    request_access_channel = "request_access_channel",
    request_access_project = "request_access_project",
    promocode_test = "promocode_test",
    stream_test = "stream_test",
    plan_restream_expires = "plan_restream_expires",
    plan_restream_expired = "plan_restream_expired",
    plan_restream_renewed = "plan_restream_renewed",
    plan_transcoder_expires = "plan_transcoder_expires",
    plan_transcoder_expired = "plan_transcoder_expired",
    plan_transcoder_renewed = "plan_transcoder_renewed",
    plan_storage_expires = "plan_storage_expires",
    plan_storage_expired = "plan_storage_expired",
    plan_storage_renewed = "plan_storage_renewed",
    broadcast_unsupported_codec = "broadcast_unsupported_codec",
    broadcast_unsupported_codec_screen = "broadcast_unsupported_codec_screen",
    broadcast_bitrate_exceeded_screen = "broadcast_bitrate_exceeded_screen",
    rtmp_connect_old_server_screen = "rtmp_connect_old_server_screen",
    broadcast_not_audio = "broadcast_not_audio",
    broadcast_bitrate_exceeded = "broadcast_bitrate_exceeded",
    broadcast_started = "broadcast_started",
    broadcast_stopped = "broadcast_stopped",
    restream_check_twitch_bitrate_1 = "restream_check_twitch_bitrate_1",
    api_pause_start = "api_pause_start",
    api_pause_end = "api_pause_end",
    api_wait_edit = "api_wait_edit",
    api_restream_start = "api_restream_start",
    api_restream_stop = "api_restream_stop",
    api_drop_broadcast = "api_drop_broadcast",
    api_drop_broadcast_remove_company = "api_drop_broadcast_remove_company",
    api_drop_broadcast_update_key = "api_drop_broadcast_update_key",
    publisher_disconnected = "publisher_disconnected",
    publisher_connected = "publisher_connected",
    publisher_initializing = "publisher_initializing",
    publisher_close = "publisher_close",
    broadcast_connected_start = "broadcast_connected_start",
    broadcast_connected_end = "broadcast_connected_end",
    broadcast_connecting_stream = "broadcast_connecting_stream",
    broadcast_started_new_stream = "broadcast_started_new_stream",
    broadcast_connecting_lost = "broadcast_connecting_lost",
    broadcast_video_lost_start = "broadcast_video_lost_start",
    broadcast_video_lost_end = "broadcast_video_lost_end",
    broadcast_video_pause_start = "broadcast_video_pause_start",
    broadcast_video_pause_end = "broadcast_video_pause_end",
    broadcast_init_restream = "broadcast_init_restream",
    start_stream = "start_stream",
    create_reader = "create_reader",
    start_channel = "start_channel",
    stop_channel = "stop_channel",
    stop_stream_video_timeout = "stop_stream_video_timeout",
    stop_stream_no_start_video = "stop_stream_no_start_video",
    stop_stream = "stop_stream",
    delete_reader = "delete_reader",
    transcoder_start = "transcoder_start",
    transcoder_stop = "transcoder_stop",
    start_channel_failed = "start_channel_failed",
    start_channel_success = "start_channel_success",
    api_channel_initializing_start = "api_channel_initializing_start",
    api_channel_initializing_failed = "api_channel_initializing_failed",
    api_channel_initializing_success = "api_channel_initializing_success",
    channel_api_update_settings_success = "channel_api_update_settings_success",
    channel_api_update_settings_error = "channel_api_update_settings_error",
    channel_api_update_playlist_success = "channel_api_update_playlist_success",
    channel_api_update_playlist_error = "channel_api_update_playlist_error",
    channel_api_update_chat_error = "channel_api_update_chat_error",
    channel_api_stream_key_success = "channel_api_stream_key_success",
    channel_api_stream_key_error = "channel_api_stream_key_error",
    channel_api_auto_stop_disable_success = "channel_api_auto_stop_disable_success",
    channel_api_auto_stop_disable_error = "channel_api_auto_stop_disable_error",
    channel_api_unbinding_stream_key_error = "channel_api_unbinding_stream_key_error",
    channel_api_create_broadcast_success = "channel_api_create_broadcast_success",
    channel_api_create_broadcast_error = "channel_api_create_broadcast_error",
    channel_api_set_planned_success = "channel_api_set_planned_success",
    channel_api_set_planned_error = "channel_api_set_planned_error",
    channel_api_set_thumbnail_success = "channel_api_set_thumbnail_success",
    channel_api_set_thumbnail_error = "channel_api_set_thumbnail_error",
    channel_token_error = "channel_token_error",
    channel_api_group_failed = "channel_api_group_failed",
    no_audio_reader = "no_audio_reader",
    restream_check_twitch_bitrate_2 = "restream_check_twitch_bitrate_2",
    transcoder_support_error_screen = "transcoder_support_error_screen",
    transcoder_tariff_end_screen = "transcoder_tariff_end_screen",
    transcoder_count_flow_screen = "transcoder_count_flow_screen",
    transcoder_resolution_screen = "transcoder_resolution_screen",
    stream_key_banned = "stream_key_banned",
    broadcast_change_codec = "broadcast_change_codec",
    broadcast_change_region = "broadcast_change_region",
    video_upload_error = "video_upload_error",
    stop_channel_error = "stop_channel_error",
    broadcast_user_action_stop = "broadcast_user_action_stop"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getListMy1ChannelEnum {
    telegram = "telegram",
    cabinet = "cabinet",
    mobile = "mobile"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getListMy1StatusReadEnum {
    unread = "unread",
    read = "read"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getStatusMy1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getStatusMy1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum markOfRead1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum markOfRead1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum runAction1VEnum {
    _1 = "1"
}
//# sourceMappingURL=notify-history-api.d.ts.map