"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.state1IntervalEnum = exports.state1LanguageEnum = exports.state1VEnum = exports.list1IntervalEnum = exports.list1LanguageEnum = exports.list1VEnum = exports.graph1TypeEnum = exports.graph1IntervalEnum = exports.graph1LanguageEnum = exports.graph1VEnum = exports.listLocationsUnauthorizedLanguageEnum = exports.listLocationsUnauthorizedVEnum = exports.RtmpServerApi = exports.factory = exports.fp = exports.axiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * RtmpServerApi - axios parameter creator
 * @export
 */
const axiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Rtmp locations server list example for unauthorized
         * @param {listLocationsUnauthorizedVEnum} v Version
         * @param {listLocationsUnauthorizedLanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocationsUnauthorized: async (v, language, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('listLocationsUnauthorized', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('listLocationsUnauthorized', 'language', language);
            const localVarPath = `/method/rtmp_server/list_locations_unauthorized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Graph of rtmp servers
         * @param {graph1VEnum} v Version
         * @param {graph1LanguageEnum} language Current language
         * @param {graph1IntervalEnum} interval Interval state in hours
         * @param {graph1TypeEnum} type Type graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        graph1: async (v, language, interval, type, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('graph1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('graph1', 'language', language);
            // verify required parameter 'interval' is not null or undefined
            (0, common_1.assertParamExists)('graph1', 'interval', interval);
            // verify required parameter 'type' is not null or undefined
            (0, common_1.assertParamExists)('graph1', 'type', type);
            const localVarPath = `/method/rtmp_server/graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List rtmp servers
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {list1IntervalEnum} interval Interval state in hours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1: async (v, language, projectId, interval, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('list1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('list1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('list1', 'projectId', projectId);
            // verify required parameter 'interval' is not null or undefined
            (0, common_1.assertParamExists)('list1', 'interval', interval);
            const localVarPath = `/method/rtmp_server/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary State of rtmp servers
         * @param {state1VEnum} v Version
         * @param {state1LanguageEnum} language Current language
         * @param {state1IntervalEnum} interval Interval state in hours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        state1: async (v, language, interval, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('state1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('state1', 'language', language);
            // verify required parameter 'interval' is not null or undefined
            (0, common_1.assertParamExists)('state1', 'interval', interval);
            const localVarPath = `/method/rtmp_server/state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary State of rtmp servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        up1: async (options = {}) => {
            const localVarPath = `/method/rtmp_server/up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.axiosParamCreator = axiosParamCreator;
/**
 * RtmpServerApi - functional programming interface
 * @export
 */
const fp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.axiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Rtmp locations server list example for unauthorized
         * @param {listLocationsUnauthorizedVEnum} v Version
         * @param {listLocationsUnauthorizedLanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLocationsUnauthorized(v, language, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLocationsUnauthorized(v, language, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['RtmpServerApi.listLocationsUnauthorized']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Graph of rtmp servers
         * @param {graph1VEnum} v Version
         * @param {graph1LanguageEnum} language Current language
         * @param {graph1IntervalEnum} interval Interval state in hours
         * @param {graph1TypeEnum} type Type graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async graph1(v, language, interval, type, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.graph1(v, language, interval, type, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['RtmpServerApi.graph1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary List rtmp servers
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {list1IntervalEnum} interval Interval state in hours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list1(v, language, projectId, interval, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.list1(v, language, projectId, interval, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['RtmpServerApi.list1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary State of rtmp servers
         * @param {state1VEnum} v Version
         * @param {state1LanguageEnum} language Current language
         * @param {state1IntervalEnum} interval Interval state in hours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async state1(v, language, interval, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.state1(v, language, interval, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['RtmpServerApi.state1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary State of rtmp servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async up1(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.up1(options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['RtmpServerApi.up1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.fp = fp;
/**
 * RtmpServerApi - factory interface
 * @export
 */
const factory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.fp)(configuration);
    return {
        /**
         *
         * @summary Rtmp locations server list example for unauthorized
         * @param {listLocationsUnauthorizedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocationsUnauthorized(requestParameters, options) {
            return localVarFp.listLocationsUnauthorized(requestParameters.v, requestParameters.language, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Graph of rtmp servers
         * @param {graph1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        graph1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || graph1VEnum._1;
            return localVarFp.graph1(actualV, requestParameters.language, requestParameters.interval, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List rtmp servers
         * @param {list1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || list1VEnum._1;
            return localVarFp.list1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.interval, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary State of rtmp servers
         * @param {state1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        state1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || state1VEnum._1;
            return localVarFp.state1(actualV, requestParameters.language, requestParameters.interval, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary State of rtmp servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        up1(options) {
            return localVarFp.up1(options).then((request) => request(axios, basePath));
        },
    };
};
exports.factory = factory;
/**
 * RtmpServerApi - object-oriented interface
 * @export
 * @class RtmpServerApi
 * @extends {BaseAPI}
 */
class RtmpServerApi extends base_1.BaseAPI {
    /**
     *
     * @summary Rtmp locations server list example for unauthorized
     * @param {listLocationsUnauthorizedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    listLocationsUnauthorized(requestParameters, options) {
        return (0, exports.fp)(this.configuration).listLocationsUnauthorized(requestParameters.v, requestParameters.language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Graph of rtmp servers
     * @param {graph1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    graph1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || graph1VEnum._1;
        return (0, exports.fp)(this.configuration).graph1(actualV, requestParameters.language, requestParameters.interval, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List rtmp servers
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    list1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || list1VEnum._1;
        return (0, exports.fp)(this.configuration).list1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.interval, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary State of rtmp servers
     * @param {state1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    state1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || state1VEnum._1;
        return (0, exports.fp)(this.configuration).state1(actualV, requestParameters.language, requestParameters.interval, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary State of rtmp servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    up1(options) {
        return (0, exports.fp)(this.configuration).up1(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RtmpServerApi = RtmpServerApi;
/**
  * @export
  * @enum {string}
  */
var listLocationsUnauthorizedVEnum;
(function (listLocationsUnauthorizedVEnum) {
    listLocationsUnauthorizedVEnum["_1"] = "1";
    listLocationsUnauthorizedVEnum["_2"] = "2";
    listLocationsUnauthorizedVEnum["_3"] = "3";
})(listLocationsUnauthorizedVEnum || (exports.listLocationsUnauthorizedVEnum = listLocationsUnauthorizedVEnum = {}));
/**
  * @export
  * @enum {string}
  */
var listLocationsUnauthorizedLanguageEnum;
(function (listLocationsUnauthorizedLanguageEnum) {
    listLocationsUnauthorizedLanguageEnum["ru"] = "ru";
    listLocationsUnauthorizedLanguageEnum["en"] = "en";
    listLocationsUnauthorizedLanguageEnum["cn"] = "cn";
})(listLocationsUnauthorizedLanguageEnum || (exports.listLocationsUnauthorizedLanguageEnum = listLocationsUnauthorizedLanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var graph1VEnum;
(function (graph1VEnum) {
    graph1VEnum["_1"] = "1";
    graph1VEnum["_2"] = "2";
    graph1VEnum["_3"] = "3";
})(graph1VEnum || (exports.graph1VEnum = graph1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var graph1LanguageEnum;
(function (graph1LanguageEnum) {
    graph1LanguageEnum["ru"] = "ru";
    graph1LanguageEnum["en"] = "en";
    graph1LanguageEnum["cn"] = "cn";
})(graph1LanguageEnum || (exports.graph1LanguageEnum = graph1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var graph1IntervalEnum;
(function (graph1IntervalEnum) {
    graph1IntervalEnum[graph1IntervalEnum["NUMBER_1"] = 1] = "NUMBER_1";
    graph1IntervalEnum[graph1IntervalEnum["NUMBER_3"] = 3] = "NUMBER_3";
    graph1IntervalEnum[graph1IntervalEnum["NUMBER_6"] = 6] = "NUMBER_6";
    graph1IntervalEnum[graph1IntervalEnum["NUMBER_12"] = 12] = "NUMBER_12";
    graph1IntervalEnum[graph1IntervalEnum["NUMBER_24"] = 24] = "NUMBER_24";
})(graph1IntervalEnum || (exports.graph1IntervalEnum = graph1IntervalEnum = {}));
/**
  * @export
  * @enum {string}
  */
var graph1TypeEnum;
(function (graph1TypeEnum) {
    graph1TypeEnum["performance"] = "performance";
    graph1TypeEnum["network"] = "network";
    graph1TypeEnum["cpu"] = "cpu";
    graph1TypeEnum["ram"] = "ram";
    graph1TypeEnum["deliveredPackages"] = "deliveredPackages";
})(graph1TypeEnum || (exports.graph1TypeEnum = graph1TypeEnum = {}));
/**
  * @export
  * @enum {string}
  */
var list1VEnum;
(function (list1VEnum) {
    list1VEnum["_1"] = "1";
    list1VEnum["_2"] = "2";
    list1VEnum["_3"] = "3";
})(list1VEnum || (exports.list1VEnum = list1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var list1LanguageEnum;
(function (list1LanguageEnum) {
    list1LanguageEnum["ru"] = "ru";
    list1LanguageEnum["en"] = "en";
    list1LanguageEnum["cn"] = "cn";
})(list1LanguageEnum || (exports.list1LanguageEnum = list1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var list1IntervalEnum;
(function (list1IntervalEnum) {
    list1IntervalEnum[list1IntervalEnum["NUMBER_1"] = 1] = "NUMBER_1";
    list1IntervalEnum[list1IntervalEnum["NUMBER_3"] = 3] = "NUMBER_3";
    list1IntervalEnum[list1IntervalEnum["NUMBER_6"] = 6] = "NUMBER_6";
    list1IntervalEnum[list1IntervalEnum["NUMBER_12"] = 12] = "NUMBER_12";
    list1IntervalEnum[list1IntervalEnum["NUMBER_24"] = 24] = "NUMBER_24";
})(list1IntervalEnum || (exports.list1IntervalEnum = list1IntervalEnum = {}));
/**
  * @export
  * @enum {string}
  */
var state1VEnum;
(function (state1VEnum) {
    state1VEnum["_1"] = "1";
    state1VEnum["_2"] = "2";
    state1VEnum["_3"] = "3";
})(state1VEnum || (exports.state1VEnum = state1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var state1LanguageEnum;
(function (state1LanguageEnum) {
    state1LanguageEnum["ru"] = "ru";
    state1LanguageEnum["en"] = "en";
    state1LanguageEnum["cn"] = "cn";
})(state1LanguageEnum || (exports.state1LanguageEnum = state1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var state1IntervalEnum;
(function (state1IntervalEnum) {
    state1IntervalEnum[state1IntervalEnum["NUMBER_1"] = 1] = "NUMBER_1";
    state1IntervalEnum[state1IntervalEnum["NUMBER_3"] = 3] = "NUMBER_3";
    state1IntervalEnum[state1IntervalEnum["NUMBER_6"] = 6] = "NUMBER_6";
    state1IntervalEnum[state1IntervalEnum["NUMBER_12"] = 12] = "NUMBER_12";
    state1IntervalEnum[state1IntervalEnum["NUMBER_24"] = 24] = "NUMBER_24";
})(state1IntervalEnum || (exports.state1IntervalEnum = state1IntervalEnum = {}));
