"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromoCheckV1VEnum = exports.PromoCheckV1LanguageEnum = exports.PromoApplyV1VEnum = exports.PromoApplyV1LanguageEnum = exports.PromoApi = exports.PromoApiFactory = exports.PromoApiFp = exports.PromoApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PromoApi - axios parameter creator
 * @export
 */
const PromoApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Apply code
         * @param {PromoApplyV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} code Code
         * @param {PromoApplyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoApplyV1: async (language, projectId, code, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('promoApplyV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('promoApplyV1', 'projectId', projectId);
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('promoApplyV1', 'code', code);
            const localVarPath = `/method/promo/apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Check code
         * @param {PromoCheckV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} code Code
         * @param {PromoCheckV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoCheckV1: async (language, projectId, code, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('promoCheckV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('promoCheckV1', 'projectId', projectId);
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('promoCheckV1', 'code', code);
            const localVarPath = `/method/promo/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PromoApiAxiosParamCreator = PromoApiAxiosParamCreator;
/**
 * PromoApi - functional programming interface
 * @export
 */
const PromoApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PromoApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Apply code
         * @param {PromoApplyV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} code Code
         * @param {PromoApplyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promoApplyV1(language, projectId, code, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.promoApplyV1(language, projectId, code, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PromoApi.promoApplyV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Check code
         * @param {PromoCheckV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} code Code
         * @param {PromoCheckV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promoCheckV1(language, projectId, code, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.promoCheckV1(language, projectId, code, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PromoApi.promoCheckV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PromoApiFp = PromoApiFp;
/**
 * PromoApi - factory interface
 * @export
 */
const PromoApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PromoApiFp)(configuration);
    return {
        /**
         *
         * @summary Apply code
         * @param {PromoApiPromoApplyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoApplyV1(requestParameters, options) {
            return localVarFp.promoApplyV1(requestParameters.language, requestParameters.projectId, requestParameters.code, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Check code
         * @param {PromoApiPromoCheckV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoCheckV1(requestParameters, options) {
            return localVarFp.promoCheckV1(requestParameters.language, requestParameters.projectId, requestParameters.code, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PromoApiFactory = PromoApiFactory;
/**
 * PromoApi - object-oriented interface
 * @export
 * @class PromoApi
 * @extends {BaseAPI}
 */
class PromoApi extends base_1.BaseAPI {
    /**
     *
     * @summary Apply code
     * @param {PromoApiPromoApplyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromoApi
     */
    promoApplyV1(requestParameters, options) {
        return (0, exports.PromoApiFp)(this.configuration).promoApplyV1(requestParameters.language, requestParameters.projectId, requestParameters.code, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Check code
     * @param {PromoApiPromoCheckV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromoApi
     */
    promoCheckV1(requestParameters, options) {
        return (0, exports.PromoApiFp)(this.configuration).promoCheckV1(requestParameters.language, requestParameters.projectId, requestParameters.code, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PromoApi = PromoApi;
/**
 * @export
 */
exports.PromoApplyV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PromoApplyV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PromoCheckV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PromoCheckV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
