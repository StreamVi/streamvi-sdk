"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserUpdateProfileV1LanguageEnum = exports.UserUpdateProfileV1VEnum = exports.UserGetProfileV1VEnum = exports.UserGetProfileV1LanguageEnum = exports.UserApi = exports.UserApiFactory = exports.UserApiFp = exports.UserApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * UserApi - axios parameter creator
 * @export
 */
const UserApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get user profile
         * @param {UserGetProfileV1LanguageEnum} language Current language
         * @param {UserGetProfileV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number | null} [projectId] Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGetProfileV1: async (language, v, projectId, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('userGetProfileV1', 'language', language);
            const localVarPath = `/method/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update profile
         * @param {UserUpdateProfileV1VEnum} v Version
         * @param {UserUpdateProfileV1LanguageEnum} language Current language
         * @param {string} firstName First name
         * @param {string} lastName Last name
         * @param {File} [avatar] File for avatar upload max size 2MB, format: jpeg, jpg, png
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdateProfileV1: async (v, language, firstName, lastName, avatar, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('userUpdateProfileV1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('userUpdateProfileV1', 'language', language);
            // verify required parameter 'firstName' is not null or undefined
            (0, common_1.assertParamExists)('userUpdateProfileV1', 'firstName', firstName);
            // verify required parameter 'lastName' is not null or undefined
            (0, common_1.assertParamExists)('userUpdateProfileV1', 'lastName', lastName);
            const localVarPath = `/method/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            if (v !== undefined) {
                localVarFormParams.append('v', v);
            }
            else {
                localVarFormParams.append('v', '1');
            }
            if (language !== undefined) {
                localVarFormParams.append('language', language);
            }
            if (firstName !== undefined) {
                localVarFormParams.append('first_name', firstName);
            }
            if (lastName !== undefined) {
                localVarFormParams.append('last_name', lastName);
            }
            if (avatar !== undefined) {
                localVarFormParams.append('avatar', avatar);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.UserApiAxiosParamCreator = UserApiAxiosParamCreator;
/**
 * UserApi - functional programming interface
 * @export
 */
const UserApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.UserApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get user profile
         * @param {UserGetProfileV1LanguageEnum} language Current language
         * @param {UserGetProfileV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number | null} [projectId] Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userGetProfileV1(language, v, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.userGetProfileV1(language, v, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserApi.userGetProfileV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update profile
         * @param {UserUpdateProfileV1VEnum} v Version
         * @param {UserUpdateProfileV1LanguageEnum} language Current language
         * @param {string} firstName First name
         * @param {string} lastName Last name
         * @param {File} [avatar] File for avatar upload max size 2MB, format: jpeg, jpg, png
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userUpdateProfileV1(v, language, firstName, lastName, avatar, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.userUpdateProfileV1(v, language, firstName, lastName, avatar, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserApi.userUpdateProfileV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.UserApiFp = UserApiFp;
/**
 * UserApi - factory interface
 * @export
 */
const UserApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.UserApiFp)(configuration);
    return {
        /**
         *
         * @summary Get user profile
         * @param {UserApiUserGetProfileV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGetProfileV1(requestParameters, options) {
            return localVarFp.userGetProfileV1(requestParameters.language, requestParameters.v, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update profile
         * @param {UserApiUserUpdateProfileV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdateProfileV1(requestParameters, options) {
            return localVarFp.userUpdateProfileV1(requestParameters.v, requestParameters.language, requestParameters.firstName, requestParameters.lastName, requestParameters.avatar, options).then((request) => request(axios, basePath));
        },
    };
};
exports.UserApiFactory = UserApiFactory;
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
class UserApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get user profile
     * @param {UserApiUserGetProfileV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    userGetProfileV1(requestParameters, options) {
        return (0, exports.UserApiFp)(this.configuration).userGetProfileV1(requestParameters.language, requestParameters.v, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update profile
     * @param {UserApiUserUpdateProfileV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    userUpdateProfileV1(requestParameters, options) {
        return (0, exports.UserApiFp)(this.configuration).userUpdateProfileV1(requestParameters.v, requestParameters.language, requestParameters.firstName, requestParameters.lastName, requestParameters.avatar, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.UserApi = UserApi;
/**
 * @export
 */
exports.UserGetProfileV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.UserGetProfileV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.UserUpdateProfileV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.UserUpdateProfileV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
