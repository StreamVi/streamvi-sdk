"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamPullKeysSiteRemoveV1VEnum = exports.StreamPullKeysSiteRemoveV1LanguageEnum = exports.StreamPullKeysSiteGetV1VEnum = exports.StreamPullKeysSiteGetV1LanguageEnum = exports.StreamPullKeysSiteCheckV1VEnum = exports.StreamPullKeysSiteCheckV1LanguageEnum = exports.StreamPullKeysApi = exports.StreamPullKeysApiFactory = exports.StreamPullKeysApiFp = exports.StreamPullKeysApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * StreamPullKeysApi - axios parameter creator
 * @export
 */
const StreamPullKeysApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Check key
         * @param {StreamPullKeysSiteCheckV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {string} key Key
         * @param {StreamPullKeysSiteCheckV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteCheckV1: async (language, projectId, key, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteCheckV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteCheckV1', 'projectId', projectId);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteCheckV1', 'key', key);
            const localVarPath = `/method/stream-pull-keys/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create key
         * @param {CreatePullKeyRequest} createPullKeyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteCreateV1: async (createPullKeyRequest, options = {}) => {
            // verify required parameter 'createPullKeyRequest' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteCreateV1', 'createPullKeyRequest', createPullKeyRequest);
            const localVarPath = `/method/stream-pull-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createPullKeyRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List keys
         * @param {StreamPullKeysSiteGetV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {StreamPullKeysSiteGetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteGetV1: async (language, projectId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteGetV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteGetV1', 'projectId', projectId);
            const localVarPath = `/method/stream-pull-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete key
         * @param {StreamPullKeysSiteRemoveV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {string} key Key
         * @param {StreamPullKeysSiteRemoveV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteRemoveV1: async (language, projectId, key, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteRemoveV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteRemoveV1', 'projectId', projectId);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteRemoveV1', 'key', key);
            const localVarPath = `/method/stream-pull-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update key
         * @param {UpdatePullKeyRequest} updatePullKeyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteUpdateV1: async (updatePullKeyRequest, options = {}) => {
            // verify required parameter 'updatePullKeyRequest' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteUpdateV1', 'updatePullKeyRequest', updatePullKeyRequest);
            const localVarPath = `/method/stream-pull-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updatePullKeyRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.StreamPullKeysApiAxiosParamCreator = StreamPullKeysApiAxiosParamCreator;
/**
 * StreamPullKeysApi - functional programming interface
 * @export
 */
const StreamPullKeysApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.StreamPullKeysApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Check key
         * @param {StreamPullKeysSiteCheckV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {string} key Key
         * @param {StreamPullKeysSiteCheckV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamPullKeysSiteCheckV1(language, projectId, key, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamPullKeysSiteCheckV1(language, projectId, key, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StreamPullKeysApi.streamPullKeysSiteCheckV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Create key
         * @param {CreatePullKeyRequest} createPullKeyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamPullKeysSiteCreateV1(createPullKeyRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamPullKeysSiteCreateV1(createPullKeyRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StreamPullKeysApi.streamPullKeysSiteCreateV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary List keys
         * @param {StreamPullKeysSiteGetV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {StreamPullKeysSiteGetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamPullKeysSiteGetV1(language, projectId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamPullKeysSiteGetV1(language, projectId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StreamPullKeysApi.streamPullKeysSiteGetV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Delete key
         * @param {StreamPullKeysSiteRemoveV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {string} key Key
         * @param {StreamPullKeysSiteRemoveV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamPullKeysSiteRemoveV1(language, projectId, key, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamPullKeysSiteRemoveV1(language, projectId, key, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StreamPullKeysApi.streamPullKeysSiteRemoveV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update key
         * @param {UpdatePullKeyRequest} updatePullKeyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamPullKeysSiteUpdateV1(updatePullKeyRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamPullKeysSiteUpdateV1(updatePullKeyRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StreamPullKeysApi.streamPullKeysSiteUpdateV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.StreamPullKeysApiFp = StreamPullKeysApiFp;
/**
 * StreamPullKeysApi - factory interface
 * @export
 */
const StreamPullKeysApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.StreamPullKeysApiFp)(configuration);
    return {
        /**
         *
         * @summary Check key
         * @param {StreamPullKeysApiStreamPullKeysSiteCheckV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteCheckV1(requestParameters, options) {
            return localVarFp.streamPullKeysSiteCheckV1(requestParameters.language, requestParameters.projectId, requestParameters.key, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create key
         * @param {StreamPullKeysApiStreamPullKeysSiteCreateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteCreateV1(requestParameters, options) {
            return localVarFp.streamPullKeysSiteCreateV1(requestParameters.createPullKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List keys
         * @param {StreamPullKeysApiStreamPullKeysSiteGetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteGetV1(requestParameters, options) {
            return localVarFp.streamPullKeysSiteGetV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete key
         * @param {StreamPullKeysApiStreamPullKeysSiteRemoveV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteRemoveV1(requestParameters, options) {
            return localVarFp.streamPullKeysSiteRemoveV1(requestParameters.language, requestParameters.projectId, requestParameters.key, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update key
         * @param {StreamPullKeysApiStreamPullKeysSiteUpdateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteUpdateV1(requestParameters, options) {
            return localVarFp.streamPullKeysSiteUpdateV1(requestParameters.updatePullKeyRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.StreamPullKeysApiFactory = StreamPullKeysApiFactory;
/**
 * StreamPullKeysApi - object-oriented interface
 * @export
 * @class StreamPullKeysApi
 * @extends {BaseAPI}
 */
class StreamPullKeysApi extends base_1.BaseAPI {
    /**
     *
     * @summary Check key
     * @param {StreamPullKeysApiStreamPullKeysSiteCheckV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    streamPullKeysSiteCheckV1(requestParameters, options) {
        return (0, exports.StreamPullKeysApiFp)(this.configuration).streamPullKeysSiteCheckV1(requestParameters.language, requestParameters.projectId, requestParameters.key, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create key
     * @param {StreamPullKeysApiStreamPullKeysSiteCreateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    streamPullKeysSiteCreateV1(requestParameters, options) {
        return (0, exports.StreamPullKeysApiFp)(this.configuration).streamPullKeysSiteCreateV1(requestParameters.createPullKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List keys
     * @param {StreamPullKeysApiStreamPullKeysSiteGetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    streamPullKeysSiteGetV1(requestParameters, options) {
        return (0, exports.StreamPullKeysApiFp)(this.configuration).streamPullKeysSiteGetV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete key
     * @param {StreamPullKeysApiStreamPullKeysSiteRemoveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    streamPullKeysSiteRemoveV1(requestParameters, options) {
        return (0, exports.StreamPullKeysApiFp)(this.configuration).streamPullKeysSiteRemoveV1(requestParameters.language, requestParameters.projectId, requestParameters.key, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update key
     * @param {StreamPullKeysApiStreamPullKeysSiteUpdateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    streamPullKeysSiteUpdateV1(requestParameters, options) {
        return (0, exports.StreamPullKeysApiFp)(this.configuration).streamPullKeysSiteUpdateV1(requestParameters.updatePullKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.StreamPullKeysApi = StreamPullKeysApi;
/**
 * @export
 */
exports.StreamPullKeysSiteCheckV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.StreamPullKeysSiteCheckV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.StreamPullKeysSiteGetV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.StreamPullKeysSiteGetV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.StreamPullKeysSiteRemoveV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.StreamPullKeysSiteRemoveV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
