"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.list1LanguageEnum = exports.list1VEnum = exports.TranscodersApi = exports.factory = exports.fp = exports.axiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * TranscodersApi - axios parameter creator
 * @export
 */
const axiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Transcoder create
         * @param {SiteTranscoderCreateDto} siteTranscoderCreateDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add1: async (siteTranscoderCreateDto, options = {}) => {
            // verify required parameter 'siteTranscoderCreateDto' is not null or undefined
            (0, common_1.assertParamExists)('add1', 'siteTranscoderCreateDto', siteTranscoderCreateDto);
            const localVarPath = `/method/transcoder/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteTranscoderCreateDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Transcoder delete
         * @param {SiteTranscoderItemDto} siteTranscoderItemDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1: async (siteTranscoderItemDto, options = {}) => {
            // verify required parameter 'siteTranscoderItemDto' is not null or undefined
            (0, common_1.assertParamExists)('delete1', 'siteTranscoderItemDto', siteTranscoderItemDto);
            const localVarPath = `/method/transcoder/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteTranscoderItemDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of transcoder
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('list1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('list1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('list1', 'projectId', projectId);
            const localVarPath = `/method/transcoder/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Transcoder stop
         * @param {SiteTranscoderItemDto} siteTranscoderItemDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stop1: async (siteTranscoderItemDto, options = {}) => {
            // verify required parameter 'siteTranscoderItemDto' is not null or undefined
            (0, common_1.assertParamExists)('stop1', 'siteTranscoderItemDto', siteTranscoderItemDto);
            const localVarPath = `/method/transcoder/stop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteTranscoderItemDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Transcoder update
         * @param {SiteTranscoderUpdateDto} siteTranscoderUpdateDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1: async (siteTranscoderUpdateDto, options = {}) => {
            // verify required parameter 'siteTranscoderUpdateDto' is not null or undefined
            (0, common_1.assertParamExists)('update1', 'siteTranscoderUpdateDto', siteTranscoderUpdateDto);
            const localVarPath = `/method/transcoder/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteTranscoderUpdateDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.axiosParamCreator = axiosParamCreator;
/**
 * TranscodersApi - functional programming interface
 * @export
 */
const fp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.axiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Transcoder create
         * @param {SiteTranscoderCreateDto} siteTranscoderCreateDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async add1(siteTranscoderCreateDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.add1(siteTranscoderCreateDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TranscodersApi.add1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Transcoder delete
         * @param {SiteTranscoderItemDto} siteTranscoderItemDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete1(siteTranscoderItemDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete1(siteTranscoderItemDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TranscodersApi.delete1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary List of transcoder
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.list1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TranscodersApi.list1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Transcoder stop
         * @param {SiteTranscoderItemDto} siteTranscoderItemDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stop1(siteTranscoderItemDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.stop1(siteTranscoderItemDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TranscodersApi.stop1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Transcoder update
         * @param {SiteTranscoderUpdateDto} siteTranscoderUpdateDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update1(siteTranscoderUpdateDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.update1(siteTranscoderUpdateDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TranscodersApi.update1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.fp = fp;
/**
 * TranscodersApi - factory interface
 * @export
 */
const factory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.fp)(configuration);
    return {
        /**
         *
         * @summary Transcoder create
         * @param {add1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add1(requestParameters, options) {
            return localVarFp.add1(requestParameters.siteTranscoderCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Transcoder delete
         * @param {delete1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1(requestParameters, options) {
            return localVarFp.delete1(requestParameters.siteTranscoderItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List of transcoder
         * @param {list1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || list1VEnum._1;
            return localVarFp.list1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Transcoder stop
         * @param {stop1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stop1(requestParameters, options) {
            return localVarFp.stop1(requestParameters.siteTranscoderItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Transcoder update
         * @param {update1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1(requestParameters, options) {
            return localVarFp.update1(requestParameters.siteTranscoderUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.factory = factory;
/**
 * TranscodersApi - object-oriented interface
 * @export
 * @class TranscodersApi
 * @extends {BaseAPI}
 */
class TranscodersApi extends base_1.BaseAPI {
    /**
     *
     * @summary Transcoder create
     * @param {add1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    add1(requestParameters, options) {
        return (0, exports.fp)(this.configuration).add1(requestParameters.siteTranscoderCreateDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Transcoder delete
     * @param {delete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    delete1(requestParameters, options) {
        return (0, exports.fp)(this.configuration).delete1(requestParameters.siteTranscoderItemDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List of transcoder
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    list1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || list1VEnum._1;
        return (0, exports.fp)(this.configuration).list1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Transcoder stop
     * @param {stop1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    stop1(requestParameters, options) {
        return (0, exports.fp)(this.configuration).stop1(requestParameters.siteTranscoderItemDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Transcoder update
     * @param {update1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    update1(requestParameters, options) {
        return (0, exports.fp)(this.configuration).update1(requestParameters.siteTranscoderUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TranscodersApi = TranscodersApi;
/**
  * @export
  * @enum {string}
  */
var list1VEnum;
(function (list1VEnum) {
    list1VEnum["_1"] = "1";
    list1VEnum["_2"] = "2";
    list1VEnum["_3"] = "3";
})(list1VEnum || (exports.list1VEnum = list1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var list1LanguageEnum;
(function (list1LanguageEnum) {
    list1LanguageEnum["ru"] = "ru";
    list1LanguageEnum["en"] = "en";
    list1LanguageEnum["cn"] = "cn";
})(list1LanguageEnum || (exports.list1LanguageEnum = list1LanguageEnum = {}));
