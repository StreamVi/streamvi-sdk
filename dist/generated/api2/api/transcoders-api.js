"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TranscodersListV1VEnum = exports.TranscodersListV1LanguageEnum = exports.TranscodersApi = exports.TranscodersApiFactory = exports.TranscodersApiFp = exports.TranscodersApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * TranscodersApi - axios parameter creator
 * @export
 */
const TranscodersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Transcoder create
         * @param {TranscoderCreateDto} transcoderCreateDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersAddV1: async (transcoderCreateDto, options = {}) => {
            // verify required parameter 'transcoderCreateDto' is not null or undefined
            (0, common_1.assertParamExists)('transcodersAddV1', 'transcoderCreateDto', transcoderCreateDto);
            const localVarPath = `/method/transcoder/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(transcoderCreateDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Transcoder delete
         * @param {TranscoderItemDto} transcoderItemDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersDeleteV1: async (transcoderItemDto, options = {}) => {
            // verify required parameter 'transcoderItemDto' is not null or undefined
            (0, common_1.assertParamExists)('transcodersDeleteV1', 'transcoderItemDto', transcoderItemDto);
            const localVarPath = `/method/transcoder/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(transcoderItemDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of transcoder
         * @param {TranscodersListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {TranscodersListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersListV1: async (language, projectId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('transcodersListV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('transcodersListV1', 'projectId', projectId);
            const localVarPath = `/method/transcoder/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Transcoder stop
         * @param {TranscoderItemDto} transcoderItemDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersStopV1: async (transcoderItemDto, options = {}) => {
            // verify required parameter 'transcoderItemDto' is not null or undefined
            (0, common_1.assertParamExists)('transcodersStopV1', 'transcoderItemDto', transcoderItemDto);
            const localVarPath = `/method/transcoder/stop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(transcoderItemDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Transcoder update
         * @param {TranscoderUpdateDto} transcoderUpdateDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersUpdateV1: async (transcoderUpdateDto, options = {}) => {
            // verify required parameter 'transcoderUpdateDto' is not null or undefined
            (0, common_1.assertParamExists)('transcodersUpdateV1', 'transcoderUpdateDto', transcoderUpdateDto);
            const localVarPath = `/method/transcoder/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(transcoderUpdateDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.TranscodersApiAxiosParamCreator = TranscodersApiAxiosParamCreator;
/**
 * TranscodersApi - functional programming interface
 * @export
 */
const TranscodersApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.TranscodersApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Transcoder create
         * @param {TranscoderCreateDto} transcoderCreateDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transcodersAddV1(transcoderCreateDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.transcodersAddV1(transcoderCreateDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TranscodersApi.transcodersAddV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Transcoder delete
         * @param {TranscoderItemDto} transcoderItemDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transcodersDeleteV1(transcoderItemDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.transcodersDeleteV1(transcoderItemDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TranscodersApi.transcodersDeleteV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary List of transcoder
         * @param {TranscodersListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {TranscodersListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transcodersListV1(language, projectId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.transcodersListV1(language, projectId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TranscodersApi.transcodersListV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Transcoder stop
         * @param {TranscoderItemDto} transcoderItemDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transcodersStopV1(transcoderItemDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.transcodersStopV1(transcoderItemDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TranscodersApi.transcodersStopV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Transcoder update
         * @param {TranscoderUpdateDto} transcoderUpdateDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transcodersUpdateV1(transcoderUpdateDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.transcodersUpdateV1(transcoderUpdateDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TranscodersApi.transcodersUpdateV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.TranscodersApiFp = TranscodersApiFp;
/**
 * TranscodersApi - factory interface
 * @export
 */
const TranscodersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.TranscodersApiFp)(configuration);
    return {
        /**
         *
         * @summary Transcoder create
         * @param {TranscodersApiTranscodersAddV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersAddV1(requestParameters, options) {
            return localVarFp.transcodersAddV1(requestParameters.transcoderCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Transcoder delete
         * @param {TranscodersApiTranscodersDeleteV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersDeleteV1(requestParameters, options) {
            return localVarFp.transcodersDeleteV1(requestParameters.transcoderItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List of transcoder
         * @param {TranscodersApiTranscodersListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersListV1(requestParameters, options) {
            return localVarFp.transcodersListV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Transcoder stop
         * @param {TranscodersApiTranscodersStopV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersStopV1(requestParameters, options) {
            return localVarFp.transcodersStopV1(requestParameters.transcoderItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Transcoder update
         * @param {TranscodersApiTranscodersUpdateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersUpdateV1(requestParameters, options) {
            return localVarFp.transcodersUpdateV1(requestParameters.transcoderUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TranscodersApiFactory = TranscodersApiFactory;
/**
 * TranscodersApi - object-oriented interface
 * @export
 * @class TranscodersApi
 * @extends {BaseAPI}
 */
class TranscodersApi extends base_1.BaseAPI {
    /**
     *
     * @summary Transcoder create
     * @param {TranscodersApiTranscodersAddV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    transcodersAddV1(requestParameters, options) {
        return (0, exports.TranscodersApiFp)(this.configuration).transcodersAddV1(requestParameters.transcoderCreateDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Transcoder delete
     * @param {TranscodersApiTranscodersDeleteV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    transcodersDeleteV1(requestParameters, options) {
        return (0, exports.TranscodersApiFp)(this.configuration).transcodersDeleteV1(requestParameters.transcoderItemDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List of transcoder
     * @param {TranscodersApiTranscodersListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    transcodersListV1(requestParameters, options) {
        return (0, exports.TranscodersApiFp)(this.configuration).transcodersListV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Transcoder stop
     * @param {TranscodersApiTranscodersStopV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    transcodersStopV1(requestParameters, options) {
        return (0, exports.TranscodersApiFp)(this.configuration).transcodersStopV1(requestParameters.transcoderItemDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Transcoder update
     * @param {TranscodersApiTranscodersUpdateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    transcodersUpdateV1(requestParameters, options) {
        return (0, exports.TranscodersApiFp)(this.configuration).transcodersUpdateV1(requestParameters.transcoderUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TranscodersApi = TranscodersApi;
/**
 * @export
 */
exports.TranscodersListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.TranscodersListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
