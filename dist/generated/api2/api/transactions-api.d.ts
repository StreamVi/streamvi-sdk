/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { PaginatedResponseOfTransactionResponse } from '../models';
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export declare const TransactionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Transaction list for frontend
     * @param {TransactionsListV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {TransactionsListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {string} [dateFrom] Date from
     * @param {string} [dateTo] Date to
     * @param {string} [code] Filter code transaction. example 1 or 1,2,3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsListV1: (language: TransactionsListV1LanguageEnum, projectId: number, v?: TransactionsListV1VEnum, limit?: number, offset?: number, dateFrom?: string, dateTo?: string, code?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TransactionsApi - functional programming interface
 * @export
 */
export declare const TransactionsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Transaction list for frontend
     * @param {TransactionsListV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {TransactionsListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {string} [dateFrom] Date from
     * @param {string} [dateTo] Date to
     * @param {string} [code] Filter code transaction. example 1 or 1,2,3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsListV1(language: TransactionsListV1LanguageEnum, projectId: number, v?: TransactionsListV1VEnum, limit?: number, offset?: number, dateFrom?: string, dateTo?: string, code?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseOfTransactionResponse>>;
};
/**
 * TransactionsApi - factory interface
 * @export
 */
export declare const TransactionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Transaction list for frontend
     * @param {TransactionsApiTransactionsListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsListV1(requestParameters: TransactionsApiTransactionsListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfTransactionResponse>;
};
/**
 * TransactionsApi - interface
 * @export
 * @interface TransactionsApi
 */
export interface TransactionsApiInterface {
    /**
     *
     * @summary Transaction list for frontend
     * @param {TransactionsApiTransactionsListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    transactionsListV1(requestParameters: TransactionsApiTransactionsListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfTransactionResponse>;
}
/**
 * Request parameters for transactionsListV1 operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionsListV1Request
 */
export interface TransactionsApiTransactionsListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof TransactionsApiTransactionsListV1
     */
    readonly language: TransactionsListV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof TransactionsApiTransactionsListV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof TransactionsApiTransactionsListV1
     */
    readonly v?: TransactionsListV1VEnum;
    /**
     * Number of results
     * @type {number}
     * @memberof TransactionsApiTransactionsListV1
     */
    readonly limit?: number;
    /**
     * Page offset number
     * @type {number}
     * @memberof TransactionsApiTransactionsListV1
     */
    readonly offset?: number;
    /**
     * Date from
     * @type {string}
     * @memberof TransactionsApiTransactionsListV1
     */
    readonly dateFrom?: string;
    /**
     * Date to
     * @type {string}
     * @memberof TransactionsApiTransactionsListV1
     */
    readonly dateTo?: string;
    /**
     * Filter code transaction. example 1 or 1,2,3
     * @type {string}
     * @memberof TransactionsApiTransactionsListV1
     */
    readonly code?: string;
}
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export declare class TransactionsApi extends BaseAPI implements TransactionsApiInterface {
    /**
     *
     * @summary Transaction list for frontend
     * @param {TransactionsApiTransactionsListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    transactionsListV1(requestParameters: TransactionsApiTransactionsListV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").PaginatedResponse, any>>;
}
/**
 * @export
 */
export declare const TransactionsListV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type TransactionsListV1LanguageEnum = typeof TransactionsListV1LanguageEnum[keyof typeof TransactionsListV1LanguageEnum];
/**
 * @export
 */
export declare const TransactionsListV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type TransactionsListV1VEnum = typeof TransactionsListV1VEnum[keyof typeof TransactionsListV1VEnum];
//# sourceMappingURL=transactions-api.d.ts.map