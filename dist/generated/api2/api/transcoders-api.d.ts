/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { SiteTranscoderCreateDto } from '../models';
import type { SiteTranscoderItemDto } from '../models';
import type { SiteTranscoderListResponse } from '../models';
import type { SiteTranscoderUpdateDto } from '../models';
import type { SuccessResponse } from '../models';
/**
 * TranscodersApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Transcoder create
     * @param {SiteTranscoderCreateDto} siteTranscoderCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    add1: (siteTranscoderCreateDto: SiteTranscoderCreateDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Transcoder delete
     * @param {SiteTranscoderItemDto} siteTranscoderItemDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete1: (siteTranscoderItemDto: SiteTranscoderItemDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of transcoder
     * @param {list1VEnum} v Version
     * @param {list1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1: (v: list1VEnum, language: list1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Transcoder stop
     * @param {SiteTranscoderItemDto} siteTranscoderItemDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stop1: (siteTranscoderItemDto: SiteTranscoderItemDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Transcoder update
     * @param {SiteTranscoderUpdateDto} siteTranscoderUpdateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update1: (siteTranscoderUpdateDto: SiteTranscoderUpdateDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TranscodersApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Transcoder create
     * @param {SiteTranscoderCreateDto} siteTranscoderCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    add1(siteTranscoderCreateDto: SiteTranscoderCreateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    /**
     *
     * @summary Transcoder delete
     * @param {SiteTranscoderItemDto} siteTranscoderItemDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete1(siteTranscoderItemDto: SiteTranscoderItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary List of transcoder
     * @param {list1VEnum} v Version
     * @param {list1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(v: list1VEnum, language: list1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteTranscoderListResponse>>;
    /**
     *
     * @summary Transcoder stop
     * @param {SiteTranscoderItemDto} siteTranscoderItemDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stop1(siteTranscoderItemDto: SiteTranscoderItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Transcoder update
     * @param {SiteTranscoderUpdateDto} siteTranscoderUpdateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update1(siteTranscoderUpdateDto: SiteTranscoderUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
};
/**
 * TranscodersApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Transcoder create
     * @param {add1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    add1(requestParameters: add1Request, options?: RawAxiosRequestConfig): AxiosPromise<number>;
    /**
     *
     * @summary Transcoder delete
     * @param {delete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete1(requestParameters: delete1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary List of transcoder
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteTranscoderListResponse>;
    /**
     *
     * @summary Transcoder stop
     * @param {stop1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stop1(requestParameters: stop1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Transcoder update
     * @param {update1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update1(requestParameters: update1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
};
/**
 * Request parameters for add1 operation in TranscodersApi.
 * @export
 * @interface add1Request
 */
export interface add1Request {
    /**
     *
     * @type {SiteTranscoderCreateDto}
     * @memberof add1
     */
    readonly siteTranscoderCreateDto: SiteTranscoderCreateDto;
}
/**
 * Request parameters for delete1 operation in TranscodersApi.
 * @export
 * @interface delete1Request
 */
export interface delete1Request {
    /**
     *
     * @type {SiteTranscoderItemDto}
     * @memberof delete1
     */
    readonly siteTranscoderItemDto: SiteTranscoderItemDto;
}
/**
 * Request parameters for list1 operation in TranscodersApi.
 * @export
 * @interface list1Request
 */
export interface list1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof list1
     */
    readonly v?: list1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof list1
     */
    readonly language: list1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof list1
     */
    readonly projectId: number;
}
/**
 * Request parameters for stop1 operation in TranscodersApi.
 * @export
 * @interface stop1Request
 */
export interface stop1Request {
    /**
     *
     * @type {SiteTranscoderItemDto}
     * @memberof stop1
     */
    readonly siteTranscoderItemDto: SiteTranscoderItemDto;
}
/**
 * Request parameters for update1 operation in TranscodersApi.
 * @export
 * @interface update1Request
 */
export interface update1Request {
    /**
     *
     * @type {SiteTranscoderUpdateDto}
     * @memberof update1
     */
    readonly siteTranscoderUpdateDto: SiteTranscoderUpdateDto;
}
/**
 * TranscodersApi - object-oriented interface
 * @export
 * @class TranscodersApi
 * @extends {BaseAPI}
 */
export declare class TranscodersApi extends BaseAPI {
    /**
     *
     * @summary Transcoder create
     * @param {add1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    add1(requestParameters: add1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    /**
     *
     * @summary Transcoder delete
     * @param {delete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    delete1(requestParameters: delete1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary List of transcoder
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteTranscoderListResponse, any>>;
    /**
     *
     * @summary Transcoder stop
     * @param {stop1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    stop1(requestParameters: stop1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Transcoder update
     * @param {update1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    update1(requestParameters: update1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum list1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum list1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=transcoders-api.d.ts.map