"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectProject1LanguageEnum = exports.selectProject1VEnum = exports.listAccess1LanguageEnum = exports.listAccess1VEnum = exports.list1LanguageEnum = exports.list1VEnum = exports.getUser1LanguageEnum = exports.getUser1VEnum = exports.getProjectInfo1LanguageEnum = exports.getProjectInfo1VEnum = exports.getProject1LanguageEnum = exports.getProject1VEnum = exports.del1LanguageEnum = exports.del1VEnum = exports.changeAccess1AccessTypeEnum = exports.changeAccess1LanguageEnum = exports.changeAccess1VEnum = exports.UserProjectApi = exports.factory = exports.fp = exports.axiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * UserProjectApi - axios parameter creator
 * @export
 */
const axiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Change access user from project
         * @param {changeAccess1VEnum} v Version
         * @param {changeAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} userId User id
         * @param {changeAccess1AccessTypeEnum} accessType Access type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAccess1: async (v, language, projectId, userId, accessType, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('changeAccess1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('changeAccess1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('changeAccess1', 'projectId', projectId);
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('changeAccess1', 'userId', userId);
            // verify required parameter 'accessType' is not null or undefined
            (0, common_1.assertParamExists)('changeAccess1', 'accessType', accessType);
            const localVarPath = `/method/project/user/change_access`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }
            if (accessType !== undefined) {
                localVarQueryParameter['access_type'] = accessType;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove user from project
         * @param {del1VEnum} v Version
         * @param {del1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} userId User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        del1: async (v, language, projectId, userId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('del1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('del1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('del1', 'projectId', projectId);
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('del1', 'userId', userId);
            const localVarPath = `/method/project/user/del`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get project by number id
         * @param {getProject1VEnum} v Version
         * @param {getProject1LanguageEnum} language Current language
         * @param {string} projectExternalId Project external id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject1: async (v, language, projectExternalId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('getProject1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('getProject1', 'language', language);
            // verify required parameter 'projectExternalId' is not null or undefined
            (0, common_1.assertParamExists)('getProject1', 'projectExternalId', projectExternalId);
            const localVarPath = `/method/project/get_project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectExternalId !== undefined) {
                localVarQueryParameter['project_external_id'] = projectExternalId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get project full info
         * @param {getProjectInfo1VEnum} v Version
         * @param {getProjectInfo1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectInfo1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('getProjectInfo1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('getProjectInfo1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('getProjectInfo1', 'projectId', projectId);
            const localVarPath = `/method/project/get_project_info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get user by number id
         * @param {getUser1VEnum} v Version
         * @param {getUser1LanguageEnum} language Current language
         * @param {string} userExternalId User external id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser1: async (v, language, userExternalId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('getUser1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('getUser1', 'language', language);
            // verify required parameter 'userExternalId' is not null or undefined
            (0, common_1.assertParamExists)('getUser1', 'userExternalId', userExternalId);
            const localVarPath = `/method/project/get_user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (userExternalId !== undefined) {
                localVarQueryParameter['user_external_id'] = userExternalId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of project for current user
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1: async (v, language, limit, offset, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('list1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('list1', 'language', language);
            const localVarPath = `/method/project/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of user in project
         * @param {listAccess1VEnum} v Version
         * @param {listAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccess1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('listAccess1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('listAccess1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('listAccess1', 'projectId', projectId);
            const localVarPath = `/method/project/user/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Select user for project
         * @param {selectProject1VEnum} v Version
         * @param {selectProject1LanguageEnum} language Current language
         * @param {number} id Project internal id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectProject1: async (v, language, id, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('selectProject1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('selectProject1', 'language', language);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('selectProject1', 'id', id);
            const localVarPath = `/method/project/select`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.axiosParamCreator = axiosParamCreator;
/**
 * UserProjectApi - functional programming interface
 * @export
 */
const fp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.axiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Change access user from project
         * @param {changeAccess1VEnum} v Version
         * @param {changeAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} userId User id
         * @param {changeAccess1AccessTypeEnum} accessType Access type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeAccess1(v, language, projectId, userId, accessType, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeAccess1(v, language, projectId, userId, accessType, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserProjectApi.changeAccess1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Remove user from project
         * @param {del1VEnum} v Version
         * @param {del1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} userId User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async del1(v, language, projectId, userId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.del1(v, language, projectId, userId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserProjectApi.del1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get project by number id
         * @param {getProject1VEnum} v Version
         * @param {getProject1LanguageEnum} language Current language
         * @param {string} projectExternalId Project external id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProject1(v, language, projectExternalId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProject1(v, language, projectExternalId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserProjectApi.getProject1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get project full info
         * @param {getProjectInfo1VEnum} v Version
         * @param {getProjectInfo1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectInfo1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectInfo1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserProjectApi.getProjectInfo1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get user by number id
         * @param {getUser1VEnum} v Version
         * @param {getUser1LanguageEnum} language Current language
         * @param {string} userExternalId User external id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser1(v, language, userExternalId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser1(v, language, userExternalId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserProjectApi.getUser1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary List of project for current user
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list1(v, language, limit, offset, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.list1(v, language, limit, offset, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserProjectApi.list1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary List of user in project
         * @param {listAccess1VEnum} v Version
         * @param {listAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccess1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccess1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserProjectApi.listAccess1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Select user for project
         * @param {selectProject1VEnum} v Version
         * @param {selectProject1LanguageEnum} language Current language
         * @param {number} id Project internal id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectProject1(v, language, id, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectProject1(v, language, id, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserProjectApi.selectProject1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.fp = fp;
/**
 * UserProjectApi - factory interface
 * @export
 */
const factory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.fp)(configuration);
    return {
        /**
         *
         * @summary Change access user from project
         * @param {changeAccess1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAccess1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || changeAccess1VEnum._1;
            return localVarFp.changeAccess1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.userId, requestParameters.accessType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Remove user from project
         * @param {del1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        del1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || del1VEnum._1;
            return localVarFp.del1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get project by number id
         * @param {getProject1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || getProject1VEnum._1;
            return localVarFp.getProject1(actualV, requestParameters.language, requestParameters.projectExternalId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get project full info
         * @param {getProjectInfo1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectInfo1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || getProjectInfo1VEnum._1;
            return localVarFp.getProjectInfo1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get user by number id
         * @param {getUser1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || getUser1VEnum._1;
            return localVarFp.getUser1(actualV, requestParameters.language, requestParameters.userExternalId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List of project for current user
         * @param {list1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || list1VEnum._1;
            return localVarFp.list1(actualV, requestParameters.language, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List of user in project
         * @param {listAccess1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccess1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || listAccess1VEnum._1;
            return localVarFp.listAccess1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Select user for project
         * @param {selectProject1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectProject1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || selectProject1VEnum._1;
            return localVarFp.selectProject1(actualV, requestParameters.language, requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.factory = factory;
/**
 * UserProjectApi - object-oriented interface
 * @export
 * @class UserProjectApi
 * @extends {BaseAPI}
 */
class UserProjectApi extends base_1.BaseAPI {
    /**
     *
     * @summary Change access user from project
     * @param {changeAccess1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    changeAccess1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || changeAccess1VEnum._1;
        return (0, exports.fp)(this.configuration).changeAccess1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.userId, requestParameters.accessType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Remove user from project
     * @param {del1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    del1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || del1VEnum._1;
        return (0, exports.fp)(this.configuration).del1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get project by number id
     * @param {getProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    getProject1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || getProject1VEnum._1;
        return (0, exports.fp)(this.configuration).getProject1(actualV, requestParameters.language, requestParameters.projectExternalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get project full info
     * @param {getProjectInfo1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    getProjectInfo1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || getProjectInfo1VEnum._1;
        return (0, exports.fp)(this.configuration).getProjectInfo1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get user by number id
     * @param {getUser1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    getUser1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || getUser1VEnum._1;
        return (0, exports.fp)(this.configuration).getUser1(actualV, requestParameters.language, requestParameters.userExternalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List of project for current user
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    list1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || list1VEnum._1;
        return (0, exports.fp)(this.configuration).list1(actualV, requestParameters.language, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List of user in project
     * @param {listAccess1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    listAccess1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || listAccess1VEnum._1;
        return (0, exports.fp)(this.configuration).listAccess1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Select user for project
     * @param {selectProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    selectProject1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || selectProject1VEnum._1;
        return (0, exports.fp)(this.configuration).selectProject1(actualV, requestParameters.language, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.UserProjectApi = UserProjectApi;
/**
  * @export
  * @enum {string}
  */
var changeAccess1VEnum;
(function (changeAccess1VEnum) {
    changeAccess1VEnum["_1"] = "1";
    changeAccess1VEnum["_2"] = "2";
    changeAccess1VEnum["_3"] = "3";
})(changeAccess1VEnum || (exports.changeAccess1VEnum = changeAccess1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var changeAccess1LanguageEnum;
(function (changeAccess1LanguageEnum) {
    changeAccess1LanguageEnum["ru"] = "ru";
    changeAccess1LanguageEnum["en"] = "en";
    changeAccess1LanguageEnum["cn"] = "cn";
})(changeAccess1LanguageEnum || (exports.changeAccess1LanguageEnum = changeAccess1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var changeAccess1AccessTypeEnum;
(function (changeAccess1AccessTypeEnum) {
    changeAccess1AccessTypeEnum[changeAccess1AccessTypeEnum["NUMBER_0"] = 0] = "NUMBER_0";
    changeAccess1AccessTypeEnum[changeAccess1AccessTypeEnum["NUMBER_1"] = 1] = "NUMBER_1";
    changeAccess1AccessTypeEnum[changeAccess1AccessTypeEnum["NUMBER_2"] = 2] = "NUMBER_2";
})(changeAccess1AccessTypeEnum || (exports.changeAccess1AccessTypeEnum = changeAccess1AccessTypeEnum = {}));
/**
  * @export
  * @enum {string}
  */
var del1VEnum;
(function (del1VEnum) {
    del1VEnum["_1"] = "1";
    del1VEnum["_2"] = "2";
    del1VEnum["_3"] = "3";
})(del1VEnum || (exports.del1VEnum = del1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var del1LanguageEnum;
(function (del1LanguageEnum) {
    del1LanguageEnum["ru"] = "ru";
    del1LanguageEnum["en"] = "en";
    del1LanguageEnum["cn"] = "cn";
})(del1LanguageEnum || (exports.del1LanguageEnum = del1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var getProject1VEnum;
(function (getProject1VEnum) {
    getProject1VEnum["_1"] = "1";
    getProject1VEnum["_2"] = "2";
    getProject1VEnum["_3"] = "3";
})(getProject1VEnum || (exports.getProject1VEnum = getProject1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var getProject1LanguageEnum;
(function (getProject1LanguageEnum) {
    getProject1LanguageEnum["ru"] = "ru";
    getProject1LanguageEnum["en"] = "en";
    getProject1LanguageEnum["cn"] = "cn";
})(getProject1LanguageEnum || (exports.getProject1LanguageEnum = getProject1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var getProjectInfo1VEnum;
(function (getProjectInfo1VEnum) {
    getProjectInfo1VEnum["_1"] = "1";
    getProjectInfo1VEnum["_2"] = "2";
    getProjectInfo1VEnum["_3"] = "3";
})(getProjectInfo1VEnum || (exports.getProjectInfo1VEnum = getProjectInfo1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var getProjectInfo1LanguageEnum;
(function (getProjectInfo1LanguageEnum) {
    getProjectInfo1LanguageEnum["ru"] = "ru";
    getProjectInfo1LanguageEnum["en"] = "en";
    getProjectInfo1LanguageEnum["cn"] = "cn";
})(getProjectInfo1LanguageEnum || (exports.getProjectInfo1LanguageEnum = getProjectInfo1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var getUser1VEnum;
(function (getUser1VEnum) {
    getUser1VEnum["_1"] = "1";
    getUser1VEnum["_2"] = "2";
    getUser1VEnum["_3"] = "3";
})(getUser1VEnum || (exports.getUser1VEnum = getUser1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var getUser1LanguageEnum;
(function (getUser1LanguageEnum) {
    getUser1LanguageEnum["ru"] = "ru";
    getUser1LanguageEnum["en"] = "en";
    getUser1LanguageEnum["cn"] = "cn";
})(getUser1LanguageEnum || (exports.getUser1LanguageEnum = getUser1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var list1VEnum;
(function (list1VEnum) {
    list1VEnum["_1"] = "1";
    list1VEnum["_2"] = "2";
    list1VEnum["_3"] = "3";
})(list1VEnum || (exports.list1VEnum = list1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var list1LanguageEnum;
(function (list1LanguageEnum) {
    list1LanguageEnum["ru"] = "ru";
    list1LanguageEnum["en"] = "en";
    list1LanguageEnum["cn"] = "cn";
})(list1LanguageEnum || (exports.list1LanguageEnum = list1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var listAccess1VEnum;
(function (listAccess1VEnum) {
    listAccess1VEnum["_1"] = "1";
    listAccess1VEnum["_2"] = "2";
    listAccess1VEnum["_3"] = "3";
})(listAccess1VEnum || (exports.listAccess1VEnum = listAccess1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var listAccess1LanguageEnum;
(function (listAccess1LanguageEnum) {
    listAccess1LanguageEnum["ru"] = "ru";
    listAccess1LanguageEnum["en"] = "en";
    listAccess1LanguageEnum["cn"] = "cn";
})(listAccess1LanguageEnum || (exports.listAccess1LanguageEnum = listAccess1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var selectProject1VEnum;
(function (selectProject1VEnum) {
    selectProject1VEnum["_1"] = "1";
    selectProject1VEnum["_2"] = "2";
    selectProject1VEnum["_3"] = "3";
})(selectProject1VEnum || (exports.selectProject1VEnum = selectProject1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var selectProject1LanguageEnum;
(function (selectProject1LanguageEnum) {
    selectProject1LanguageEnum["ru"] = "ru";
    selectProject1LanguageEnum["en"] = "en";
    selectProject1LanguageEnum["cn"] = "cn";
})(selectProject1LanguageEnum || (exports.selectProject1LanguageEnum = selectProject1LanguageEnum = {}));
