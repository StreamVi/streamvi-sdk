"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlanStorageTariffV1VEnum = exports.PlanStorageTariffV1LanguageEnum = exports.PlanStorageListV1VEnum = exports.PlanStorageListV1LanguageEnum = exports.PlanStorageGetDiscountV1VEnum = exports.PlanStorageGetDiscountV1LanguageEnum = exports.PlanStorageCheckV1VEnum = exports.PlanStorageCheckV1LanguageEnum = exports.PlanStorageCancelV1VEnum = exports.PlanStorageCancelV1LanguageEnum = exports.PlanStorageBuyV1VEnum = exports.PlanStorageBuyV1PeriodEnum = exports.PlanStorageBuyV1LanguageEnum = exports.PlanStorageApi = exports.PlanStorageApiFactory = exports.PlanStorageApiFp = exports.PlanStorageApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PlanStorageApi - axios parameter creator
 * @export
 */
const PlanStorageApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Buy storage tariff
         * @param {PlanStorageBuyV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanStorageBuyV1PeriodEnum} period Period
         * @param {number} planStorageId Storage plan id
         * @param {PlanStorageBuyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [size] Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageBuyV1: async (language, projectId, period, planStorageId, v, size, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('planStorageBuyV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('planStorageBuyV1', 'projectId', projectId);
            // verify required parameter 'period' is not null or undefined
            (0, common_1.assertParamExists)('planStorageBuyV1', 'period', period);
            // verify required parameter 'planStorageId' is not null or undefined
            (0, common_1.assertParamExists)('planStorageBuyV1', 'planStorageId', planStorageId);
            const localVarPath = `/method/plan_storage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }
            if (planStorageId !== undefined) {
                localVarQueryParameter['plan_storage_id'] = planStorageId;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove next tariff
         * @param {PlanStorageCancelV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanStorageCancelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageCancelV1: async (language, projectId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('planStorageCancelV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('planStorageCancelV1', 'projectId', projectId);
            const localVarPath = `/method/plan_storage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Check storage tariff before buy
         * @param {PlanStorageCheckV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanStorageCheckV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageCheckV1: async (language, projectId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('planStorageCheckV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('planStorageCheckV1', 'projectId', projectId);
            const localVarPath = `/method/plan_storage/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get discount of storage
         * @param {PlanStorageGetDiscountV1LanguageEnum} language Current language
         * @param {PlanStorageGetDiscountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageGetDiscountV1: async (language, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('planStorageGetDiscountV1', 'language', language);
            const localVarPath = `/method/plan_storage/get_discount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get info for storage tariff
         * @param {PlanStorageListV1LanguageEnum} language Current language
         * @param {PlanStorageListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageListV1: async (language, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('planStorageListV1', 'language', language);
            const localVarPath = `/method/plan_storage/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get tariff for project
         * @param {PlanStorageTariffV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanStorageTariffV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageTariffV1: async (language, projectId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('planStorageTariffV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('planStorageTariffV1', 'projectId', projectId);
            const localVarPath = `/method/plan_storage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PlanStorageApiAxiosParamCreator = PlanStorageApiAxiosParamCreator;
/**
 * PlanStorageApi - functional programming interface
 * @export
 */
const PlanStorageApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PlanStorageApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Buy storage tariff
         * @param {PlanStorageBuyV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanStorageBuyV1PeriodEnum} period Period
         * @param {number} planStorageId Storage plan id
         * @param {PlanStorageBuyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [size] Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planStorageBuyV1(language, projectId, period, planStorageId, v, size, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.planStorageBuyV1(language, projectId, period, planStorageId, v, size, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanStorageApi.planStorageBuyV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Remove next tariff
         * @param {PlanStorageCancelV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanStorageCancelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planStorageCancelV1(language, projectId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.planStorageCancelV1(language, projectId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanStorageApi.planStorageCancelV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Check storage tariff before buy
         * @param {PlanStorageCheckV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanStorageCheckV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planStorageCheckV1(language, projectId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.planStorageCheckV1(language, projectId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanStorageApi.planStorageCheckV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get discount of storage
         * @param {PlanStorageGetDiscountV1LanguageEnum} language Current language
         * @param {PlanStorageGetDiscountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planStorageGetDiscountV1(language, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.planStorageGetDiscountV1(language, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanStorageApi.planStorageGetDiscountV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get info for storage tariff
         * @param {PlanStorageListV1LanguageEnum} language Current language
         * @param {PlanStorageListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planStorageListV1(language, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.planStorageListV1(language, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanStorageApi.planStorageListV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get tariff for project
         * @param {PlanStorageTariffV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PlanStorageTariffV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planStorageTariffV1(language, projectId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.planStorageTariffV1(language, projectId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanStorageApi.planStorageTariffV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PlanStorageApiFp = PlanStorageApiFp;
/**
 * PlanStorageApi - factory interface
 * @export
 */
const PlanStorageApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PlanStorageApiFp)(configuration);
    return {
        /**
         *
         * @summary Buy storage tariff
         * @param {PlanStorageApiPlanStorageBuyV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageBuyV1(requestParameters, options) {
            return localVarFp.planStorageBuyV1(requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planStorageId, requestParameters.v, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Remove next tariff
         * @param {PlanStorageApiPlanStorageCancelV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageCancelV1(requestParameters, options) {
            return localVarFp.planStorageCancelV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Check storage tariff before buy
         * @param {PlanStorageApiPlanStorageCheckV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageCheckV1(requestParameters, options) {
            return localVarFp.planStorageCheckV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get discount of storage
         * @param {PlanStorageApiPlanStorageGetDiscountV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageGetDiscountV1(requestParameters, options) {
            return localVarFp.planStorageGetDiscountV1(requestParameters.language, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get info for storage tariff
         * @param {PlanStorageApiPlanStorageListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageListV1(requestParameters, options) {
            return localVarFp.planStorageListV1(requestParameters.language, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get tariff for project
         * @param {PlanStorageApiPlanStorageTariffV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planStorageTariffV1(requestParameters, options) {
            return localVarFp.planStorageTariffV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PlanStorageApiFactory = PlanStorageApiFactory;
/**
 * PlanStorageApi - object-oriented interface
 * @export
 * @class PlanStorageApi
 * @extends {BaseAPI}
 */
class PlanStorageApi extends base_1.BaseAPI {
    /**
     *
     * @summary Buy storage tariff
     * @param {PlanStorageApiPlanStorageBuyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    planStorageBuyV1(requestParameters, options) {
        return (0, exports.PlanStorageApiFp)(this.configuration).planStorageBuyV1(requestParameters.language, requestParameters.projectId, requestParameters.period, requestParameters.planStorageId, requestParameters.v, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Remove next tariff
     * @param {PlanStorageApiPlanStorageCancelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    planStorageCancelV1(requestParameters, options) {
        return (0, exports.PlanStorageApiFp)(this.configuration).planStorageCancelV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Check storage tariff before buy
     * @param {PlanStorageApiPlanStorageCheckV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    planStorageCheckV1(requestParameters, options) {
        return (0, exports.PlanStorageApiFp)(this.configuration).planStorageCheckV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get discount of storage
     * @param {PlanStorageApiPlanStorageGetDiscountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    planStorageGetDiscountV1(requestParameters, options) {
        return (0, exports.PlanStorageApiFp)(this.configuration).planStorageGetDiscountV1(requestParameters.language, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get info for storage tariff
     * @param {PlanStorageApiPlanStorageListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    planStorageListV1(requestParameters, options) {
        return (0, exports.PlanStorageApiFp)(this.configuration).planStorageListV1(requestParameters.language, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get tariff for project
     * @param {PlanStorageApiPlanStorageTariffV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    planStorageTariffV1(requestParameters, options) {
        return (0, exports.PlanStorageApiFp)(this.configuration).planStorageTariffV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PlanStorageApi = PlanStorageApi;
/**
 * @export
 */
exports.PlanStorageBuyV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanStorageBuyV1PeriodEnum = {
    Month: 'month',
    Year: 'year'
};
/**
 * @export
 */
exports.PlanStorageBuyV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanStorageCancelV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanStorageCancelV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanStorageCheckV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanStorageCheckV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanStorageGetDiscountV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanStorageGetDiscountV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanStorageListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanStorageListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PlanStorageTariffV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PlanStorageTariffV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
