/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { PlanRestreamCheckV2Response } from '../models';
import type { PlanRestreamDiscountResponse } from '../models';
import type { PlanRestreamForProject } from '../models';
import type { PlanRestreamProjectResponseDto } from '../models';
import type { PlanRestreamResponseDto } from '../models';
import type { SuccessResponse } from '../models';
/**
 * PlanRestreamApi - axios parameter creator
 * @export
 */
export declare const PlanRestreamApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Buy restream tariff
     * @param {PlanRestreamBuyV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanRestreamBuyV1PeriodEnum} period Period
     * @param {number} planRestreamId Restream plan id
     * @param {PlanRestreamBuyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [countChannel] Channel count
     * @param {number} [bitrate] Bitrate, kbps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamBuyV1: (language: PlanRestreamBuyV1LanguageEnum, projectId: number, period: PlanRestreamBuyV1PeriodEnum, planRestreamId: number, v?: PlanRestreamBuyV1VEnum, countChannel?: number, bitrate?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Load data for show card the tariffs v2
     * @param {PlanRestreamCheck2V1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanRestreamCheck2V1PeriodEnum} period Period
     * @param {number} planRestreamId Restream plan id
     * @param {PlanRestreamCheck2V1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [useBalance] Is select balance
     * @param {number} [channels] Channels count
     * @param {number} [bitrate] Bitrate, kbps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamCheck2V1: (language: PlanRestreamCheck2V1LanguageEnum, projectId: number, period: PlanRestreamCheck2V1PeriodEnum, planRestreamId: number, v?: PlanRestreamCheck2V1VEnum, useBalance?: number, channels?: number, bitrate?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get discount restream
     * @param {PlanRestreamGetDiscountV1LanguageEnum} language Current language
     * @param {PlanRestreamGetDiscountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamGetDiscountV1: (language: PlanRestreamGetDiscountV1LanguageEnum, v?: PlanRestreamGetDiscountV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get list of restream tariffs for project
     * @param {PlanRestreamListProjectV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanRestreamListProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamListProjectV1: (language: PlanRestreamListProjectV1LanguageEnum, projectId: number, v?: PlanRestreamListProjectV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get list of restream tariffs
     * @param {PlanRestreamListV1LanguageEnum} language Current language
     * @param {PlanRestreamListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamListV1: (language: PlanRestreamListV1LanguageEnum, v?: PlanRestreamListV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove after tariff
     * @param {PlanRestreamRemoveV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} planRestreamId Restream plan id
     * @param {PlanRestreamRemoveV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamRemoveV1: (language: PlanRestreamRemoveV1LanguageEnum, projectId: number, planRestreamId: number, v?: PlanRestreamRemoveV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get tariff for project
     * @param {PlanRestreamTariffV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanRestreamTariffV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamTariffV1: (language: PlanRestreamTariffV1LanguageEnum, projectId: number, v?: PlanRestreamTariffV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PlanRestreamApi - functional programming interface
 * @export
 */
export declare const PlanRestreamApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Buy restream tariff
     * @param {PlanRestreamBuyV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanRestreamBuyV1PeriodEnum} period Period
     * @param {number} planRestreamId Restream plan id
     * @param {PlanRestreamBuyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [countChannel] Channel count
     * @param {number} [bitrate] Bitrate, kbps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamBuyV1(language: PlanRestreamBuyV1LanguageEnum, projectId: number, period: PlanRestreamBuyV1PeriodEnum, planRestreamId: number, v?: PlanRestreamBuyV1VEnum, countChannel?: number, bitrate?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Load data for show card the tariffs v2
     * @param {PlanRestreamCheck2V1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanRestreamCheck2V1PeriodEnum} period Period
     * @param {number} planRestreamId Restream plan id
     * @param {PlanRestreamCheck2V1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [useBalance] Is select balance
     * @param {number} [channels] Channels count
     * @param {number} [bitrate] Bitrate, kbps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamCheck2V1(language: PlanRestreamCheck2V1LanguageEnum, projectId: number, period: PlanRestreamCheck2V1PeriodEnum, planRestreamId: number, v?: PlanRestreamCheck2V1VEnum, useBalance?: number, channels?: number, bitrate?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamCheckV2Response>>;
    /**
     *
     * @summary Get discount restream
     * @param {PlanRestreamGetDiscountV1LanguageEnum} language Current language
     * @param {PlanRestreamGetDiscountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamGetDiscountV1(language: PlanRestreamGetDiscountV1LanguageEnum, v?: PlanRestreamGetDiscountV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamDiscountResponse>>;
    /**
     *
     * @summary Get list of restream tariffs for project
     * @param {PlanRestreamListProjectV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanRestreamListProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamListProjectV1(language: PlanRestreamListProjectV1LanguageEnum, projectId: number, v?: PlanRestreamListProjectV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamProjectResponseDto>>;
    /**
     *
     * @summary Get list of restream tariffs
     * @param {PlanRestreamListV1LanguageEnum} language Current language
     * @param {PlanRestreamListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamListV1(language: PlanRestreamListV1LanguageEnum, v?: PlanRestreamListV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamResponseDto>>;
    /**
     *
     * @summary Remove after tariff
     * @param {PlanRestreamRemoveV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} planRestreamId Restream plan id
     * @param {PlanRestreamRemoveV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamRemoveV1(language: PlanRestreamRemoveV1LanguageEnum, projectId: number, planRestreamId: number, v?: PlanRestreamRemoveV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Get tariff for project
     * @param {PlanRestreamTariffV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanRestreamTariffV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamTariffV1(language: PlanRestreamTariffV1LanguageEnum, projectId: number, v?: PlanRestreamTariffV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamForProject>>;
};
/**
 * PlanRestreamApi - factory interface
 * @export
 */
export declare const PlanRestreamApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Buy restream tariff
     * @param {PlanRestreamApiPlanRestreamBuyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamBuyV1(requestParameters: PlanRestreamApiPlanRestreamBuyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Load data for show card the tariffs v2
     * @param {PlanRestreamApiPlanRestreamCheck2V1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamCheck2V1(requestParameters: PlanRestreamApiPlanRestreamCheck2V1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamCheckV2Response>;
    /**
     *
     * @summary Get discount restream
     * @param {PlanRestreamApiPlanRestreamGetDiscountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamGetDiscountV1(requestParameters: PlanRestreamApiPlanRestreamGetDiscountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamDiscountResponse>;
    /**
     *
     * @summary Get list of restream tariffs for project
     * @param {PlanRestreamApiPlanRestreamListProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamListProjectV1(requestParameters: PlanRestreamApiPlanRestreamListProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamProjectResponseDto>;
    /**
     *
     * @summary Get list of restream tariffs
     * @param {PlanRestreamApiPlanRestreamListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamListV1(requestParameters: PlanRestreamApiPlanRestreamListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamResponseDto>;
    /**
     *
     * @summary Remove after tariff
     * @param {PlanRestreamApiPlanRestreamRemoveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamRemoveV1(requestParameters: PlanRestreamApiPlanRestreamRemoveV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get tariff for project
     * @param {PlanRestreamApiPlanRestreamTariffV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planRestreamTariffV1(requestParameters: PlanRestreamApiPlanRestreamTariffV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamForProject>;
};
/**
 * PlanRestreamApi - interface
 * @export
 * @interface PlanRestreamApi
 */
export interface PlanRestreamApiInterface {
    /**
     *
     * @summary Buy restream tariff
     * @param {PlanRestreamApiPlanRestreamBuyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamBuyV1(requestParameters: PlanRestreamApiPlanRestreamBuyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Load data for show card the tariffs v2
     * @param {PlanRestreamApiPlanRestreamCheck2V1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamCheck2V1(requestParameters: PlanRestreamApiPlanRestreamCheck2V1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamCheckV2Response>;
    /**
     *
     * @summary Get discount restream
     * @param {PlanRestreamApiPlanRestreamGetDiscountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamGetDiscountV1(requestParameters: PlanRestreamApiPlanRestreamGetDiscountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamDiscountResponse>;
    /**
     *
     * @summary Get list of restream tariffs for project
     * @param {PlanRestreamApiPlanRestreamListProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamListProjectV1(requestParameters: PlanRestreamApiPlanRestreamListProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamProjectResponseDto>;
    /**
     *
     * @summary Get list of restream tariffs
     * @param {PlanRestreamApiPlanRestreamListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamListV1(requestParameters: PlanRestreamApiPlanRestreamListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamResponseDto>;
    /**
     *
     * @summary Remove after tariff
     * @param {PlanRestreamApiPlanRestreamRemoveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamRemoveV1(requestParameters: PlanRestreamApiPlanRestreamRemoveV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get tariff for project
     * @param {PlanRestreamApiPlanRestreamTariffV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApiInterface
     */
    planRestreamTariffV1(requestParameters: PlanRestreamApiPlanRestreamTariffV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamForProject>;
}
/**
 * Request parameters for planRestreamBuyV1 operation in PlanRestreamApi.
 * @export
 * @interface PlanRestreamApiPlanRestreamBuyV1Request
 */
export interface PlanRestreamApiPlanRestreamBuyV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanRestreamApiPlanRestreamBuyV1
     */
    readonly language: PlanRestreamBuyV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamBuyV1
     */
    readonly projectId: number;
    /**
     * Period
     * @type {'month' | 'year'}
     * @memberof PlanRestreamApiPlanRestreamBuyV1
     */
    readonly period: PlanRestreamBuyV1PeriodEnum;
    /**
     * Restream plan id
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamBuyV1
     */
    readonly planRestreamId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanRestreamApiPlanRestreamBuyV1
     */
    readonly v?: PlanRestreamBuyV1VEnum;
    /**
     * Channel count
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamBuyV1
     */
    readonly countChannel?: number;
    /**
     * Bitrate, kbps
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamBuyV1
     */
    readonly bitrate?: number;
}
/**
 * Request parameters for planRestreamCheck2V1 operation in PlanRestreamApi.
 * @export
 * @interface PlanRestreamApiPlanRestreamCheck2V1Request
 */
export interface PlanRestreamApiPlanRestreamCheck2V1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanRestreamApiPlanRestreamCheck2V1
     */
    readonly language: PlanRestreamCheck2V1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamCheck2V1
     */
    readonly projectId: number;
    /**
     * Period
     * @type {'month' | 'year'}
     * @memberof PlanRestreamApiPlanRestreamCheck2V1
     */
    readonly period: PlanRestreamCheck2V1PeriodEnum;
    /**
     * Restream plan id
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamCheck2V1
     */
    readonly planRestreamId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanRestreamApiPlanRestreamCheck2V1
     */
    readonly v?: PlanRestreamCheck2V1VEnum;
    /**
     * Is select balance
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamCheck2V1
     */
    readonly useBalance?: number;
    /**
     * Channels count
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamCheck2V1
     */
    readonly channels?: number;
    /**
     * Bitrate, kbps
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamCheck2V1
     */
    readonly bitrate?: number;
}
/**
 * Request parameters for planRestreamGetDiscountV1 operation in PlanRestreamApi.
 * @export
 * @interface PlanRestreamApiPlanRestreamGetDiscountV1Request
 */
export interface PlanRestreamApiPlanRestreamGetDiscountV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanRestreamApiPlanRestreamGetDiscountV1
     */
    readonly language: PlanRestreamGetDiscountV1LanguageEnum;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanRestreamApiPlanRestreamGetDiscountV1
     */
    readonly v?: PlanRestreamGetDiscountV1VEnum;
}
/**
 * Request parameters for planRestreamListProjectV1 operation in PlanRestreamApi.
 * @export
 * @interface PlanRestreamApiPlanRestreamListProjectV1Request
 */
export interface PlanRestreamApiPlanRestreamListProjectV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanRestreamApiPlanRestreamListProjectV1
     */
    readonly language: PlanRestreamListProjectV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamListProjectV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanRestreamApiPlanRestreamListProjectV1
     */
    readonly v?: PlanRestreamListProjectV1VEnum;
}
/**
 * Request parameters for planRestreamListV1 operation in PlanRestreamApi.
 * @export
 * @interface PlanRestreamApiPlanRestreamListV1Request
 */
export interface PlanRestreamApiPlanRestreamListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanRestreamApiPlanRestreamListV1
     */
    readonly language: PlanRestreamListV1LanguageEnum;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanRestreamApiPlanRestreamListV1
     */
    readonly v?: PlanRestreamListV1VEnum;
}
/**
 * Request parameters for planRestreamRemoveV1 operation in PlanRestreamApi.
 * @export
 * @interface PlanRestreamApiPlanRestreamRemoveV1Request
 */
export interface PlanRestreamApiPlanRestreamRemoveV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanRestreamApiPlanRestreamRemoveV1
     */
    readonly language: PlanRestreamRemoveV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamRemoveV1
     */
    readonly projectId: number;
    /**
     * Restream plan id
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamRemoveV1
     */
    readonly planRestreamId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanRestreamApiPlanRestreamRemoveV1
     */
    readonly v?: PlanRestreamRemoveV1VEnum;
}
/**
 * Request parameters for planRestreamTariffV1 operation in PlanRestreamApi.
 * @export
 * @interface PlanRestreamApiPlanRestreamTariffV1Request
 */
export interface PlanRestreamApiPlanRestreamTariffV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanRestreamApiPlanRestreamTariffV1
     */
    readonly language: PlanRestreamTariffV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof PlanRestreamApiPlanRestreamTariffV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanRestreamApiPlanRestreamTariffV1
     */
    readonly v?: PlanRestreamTariffV1VEnum;
}
/**
 * PlanRestreamApi - object-oriented interface
 * @export
 * @class PlanRestreamApi
 * @extends {BaseAPI}
 */
export declare class PlanRestreamApi extends BaseAPI implements PlanRestreamApiInterface {
    /**
     *
     * @summary Buy restream tariff
     * @param {PlanRestreamApiPlanRestreamBuyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    planRestreamBuyV1(requestParameters: PlanRestreamApiPlanRestreamBuyV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Load data for show card the tariffs v2
     * @param {PlanRestreamApiPlanRestreamCheck2V1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    planRestreamCheck2V1(requestParameters: PlanRestreamApiPlanRestreamCheck2V1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanRestreamCheckV2Response, any>>;
    /**
     *
     * @summary Get discount restream
     * @param {PlanRestreamApiPlanRestreamGetDiscountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    planRestreamGetDiscountV1(requestParameters: PlanRestreamApiPlanRestreamGetDiscountV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanRestreamDiscountResponse, any>>;
    /**
     *
     * @summary Get list of restream tariffs for project
     * @param {PlanRestreamApiPlanRestreamListProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    planRestreamListProjectV1(requestParameters: PlanRestreamApiPlanRestreamListProjectV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanRestreamProjectResponseDto, any>>;
    /**
     *
     * @summary Get list of restream tariffs
     * @param {PlanRestreamApiPlanRestreamListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    planRestreamListV1(requestParameters: PlanRestreamApiPlanRestreamListV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanRestreamResponseDto, any>>;
    /**
     *
     * @summary Remove after tariff
     * @param {PlanRestreamApiPlanRestreamRemoveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    planRestreamRemoveV1(requestParameters: PlanRestreamApiPlanRestreamRemoveV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Get tariff for project
     * @param {PlanRestreamApiPlanRestreamTariffV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    planRestreamTariffV1(requestParameters: PlanRestreamApiPlanRestreamTariffV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanRestreamForProject, any>>;
}
/**
 * @export
 */
export declare const PlanRestreamBuyV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanRestreamBuyV1LanguageEnum = typeof PlanRestreamBuyV1LanguageEnum[keyof typeof PlanRestreamBuyV1LanguageEnum];
/**
 * @export
 */
export declare const PlanRestreamBuyV1PeriodEnum: {
    readonly Month: "month";
    readonly Year: "year";
};
export type PlanRestreamBuyV1PeriodEnum = typeof PlanRestreamBuyV1PeriodEnum[keyof typeof PlanRestreamBuyV1PeriodEnum];
/**
 * @export
 */
export declare const PlanRestreamBuyV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanRestreamBuyV1VEnum = typeof PlanRestreamBuyV1VEnum[keyof typeof PlanRestreamBuyV1VEnum];
/**
 * @export
 */
export declare const PlanRestreamCheck2V1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanRestreamCheck2V1LanguageEnum = typeof PlanRestreamCheck2V1LanguageEnum[keyof typeof PlanRestreamCheck2V1LanguageEnum];
/**
 * @export
 */
export declare const PlanRestreamCheck2V1PeriodEnum: {
    readonly Month: "month";
    readonly Year: "year";
};
export type PlanRestreamCheck2V1PeriodEnum = typeof PlanRestreamCheck2V1PeriodEnum[keyof typeof PlanRestreamCheck2V1PeriodEnum];
/**
 * @export
 */
export declare const PlanRestreamCheck2V1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanRestreamCheck2V1VEnum = typeof PlanRestreamCheck2V1VEnum[keyof typeof PlanRestreamCheck2V1VEnum];
/**
 * @export
 */
export declare const PlanRestreamGetDiscountV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanRestreamGetDiscountV1LanguageEnum = typeof PlanRestreamGetDiscountV1LanguageEnum[keyof typeof PlanRestreamGetDiscountV1LanguageEnum];
/**
 * @export
 */
export declare const PlanRestreamGetDiscountV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanRestreamGetDiscountV1VEnum = typeof PlanRestreamGetDiscountV1VEnum[keyof typeof PlanRestreamGetDiscountV1VEnum];
/**
 * @export
 */
export declare const PlanRestreamListProjectV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanRestreamListProjectV1LanguageEnum = typeof PlanRestreamListProjectV1LanguageEnum[keyof typeof PlanRestreamListProjectV1LanguageEnum];
/**
 * @export
 */
export declare const PlanRestreamListProjectV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanRestreamListProjectV1VEnum = typeof PlanRestreamListProjectV1VEnum[keyof typeof PlanRestreamListProjectV1VEnum];
/**
 * @export
 */
export declare const PlanRestreamListV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanRestreamListV1LanguageEnum = typeof PlanRestreamListV1LanguageEnum[keyof typeof PlanRestreamListV1LanguageEnum];
/**
 * @export
 */
export declare const PlanRestreamListV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanRestreamListV1VEnum = typeof PlanRestreamListV1VEnum[keyof typeof PlanRestreamListV1VEnum];
/**
 * @export
 */
export declare const PlanRestreamRemoveV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanRestreamRemoveV1LanguageEnum = typeof PlanRestreamRemoveV1LanguageEnum[keyof typeof PlanRestreamRemoveV1LanguageEnum];
/**
 * @export
 */
export declare const PlanRestreamRemoveV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanRestreamRemoveV1VEnum = typeof PlanRestreamRemoveV1VEnum[keyof typeof PlanRestreamRemoveV1VEnum];
/**
 * @export
 */
export declare const PlanRestreamTariffV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanRestreamTariffV1LanguageEnum = typeof PlanRestreamTariffV1LanguageEnum[keyof typeof PlanRestreamTariffV1LanguageEnum];
/**
 * @export
 */
export declare const PlanRestreamTariffV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanRestreamTariffV1VEnum = typeof PlanRestreamTariffV1VEnum[keyof typeof PlanRestreamTariffV1VEnum];
//# sourceMappingURL=plan-restream-api.d.ts.map