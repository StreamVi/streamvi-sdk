/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { PlanRestreamCheckV2Response } from '../models';
import type { PlanRestreamDiscountResponse } from '../models';
import type { PlanRestreamForProject } from '../models';
import type { PlanRestreamProjectResponseDto } from '../models';
import type { PlanRestreamResponseDto } from '../models';
import type { SuccessResponse } from '../models';
/**
 * PlanRestreamApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Buy restream tariff
     * @param {buy1VEnum} v Version
     * @param {buy1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {buy1PeriodEnum} period Period
     * @param {number} planRestreamId Restream plan id
     * @param {number} [countChannel] Channel count
     * @param {number} [bitrate] Bitrate, kbps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buy1: (v: buy1VEnum, language: buy1LanguageEnum, projectId: number, period: buy1PeriodEnum, planRestreamId: number, countChannel?: number, bitrate?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Load data for show card the tariffs v2
     * @param {check21VEnum} v Version
     * @param {check21LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {check21PeriodEnum} period Period
     * @param {number} planRestreamId Restream plan id
     * @param {number} [useBalance] Is select balance
     * @param {number} [channels] Channels count
     * @param {number} [bitrate] Bitrate, kbps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    check21: (v: check21VEnum, language: check21LanguageEnum, projectId: number, period: check21PeriodEnum, planRestreamId: number, useBalance?: number, channels?: number, bitrate?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get discount restream
     * @param {getDiscount1VEnum} v Version
     * @param {getDiscount1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiscount1: (v: getDiscount1VEnum, language: getDiscount1LanguageEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get list of restream tariffs
     * @param {list1VEnum} v Version
     * @param {list1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1: (v: list1VEnum, language: list1LanguageEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get list of restream tariffs for project
     * @param {listProject1VEnum} v Version
     * @param {listProject1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProject1: (v: listProject1VEnum, language: listProject1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove after tariff
     * @param {remove1VEnum} v Version
     * @param {remove1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} planRestreamId Restream plan id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    remove1: (v: remove1VEnum, language: remove1LanguageEnum, projectId: number, planRestreamId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get tariff for project
     * @param {tariff1VEnum} v Version
     * @param {tariff1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tariff1: (v: tariff1VEnum, language: tariff1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PlanRestreamApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Buy restream tariff
     * @param {buy1VEnum} v Version
     * @param {buy1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {buy1PeriodEnum} period Period
     * @param {number} planRestreamId Restream plan id
     * @param {number} [countChannel] Channel count
     * @param {number} [bitrate] Bitrate, kbps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buy1(v: buy1VEnum, language: buy1LanguageEnum, projectId: number, period: buy1PeriodEnum, planRestreamId: number, countChannel?: number, bitrate?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Load data for show card the tariffs v2
     * @param {check21VEnum} v Version
     * @param {check21LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {check21PeriodEnum} period Period
     * @param {number} planRestreamId Restream plan id
     * @param {number} [useBalance] Is select balance
     * @param {number} [channels] Channels count
     * @param {number} [bitrate] Bitrate, kbps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    check21(v: check21VEnum, language: check21LanguageEnum, projectId: number, period: check21PeriodEnum, planRestreamId: number, useBalance?: number, channels?: number, bitrate?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamCheckV2Response>>;
    /**
     *
     * @summary Get discount restream
     * @param {getDiscount1VEnum} v Version
     * @param {getDiscount1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiscount1(v: getDiscount1VEnum, language: getDiscount1LanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamDiscountResponse>>;
    /**
     *
     * @summary Get list of restream tariffs
     * @param {list1VEnum} v Version
     * @param {list1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(v: list1VEnum, language: list1LanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamResponseDto>>;
    /**
     *
     * @summary Get list of restream tariffs for project
     * @param {listProject1VEnum} v Version
     * @param {listProject1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProject1(v: listProject1VEnum, language: listProject1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamProjectResponseDto>>;
    /**
     *
     * @summary Remove after tariff
     * @param {remove1VEnum} v Version
     * @param {remove1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} planRestreamId Restream plan id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    remove1(v: remove1VEnum, language: remove1LanguageEnum, projectId: number, planRestreamId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Get tariff for project
     * @param {tariff1VEnum} v Version
     * @param {tariff1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tariff1(v: tariff1VEnum, language: tariff1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanRestreamForProject>>;
};
/**
 * PlanRestreamApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Buy restream tariff
     * @param {buy1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buy1(requestParameters: buy1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Load data for show card the tariffs v2
     * @param {check21Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    check21(requestParameters: check21Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamCheckV2Response>;
    /**
     *
     * @summary Get discount restream
     * @param {getDiscount1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiscount1(requestParameters: getDiscount1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamDiscountResponse>;
    /**
     *
     * @summary Get list of restream tariffs
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamResponseDto>;
    /**
     *
     * @summary Get list of restream tariffs for project
     * @param {listProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProject1(requestParameters: listProject1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamProjectResponseDto>;
    /**
     *
     * @summary Remove after tariff
     * @param {remove1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    remove1(requestParameters: remove1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get tariff for project
     * @param {tariff1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tariff1(requestParameters: tariff1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanRestreamForProject>;
};
/**
 * Request parameters for buy1 operation in PlanRestreamApi.
 * @export
 * @interface buy1Request
 */
export interface buy1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof buy1
     */
    readonly v?: buy1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof buy1
     */
    readonly language: buy1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof buy1
     */
    readonly projectId: number;
    /**
     * Period
     * @type {'month' | 'year'}
     * @memberof buy1
     */
    readonly period: buy1PeriodEnum;
    /**
     * Restream plan id
     * @type {number}
     * @memberof buy1
     */
    readonly planRestreamId: number;
    /**
     * Channel count
     * @type {number}
     * @memberof buy1
     */
    readonly countChannel?: number;
    /**
     * Bitrate, kbps
     * @type {number}
     * @memberof buy1
     */
    readonly bitrate?: number;
}
/**
 * Request parameters for check21 operation in PlanRestreamApi.
 * @export
 * @interface check21Request
 */
export interface check21Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof check21
     */
    readonly v?: check21VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof check21
     */
    readonly language: check21LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof check21
     */
    readonly projectId: number;
    /**
     * Period
     * @type {'month' | 'year'}
     * @memberof check21
     */
    readonly period: check21PeriodEnum;
    /**
     * Restream plan id
     * @type {number}
     * @memberof check21
     */
    readonly planRestreamId: number;
    /**
     * Is select balance
     * @type {number}
     * @memberof check21
     */
    readonly useBalance?: number;
    /**
     * Channels count
     * @type {number}
     * @memberof check21
     */
    readonly channels?: number;
    /**
     * Bitrate, kbps
     * @type {number}
     * @memberof check21
     */
    readonly bitrate?: number;
}
/**
 * Request parameters for getDiscount1 operation in PlanRestreamApi.
 * @export
 * @interface getDiscount1Request
 */
export interface getDiscount1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getDiscount1
     */
    readonly v?: getDiscount1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getDiscount1
     */
    readonly language: getDiscount1LanguageEnum;
}
/**
 * Request parameters for list1 operation in PlanRestreamApi.
 * @export
 * @interface list1Request
 */
export interface list1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof list1
     */
    readonly v?: list1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof list1
     */
    readonly language: list1LanguageEnum;
}
/**
 * Request parameters for listProject1 operation in PlanRestreamApi.
 * @export
 * @interface listProject1Request
 */
export interface listProject1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof listProject1
     */
    readonly v?: listProject1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof listProject1
     */
    readonly language: listProject1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof listProject1
     */
    readonly projectId: number;
}
/**
 * Request parameters for remove1 operation in PlanRestreamApi.
 * @export
 * @interface remove1Request
 */
export interface remove1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof remove1
     */
    readonly v?: remove1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof remove1
     */
    readonly language: remove1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof remove1
     */
    readonly projectId: number;
    /**
     * Restream plan id
     * @type {number}
     * @memberof remove1
     */
    readonly planRestreamId: number;
}
/**
 * Request parameters for tariff1 operation in PlanRestreamApi.
 * @export
 * @interface tariff1Request
 */
export interface tariff1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof tariff1
     */
    readonly v?: tariff1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof tariff1
     */
    readonly language: tariff1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof tariff1
     */
    readonly projectId: number;
}
/**
 * PlanRestreamApi - object-oriented interface
 * @export
 * @class PlanRestreamApi
 * @extends {BaseAPI}
 */
export declare class PlanRestreamApi extends BaseAPI {
    /**
     *
     * @summary Buy restream tariff
     * @param {buy1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    buy1(requestParameters: buy1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Load data for show card the tariffs v2
     * @param {check21Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    check21(requestParameters: check21Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanRestreamCheckV2Response, any>>;
    /**
     *
     * @summary Get discount restream
     * @param {getDiscount1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    getDiscount1(requestParameters: getDiscount1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanRestreamDiscountResponse, any>>;
    /**
     *
     * @summary Get list of restream tariffs
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanRestreamResponseDto, any>>;
    /**
     *
     * @summary Get list of restream tariffs for project
     * @param {listProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    listProject1(requestParameters: listProject1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanRestreamProjectResponseDto, any>>;
    /**
     *
     * @summary Remove after tariff
     * @param {remove1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    remove1(requestParameters: remove1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Get tariff for project
     * @param {tariff1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    tariff1(requestParameters: tariff1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanRestreamForProject, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum buy1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum buy1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum buy1PeriodEnum {
    month = "month",
    year = "year"
}
/**
  * @export
  * @enum {string}
  */
export declare enum check21VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum check21LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum check21PeriodEnum {
    month = "month",
    year = "year"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getDiscount1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getDiscount1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum list1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum list1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum listProject1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum listProject1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum remove1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum remove1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum tariff1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum tariff1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=plan-restream-api.d.ts.map