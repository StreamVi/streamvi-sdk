/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { PaginatedResponseOfBlogPageSiteResponse } from '../models';
/**
 * BlogPageApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get blog page
     * @param {get1VEnum} v Version
     * @param {get1LanguageEnum} language Current language
     * @param {string} url Url of page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get1: (v: get1VEnum, language: get1LanguageEnum, url: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get list of blog pages
     * @param {list1VEnum} v Version
     * @param {list1LanguageEnum} language Current language
     * @param {string} [s] String for search
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1: (v: list1VEnum, language: list1LanguageEnum, s?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BlogPageApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get blog page
     * @param {get1VEnum} v Version
     * @param {get1LanguageEnum} language Current language
     * @param {string} url Url of page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get1(v: get1VEnum, language: get1LanguageEnum, url: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseOfBlogPageSiteResponse>>;
    /**
     *
     * @summary Get list of blog pages
     * @param {list1VEnum} v Version
     * @param {list1LanguageEnum} language Current language
     * @param {string} [s] String for search
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(v: list1VEnum, language: list1LanguageEnum, s?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseOfBlogPageSiteResponse>>;
};
/**
 * BlogPageApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get blog page
     * @param {get1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get1(requestParameters: get1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfBlogPageSiteResponse>;
    /**
     *
     * @summary Get list of blog pages
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfBlogPageSiteResponse>;
};
/**
 * Request parameters for get1 operation in BlogPageApi.
 * @export
 * @interface get1Request
 */
export interface get1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof get1
     */
    readonly v?: get1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof get1
     */
    readonly language: get1LanguageEnum;
    /**
     * Url of page
     * @type {string}
     * @memberof get1
     */
    readonly url: string;
}
/**
 * Request parameters for list1 operation in BlogPageApi.
 * @export
 * @interface list1Request
 */
export interface list1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof list1
     */
    readonly v?: list1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof list1
     */
    readonly language: list1LanguageEnum;
    /**
     * String for search
     * @type {string}
     * @memberof list1
     */
    readonly s?: string;
    /**
     * Number of results
     * @type {number}
     * @memberof list1
     */
    readonly limit?: number;
    /**
     * Page offset number
     * @type {number}
     * @memberof list1
     */
    readonly offset?: number;
}
/**
 * BlogPageApi - object-oriented interface
 * @export
 * @class BlogPageApi
 * @extends {BaseAPI}
 */
export declare class BlogPageApi extends BaseAPI {
    /**
     *
     * @summary Get blog page
     * @param {get1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPageApi
     */
    get1(requestParameters: get1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").PaginatedResponse, any>>;
    /**
     *
     * @summary Get list of blog pages
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPageApi
     */
    list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").PaginatedResponse, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum get1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum get1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum list1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum list1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=blog-page-api.d.ts.map