/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { ListOfRtmpServerLocationResponse } from '../models';
import type { RtmpServerGraphResponse } from '../models';
import type { RtmpServerListResponse } from '../models';
import type { RtmpServerStateResponse } from '../models';
/**
 * RtmpServerApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Rtmp locations server list example for unauthorized
     * @param {listLocationsUnauthorizedVEnum} v Version
     * @param {listLocationsUnauthorizedLanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLocationsUnauthorized: (v: listLocationsUnauthorizedVEnum, language: listLocationsUnauthorizedLanguageEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Graph of rtmp servers
     * @param {graph1VEnum} v Version
     * @param {graph1LanguageEnum} language Current language
     * @param {graph1IntervalEnum} interval Interval state in hours
     * @param {graph1TypeEnum} type Type graph
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    graph1: (v: graph1VEnum, language: graph1LanguageEnum, interval: graph1IntervalEnum, type: graph1TypeEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List rtmp servers
     * @param {list1VEnum} v Version
     * @param {list1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {list1IntervalEnum} interval Interval state in hours
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1: (v: list1VEnum, language: list1LanguageEnum, projectId: number, interval: list1IntervalEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary State of rtmp servers
     * @param {state1VEnum} v Version
     * @param {state1LanguageEnum} language Current language
     * @param {state1IntervalEnum} interval Interval state in hours
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    state1: (v: state1VEnum, language: state1LanguageEnum, interval: state1IntervalEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary State of rtmp servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    up1: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RtmpServerApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Rtmp locations server list example for unauthorized
     * @param {listLocationsUnauthorizedVEnum} v Version
     * @param {listLocationsUnauthorizedLanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLocationsUnauthorized(v: listLocationsUnauthorizedVEnum, language: listLocationsUnauthorizedLanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfRtmpServerLocationResponse>>;
    /**
     *
     * @summary Graph of rtmp servers
     * @param {graph1VEnum} v Version
     * @param {graph1LanguageEnum} language Current language
     * @param {graph1IntervalEnum} interval Interval state in hours
     * @param {graph1TypeEnum} type Type graph
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    graph1(v: graph1VEnum, language: graph1LanguageEnum, interval: graph1IntervalEnum, type: graph1TypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RtmpServerGraphResponse>>;
    /**
     *
     * @summary List rtmp servers
     * @param {list1VEnum} v Version
     * @param {list1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {list1IntervalEnum} interval Interval state in hours
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(v: list1VEnum, language: list1LanguageEnum, projectId: number, interval: list1IntervalEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RtmpServerListResponse>>;
    /**
     *
     * @summary State of rtmp servers
     * @param {state1VEnum} v Version
     * @param {state1LanguageEnum} language Current language
     * @param {state1IntervalEnum} interval Interval state in hours
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    state1(v: state1VEnum, language: state1LanguageEnum, interval: state1IntervalEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RtmpServerStateResponse>>;
    /**
     *
     * @summary State of rtmp servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    up1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * RtmpServerApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Rtmp locations server list example for unauthorized
     * @param {listLocationsUnauthorizedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLocationsUnauthorized(requestParameters: listLocationsUnauthorizedRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListOfRtmpServerLocationResponse>;
    /**
     *
     * @summary Graph of rtmp servers
     * @param {graph1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    graph1(requestParameters: graph1Request, options?: RawAxiosRequestConfig): AxiosPromise<RtmpServerGraphResponse>;
    /**
     *
     * @summary List rtmp servers
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): AxiosPromise<RtmpServerListResponse>;
    /**
     *
     * @summary State of rtmp servers
     * @param {state1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    state1(requestParameters: state1Request, options?: RawAxiosRequestConfig): AxiosPromise<RtmpServerStateResponse>;
    /**
     *
     * @summary State of rtmp servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    up1(options?: RawAxiosRequestConfig): AxiosPromise<object>;
};
/**
 * Request parameters for listLocationsUnauthorized operation in RtmpServerApi.
 * @export
 * @interface listLocationsUnauthorizedRequest
 */
export interface listLocationsUnauthorizedRequest {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof listLocationsUnauthorized
     */
    readonly v: listLocationsUnauthorizedVEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof listLocationsUnauthorized
     */
    readonly language: listLocationsUnauthorizedLanguageEnum;
}
/**
 * Request parameters for graph1 operation in RtmpServerApi.
 * @export
 * @interface graph1Request
 */
export interface graph1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof graph1
     */
    readonly v?: graph1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof graph1
     */
    readonly language: graph1LanguageEnum;
    /**
     * Interval state in hours
     * @type {1 | 3 | 6 | 12 | 24}
     * @memberof graph1
     */
    readonly interval: graph1IntervalEnum;
    /**
     * Type graph
     * @type {'performance' | 'network' | 'cpu' | 'ram' | 'deliveredPackages'}
     * @memberof graph1
     */
    readonly type: graph1TypeEnum;
}
/**
 * Request parameters for list1 operation in RtmpServerApi.
 * @export
 * @interface list1Request
 */
export interface list1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof list1
     */
    readonly v?: list1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof list1
     */
    readonly language: list1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof list1
     */
    readonly projectId: number;
    /**
     * Interval state in hours
     * @type {1 | 3 | 6 | 12 | 24}
     * @memberof list1
     */
    readonly interval: list1IntervalEnum;
}
/**
 * Request parameters for state1 operation in RtmpServerApi.
 * @export
 * @interface state1Request
 */
export interface state1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof state1
     */
    readonly v?: state1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof state1
     */
    readonly language: state1LanguageEnum;
    /**
     * Interval state in hours
     * @type {1 | 3 | 6 | 12 | 24}
     * @memberof state1
     */
    readonly interval: state1IntervalEnum;
}
/**
 * RtmpServerApi - object-oriented interface
 * @export
 * @class RtmpServerApi
 * @extends {BaseAPI}
 */
export declare class RtmpServerApi extends BaseAPI {
    /**
     *
     * @summary Rtmp locations server list example for unauthorized
     * @param {listLocationsUnauthorizedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    listLocationsUnauthorized(requestParameters: listLocationsUnauthorizedRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").ListResponse, any>>;
    /**
     *
     * @summary Graph of rtmp servers
     * @param {graph1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    graph1(requestParameters: graph1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RtmpServerGraphResponse, any>>;
    /**
     *
     * @summary List rtmp servers
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RtmpServerListResponse, any>>;
    /**
     *
     * @summary State of rtmp servers
     * @param {state1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    state1(requestParameters: state1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RtmpServerStateResponse, any>>;
    /**
     *
     * @summary State of rtmp servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    up1(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum listLocationsUnauthorizedVEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum listLocationsUnauthorizedLanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum graph1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum graph1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum graph1IntervalEnum {
    NUMBER_1 = 1,
    NUMBER_3 = 3,
    NUMBER_6 = 6,
    NUMBER_12 = 12,
    NUMBER_24 = 24
}
/**
  * @export
  * @enum {string}
  */
export declare enum graph1TypeEnum {
    performance = "performance",
    network = "network",
    cpu = "cpu",
    ram = "ram",
    deliveredPackages = "deliveredPackages"
}
/**
  * @export
  * @enum {string}
  */
export declare enum list1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum list1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum list1IntervalEnum {
    NUMBER_1 = 1,
    NUMBER_3 = 3,
    NUMBER_6 = 6,
    NUMBER_12 = 12,
    NUMBER_24 = 24
}
/**
  * @export
  * @enum {string}
  */
export declare enum state1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum state1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum state1IntervalEnum {
    NUMBER_1 = 1,
    NUMBER_3 = 3,
    NUMBER_6 = 6,
    NUMBER_12 = 12,
    NUMBER_24 = 24
}
//# sourceMappingURL=rtmp-server-api.d.ts.map