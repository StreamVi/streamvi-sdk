"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaySettingGetSettingV3VEnum = exports.PaySettingGetSettingV3LanguageEnum = exports.PaySettingCheckCountryV1VEnum = exports.PaySettingCheckCountryV1LanguageEnum = exports.PaySettingApi = exports.PaySettingApiFactory = exports.PaySettingApiFp = exports.PaySettingApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PaySettingApi - axios parameter creator
 * @export
 */
const PaySettingApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Check country after update user
         * @param {PaySettingCheckCountryV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} countryId country id
         * @param {PaySettingCheckCountryV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySettingCheckCountryV1: async (language, projectId, countryId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('paySettingCheckCountryV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('paySettingCheckCountryV1', 'projectId', projectId);
            // verify required parameter 'countryId' is not null or undefined
            (0, common_1.assertParamExists)('paySettingCheckCountryV1', 'countryId', countryId);
            const localVarPath = `/method/pay-setting/check-country`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (countryId !== undefined) {
                localVarQueryParameter['country_id'] = countryId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get pay settings for profile v3
         * @param {PaySettingGetSettingV3LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PaySettingGetSettingV3VEnum} [v] Version (automatically defaults to 3 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySettingGetSettingV3: async (language, projectId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('paySettingGetSettingV3', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('paySettingGetSettingV3', 'projectId', projectId);
            const localVarPath = `/method/pay-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set pay settings for profile
         * @param {PaySettingBodyDto} paySettingBodyDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySettingSetSettingV1: async (paySettingBodyDto, options = {}) => {
            // verify required parameter 'paySettingBodyDto' is not null or undefined
            (0, common_1.assertParamExists)('paySettingSetSettingV1', 'paySettingBodyDto', paySettingBodyDto);
            const localVarPath = `/method/pay-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(paySettingBodyDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PaySettingApiAxiosParamCreator = PaySettingApiAxiosParamCreator;
/**
 * PaySettingApi - functional programming interface
 * @export
 */
const PaySettingApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PaySettingApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Check country after update user
         * @param {PaySettingCheckCountryV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} countryId country id
         * @param {PaySettingCheckCountryV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paySettingCheckCountryV1(language, projectId, countryId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.paySettingCheckCountryV1(language, projectId, countryId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaySettingApi.paySettingCheckCountryV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get pay settings for profile v3
         * @param {PaySettingGetSettingV3LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {PaySettingGetSettingV3VEnum} [v] Version (automatically defaults to 3 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paySettingGetSettingV3(language, projectId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.paySettingGetSettingV3(language, projectId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaySettingApi.paySettingGetSettingV3']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Set pay settings for profile
         * @param {PaySettingBodyDto} paySettingBodyDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paySettingSetSettingV1(paySettingBodyDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.paySettingSetSettingV1(paySettingBodyDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaySettingApi.paySettingSetSettingV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PaySettingApiFp = PaySettingApiFp;
/**
 * PaySettingApi - factory interface
 * @export
 */
const PaySettingApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PaySettingApiFp)(configuration);
    return {
        /**
         *
         * @summary Check country after update user
         * @param {PaySettingApiPaySettingCheckCountryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySettingCheckCountryV1(requestParameters, options) {
            return localVarFp.paySettingCheckCountryV1(requestParameters.language, requestParameters.projectId, requestParameters.countryId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get pay settings for profile v3
         * @param {PaySettingApiPaySettingGetSettingV3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySettingGetSettingV3(requestParameters, options) {
            return localVarFp.paySettingGetSettingV3(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set pay settings for profile
         * @param {PaySettingApiPaySettingSetSettingV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySettingSetSettingV1(requestParameters, options) {
            return localVarFp.paySettingSetSettingV1(requestParameters.paySettingBodyDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PaySettingApiFactory = PaySettingApiFactory;
/**
 * PaySettingApi - object-oriented interface
 * @export
 * @class PaySettingApi
 * @extends {BaseAPI}
 */
class PaySettingApi extends base_1.BaseAPI {
    /**
     *
     * @summary Check country after update user
     * @param {PaySettingApiPaySettingCheckCountryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    paySettingCheckCountryV1(requestParameters, options) {
        return (0, exports.PaySettingApiFp)(this.configuration).paySettingCheckCountryV1(requestParameters.language, requestParameters.projectId, requestParameters.countryId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get pay settings for profile v3
     * @param {PaySettingApiPaySettingGetSettingV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    paySettingGetSettingV3(requestParameters, options) {
        return (0, exports.PaySettingApiFp)(this.configuration).paySettingGetSettingV3(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set pay settings for profile
     * @param {PaySettingApiPaySettingSetSettingV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    paySettingSetSettingV1(requestParameters, options) {
        return (0, exports.PaySettingApiFp)(this.configuration).paySettingSetSettingV1(requestParameters.paySettingBodyDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PaySettingApi = PaySettingApi;
/**
 * @export
 */
exports.PaySettingCheckCountryV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PaySettingCheckCountryV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PaySettingGetSettingV3LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PaySettingGetSettingV3VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
