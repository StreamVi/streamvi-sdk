"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSettingV31LanguageEnum = exports.getSettingV31VEnum = exports.checkCountry1LanguageEnum = exports.checkCountry1VEnum = exports.PaySettingApi = exports.factory = exports.fp = exports.axiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PaySettingApi - axios parameter creator
 * @export
 */
const axiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Check country after update user
         * @param {checkCountry1VEnum} v Version
         * @param {checkCountry1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} countryId country id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCountry1: async (v, language, projectId, countryId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('checkCountry1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('checkCountry1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('checkCountry1', 'projectId', projectId);
            // verify required parameter 'countryId' is not null or undefined
            (0, common_1.assertParamExists)('checkCountry1', 'countryId', countryId);
            const localVarPath = `/method/pay-setting/check-country`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (countryId !== undefined) {
                localVarQueryParameter['country_id'] = countryId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get pay settings for profile v3
         * @param {getSettingV31VEnum} v Version
         * @param {getSettingV31LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingV31: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('getSettingV31', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('getSettingV31', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('getSettingV31', 'projectId', projectId);
            const localVarPath = `/method/pay-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set pay settings for profile
         * @param {PaySettingBodyDto} paySettingBodyDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSetting1: async (paySettingBodyDto, options = {}) => {
            // verify required parameter 'paySettingBodyDto' is not null or undefined
            (0, common_1.assertParamExists)('setSetting1', 'paySettingBodyDto', paySettingBodyDto);
            const localVarPath = `/method/pay-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(paySettingBodyDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.axiosParamCreator = axiosParamCreator;
/**
 * PaySettingApi - functional programming interface
 * @export
 */
const fp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.axiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Check country after update user
         * @param {checkCountry1VEnum} v Version
         * @param {checkCountry1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} countryId country id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkCountry1(v, language, projectId, countryId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkCountry1(v, language, projectId, countryId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaySettingApi.checkCountry1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get pay settings for profile v3
         * @param {getSettingV31VEnum} v Version
         * @param {getSettingV31LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettingV31(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettingV31(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaySettingApi.getSettingV31']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Set pay settings for profile
         * @param {PaySettingBodyDto} paySettingBodyDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setSetting1(paySettingBodyDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.setSetting1(paySettingBodyDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaySettingApi.setSetting1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.fp = fp;
/**
 * PaySettingApi - factory interface
 * @export
 */
const factory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.fp)(configuration);
    return {
        /**
         *
         * @summary Check country after update user
         * @param {checkCountry1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCountry1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || checkCountry1VEnum._1;
            return localVarFp.checkCountry1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.countryId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get pay settings for profile v3
         * @param {getSettingV31Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingV31(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || getSettingV31VEnum._1;
            return localVarFp.getSettingV31(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set pay settings for profile
         * @param {setSetting1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSetting1(requestParameters, options) {
            return localVarFp.setSetting1(requestParameters.paySettingBodyDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.factory = factory;
/**
 * PaySettingApi - object-oriented interface
 * @export
 * @class PaySettingApi
 * @extends {BaseAPI}
 */
class PaySettingApi extends base_1.BaseAPI {
    /**
     *
     * @summary Check country after update user
     * @param {checkCountry1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    checkCountry1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || checkCountry1VEnum._1;
        return (0, exports.fp)(this.configuration).checkCountry1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.countryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get pay settings for profile v3
     * @param {getSettingV31Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    getSettingV31(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || getSettingV31VEnum._1;
        return (0, exports.fp)(this.configuration).getSettingV31(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set pay settings for profile
     * @param {setSetting1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    setSetting1(requestParameters, options) {
        return (0, exports.fp)(this.configuration).setSetting1(requestParameters.paySettingBodyDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PaySettingApi = PaySettingApi;
/**
  * @export
  * @enum {string}
  */
var checkCountry1VEnum;
(function (checkCountry1VEnum) {
    checkCountry1VEnum["_1"] = "1";
    checkCountry1VEnum["_2"] = "2";
    checkCountry1VEnum["_3"] = "3";
})(checkCountry1VEnum || (exports.checkCountry1VEnum = checkCountry1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var checkCountry1LanguageEnum;
(function (checkCountry1LanguageEnum) {
    checkCountry1LanguageEnum["ru"] = "ru";
    checkCountry1LanguageEnum["en"] = "en";
    checkCountry1LanguageEnum["cn"] = "cn";
})(checkCountry1LanguageEnum || (exports.checkCountry1LanguageEnum = checkCountry1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var getSettingV31VEnum;
(function (getSettingV31VEnum) {
    getSettingV31VEnum["_1"] = "1";
    getSettingV31VEnum["_2"] = "2";
    getSettingV31VEnum["_3"] = "3";
})(getSettingV31VEnum || (exports.getSettingV31VEnum = getSettingV31VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var getSettingV31LanguageEnum;
(function (getSettingV31LanguageEnum) {
    getSettingV31LanguageEnum["ru"] = "ru";
    getSettingV31LanguageEnum["en"] = "en";
    getSettingV31LanguageEnum["cn"] = "cn";
})(getSettingV31LanguageEnum || (exports.getSettingV31LanguageEnum = getSettingV31LanguageEnum = {}));
