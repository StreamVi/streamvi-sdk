/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { MessageResponseDto } from '../models';
import type { MethodChatHistoryResponse } from '../models';
import type { MethodChatSendMessageRequestDto } from '../models';
import type { SuccessResponse } from '../models';
/**
 * ChatGatewayApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Remove message
     * @param {deleteVEnum} v Version
     * @param {deleteLanguageEnum} language Current language
     * @param {string} key Key
     * @param {number} broadcastId broadcast id
     * @param {string} eventId Event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete: (v: deleteVEnum, language: deleteLanguageEnum, key: string, broadcastId: number, eventId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get one message
     * @param {getMessageVEnum} v Version
     * @param {getMessageLanguageEnum} language Current language
     * @param {string} key Key
     * @param {number} broadcastId broadcast id
     * @param {string} eventId Event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage: (v: getMessageVEnum, language: getMessageLanguageEnum, key: string, broadcastId: number, eventId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List history message
     * @param {historyVEnum} v Version
     * @param {historyLanguageEnum} language Current language
     * @param {string} key Key
     * @param {number} broadcastId broadcast id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    history: (v: historyVEnum, language: historyLanguageEnum, key: string, broadcastId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Send message
     * @param {sendVEnum} v Version
     * @param {sendLanguageEnum} language Current language
     * @param {string} key Key
     * @param {number} broadcastId
     * @param {MethodChatSendMessageRequestDto} methodChatSendMessageRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    send: (v: sendVEnum, language: sendLanguageEnum, key: string, broadcastId: number, methodChatSendMessageRequestDto: MethodChatSendMessageRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ChatGatewayApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Remove message
     * @param {deleteVEnum} v Version
     * @param {deleteLanguageEnum} language Current language
     * @param {string} key Key
     * @param {number} broadcastId broadcast id
     * @param {string} eventId Event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete(v: deleteVEnum, language: deleteLanguageEnum, key: string, broadcastId: number, eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Get one message
     * @param {getMessageVEnum} v Version
     * @param {getMessageLanguageEnum} language Current language
     * @param {string} key Key
     * @param {number} broadcastId broadcast id
     * @param {string} eventId Event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage(v: getMessageVEnum, language: getMessageLanguageEnum, key: string, broadcastId: number, eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>>;
    /**
     *
     * @summary List history message
     * @param {historyVEnum} v Version
     * @param {historyLanguageEnum} language Current language
     * @param {string} key Key
     * @param {number} broadcastId broadcast id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    history(v: historyVEnum, language: historyLanguageEnum, key: string, broadcastId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MethodChatHistoryResponse>>;
    /**
     *
     * @summary Send message
     * @param {sendVEnum} v Version
     * @param {sendLanguageEnum} language Current language
     * @param {string} key Key
     * @param {number} broadcastId
     * @param {MethodChatSendMessageRequestDto} methodChatSendMessageRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    send(v: sendVEnum, language: sendLanguageEnum, key: string, broadcastId: number, methodChatSendMessageRequestDto: MethodChatSendMessageRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>>;
};
/**
 * ChatGatewayApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Remove message
     * @param {deleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete(requestParameters: deleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get one message
     * @param {getMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage(requestParameters: getMessageRequest, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponseDto>;
    /**
     *
     * @summary List history message
     * @param {historyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    history(requestParameters: historyRequest, options?: RawAxiosRequestConfig): AxiosPromise<MethodChatHistoryResponse>;
    /**
     *
     * @summary Send message
     * @param {sendRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    send(requestParameters: sendRequest, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponseDto>;
};
/**
 * Request parameters for delete operation in ChatGatewayApi.
 * @export
 * @interface deleteRequest
 */
export interface deleteRequest {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof delete
     */
    readonly v: deleteVEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof delete
     */
    readonly language: deleteLanguageEnum;
    /**
     * Key
     * @type {string}
     * @memberof delete
     */
    readonly key: string;
    /**
     * broadcast id
     * @type {number}
     * @memberof delete
     */
    readonly broadcastId: number;
    /**
     * Event id
     * @type {string}
     * @memberof delete
     */
    readonly eventId: string;
}
/**
 * Request parameters for getMessage operation in ChatGatewayApi.
 * @export
 * @interface getMessageRequest
 */
export interface getMessageRequest {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getMessage
     */
    readonly v: getMessageVEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getMessage
     */
    readonly language: getMessageLanguageEnum;
    /**
     * Key
     * @type {string}
     * @memberof getMessage
     */
    readonly key: string;
    /**
     * broadcast id
     * @type {number}
     * @memberof getMessage
     */
    readonly broadcastId: number;
    /**
     * Event id
     * @type {string}
     * @memberof getMessage
     */
    readonly eventId: string;
}
/**
 * Request parameters for history operation in ChatGatewayApi.
 * @export
 * @interface historyRequest
 */
export interface historyRequest {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof history
     */
    readonly v: historyVEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof history
     */
    readonly language: historyLanguageEnum;
    /**
     * Key
     * @type {string}
     * @memberof history
     */
    readonly key: string;
    /**
     * broadcast id
     * @type {number}
     * @memberof history
     */
    readonly broadcastId: number;
}
/**
 * Request parameters for send operation in ChatGatewayApi.
 * @export
 * @interface sendRequest
 */
export interface sendRequest {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof send
     */
    readonly v: sendVEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof send
     */
    readonly language: sendLanguageEnum;
    /**
     * Key
     * @type {string}
     * @memberof send
     */
    readonly key: string;
    /**
     *
     * @type {number}
     * @memberof send
     */
    readonly broadcastId: number;
    /**
     *
     * @type {MethodChatSendMessageRequestDto}
     * @memberof send
     */
    readonly methodChatSendMessageRequestDto: MethodChatSendMessageRequestDto;
}
/**
 * ChatGatewayApi - object-oriented interface
 * @export
 * @class ChatGatewayApi
 * @extends {BaseAPI}
 */
export declare class ChatGatewayApi extends BaseAPI {
    /**
     *
     * @summary Remove message
     * @param {deleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    delete(requestParameters: deleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Get one message
     * @param {getMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    getMessage(requestParameters: getMessageRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MessageResponseDto, any>>;
    /**
     *
     * @summary List history message
     * @param {historyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    history(requestParameters: historyRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MethodChatHistoryResponse, any>>;
    /**
     *
     * @summary Send message
     * @param {sendRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    send(requestParameters: sendRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MessageResponseDto, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum deleteVEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum deleteLanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getMessageVEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getMessageLanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum historyVEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum historyLanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum sendVEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum sendLanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=chat-gateway-api.d.ts.map