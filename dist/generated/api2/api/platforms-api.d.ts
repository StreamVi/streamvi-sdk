/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { ListOfCategoryItemResponse } from '../models';
import type { SitePlatformsSupportedResponse } from '../models';
/**
 * PlatformsApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get url for start oauth
     * @param {addAccount1VEnum} v Version
     * @param {addAccount1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {addAccount1PlatformEnum} platform Provider oauth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAccount1: (v: addAccount1VEnum, language: addAccount1LanguageEnum, projectId: number, platform: addAccount1PlatformEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get category from the platform
     * @param {getCategory1VEnum} v Version
     * @param {getCategory1LanguageEnum} language Current language
     * @param {getCategory1TypeEnum} type Category search bar
     * @param {string} [q] Category search bar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategory1: (v: getCategory1VEnum, language: getCategory1LanguageEnum, type: getCategory1TypeEnum, q?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get category from the platform
     * @param {logoutAccount1VEnum} v Version
     * @param {logoutAccount1LanguageEnum} language Current language
     * @param {string} id Category search bar
     * @param {logoutAccount1PlatformEnum} platform Provider oauth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutAccount1: (v: logoutAccount1VEnum, language: logoutAccount1LanguageEnum, id: string, platform: logoutAccount1PlatformEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Supported platforms
     * @param {platformList1VEnum} v Version
     * @param {platformList1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    platformList1: (v: platformList1VEnum, language: platformList1LanguageEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PlatformsApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get url for start oauth
     * @param {addAccount1VEnum} v Version
     * @param {addAccount1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {addAccount1PlatformEnum} platform Provider oauth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAccount1(v: addAccount1VEnum, language: addAccount1LanguageEnum, projectId: number, platform: addAccount1PlatformEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get category from the platform
     * @param {getCategory1VEnum} v Version
     * @param {getCategory1LanguageEnum} language Current language
     * @param {getCategory1TypeEnum} type Category search bar
     * @param {string} [q] Category search bar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategory1(v: getCategory1VEnum, language: getCategory1LanguageEnum, type: getCategory1TypeEnum, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfCategoryItemResponse>>;
    /**
     *
     * @summary Get category from the platform
     * @param {logoutAccount1VEnum} v Version
     * @param {logoutAccount1LanguageEnum} language Current language
     * @param {string} id Category search bar
     * @param {logoutAccount1PlatformEnum} platform Provider oauth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutAccount1(v: logoutAccount1VEnum, language: logoutAccount1LanguageEnum, id: string, platform: logoutAccount1PlatformEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfCategoryItemResponse>>;
    /**
     *
     * @summary Supported platforms
     * @param {platformList1VEnum} v Version
     * @param {platformList1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    platformList1(v: platformList1VEnum, language: platformList1LanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SitePlatformsSupportedResponse>>;
};
/**
 * PlatformsApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get url for start oauth
     * @param {addAccount1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAccount1(requestParameters: addAccount1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get category from the platform
     * @param {getCategory1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategory1(requestParameters: getCategory1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfCategoryItemResponse>;
    /**
     *
     * @summary Get category from the platform
     * @param {logoutAccount1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutAccount1(requestParameters: logoutAccount1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfCategoryItemResponse>;
    /**
     *
     * @summary Supported platforms
     * @param {platformList1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    platformList1(requestParameters: platformList1Request, options?: RawAxiosRequestConfig): AxiosPromise<SitePlatformsSupportedResponse>;
};
/**
 * Request parameters for addAccount1 operation in PlatformsApi.
 * @export
 * @interface addAccount1Request
 */
export interface addAccount1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof addAccount1
     */
    readonly v?: addAccount1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof addAccount1
     */
    readonly language: addAccount1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof addAccount1
     */
    readonly projectId: number;
    /**
     * Provider oauth
     * @type {'vk' | 'vk-id' | 'ok' | 'youtube' | 'trovo' | 'twitch'}
     * @memberof addAccount1
     */
    readonly platform: addAccount1PlatformEnum;
}
/**
 * Request parameters for getCategory1 operation in PlatformsApi.
 * @export
 * @interface getCategory1Request
 */
export interface getCategory1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getCategory1
     */
    readonly v?: getCategory1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getCategory1
     */
    readonly language: getCategory1LanguageEnum;
    /**
     * Category search bar
     * @type {'vk' | 'youtube' | 'trovo' | 'twitch' | 'vkvideolive'}
     * @memberof getCategory1
     */
    readonly type: getCategory1TypeEnum;
    /**
     * Category search bar
     * @type {string}
     * @memberof getCategory1
     */
    readonly q?: string;
}
/**
 * Request parameters for logoutAccount1 operation in PlatformsApi.
 * @export
 * @interface logoutAccount1Request
 */
export interface logoutAccount1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof logoutAccount1
     */
    readonly v?: logoutAccount1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof logoutAccount1
     */
    readonly language: logoutAccount1LanguageEnum;
    /**
     * Category search bar
     * @type {string}
     * @memberof logoutAccount1
     */
    readonly id: string;
    /**
     * Provider oauth
     * @type {'vk' | 'vk-id' | 'ok' | 'youtube' | 'trovo' | 'twitch'}
     * @memberof logoutAccount1
     */
    readonly platform: logoutAccount1PlatformEnum;
}
/**
 * Request parameters for platformList1 operation in PlatformsApi.
 * @export
 * @interface platformList1Request
 */
export interface platformList1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof platformList1
     */
    readonly v?: platformList1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof platformList1
     */
    readonly language: platformList1LanguageEnum;
}
/**
 * PlatformsApi - object-oriented interface
 * @export
 * @class PlatformsApi
 * @extends {BaseAPI}
 */
export declare class PlatformsApi extends BaseAPI {
    /**
     *
     * @summary Get url for start oauth
     * @param {addAccount1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    addAccount1(requestParameters: addAccount1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get category from the platform
     * @param {getCategory1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    getCategory1(requestParameters: getCategory1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").ListResponse, any>>;
    /**
     *
     * @summary Get category from the platform
     * @param {logoutAccount1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    logoutAccount1(requestParameters: logoutAccount1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").ListResponse, any>>;
    /**
     *
     * @summary Supported platforms
     * @param {platformList1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    platformList1(requestParameters: platformList1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SitePlatformsSupportedResponse, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum addAccount1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum addAccount1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum addAccount1PlatformEnum {
    vk = "vk",
    vk_id = "vk-id",
    ok = "ok",
    youtube = "youtube",
    trovo = "trovo",
    twitch = "twitch"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getCategory1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getCategory1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getCategory1TypeEnum {
    vk = "vk",
    youtube = "youtube",
    trovo = "trovo",
    twitch = "twitch",
    vkvideolive = "vkvideolive"
}
/**
  * @export
  * @enum {string}
  */
export declare enum logoutAccount1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum logoutAccount1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum logoutAccount1PlatformEnum {
    vk = "vk",
    vk_id = "vk-id",
    ok = "ok",
    youtube = "youtube",
    trovo = "trovo",
    twitch = "twitch"
}
/**
  * @export
  * @enum {string}
  */
export declare enum platformList1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum platformList1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=platforms-api.d.ts.map