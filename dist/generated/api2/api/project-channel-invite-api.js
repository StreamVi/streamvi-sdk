"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectChannelInviteListV1VEnum = exports.ProjectChannelInviteListV1LanguageEnum = exports.ProjectChannelInviteGetV1VEnum = exports.ProjectChannelInviteGetV1LanguageEnum = exports.ProjectChannelInviteGetForSecretV1VEnum = exports.ProjectChannelInviteGetForSecretV1LanguageEnum = exports.ProjectChannelInviteGetForProjectV1VEnum = exports.ProjectChannelInviteGetForProjectV1LanguageEnum = exports.ProjectChannelInviteDelV1VEnum = exports.ProjectChannelInviteDelV1LanguageEnum = exports.ProjectChannelInviteDeclineForSecretV1VEnum = exports.ProjectChannelInviteDeclineForSecretV1LanguageEnum = exports.ProjectChannelInviteDeclineForProjectV1VEnum = exports.ProjectChannelInviteDeclineForProjectV1LanguageEnum = exports.ProjectChannelInviteAddByIdV1VEnum = exports.ProjectChannelInviteAddByIdV1AccessTypeEnum = exports.ProjectChannelInviteAddByIdV1LanguageEnum = exports.ProjectChannelInviteAddByEmailV1VEnum = exports.ProjectChannelInviteAddByEmailV1AccessTypeEnum = exports.ProjectChannelInviteAddByEmailV1LanguageEnum = exports.ProjectChannelInviteAcceptForSecretV1VEnum = exports.ProjectChannelInviteAcceptForSecretV1LanguageEnum = exports.ProjectChannelInviteAcceptForProjectV1VEnum = exports.ProjectChannelInviteAcceptForProjectV1LanguageEnum = exports.ProjectChannelInviteApi = exports.ProjectChannelInviteApiFactory = exports.ProjectChannelInviteApiFp = exports.ProjectChannelInviteApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ProjectChannelInviteApi - axios parameter creator
 * @export
 */
const ProjectChannelInviteApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Accept channel invitation for selected project
         * @param {ProjectChannelInviteAcceptForProjectV1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteAcceptForProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteAcceptForProjectV1: async (language, projectId, channelId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteAcceptForProjectV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteAcceptForProjectV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteAcceptForProjectV1', 'channelId', channelId);
            const localVarPath = `/method/channel_invite/accept_for_project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Accept channel invitation using a secret link
         * @param {ProjectChannelInviteAcceptForSecretV1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {ProjectChannelInviteAcceptForSecretV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteAcceptForSecretV1: async (language, projectId, channelId, secret, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteAcceptForSecretV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteAcceptForSecretV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteAcceptForSecretV1', 'channelId', channelId);
            // verify required parameter 'secret' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteAcceptForSecretV1', 'secret', secret);
            const localVarPath = `/method/channel_invite/accept_for_secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (secret !== undefined) {
                localVarQueryParameter['secret'] = secret;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Add channel invite item for another user by email
         * @param {ProjectChannelInviteAddByEmailV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {string} email Email
         * @param {ProjectChannelInviteAddByEmailV1AccessTypeEnum} accessType Access type
         * @param {ProjectChannelInviteAddByEmailV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteAddByEmailV1: async (language, projectId, channelId, email, accessType, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteAddByEmailV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteAddByEmailV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteAddByEmailV1', 'channelId', channelId);
            // verify required parameter 'email' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteAddByEmailV1', 'email', email);
            // verify required parameter 'accessType' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteAddByEmailV1', 'accessType', accessType);
            const localVarPath = `/method/channel_invite/add_by_email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            if (accessType !== undefined) {
                localVarQueryParameter['access_type'] = accessType;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Add channel invite item for another user by id
         * @param {ProjectChannelInviteAddByIdV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteAddByIdV1AccessTypeEnum} accessType Access type
         * @param {string} toProjectExternalId Project for get access by external id
         * @param {ProjectChannelInviteAddByIdV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteAddByIdV1: async (language, projectId, channelId, accessType, toProjectExternalId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteAddByIdV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteAddByIdV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteAddByIdV1', 'channelId', channelId);
            // verify required parameter 'accessType' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteAddByIdV1', 'accessType', accessType);
            // verify required parameter 'toProjectExternalId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteAddByIdV1', 'toProjectExternalId', toProjectExternalId);
            const localVarPath = `/method/channel_invite/add_by_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (accessType !== undefined) {
                localVarQueryParameter['access_type'] = accessType;
            }
            if (toProjectExternalId !== undefined) {
                localVarQueryParameter['to_project_external_id'] = toProjectExternalId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Decline channel invitation for selected project
         * @param {ProjectChannelInviteDeclineForProjectV1LanguageEnum} language Current language
         * @param {number} projectId Channel id
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteDeclineForProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteDeclineForProjectV1: async (language, projectId, channelId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteDeclineForProjectV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteDeclineForProjectV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteDeclineForProjectV1', 'channelId', channelId);
            const localVarPath = `/method/channel_invite/decline_for_project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Decline channel invitation using a secret link
         * @param {ProjectChannelInviteDeclineForSecretV1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {ProjectChannelInviteDeclineForSecretV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteDeclineForSecretV1: async (language, projectId, channelId, secret, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteDeclineForSecretV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteDeclineForSecretV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteDeclineForSecretV1', 'channelId', channelId);
            // verify required parameter 'secret' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteDeclineForSecretV1', 'secret', secret);
            const localVarPath = `/method/channel_invite/decline_for_secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (secret !== undefined) {
                localVarQueryParameter['secret'] = secret;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Del channel invite item for my channel for another user
         * @param {ProjectChannelInviteDelV1LanguageEnum} language Current language
         * @param {number} id Unique id
         * @param {ProjectChannelInviteDelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteDelV1: async (language, id, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteDelV1', 'language', language);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteDelV1', 'id', id);
            const localVarPath = `/method/channel_invite/del`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get invitation for channel
         * @param {ProjectChannelInviteGetForProjectV1LanguageEnum} language Current language
         * @param {number} projectId Current project id
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteGetForProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteGetForProjectV1: async (language, projectId, channelId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteGetForProjectV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteGetForProjectV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteGetForProjectV1', 'channelId', channelId);
            const localVarPath = `/method/channel_invite/get_for_project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get channel invitation using a secret link
         * @param {ProjectChannelInviteGetForSecretV1LanguageEnum} language Current language
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {ProjectChannelInviteGetForSecretV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteGetForSecretV1: async (language, channelId, secret, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteGetForSecretV1', 'language', language);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteGetForSecretV1', 'channelId', channelId);
            // verify required parameter 'secret' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteGetForSecretV1', 'secret', secret);
            const localVarPath = `/method/channel_invite/get_for_secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (secret !== undefined) {
                localVarQueryParameter['secret'] = secret;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get channel invite item for my channel for another user
         * @param {ProjectChannelInviteGetV1LanguageEnum} language Current language
         * @param {number} id Channel request id
         * @param {ProjectChannelInviteGetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteGetV1: async (language, id, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteGetV1', 'language', language);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteGetV1', 'id', id);
            const localVarPath = `/method/channel_invite/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of invites for channel in project
         * @param {ProjectChannelInviteListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteListV1: async (language, projectId, channelId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteListV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteListV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelInviteListV1', 'channelId', channelId);
            const localVarPath = `/method/channel_invite/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ProjectChannelInviteApiAxiosParamCreator = ProjectChannelInviteApiAxiosParamCreator;
/**
 * ProjectChannelInviteApi - functional programming interface
 * @export
 */
const ProjectChannelInviteApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ProjectChannelInviteApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Accept channel invitation for selected project
         * @param {ProjectChannelInviteAcceptForProjectV1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteAcceptForProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteAcceptForProjectV1(language, projectId, channelId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteAcceptForProjectV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.projectChannelInviteAcceptForProjectV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Accept channel invitation using a secret link
         * @param {ProjectChannelInviteAcceptForSecretV1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {ProjectChannelInviteAcceptForSecretV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteAcceptForSecretV1(language, projectId, channelId, secret, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteAcceptForSecretV1(language, projectId, channelId, secret, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.projectChannelInviteAcceptForSecretV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Add channel invite item for another user by email
         * @param {ProjectChannelInviteAddByEmailV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {string} email Email
         * @param {ProjectChannelInviteAddByEmailV1AccessTypeEnum} accessType Access type
         * @param {ProjectChannelInviteAddByEmailV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteAddByEmailV1(language, projectId, channelId, email, accessType, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteAddByEmailV1(language, projectId, channelId, email, accessType, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.projectChannelInviteAddByEmailV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Add channel invite item for another user by id
         * @param {ProjectChannelInviteAddByIdV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteAddByIdV1AccessTypeEnum} accessType Access type
         * @param {string} toProjectExternalId Project for get access by external id
         * @param {ProjectChannelInviteAddByIdV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteAddByIdV1(language, projectId, channelId, accessType, toProjectExternalId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteAddByIdV1(language, projectId, channelId, accessType, toProjectExternalId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.projectChannelInviteAddByIdV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Decline channel invitation for selected project
         * @param {ProjectChannelInviteDeclineForProjectV1LanguageEnum} language Current language
         * @param {number} projectId Channel id
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteDeclineForProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteDeclineForProjectV1(language, projectId, channelId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteDeclineForProjectV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.projectChannelInviteDeclineForProjectV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Decline channel invitation using a secret link
         * @param {ProjectChannelInviteDeclineForSecretV1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {ProjectChannelInviteDeclineForSecretV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteDeclineForSecretV1(language, projectId, channelId, secret, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteDeclineForSecretV1(language, projectId, channelId, secret, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.projectChannelInviteDeclineForSecretV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Del channel invite item for my channel for another user
         * @param {ProjectChannelInviteDelV1LanguageEnum} language Current language
         * @param {number} id Unique id
         * @param {ProjectChannelInviteDelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteDelV1(language, id, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteDelV1(language, id, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.projectChannelInviteDelV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get invitation for channel
         * @param {ProjectChannelInviteGetForProjectV1LanguageEnum} language Current language
         * @param {number} projectId Current project id
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteGetForProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteGetForProjectV1(language, projectId, channelId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteGetForProjectV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.projectChannelInviteGetForProjectV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get channel invitation using a secret link
         * @param {ProjectChannelInviteGetForSecretV1LanguageEnum} language Current language
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {ProjectChannelInviteGetForSecretV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteGetForSecretV1(language, channelId, secret, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteGetForSecretV1(language, channelId, secret, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.projectChannelInviteGetForSecretV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get channel invite item for my channel for another user
         * @param {ProjectChannelInviteGetV1LanguageEnum} language Current language
         * @param {number} id Channel request id
         * @param {ProjectChannelInviteGetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteGetV1(language, id, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteGetV1(language, id, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.projectChannelInviteGetV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary List of invites for channel in project
         * @param {ProjectChannelInviteListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ProjectChannelInviteListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelInviteListV1(language, projectId, channelId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelInviteListV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.projectChannelInviteListV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.ProjectChannelInviteApiFp = ProjectChannelInviteApiFp;
/**
 * ProjectChannelInviteApi - factory interface
 * @export
 */
const ProjectChannelInviteApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ProjectChannelInviteApiFp)(configuration);
    return {
        /**
         *
         * @summary Accept channel invitation for selected project
         * @param {ProjectChannelInviteApiProjectChannelInviteAcceptForProjectV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteAcceptForProjectV1(requestParameters, options) {
            return localVarFp.projectChannelInviteAcceptForProjectV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Accept channel invitation using a secret link
         * @param {ProjectChannelInviteApiProjectChannelInviteAcceptForSecretV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteAcceptForSecretV1(requestParameters, options) {
            return localVarFp.projectChannelInviteAcceptForSecretV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.secret, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Add channel invite item for another user by email
         * @param {ProjectChannelInviteApiProjectChannelInviteAddByEmailV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteAddByEmailV1(requestParameters, options) {
            return localVarFp.projectChannelInviteAddByEmailV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.email, requestParameters.accessType, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Add channel invite item for another user by id
         * @param {ProjectChannelInviteApiProjectChannelInviteAddByIdV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteAddByIdV1(requestParameters, options) {
            return localVarFp.projectChannelInviteAddByIdV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.accessType, requestParameters.toProjectExternalId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Decline channel invitation for selected project
         * @param {ProjectChannelInviteApiProjectChannelInviteDeclineForProjectV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteDeclineForProjectV1(requestParameters, options) {
            return localVarFp.projectChannelInviteDeclineForProjectV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Decline channel invitation using a secret link
         * @param {ProjectChannelInviteApiProjectChannelInviteDeclineForSecretV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteDeclineForSecretV1(requestParameters, options) {
            return localVarFp.projectChannelInviteDeclineForSecretV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.secret, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Del channel invite item for my channel for another user
         * @param {ProjectChannelInviteApiProjectChannelInviteDelV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteDelV1(requestParameters, options) {
            return localVarFp.projectChannelInviteDelV1(requestParameters.language, requestParameters.id, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get invitation for channel
         * @param {ProjectChannelInviteApiProjectChannelInviteGetForProjectV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteGetForProjectV1(requestParameters, options) {
            return localVarFp.projectChannelInviteGetForProjectV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get channel invitation using a secret link
         * @param {ProjectChannelInviteApiProjectChannelInviteGetForSecretV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteGetForSecretV1(requestParameters, options) {
            return localVarFp.projectChannelInviteGetForSecretV1(requestParameters.language, requestParameters.channelId, requestParameters.secret, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get channel invite item for my channel for another user
         * @param {ProjectChannelInviteApiProjectChannelInviteGetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteGetV1(requestParameters, options) {
            return localVarFp.projectChannelInviteGetV1(requestParameters.language, requestParameters.id, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List of invites for channel in project
         * @param {ProjectChannelInviteApiProjectChannelInviteListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelInviteListV1(requestParameters, options) {
            return localVarFp.projectChannelInviteListV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ProjectChannelInviteApiFactory = ProjectChannelInviteApiFactory;
/**
 * ProjectChannelInviteApi - object-oriented interface
 * @export
 * @class ProjectChannelInviteApi
 * @extends {BaseAPI}
 */
class ProjectChannelInviteApi extends base_1.BaseAPI {
    /**
     *
     * @summary Accept channel invitation for selected project
     * @param {ProjectChannelInviteApiProjectChannelInviteAcceptForProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    projectChannelInviteAcceptForProjectV1(requestParameters, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).projectChannelInviteAcceptForProjectV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Accept channel invitation using a secret link
     * @param {ProjectChannelInviteApiProjectChannelInviteAcceptForSecretV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    projectChannelInviteAcceptForSecretV1(requestParameters, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).projectChannelInviteAcceptForSecretV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.secret, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Add channel invite item for another user by email
     * @param {ProjectChannelInviteApiProjectChannelInviteAddByEmailV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    projectChannelInviteAddByEmailV1(requestParameters, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).projectChannelInviteAddByEmailV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.email, requestParameters.accessType, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Add channel invite item for another user by id
     * @param {ProjectChannelInviteApiProjectChannelInviteAddByIdV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    projectChannelInviteAddByIdV1(requestParameters, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).projectChannelInviteAddByIdV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.accessType, requestParameters.toProjectExternalId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Decline channel invitation for selected project
     * @param {ProjectChannelInviteApiProjectChannelInviteDeclineForProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    projectChannelInviteDeclineForProjectV1(requestParameters, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).projectChannelInviteDeclineForProjectV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Decline channel invitation using a secret link
     * @param {ProjectChannelInviteApiProjectChannelInviteDeclineForSecretV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    projectChannelInviteDeclineForSecretV1(requestParameters, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).projectChannelInviteDeclineForSecretV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.secret, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Del channel invite item for my channel for another user
     * @param {ProjectChannelInviteApiProjectChannelInviteDelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    projectChannelInviteDelV1(requestParameters, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).projectChannelInviteDelV1(requestParameters.language, requestParameters.id, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get invitation for channel
     * @param {ProjectChannelInviteApiProjectChannelInviteGetForProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    projectChannelInviteGetForProjectV1(requestParameters, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).projectChannelInviteGetForProjectV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get channel invitation using a secret link
     * @param {ProjectChannelInviteApiProjectChannelInviteGetForSecretV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    projectChannelInviteGetForSecretV1(requestParameters, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).projectChannelInviteGetForSecretV1(requestParameters.language, requestParameters.channelId, requestParameters.secret, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get channel invite item for my channel for another user
     * @param {ProjectChannelInviteApiProjectChannelInviteGetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    projectChannelInviteGetV1(requestParameters, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).projectChannelInviteGetV1(requestParameters.language, requestParameters.id, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List of invites for channel in project
     * @param {ProjectChannelInviteApiProjectChannelInviteListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    projectChannelInviteListV1(requestParameters, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).projectChannelInviteListV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProjectChannelInviteApi = ProjectChannelInviteApi;
/**
 * @export
 */
exports.ProjectChannelInviteAcceptForProjectV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteAcceptForProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteAcceptForSecretV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteAcceptForSecretV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteAddByEmailV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteAddByEmailV1AccessTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_12: 1,
    NUMBER_2: 2
};
/**
 * @export
 */
exports.ProjectChannelInviteAddByEmailV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteAddByIdV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteAddByIdV1AccessTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_12: 1,
    NUMBER_2: 2
};
/**
 * @export
 */
exports.ProjectChannelInviteAddByIdV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteDeclineForProjectV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteDeclineForProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteDeclineForSecretV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteDeclineForSecretV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteDelV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteDelV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteGetForProjectV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteGetForProjectV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteGetForSecretV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteGetForSecretV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteGetV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteGetV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelInviteListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelInviteListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
