/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { GetStreamKeyResponse } from '../models';
import type { SetRecordStreamRequest } from '../models';
import type { SuccessResponse } from '../models';
/**
 * StreamKeyApi - axios parameter creator
 * @export
 */
export declare const StreamKeyApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get stream credentials
     * @param {StreamKeysKeyV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {StreamKeysKeyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamKeysKeyV1: (language: StreamKeysKeyV1LanguageEnum, projectId: number, v?: StreamKeysKeyV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update record
     * @param {SetRecordStreamRequest} setRecordStreamRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamKeysUpdateRecordV1: (setRecordStreamRequest: SetRecordStreamRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StreamKeyApi - functional programming interface
 * @export
 */
export declare const StreamKeyApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get stream credentials
     * @param {StreamKeysKeyV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {StreamKeysKeyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamKeysKeyV1(language: StreamKeysKeyV1LanguageEnum, projectId: number, v?: StreamKeysKeyV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStreamKeyResponse>>;
    /**
     *
     * @summary Update record
     * @param {SetRecordStreamRequest} setRecordStreamRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamKeysUpdateRecordV1(setRecordStreamRequest: SetRecordStreamRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
};
/**
 * StreamKeyApi - factory interface
 * @export
 */
export declare const StreamKeyApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get stream credentials
     * @param {StreamKeyApiStreamKeysKeyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamKeysKeyV1(requestParameters: StreamKeyApiStreamKeysKeyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetStreamKeyResponse>;
    /**
     *
     * @summary Update record
     * @param {StreamKeyApiStreamKeysUpdateRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamKeysUpdateRecordV1(requestParameters: StreamKeyApiStreamKeysUpdateRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
};
/**
 * StreamKeyApi - interface
 * @export
 * @interface StreamKeyApi
 */
export interface StreamKeyApiInterface {
    /**
     *
     * @summary Get stream credentials
     * @param {StreamKeyApiStreamKeysKeyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamKeyApiInterface
     */
    streamKeysKeyV1(requestParameters: StreamKeyApiStreamKeysKeyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetStreamKeyResponse>;
    /**
     *
     * @summary Update record
     * @param {StreamKeyApiStreamKeysUpdateRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamKeyApiInterface
     */
    streamKeysUpdateRecordV1(requestParameters: StreamKeyApiStreamKeysUpdateRecordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
}
/**
 * Request parameters for streamKeysKeyV1 operation in StreamKeyApi.
 * @export
 * @interface StreamKeyApiStreamKeysKeyV1Request
 */
export interface StreamKeyApiStreamKeysKeyV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof StreamKeyApiStreamKeysKeyV1
     */
    readonly language: StreamKeysKeyV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof StreamKeyApiStreamKeysKeyV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof StreamKeyApiStreamKeysKeyV1
     */
    readonly v?: StreamKeysKeyV1VEnum;
}
/**
 * Request parameters for streamKeysUpdateRecordV1 operation in StreamKeyApi.
 * @export
 * @interface StreamKeyApiStreamKeysUpdateRecordV1Request
 */
export interface StreamKeyApiStreamKeysUpdateRecordV1Request {
    /**
     *
     * @type {SetRecordStreamRequest}
     * @memberof StreamKeyApiStreamKeysUpdateRecordV1
     */
    readonly setRecordStreamRequest: SetRecordStreamRequest;
}
/**
 * StreamKeyApi - object-oriented interface
 * @export
 * @class StreamKeyApi
 * @extends {BaseAPI}
 */
export declare class StreamKeyApi extends BaseAPI implements StreamKeyApiInterface {
    /**
     *
     * @summary Get stream credentials
     * @param {StreamKeyApiStreamKeysKeyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamKeyApi
     */
    streamKeysKeyV1(requestParameters: StreamKeyApiStreamKeysKeyV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetStreamKeyResponse, any>>;
    /**
     *
     * @summary Update record
     * @param {StreamKeyApiStreamKeysUpdateRecordV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamKeyApi
     */
    streamKeysUpdateRecordV1(requestParameters: StreamKeyApiStreamKeysUpdateRecordV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
}
/**
 * @export
 */
export declare const StreamKeysKeyV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type StreamKeysKeyV1LanguageEnum = typeof StreamKeysKeyV1LanguageEnum[keyof typeof StreamKeysKeyV1LanguageEnum];
/**
 * @export
 */
export declare const StreamKeysKeyV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type StreamKeysKeyV1VEnum = typeof StreamKeysKeyV1VEnum[keyof typeof StreamKeysKeyV1VEnum];
//# sourceMappingURL=stream-key-api.d.ts.map