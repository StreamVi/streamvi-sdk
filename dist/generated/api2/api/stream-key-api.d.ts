/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { GetStreamKeyResponse } from '../models';
import type { SetRecordStreamRequest } from '../models';
import type { SuccessResponse } from '../models';
/**
 * StreamKeyApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get stream credentials
     * @param {key1VEnum} v Version
     * @param {key1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    key1: (v: key1VEnum, language: key1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update record
     * @param {SetRecordStreamRequest} setRecordStreamRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRecord1: (setRecordStreamRequest: SetRecordStreamRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StreamKeyApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get stream credentials
     * @param {key1VEnum} v Version
     * @param {key1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    key1(v: key1VEnum, language: key1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStreamKeyResponse>>;
    /**
     *
     * @summary Update record
     * @param {SetRecordStreamRequest} setRecordStreamRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRecord1(setRecordStreamRequest: SetRecordStreamRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
};
/**
 * StreamKeyApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get stream credentials
     * @param {key1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    key1(requestParameters: key1Request, options?: RawAxiosRequestConfig): AxiosPromise<GetStreamKeyResponse>;
    /**
     *
     * @summary Update record
     * @param {updateRecord1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRecord1(requestParameters: updateRecord1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
};
/**
 * Request parameters for key1 operation in StreamKeyApi.
 * @export
 * @interface key1Request
 */
export interface key1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof key1
     */
    readonly v?: key1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof key1
     */
    readonly language: key1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof key1
     */
    readonly projectId: number;
}
/**
 * Request parameters for updateRecord1 operation in StreamKeyApi.
 * @export
 * @interface updateRecord1Request
 */
export interface updateRecord1Request {
    /**
     *
     * @type {SetRecordStreamRequest}
     * @memberof updateRecord1
     */
    readonly setRecordStreamRequest: SetRecordStreamRequest;
}
/**
 * StreamKeyApi - object-oriented interface
 * @export
 * @class StreamKeyApi
 * @extends {BaseAPI}
 */
export declare class StreamKeyApi extends BaseAPI {
    /**
     *
     * @summary Get stream credentials
     * @param {key1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamKeyApi
     */
    key1(requestParameters: key1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetStreamKeyResponse, any>>;
    /**
     *
     * @summary Update record
     * @param {updateRecord1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamKeyApi
     */
    updateRecord1(requestParameters: updateRecord1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum key1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum key1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=stream-key-api.d.ts.map