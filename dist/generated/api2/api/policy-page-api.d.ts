/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { SiteGetPolicyStructureDto } from '../models';
/**
 * PolicyPageApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get policy page
     * @param {getItem1VEnum} v Version
     * @param {getItem1LanguageEnum} language Current language
     * @param {getItem1FileNameEnum} fileName Policy file name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItem1: (v: getItem1VEnum, language: getItem1LanguageEnum, fileName: getItem1FileNameEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get policy structure
     * @param {getStructure1VEnum} v Version
     * @param {getStructure1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStructure1: (v: getStructure1VEnum, language: getStructure1LanguageEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PolicyPageApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get policy page
     * @param {getItem1VEnum} v Version
     * @param {getItem1LanguageEnum} language Current language
     * @param {getItem1FileNameEnum} fileName Policy file name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItem1(v: getItem1VEnum, language: getItem1LanguageEnum, fileName: getItem1FileNameEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get policy structure
     * @param {getStructure1VEnum} v Version
     * @param {getStructure1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStructure1(v: getStructure1VEnum, language: getStructure1LanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteGetPolicyStructureDto>>;
};
/**
 * PolicyPageApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get policy page
     * @param {getItem1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItem1(requestParameters: getItem1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get policy structure
     * @param {getStructure1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStructure1(requestParameters: getStructure1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteGetPolicyStructureDto>;
};
/**
 * Request parameters for getItem1 operation in PolicyPageApi.
 * @export
 * @interface getItem1Request
 */
export interface getItem1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getItem1
     */
    readonly v?: getItem1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getItem1
     */
    readonly language: getItem1LanguageEnum;
    /**
     * Policy file name
     * @type {'refund-policy' | 'terms-of-use' | 'using-cookie' | 'acceptable-use' | 'privacy-notice'}
     * @memberof getItem1
     */
    readonly fileName: getItem1FileNameEnum;
}
/**
 * Request parameters for getStructure1 operation in PolicyPageApi.
 * @export
 * @interface getStructure1Request
 */
export interface getStructure1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getStructure1
     */
    readonly v?: getStructure1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getStructure1
     */
    readonly language: getStructure1LanguageEnum;
}
/**
 * PolicyPageApi - object-oriented interface
 * @export
 * @class PolicyPageApi
 * @extends {BaseAPI}
 */
export declare class PolicyPageApi extends BaseAPI {
    /**
     *
     * @summary Get policy page
     * @param {getItem1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyPageApi
     */
    getItem1(requestParameters: getItem1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get policy structure
     * @param {getStructure1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyPageApi
     */
    getStructure1(requestParameters: getStructure1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteGetPolicyStructureDto, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum getItem1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getItem1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getItem1FileNameEnum {
    refund_policy = "refund-policy",
    terms_of_use = "terms-of-use",
    using_cookie = "using-cookie",
    acceptable_use = "acceptable-use",
    privacy_notice = "privacy-notice"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getStructure1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getStructure1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=policy-page-api.d.ts.map