"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotifyUserSetV1VEnum = exports.NotifyUserRemoveScreenV1VEnum = exports.NotifyUserGetV1VEnum = exports.NotifyUserGetScreenV1VEnum = exports.NotifyUserGetScreenV1LanguageEnum = exports.NotifyUserDelMobileTokenV1VEnum = exports.NotifyUserDelMobileTokenV1LanguageEnum = exports.NotifyUserApi = exports.NotifyUserApiFactory = exports.NotifyUserApiFp = exports.NotifyUserApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * NotifyUserApi - axios parameter creator
 * @export
 */
const NotifyUserApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Delete mobile token from user
         * @param {NotifyUserDelMobileTokenV1LanguageEnum} language Current language
         * @param {string} token Token in mobile app
         * @param {NotifyUserDelMobileTokenV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyUserDelMobileTokenV1: async (language, token, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('notifyUserDelMobileTokenV1', 'language', language);
            // verify required parameter 'token' is not null or undefined
            (0, common_1.assertParamExists)('notifyUserDelMobileTokenV1', 'token', token);
            const localVarPath = `/method/notify_user/del_mobile_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get user screen notify
         * @param {NotifyUserGetScreenV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {NotifyUserGetScreenV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyUserGetScreenV1: async (language, projectId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('notifyUserGetScreenV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('notifyUserGetScreenV1', 'projectId', projectId);
            const localVarPath = `/method/notify_user/screen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get user notify settings
         * @param {number} projectId Project id
         * @param {NotifyUserGetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyUserGetV1: async (projectId, v, options = {}) => {
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('notifyUserGetV1', 'projectId', projectId);
            const localVarPath = `/method/notify_user/setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove user screen notify
         * @param {number} projectId Project id
         * @param {NotifyUserRemoveScreenV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyUserRemoveScreenV1: async (projectId, v, options = {}) => {
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('notifyUserRemoveScreenV1', 'projectId', projectId);
            const localVarPath = `/method/notify_user/screen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set user notify settings
         * @param {SiteSetNotifyUserRequest} siteSetNotifyUserRequest Set user notify settings
         * @param {NotifyUserSetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyUserSetV1: async (siteSetNotifyUserRequest, v, options = {}) => {
            // verify required parameter 'siteSetNotifyUserRequest' is not null or undefined
            (0, common_1.assertParamExists)('notifyUserSetV1', 'siteSetNotifyUserRequest', siteSetNotifyUserRequest);
            const localVarPath = `/method/notify_user/setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            else {
                localVarQueryParameter['v'] = '1';
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteSetNotifyUserRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.NotifyUserApiAxiosParamCreator = NotifyUserApiAxiosParamCreator;
/**
 * NotifyUserApi - functional programming interface
 * @export
 */
const NotifyUserApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.NotifyUserApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Delete mobile token from user
         * @param {NotifyUserDelMobileTokenV1LanguageEnum} language Current language
         * @param {string} token Token in mobile app
         * @param {NotifyUserDelMobileTokenV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyUserDelMobileTokenV1(language, token, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyUserDelMobileTokenV1(language, token, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotifyUserApi.notifyUserDelMobileTokenV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get user screen notify
         * @param {NotifyUserGetScreenV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {NotifyUserGetScreenV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyUserGetScreenV1(language, projectId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyUserGetScreenV1(language, projectId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotifyUserApi.notifyUserGetScreenV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get user notify settings
         * @param {number} projectId Project id
         * @param {NotifyUserGetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyUserGetV1(projectId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyUserGetV1(projectId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotifyUserApi.notifyUserGetV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Remove user screen notify
         * @param {number} projectId Project id
         * @param {NotifyUserRemoveScreenV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyUserRemoveScreenV1(projectId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyUserRemoveScreenV1(projectId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotifyUserApi.notifyUserRemoveScreenV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Set user notify settings
         * @param {SiteSetNotifyUserRequest} siteSetNotifyUserRequest Set user notify settings
         * @param {NotifyUserSetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyUserSetV1(siteSetNotifyUserRequest, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyUserSetV1(siteSetNotifyUserRequest, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotifyUserApi.notifyUserSetV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.NotifyUserApiFp = NotifyUserApiFp;
/**
 * NotifyUserApi - factory interface
 * @export
 */
const NotifyUserApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.NotifyUserApiFp)(configuration);
    return {
        /**
         *
         * @summary Delete mobile token from user
         * @param {NotifyUserApiNotifyUserDelMobileTokenV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyUserDelMobileTokenV1(requestParameters, options) {
            return localVarFp.notifyUserDelMobileTokenV1(requestParameters.language, requestParameters.token, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get user screen notify
         * @param {NotifyUserApiNotifyUserGetScreenV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyUserGetScreenV1(requestParameters, options) {
            return localVarFp.notifyUserGetScreenV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get user notify settings
         * @param {NotifyUserApiNotifyUserGetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyUserGetV1(requestParameters, options) {
            return localVarFp.notifyUserGetV1(requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Remove user screen notify
         * @param {NotifyUserApiNotifyUserRemoveScreenV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyUserRemoveScreenV1(requestParameters, options) {
            return localVarFp.notifyUserRemoveScreenV1(requestParameters.projectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set user notify settings
         * @param {NotifyUserApiNotifyUserSetV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyUserSetV1(requestParameters, options) {
            return localVarFp.notifyUserSetV1(requestParameters.siteSetNotifyUserRequest, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};
exports.NotifyUserApiFactory = NotifyUserApiFactory;
/**
 * NotifyUserApi - object-oriented interface
 * @export
 * @class NotifyUserApi
 * @extends {BaseAPI}
 */
class NotifyUserApi extends base_1.BaseAPI {
    /**
     *
     * @summary Delete mobile token from user
     * @param {NotifyUserApiNotifyUserDelMobileTokenV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    notifyUserDelMobileTokenV1(requestParameters, options) {
        return (0, exports.NotifyUserApiFp)(this.configuration).notifyUserDelMobileTokenV1(requestParameters.language, requestParameters.token, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get user screen notify
     * @param {NotifyUserApiNotifyUserGetScreenV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    notifyUserGetScreenV1(requestParameters, options) {
        return (0, exports.NotifyUserApiFp)(this.configuration).notifyUserGetScreenV1(requestParameters.language, requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get user notify settings
     * @param {NotifyUserApiNotifyUserGetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    notifyUserGetV1(requestParameters, options) {
        return (0, exports.NotifyUserApiFp)(this.configuration).notifyUserGetV1(requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Remove user screen notify
     * @param {NotifyUserApiNotifyUserRemoveScreenV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    notifyUserRemoveScreenV1(requestParameters, options) {
        return (0, exports.NotifyUserApiFp)(this.configuration).notifyUserRemoveScreenV1(requestParameters.projectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set user notify settings
     * @param {NotifyUserApiNotifyUserSetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    notifyUserSetV1(requestParameters, options) {
        return (0, exports.NotifyUserApiFp)(this.configuration).notifyUserSetV1(requestParameters.siteSetNotifyUserRequest, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.NotifyUserApi = NotifyUserApi;
/**
 * @export
 */
exports.NotifyUserDelMobileTokenV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.NotifyUserDelMobileTokenV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.NotifyUserGetScreenV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.NotifyUserGetScreenV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.NotifyUserGetV1VEnum = {
    _1: '1'
};
/**
 * @export
 */
exports.NotifyUserRemoveScreenV1VEnum = {
    _1: '1'
};
/**
 * @export
 */
exports.NotifyUserSetV1VEnum = {
    _1: '1'
};
