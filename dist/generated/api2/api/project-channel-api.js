"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectChannelTransferOwnerV1VEnum = exports.ProjectChannelTransferOwnerV1LanguageEnum = exports.ProjectChannelListV1VEnum = exports.ProjectChannelListV1LanguageEnum = exports.ProjectChannelDelV1VEnum = exports.ProjectChannelDelV1LanguageEnum = exports.ProjectChannelChangeAccessV1VEnum = exports.ProjectChannelChangeAccessV1AccessTypeEnum = exports.ProjectChannelChangeAccessV1LanguageEnum = exports.ProjectChannelApi = exports.ProjectChannelApiFactory = exports.ProjectChannelApiFp = exports.ProjectChannelApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ProjectChannelApi - axios parameter creator
 * @export
 */
const ProjectChannelApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Change access for project in channel
         * @param {ProjectChannelChangeAccessV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {ProjectChannelChangeAccessV1AccessTypeEnum} accessType Access type
         * @param {ProjectChannelChangeAccessV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelChangeAccessV1: async (language, projectId, channelId, toProjectId, accessType, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelChangeAccessV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelChangeAccessV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelChangeAccessV1', 'channelId', channelId);
            // verify required parameter 'toProjectId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelChangeAccessV1', 'toProjectId', toProjectId);
            // verify required parameter 'accessType' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelChangeAccessV1', 'accessType', accessType);
            const localVarPath = `/method/channel/access/change`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (toProjectId !== undefined) {
                localVarQueryParameter['to_project_id'] = toProjectId;
            }
            if (accessType !== undefined) {
                localVarQueryParameter['access_type'] = accessType;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove access for project in channel
         * @param {ProjectChannelDelV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} targetProjectId Target project id
         * @param {ProjectChannelDelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelDelV1: async (language, projectId, channelId, targetProjectId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelDelV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelDelV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelDelV1', 'channelId', channelId);
            // verify required parameter 'targetProjectId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelDelV1', 'targetProjectId', targetProjectId);
            const localVarPath = `/method/channel/access/del`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (targetProjectId !== undefined) {
                localVarQueryParameter['target_project_id'] = targetProjectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Project channel list
         * @param {ProjectChannelListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ProjectChannelListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelListV1: async (language, projectId, channelId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelListV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelListV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelListV1', 'channelId', channelId);
            const localVarPath = `/method/channel/access/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Transfer owner for project in channel
         * @param {ProjectChannelTransferOwnerV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {ProjectChannelTransferOwnerV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelTransferOwnerV1: async (language, projectId, channelId, toProjectId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelTransferOwnerV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelTransferOwnerV1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelTransferOwnerV1', 'channelId', channelId);
            // verify required parameter 'toProjectId' is not null or undefined
            (0, common_1.assertParamExists)('projectChannelTransferOwnerV1', 'toProjectId', toProjectId);
            const localVarPath = `/method/channel/access/transfer_owner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (toProjectId !== undefined) {
                localVarQueryParameter['to_project_id'] = toProjectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ProjectChannelApiAxiosParamCreator = ProjectChannelApiAxiosParamCreator;
/**
 * ProjectChannelApi - functional programming interface
 * @export
 */
const ProjectChannelApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ProjectChannelApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Change access for project in channel
         * @param {ProjectChannelChangeAccessV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {ProjectChannelChangeAccessV1AccessTypeEnum} accessType Access type
         * @param {ProjectChannelChangeAccessV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelChangeAccessV1(language, projectId, channelId, toProjectId, accessType, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelChangeAccessV1(language, projectId, channelId, toProjectId, accessType, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelApi.projectChannelChangeAccessV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Remove access for project in channel
         * @param {ProjectChannelDelV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} targetProjectId Target project id
         * @param {ProjectChannelDelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelDelV1(language, projectId, channelId, targetProjectId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelDelV1(language, projectId, channelId, targetProjectId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelApi.projectChannelDelV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Project channel list
         * @param {ProjectChannelListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {ProjectChannelListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelListV1(language, projectId, channelId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelListV1(language, projectId, channelId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelApi.projectChannelListV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Transfer owner for project in channel
         * @param {ProjectChannelTransferOwnerV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {ProjectChannelTransferOwnerV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectChannelTransferOwnerV1(language, projectId, channelId, toProjectId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectChannelTransferOwnerV1(language, projectId, channelId, toProjectId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelApi.projectChannelTransferOwnerV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.ProjectChannelApiFp = ProjectChannelApiFp;
/**
 * ProjectChannelApi - factory interface
 * @export
 */
const ProjectChannelApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ProjectChannelApiFp)(configuration);
    return {
        /**
         *
         * @summary Change access for project in channel
         * @param {ProjectChannelApiProjectChannelChangeAccessV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelChangeAccessV1(requestParameters, options) {
            return localVarFp.projectChannelChangeAccessV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.toProjectId, requestParameters.accessType, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Remove access for project in channel
         * @param {ProjectChannelApiProjectChannelDelV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelDelV1(requestParameters, options) {
            return localVarFp.projectChannelDelV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.targetProjectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Project channel list
         * @param {ProjectChannelApiProjectChannelListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelListV1(requestParameters, options) {
            return localVarFp.projectChannelListV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Transfer owner for project in channel
         * @param {ProjectChannelApiProjectChannelTransferOwnerV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectChannelTransferOwnerV1(requestParameters, options) {
            return localVarFp.projectChannelTransferOwnerV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.toProjectId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ProjectChannelApiFactory = ProjectChannelApiFactory;
/**
 * ProjectChannelApi - object-oriented interface
 * @export
 * @class ProjectChannelApi
 * @extends {BaseAPI}
 */
class ProjectChannelApi extends base_1.BaseAPI {
    /**
     *
     * @summary Change access for project in channel
     * @param {ProjectChannelApiProjectChannelChangeAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    projectChannelChangeAccessV1(requestParameters, options) {
        return (0, exports.ProjectChannelApiFp)(this.configuration).projectChannelChangeAccessV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.toProjectId, requestParameters.accessType, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Remove access for project in channel
     * @param {ProjectChannelApiProjectChannelDelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    projectChannelDelV1(requestParameters, options) {
        return (0, exports.ProjectChannelApiFp)(this.configuration).projectChannelDelV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.targetProjectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Project channel list
     * @param {ProjectChannelApiProjectChannelListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    projectChannelListV1(requestParameters, options) {
        return (0, exports.ProjectChannelApiFp)(this.configuration).projectChannelListV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Transfer owner for project in channel
     * @param {ProjectChannelApiProjectChannelTransferOwnerV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    projectChannelTransferOwnerV1(requestParameters, options) {
        return (0, exports.ProjectChannelApiFp)(this.configuration).projectChannelTransferOwnerV1(requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.toProjectId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProjectChannelApi = ProjectChannelApi;
/**
 * @export
 */
exports.ProjectChannelChangeAccessV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelChangeAccessV1AccessTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_12: 1,
    NUMBER_2: 2
};
/**
 * @export
 */
exports.ProjectChannelChangeAccessV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelDelV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelDelV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectChannelTransferOwnerV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ProjectChannelTransferOwnerV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
