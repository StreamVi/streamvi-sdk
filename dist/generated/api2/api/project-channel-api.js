"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferOwner1LanguageEnum = exports.transferOwner1VEnum = exports.list1LanguageEnum = exports.list1VEnum = exports.del1LanguageEnum = exports.del1VEnum = exports.changeAccess1AccessTypeEnum = exports.changeAccess1LanguageEnum = exports.changeAccess1VEnum = exports.ProjectChannelApi = exports.factory = exports.fp = exports.axiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ProjectChannelApi - axios parameter creator
 * @export
 */
const axiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Change access for project in channel
         * @param {changeAccess1VEnum} v Version
         * @param {changeAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {changeAccess1AccessTypeEnum} accessType Access type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAccess1: async (v, language, projectId, channelId, toProjectId, accessType, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('changeAccess1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('changeAccess1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('changeAccess1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('changeAccess1', 'channelId', channelId);
            // verify required parameter 'toProjectId' is not null or undefined
            (0, common_1.assertParamExists)('changeAccess1', 'toProjectId', toProjectId);
            // verify required parameter 'accessType' is not null or undefined
            (0, common_1.assertParamExists)('changeAccess1', 'accessType', accessType);
            const localVarPath = `/method/channel/access/change`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (toProjectId !== undefined) {
                localVarQueryParameter['to_project_id'] = toProjectId;
            }
            if (accessType !== undefined) {
                localVarQueryParameter['access_type'] = accessType;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove access for project in channel
         * @param {del1VEnum} v Version
         * @param {del1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} targetProjectId Target project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        del1: async (v, language, projectId, channelId, targetProjectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('del1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('del1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('del1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('del1', 'channelId', channelId);
            // verify required parameter 'targetProjectId' is not null or undefined
            (0, common_1.assertParamExists)('del1', 'targetProjectId', targetProjectId);
            const localVarPath = `/method/channel/access/del`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (targetProjectId !== undefined) {
                localVarQueryParameter['target_project_id'] = targetProjectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Project channel list
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1: async (v, language, projectId, channelId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('list1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('list1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('list1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('list1', 'channelId', channelId);
            const localVarPath = `/method/channel/access/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Transfer owner for project in channel
         * @param {transferOwner1VEnum} v Version
         * @param {transferOwner1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOwner1: async (v, language, projectId, channelId, toProjectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('transferOwner1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('transferOwner1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('transferOwner1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('transferOwner1', 'channelId', channelId);
            // verify required parameter 'toProjectId' is not null or undefined
            (0, common_1.assertParamExists)('transferOwner1', 'toProjectId', toProjectId);
            const localVarPath = `/method/channel/access/transfer_owner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (toProjectId !== undefined) {
                localVarQueryParameter['to_project_id'] = toProjectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.axiosParamCreator = axiosParamCreator;
/**
 * ProjectChannelApi - functional programming interface
 * @export
 */
const fp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.axiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Change access for project in channel
         * @param {changeAccess1VEnum} v Version
         * @param {changeAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {changeAccess1AccessTypeEnum} accessType Access type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeAccess1(v, language, projectId, channelId, toProjectId, accessType, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeAccess1(v, language, projectId, channelId, toProjectId, accessType, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelApi.changeAccess1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Remove access for project in channel
         * @param {del1VEnum} v Version
         * @param {del1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} targetProjectId Target project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async del1(v, language, projectId, channelId, targetProjectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.del1(v, language, projectId, channelId, targetProjectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelApi.del1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Project channel list
         * @param {list1VEnum} v Version
         * @param {list1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list1(v, language, projectId, channelId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.list1(v, language, projectId, channelId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelApi.list1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Transfer owner for project in channel
         * @param {transferOwner1VEnum} v Version
         * @param {transferOwner1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferOwner1(v, language, projectId, channelId, toProjectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferOwner1(v, language, projectId, channelId, toProjectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelApi.transferOwner1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.fp = fp;
/**
 * ProjectChannelApi - factory interface
 * @export
 */
const factory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.fp)(configuration);
    return {
        /**
         *
         * @summary Change access for project in channel
         * @param {changeAccess1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAccess1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || changeAccess1VEnum._1;
            return localVarFp.changeAccess1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.toProjectId, requestParameters.accessType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Remove access for project in channel
         * @param {del1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        del1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || del1VEnum._1;
            return localVarFp.del1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.targetProjectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Project channel list
         * @param {list1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || list1VEnum._1;
            return localVarFp.list1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Transfer owner for project in channel
         * @param {transferOwner1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOwner1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || transferOwner1VEnum._1;
            return localVarFp.transferOwner1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.toProjectId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.factory = factory;
/**
 * ProjectChannelApi - object-oriented interface
 * @export
 * @class ProjectChannelApi
 * @extends {BaseAPI}
 */
class ProjectChannelApi extends base_1.BaseAPI {
    /**
     *
     * @summary Change access for project in channel
     * @param {changeAccess1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    changeAccess1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || changeAccess1VEnum._1;
        return (0, exports.fp)(this.configuration).changeAccess1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.toProjectId, requestParameters.accessType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Remove access for project in channel
     * @param {del1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    del1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || del1VEnum._1;
        return (0, exports.fp)(this.configuration).del1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.targetProjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Project channel list
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    list1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || list1VEnum._1;
        return (0, exports.fp)(this.configuration).list1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Transfer owner for project in channel
     * @param {transferOwner1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    transferOwner1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || transferOwner1VEnum._1;
        return (0, exports.fp)(this.configuration).transferOwner1(actualV, requestParameters.language, requestParameters.projectId, requestParameters.channelId, requestParameters.toProjectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProjectChannelApi = ProjectChannelApi;
/**
  * @export
  * @enum {string}
  */
var changeAccess1VEnum;
(function (changeAccess1VEnum) {
    changeAccess1VEnum["_1"] = "1";
    changeAccess1VEnum["_2"] = "2";
    changeAccess1VEnum["_3"] = "3";
})(changeAccess1VEnum || (exports.changeAccess1VEnum = changeAccess1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var changeAccess1LanguageEnum;
(function (changeAccess1LanguageEnum) {
    changeAccess1LanguageEnum["ru"] = "ru";
    changeAccess1LanguageEnum["en"] = "en";
    changeAccess1LanguageEnum["cn"] = "cn";
})(changeAccess1LanguageEnum || (exports.changeAccess1LanguageEnum = changeAccess1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var changeAccess1AccessTypeEnum;
(function (changeAccess1AccessTypeEnum) {
    changeAccess1AccessTypeEnum[changeAccess1AccessTypeEnum["NUMBER_0"] = 0] = "NUMBER_0";
    changeAccess1AccessTypeEnum[changeAccess1AccessTypeEnum["NUMBER_1"] = 1] = "NUMBER_1";
    changeAccess1AccessTypeEnum[changeAccess1AccessTypeEnum["NUMBER_12"] = 1] = "NUMBER_12";
    changeAccess1AccessTypeEnum[changeAccess1AccessTypeEnum["NUMBER_2"] = 2] = "NUMBER_2";
})(changeAccess1AccessTypeEnum || (exports.changeAccess1AccessTypeEnum = changeAccess1AccessTypeEnum = {}));
/**
  * @export
  * @enum {string}
  */
var del1VEnum;
(function (del1VEnum) {
    del1VEnum["_1"] = "1";
    del1VEnum["_2"] = "2";
    del1VEnum["_3"] = "3";
})(del1VEnum || (exports.del1VEnum = del1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var del1LanguageEnum;
(function (del1LanguageEnum) {
    del1LanguageEnum["ru"] = "ru";
    del1LanguageEnum["en"] = "en";
    del1LanguageEnum["cn"] = "cn";
})(del1LanguageEnum || (exports.del1LanguageEnum = del1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var list1VEnum;
(function (list1VEnum) {
    list1VEnum["_1"] = "1";
    list1VEnum["_2"] = "2";
    list1VEnum["_3"] = "3";
})(list1VEnum || (exports.list1VEnum = list1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var list1LanguageEnum;
(function (list1LanguageEnum) {
    list1LanguageEnum["ru"] = "ru";
    list1LanguageEnum["en"] = "en";
    list1LanguageEnum["cn"] = "cn";
})(list1LanguageEnum || (exports.list1LanguageEnum = list1LanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var transferOwner1VEnum;
(function (transferOwner1VEnum) {
    transferOwner1VEnum["_1"] = "1";
    transferOwner1VEnum["_2"] = "2";
    transferOwner1VEnum["_3"] = "3";
})(transferOwner1VEnum || (exports.transferOwner1VEnum = transferOwner1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var transferOwner1LanguageEnum;
(function (transferOwner1LanguageEnum) {
    transferOwner1LanguageEnum["ru"] = "ru";
    transferOwner1LanguageEnum["en"] = "en";
    transferOwner1LanguageEnum["cn"] = "cn";
})(transferOwner1LanguageEnum || (exports.transferOwner1LanguageEnum = transferOwner1LanguageEnum = {}));
