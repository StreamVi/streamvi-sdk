"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectHistoryListV1ActionEnum = exports.ProjectHistoryListV1VEnum = exports.ProjectHistoryListV1LanguageEnum = exports.ProjectHistoryApi = exports.ProjectHistoryApiFactory = exports.ProjectHistoryApiFp = exports.ProjectHistoryApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ProjectHistoryApi - axios parameter creator
 * @export
 */
const ProjectHistoryApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get project history of actions
         * @param {ProjectHistoryListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {ProjectHistoryListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {ProjectHistoryListV1ActionEnum} [action] Action
         * @param {number} [groupId] Group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectHistoryListV1: async (language, projectId, v, limit, offset, dateFrom, dateTo, action, groupId, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('projectHistoryListV1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('projectHistoryListV1', 'projectId', projectId);
            const localVarPath = `/method/project_history/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom instanceof Date) ?
                    dateFrom.toISOString() :
                    dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo instanceof Date) ?
                    dateTo.toISOString() :
                    dateTo;
            }
            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }
            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ProjectHistoryApiAxiosParamCreator = ProjectHistoryApiAxiosParamCreator;
/**
 * ProjectHistoryApi - functional programming interface
 * @export
 */
const ProjectHistoryApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ProjectHistoryApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get project history of actions
         * @param {ProjectHistoryListV1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {ProjectHistoryListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {ProjectHistoryListV1ActionEnum} [action] Action
         * @param {number} [groupId] Group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectHistoryListV1(language, projectId, v, limit, offset, dateFrom, dateTo, action, groupId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectHistoryListV1(language, projectId, v, limit, offset, dateFrom, dateTo, action, groupId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectHistoryApi.projectHistoryListV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.ProjectHistoryApiFp = ProjectHistoryApiFp;
/**
 * ProjectHistoryApi - factory interface
 * @export
 */
const ProjectHistoryApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ProjectHistoryApiFp)(configuration);
    return {
        /**
         *
         * @summary Get project history of actions
         * @param {ProjectHistoryApiProjectHistoryListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectHistoryListV1(requestParameters, options) {
            return localVarFp.projectHistoryListV1(requestParameters.language, requestParameters.projectId, requestParameters.v, requestParameters.limit, requestParameters.offset, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.action, requestParameters.groupId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ProjectHistoryApiFactory = ProjectHistoryApiFactory;
/**
 * ProjectHistoryApi - object-oriented interface
 * @export
 * @class ProjectHistoryApi
 * @extends {BaseAPI}
 */
class ProjectHistoryApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get project history of actions
     * @param {ProjectHistoryApiProjectHistoryListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectHistoryApi
     */
    projectHistoryListV1(requestParameters, options) {
        return (0, exports.ProjectHistoryApiFp)(this.configuration).projectHistoryListV1(requestParameters.language, requestParameters.projectId, requestParameters.v, requestParameters.limit, requestParameters.offset, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.action, requestParameters.groupId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProjectHistoryApi = ProjectHistoryApi;
/**
 * @export
 */
exports.ProjectHistoryListV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.ProjectHistoryListV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ProjectHistoryListV1ActionEnum = {
    ProjectChannelInviteAdd: 'project_channel_invite_add',
    ProjectChannelInviteDel: 'project_channel_invite_del',
    ProjectChannelInviteAccept: 'project_channel_invite_accept',
    ProjectChannelInviteDecline: 'project_channel_invite_decline',
    UserProjectInviteAdd: 'user_project_invite_add',
    UserProjectInviteDel: 'user_project_invite_del',
    UserProjectInviteAccept: 'user_project_invite_accept',
    UserProjectInviteDecline: 'user_project_invite_decline',
    UserProjectAdd: 'user_project_add',
    UserProjectDel: 'user_project_del',
    UserProjectChange: 'user_project_change',
    ProjectChannelAdd: 'project_channel_add',
    ProjectChannelDel: 'project_channel_del',
    ProjectChannelChange: 'project_channel_change'
};
