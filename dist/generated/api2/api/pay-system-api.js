"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaySystemCreateUnitpayV1VEnum = exports.PaySystemCreateUnitpayV1LanguageEnum = exports.PaySystemCreateChallengeV1VEnum = exports.PaySystemCreateChallengeV1LanguageEnum = exports.PaySystemApi = exports.PaySystemApiFactory = exports.PaySystemApiFp = exports.PaySystemApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PaySystemApi - axios parameter creator
 * @export
 */
const PaySystemApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {PaySystemCreateChallengeV1LanguageEnum} language Current language
         * @param {number} paymentId Payment id
         * @param {PaySystemCreateChallengeV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySystemCreateChallengeV1: async (language, paymentId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('paySystemCreateChallengeV1', 'language', language);
            // verify required parameter 'paymentId' is not null or undefined
            (0, common_1.assertParamExists)('paySystemCreateChallengeV1', 'paymentId', paymentId);
            const localVarPath = `/method/pay-system/payoneer/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (paymentId !== undefined) {
                localVarQueryParameter['payment_id'] = paymentId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {PaySystemCreateUnitpayV1LanguageEnum} language Current language
         * @param {number} paymentId Payment id
         * @param {PaySystemCreateUnitpayV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySystemCreateUnitpayV1: async (language, paymentId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('paySystemCreateUnitpayV1', 'language', language);
            // verify required parameter 'paymentId' is not null or undefined
            (0, common_1.assertParamExists)('paySystemCreateUnitpayV1', 'paymentId', paymentId);
            const localVarPath = `/method/pay-system/unitpay/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (paymentId !== undefined) {
                localVarQueryParameter['payment_id'] = paymentId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Load available pay systems
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySystemListV1: async (options = {}) => {
            const localVarPath = `/method/pay-system/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PaySystemApiAxiosParamCreator = PaySystemApiAxiosParamCreator;
/**
 * PaySystemApi - functional programming interface
 * @export
 */
const PaySystemApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PaySystemApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {PaySystemCreateChallengeV1LanguageEnum} language Current language
         * @param {number} paymentId Payment id
         * @param {PaySystemCreateChallengeV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paySystemCreateChallengeV1(language, paymentId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.paySystemCreateChallengeV1(language, paymentId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaySystemApi.paySystemCreateChallengeV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {PaySystemCreateUnitpayV1LanguageEnum} language Current language
         * @param {number} paymentId Payment id
         * @param {PaySystemCreateUnitpayV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paySystemCreateUnitpayV1(language, paymentId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.paySystemCreateUnitpayV1(language, paymentId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaySystemApi.paySystemCreateUnitpayV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Load available pay systems
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paySystemListV1(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.paySystemListV1(options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaySystemApi.paySystemListV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PaySystemApiFp = PaySystemApiFp;
/**
 * PaySystemApi - factory interface
 * @export
 */
const PaySystemApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PaySystemApiFp)(configuration);
    return {
        /**
         *
         * @param {PaySystemApiPaySystemCreateChallengeV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySystemCreateChallengeV1(requestParameters, options) {
            return localVarFp.paySystemCreateChallengeV1(requestParameters.language, requestParameters.paymentId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {PaySystemApiPaySystemCreateUnitpayV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySystemCreateUnitpayV1(requestParameters, options) {
            return localVarFp.paySystemCreateUnitpayV1(requestParameters.language, requestParameters.paymentId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Load available pay systems
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySystemListV1(options) {
            return localVarFp.paySystemListV1(options).then((request) => request(axios, basePath));
        },
    };
};
exports.PaySystemApiFactory = PaySystemApiFactory;
/**
 * PaySystemApi - object-oriented interface
 * @export
 * @class PaySystemApi
 * @extends {BaseAPI}
 */
class PaySystemApi extends base_1.BaseAPI {
    /**
     *
     * @param {PaySystemApiPaySystemCreateChallengeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySystemApi
     */
    paySystemCreateChallengeV1(requestParameters, options) {
        return (0, exports.PaySystemApiFp)(this.configuration).paySystemCreateChallengeV1(requestParameters.language, requestParameters.paymentId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {PaySystemApiPaySystemCreateUnitpayV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySystemApi
     */
    paySystemCreateUnitpayV1(requestParameters, options) {
        return (0, exports.PaySystemApiFp)(this.configuration).paySystemCreateUnitpayV1(requestParameters.language, requestParameters.paymentId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Load available pay systems
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySystemApi
     */
    paySystemListV1(options) {
        return (0, exports.PaySystemApiFp)(this.configuration).paySystemListV1(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PaySystemApi = PaySystemApi;
/**
 * @export
 */
exports.PaySystemCreateChallengeV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PaySystemCreateChallengeV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PaySystemCreateUnitpayV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PaySystemCreateUnitpayV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
