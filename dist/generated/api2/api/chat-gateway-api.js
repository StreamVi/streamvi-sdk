"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MethodChatGatewaySendV1VEnum = exports.MethodChatGatewaySendV1LanguageEnum = exports.MethodChatGatewayHistoryV1VEnum = exports.MethodChatGatewayHistoryV1LanguageEnum = exports.MethodChatGatewayGetMessageV1VEnum = exports.MethodChatGatewayGetMessageV1LanguageEnum = exports.MethodChatGatewayDeleteV1VEnum = exports.MethodChatGatewayDeleteV1LanguageEnum = exports.ChatGatewayApi = exports.ChatGatewayApiFactory = exports.ChatGatewayApiFp = exports.ChatGatewayApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ChatGatewayApi - axios parameter creator
 * @export
 */
const ChatGatewayApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Remove message
         * @param {MethodChatGatewayDeleteV1LanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {string} eventId Event id
         * @param {MethodChatGatewayDeleteV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodChatGatewayDeleteV1: async (language, key, broadcastId, eventId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayDeleteV1', 'language', language);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayDeleteV1', 'key', key);
            // verify required parameter 'broadcastId' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayDeleteV1', 'broadcastId', broadcastId);
            // verify required parameter 'eventId' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayDeleteV1', 'eventId', eventId);
            const localVarPath = `/method/chat/messages/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }
            if (eventId !== undefined) {
                localVarQueryParameter['event_id'] = eventId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get one message
         * @param {MethodChatGatewayGetMessageV1LanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {string} eventId Event id
         * @param {MethodChatGatewayGetMessageV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodChatGatewayGetMessageV1: async (language, key, broadcastId, eventId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayGetMessageV1', 'language', language);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayGetMessageV1', 'key', key);
            // verify required parameter 'broadcastId' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayGetMessageV1', 'broadcastId', broadcastId);
            // verify required parameter 'eventId' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayGetMessageV1', 'eventId', eventId);
            const localVarPath = `/method/chat/messages/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }
            if (eventId !== undefined) {
                localVarQueryParameter['event_id'] = eventId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List history message
         * @param {MethodChatGatewayHistoryV1LanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {MethodChatGatewayHistoryV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodChatGatewayHistoryV1: async (language, key, broadcastId, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayHistoryV1', 'language', language);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayHistoryV1', 'key', key);
            // verify required parameter 'broadcastId' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayHistoryV1', 'broadcastId', broadcastId);
            const localVarPath = `/method/chat/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Send message
         * @param {MethodChatGatewaySendV1LanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId
         * @param {MethodChatSendMessageRequestDto} methodChatSendMessageRequestDto
         * @param {MethodChatGatewaySendV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodChatGatewaySendV1: async (language, key, broadcastId, methodChatSendMessageRequestDto, v, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewaySendV1', 'language', language);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewaySendV1', 'key', key);
            // verify required parameter 'broadcastId' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewaySendV1', 'broadcastId', broadcastId);
            // verify required parameter 'methodChatSendMessageRequestDto' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewaySendV1', 'methodChatSendMessageRequestDto', methodChatSendMessageRequestDto);
            const localVarPath = `/method/chat/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(methodChatSendMessageRequestDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ChatGatewayApiAxiosParamCreator = ChatGatewayApiAxiosParamCreator;
/**
 * ChatGatewayApi - functional programming interface
 * @export
 */
const ChatGatewayApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ChatGatewayApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Remove message
         * @param {MethodChatGatewayDeleteV1LanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {string} eventId Event id
         * @param {MethodChatGatewayDeleteV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async methodChatGatewayDeleteV1(language, key, broadcastId, eventId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.methodChatGatewayDeleteV1(language, key, broadcastId, eventId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChatGatewayApi.methodChatGatewayDeleteV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get one message
         * @param {MethodChatGatewayGetMessageV1LanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {string} eventId Event id
         * @param {MethodChatGatewayGetMessageV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async methodChatGatewayGetMessageV1(language, key, broadcastId, eventId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.methodChatGatewayGetMessageV1(language, key, broadcastId, eventId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChatGatewayApi.methodChatGatewayGetMessageV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary List history message
         * @param {MethodChatGatewayHistoryV1LanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {MethodChatGatewayHistoryV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async methodChatGatewayHistoryV1(language, key, broadcastId, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.methodChatGatewayHistoryV1(language, key, broadcastId, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChatGatewayApi.methodChatGatewayHistoryV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Send message
         * @param {MethodChatGatewaySendV1LanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId
         * @param {MethodChatSendMessageRequestDto} methodChatSendMessageRequestDto
         * @param {MethodChatGatewaySendV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async methodChatGatewaySendV1(language, key, broadcastId, methodChatSendMessageRequestDto, v, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.methodChatGatewaySendV1(language, key, broadcastId, methodChatSendMessageRequestDto, v, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChatGatewayApi.methodChatGatewaySendV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.ChatGatewayApiFp = ChatGatewayApiFp;
/**
 * ChatGatewayApi - factory interface
 * @export
 */
const ChatGatewayApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ChatGatewayApiFp)(configuration);
    return {
        /**
         *
         * @summary Remove message
         * @param {ChatGatewayApiMethodChatGatewayDeleteV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodChatGatewayDeleteV1(requestParameters, options) {
            return localVarFp.methodChatGatewayDeleteV1(requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.eventId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get one message
         * @param {ChatGatewayApiMethodChatGatewayGetMessageV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodChatGatewayGetMessageV1(requestParameters, options) {
            return localVarFp.methodChatGatewayGetMessageV1(requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.eventId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List history message
         * @param {ChatGatewayApiMethodChatGatewayHistoryV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodChatGatewayHistoryV1(requestParameters, options) {
            return localVarFp.methodChatGatewayHistoryV1(requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.v, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Send message
         * @param {ChatGatewayApiMethodChatGatewaySendV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodChatGatewaySendV1(requestParameters, options) {
            return localVarFp.methodChatGatewaySendV1(requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.methodChatSendMessageRequestDto, requestParameters.v, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ChatGatewayApiFactory = ChatGatewayApiFactory;
/**
 * ChatGatewayApi - object-oriented interface
 * @export
 * @class ChatGatewayApi
 * @extends {BaseAPI}
 */
class ChatGatewayApi extends base_1.BaseAPI {
    /**
     *
     * @summary Remove message
     * @param {ChatGatewayApiMethodChatGatewayDeleteV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    methodChatGatewayDeleteV1(requestParameters, options) {
        return (0, exports.ChatGatewayApiFp)(this.configuration).methodChatGatewayDeleteV1(requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.eventId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get one message
     * @param {ChatGatewayApiMethodChatGatewayGetMessageV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    methodChatGatewayGetMessageV1(requestParameters, options) {
        return (0, exports.ChatGatewayApiFp)(this.configuration).methodChatGatewayGetMessageV1(requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.eventId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List history message
     * @param {ChatGatewayApiMethodChatGatewayHistoryV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    methodChatGatewayHistoryV1(requestParameters, options) {
        return (0, exports.ChatGatewayApiFp)(this.configuration).methodChatGatewayHistoryV1(requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Send message
     * @param {ChatGatewayApiMethodChatGatewaySendV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    methodChatGatewaySendV1(requestParameters, options) {
        return (0, exports.ChatGatewayApiFp)(this.configuration).methodChatGatewaySendV1(requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.methodChatSendMessageRequestDto, requestParameters.v, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ChatGatewayApi = ChatGatewayApi;
/**
 * @export
 */
exports.MethodChatGatewayDeleteV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.MethodChatGatewayDeleteV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.MethodChatGatewayGetMessageV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.MethodChatGatewayGetMessageV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.MethodChatGatewayHistoryV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.MethodChatGatewayHistoryV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.MethodChatGatewaySendV1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.MethodChatGatewaySendV1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
