"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendLanguageEnum = exports.sendVEnum = exports.historyLanguageEnum = exports.historyVEnum = exports.getMessageLanguageEnum = exports.getMessageVEnum = exports.deleteLanguageEnum = exports.deleteVEnum = exports.ChatGatewayApi = exports.factory = exports.fp = exports.axiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ChatGatewayApi - axios parameter creator
 * @export
 */
const axiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Remove message
         * @param {deleteVEnum} v Version
         * @param {deleteLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {string} eventId Event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: async (v, language, key, broadcastId, eventId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('delete', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('delete', 'language', language);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('delete', 'key', key);
            // verify required parameter 'broadcastId' is not null or undefined
            (0, common_1.assertParamExists)('delete', 'broadcastId', broadcastId);
            // verify required parameter 'eventId' is not null or undefined
            (0, common_1.assertParamExists)('delete', 'eventId', eventId);
            const localVarPath = `/method/chat/messages/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }
            if (eventId !== undefined) {
                localVarQueryParameter['event_id'] = eventId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get one message
         * @param {getMessageVEnum} v Version
         * @param {getMessageLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {string} eventId Event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessage: async (v, language, key, broadcastId, eventId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('getMessage', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('getMessage', 'language', language);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('getMessage', 'key', key);
            // verify required parameter 'broadcastId' is not null or undefined
            (0, common_1.assertParamExists)('getMessage', 'broadcastId', broadcastId);
            // verify required parameter 'eventId' is not null or undefined
            (0, common_1.assertParamExists)('getMessage', 'eventId', eventId);
            const localVarPath = `/method/chat/messages/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }
            if (eventId !== undefined) {
                localVarQueryParameter['event_id'] = eventId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List history message
         * @param {historyVEnum} v Version
         * @param {historyLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        history: async (v, language, key, broadcastId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('history', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('history', 'language', language);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('history', 'key', key);
            // verify required parameter 'broadcastId' is not null or undefined
            (0, common_1.assertParamExists)('history', 'broadcastId', broadcastId);
            const localVarPath = `/method/chat/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Send message
         * @param {sendVEnum} v Version
         * @param {sendLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId
         * @param {MethodChatSendMessageRequestDto} methodChatSendMessageRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        send: async (v, language, key, broadcastId, methodChatSendMessageRequestDto, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('send', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('send', 'language', language);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('send', 'key', key);
            // verify required parameter 'broadcastId' is not null or undefined
            (0, common_1.assertParamExists)('send', 'broadcastId', broadcastId);
            // verify required parameter 'methodChatSendMessageRequestDto' is not null or undefined
            (0, common_1.assertParamExists)('send', 'methodChatSendMessageRequestDto', methodChatSendMessageRequestDto);
            const localVarPath = `/method/chat/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(methodChatSendMessageRequestDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.axiosParamCreator = axiosParamCreator;
/**
 * ChatGatewayApi - functional programming interface
 * @export
 */
const fp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.axiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Remove message
         * @param {deleteVEnum} v Version
         * @param {deleteLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {string} eventId Event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete(v, language, key, broadcastId, eventId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete(v, language, key, broadcastId, eventId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChatGatewayApi.delete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get one message
         * @param {getMessageVEnum} v Version
         * @param {getMessageLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {string} eventId Event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessage(v, language, key, broadcastId, eventId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessage(v, language, key, broadcastId, eventId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChatGatewayApi.getMessage']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary List history message
         * @param {historyVEnum} v Version
         * @param {historyLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async history(v, language, key, broadcastId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.history(v, language, key, broadcastId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChatGatewayApi.history']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Send message
         * @param {sendVEnum} v Version
         * @param {sendLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId
         * @param {MethodChatSendMessageRequestDto} methodChatSendMessageRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async send(v, language, key, broadcastId, methodChatSendMessageRequestDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.send(v, language, key, broadcastId, methodChatSendMessageRequestDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChatGatewayApi.send']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.fp = fp;
/**
 * ChatGatewayApi - factory interface
 * @export
 */
const factory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.fp)(configuration);
    return {
        /**
         *
         * @summary Remove message
         * @param {deleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters, options) {
            return localVarFp.delete(requestParameters.v, requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.eventId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get one message
         * @param {getMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessage(requestParameters, options) {
            return localVarFp.getMessage(requestParameters.v, requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.eventId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List history message
         * @param {historyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        history(requestParameters, options) {
            return localVarFp.history(requestParameters.v, requestParameters.language, requestParameters.key, requestParameters.broadcastId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Send message
         * @param {sendRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        send(requestParameters, options) {
            return localVarFp.send(requestParameters.v, requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.methodChatSendMessageRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.factory = factory;
/**
 * ChatGatewayApi - object-oriented interface
 * @export
 * @class ChatGatewayApi
 * @extends {BaseAPI}
 */
class ChatGatewayApi extends base_1.BaseAPI {
    /**
     *
     * @summary Remove message
     * @param {deleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    delete(requestParameters, options) {
        return (0, exports.fp)(this.configuration).delete(requestParameters.v, requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.eventId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get one message
     * @param {getMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    getMessage(requestParameters, options) {
        return (0, exports.fp)(this.configuration).getMessage(requestParameters.v, requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.eventId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List history message
     * @param {historyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    history(requestParameters, options) {
        return (0, exports.fp)(this.configuration).history(requestParameters.v, requestParameters.language, requestParameters.key, requestParameters.broadcastId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Send message
     * @param {sendRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    send(requestParameters, options) {
        return (0, exports.fp)(this.configuration).send(requestParameters.v, requestParameters.language, requestParameters.key, requestParameters.broadcastId, requestParameters.methodChatSendMessageRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ChatGatewayApi = ChatGatewayApi;
/**
  * @export
  * @enum {string}
  */
var deleteVEnum;
(function (deleteVEnum) {
    deleteVEnum["_1"] = "1";
    deleteVEnum["_2"] = "2";
    deleteVEnum["_3"] = "3";
})(deleteVEnum || (exports.deleteVEnum = deleteVEnum = {}));
/**
  * @export
  * @enum {string}
  */
var deleteLanguageEnum;
(function (deleteLanguageEnum) {
    deleteLanguageEnum["ru"] = "ru";
    deleteLanguageEnum["en"] = "en";
    deleteLanguageEnum["cn"] = "cn";
})(deleteLanguageEnum || (exports.deleteLanguageEnum = deleteLanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var getMessageVEnum;
(function (getMessageVEnum) {
    getMessageVEnum["_1"] = "1";
    getMessageVEnum["_2"] = "2";
    getMessageVEnum["_3"] = "3";
})(getMessageVEnum || (exports.getMessageVEnum = getMessageVEnum = {}));
/**
  * @export
  * @enum {string}
  */
var getMessageLanguageEnum;
(function (getMessageLanguageEnum) {
    getMessageLanguageEnum["ru"] = "ru";
    getMessageLanguageEnum["en"] = "en";
    getMessageLanguageEnum["cn"] = "cn";
})(getMessageLanguageEnum || (exports.getMessageLanguageEnum = getMessageLanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var historyVEnum;
(function (historyVEnum) {
    historyVEnum["_1"] = "1";
    historyVEnum["_2"] = "2";
    historyVEnum["_3"] = "3";
})(historyVEnum || (exports.historyVEnum = historyVEnum = {}));
/**
  * @export
  * @enum {string}
  */
var historyLanguageEnum;
(function (historyLanguageEnum) {
    historyLanguageEnum["ru"] = "ru";
    historyLanguageEnum["en"] = "en";
    historyLanguageEnum["cn"] = "cn";
})(historyLanguageEnum || (exports.historyLanguageEnum = historyLanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var sendVEnum;
(function (sendVEnum) {
    sendVEnum["_1"] = "1";
    sendVEnum["_2"] = "2";
    sendVEnum["_3"] = "3";
})(sendVEnum || (exports.sendVEnum = sendVEnum = {}));
/**
  * @export
  * @enum {string}
  */
var sendLanguageEnum;
(function (sendLanguageEnum) {
    sendLanguageEnum["ru"] = "ru";
    sendLanguageEnum["en"] = "en";
    sendLanguageEnum["cn"] = "cn";
})(sendLanguageEnum || (exports.sendLanguageEnum = sendLanguageEnum = {}));
