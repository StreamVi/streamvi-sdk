/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { ListOfProjectChannelInviteResponse } from '../models';
import type { ProjectChannelInviteLinkResponse } from '../models';
import type { ProjectChannelInviteResponse } from '../models';
import type { SuccessResponse } from '../models';
/**
 * ProjectChannelInviteApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Accept channel invitation for selected project
     * @param {acceptForProject1VEnum} v Version
     * @param {acceptForProject1LanguageEnum} language Current language
     * @param {number} projectId The project to which you want to add a channel
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptForProject1: (v: acceptForProject1VEnum, language: acceptForProject1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Accept channel invitation using a secret link
     * @param {acceptForSecret1VEnum} v Version
     * @param {acceptForSecret1LanguageEnum} language Current language
     * @param {number} projectId The project to which you want to add a channel
     * @param {number} channelId Channel id
     * @param {string} secret Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptForSecret1: (v: acceptForSecret1VEnum, language: acceptForSecret1LanguageEnum, projectId: number, channelId: number, secret: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add channel invite item for another user by email
     * @param {addByEmail1VEnum} v Version
     * @param {addByEmail1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {string} email Email
     * @param {addByEmail1AccessTypeEnum} accessType Access type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addByEmail1: (v: addByEmail1VEnum, language: addByEmail1LanguageEnum, projectId: number, channelId: number, email: string, accessType: addByEmail1AccessTypeEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add channel invite item for another user by id
     * @param {addById1VEnum} v Version
     * @param {addById1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {addById1AccessTypeEnum} accessType Access type
     * @param {string} toProjectExternalId Project for get access by external id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addById1: (v: addById1VEnum, language: addById1LanguageEnum, projectId: number, channelId: number, accessType: addById1AccessTypeEnum, toProjectExternalId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Decline channel invitation for selected project
     * @param {declineForProject1VEnum} v Version
     * @param {declineForProject1LanguageEnum} language Current language
     * @param {number} projectId Channel id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    declineForProject1: (v: declineForProject1VEnum, language: declineForProject1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Decline channel invitation using a secret link
     * @param {declineForSecret1VEnum} v Version
     * @param {declineForSecret1LanguageEnum} language Current language
     * @param {number} projectId The project to which you want to add a channel
     * @param {number} channelId Channel id
     * @param {string} secret Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    declineForSecret1: (v: declineForSecret1VEnum, language: declineForSecret1LanguageEnum, projectId: number, channelId: number, secret: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Del channel invite item for my channel for another user
     * @param {del1VEnum} v Version
     * @param {del1LanguageEnum} language Current language
     * @param {number} id Unique id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    del1: (v: del1VEnum, language: del1LanguageEnum, id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get channel invite item for my channel for another user
     * @param {get1VEnum} v Version
     * @param {get1LanguageEnum} language Current language
     * @param {number} id Channel request id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get1: (v: get1VEnum, language: get1LanguageEnum, id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get invitation for channel
     * @param {getForProject1VEnum} v Version
     * @param {getForProject1LanguageEnum} language Current language
     * @param {number} projectId Current project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getForProject1: (v: getForProject1VEnum, language: getForProject1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get channel invitation using a secret link
     * @param {getForSecret1VEnum} v Version
     * @param {getForSecret1LanguageEnum} language Current language
     * @param {number} channelId Channel id
     * @param {string} secret Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getForSecret1: (v: getForSecret1VEnum, language: getForSecret1LanguageEnum, channelId: number, secret: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of invites for channel in project
     * @param {list1VEnum} v Version
     * @param {list1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1: (v: list1VEnum, language: list1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ProjectChannelInviteApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Accept channel invitation for selected project
     * @param {acceptForProject1VEnum} v Version
     * @param {acceptForProject1LanguageEnum} language Current language
     * @param {number} projectId The project to which you want to add a channel
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptForProject1(v: acceptForProject1VEnum, language: acceptForProject1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Accept channel invitation using a secret link
     * @param {acceptForSecret1VEnum} v Version
     * @param {acceptForSecret1LanguageEnum} language Current language
     * @param {number} projectId The project to which you want to add a channel
     * @param {number} channelId Channel id
     * @param {string} secret Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptForSecret1(v: acceptForSecret1VEnum, language: acceptForSecret1LanguageEnum, projectId: number, channelId: number, secret: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Add channel invite item for another user by email
     * @param {addByEmail1VEnum} v Version
     * @param {addByEmail1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {string} email Email
     * @param {addByEmail1AccessTypeEnum} accessType Access type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addByEmail1(v: addByEmail1VEnum, language: addByEmail1LanguageEnum, projectId: number, channelId: number, email: string, accessType: addByEmail1AccessTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectChannelInviteResponse>>;
    /**
     *
     * @summary Add channel invite item for another user by id
     * @param {addById1VEnum} v Version
     * @param {addById1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {addById1AccessTypeEnum} accessType Access type
     * @param {string} toProjectExternalId Project for get access by external id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addById1(v: addById1VEnum, language: addById1LanguageEnum, projectId: number, channelId: number, accessType: addById1AccessTypeEnum, toProjectExternalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectChannelInviteResponse>>;
    /**
     *
     * @summary Decline channel invitation for selected project
     * @param {declineForProject1VEnum} v Version
     * @param {declineForProject1LanguageEnum} language Current language
     * @param {number} projectId Channel id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    declineForProject1(v: declineForProject1VEnum, language: declineForProject1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Decline channel invitation using a secret link
     * @param {declineForSecret1VEnum} v Version
     * @param {declineForSecret1LanguageEnum} language Current language
     * @param {number} projectId The project to which you want to add a channel
     * @param {number} channelId Channel id
     * @param {string} secret Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    declineForSecret1(v: declineForSecret1VEnum, language: declineForSecret1LanguageEnum, projectId: number, channelId: number, secret: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Del channel invite item for my channel for another user
     * @param {del1VEnum} v Version
     * @param {del1LanguageEnum} language Current language
     * @param {number} id Unique id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    del1(v: del1VEnum, language: del1LanguageEnum, id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Get channel invite item for my channel for another user
     * @param {get1VEnum} v Version
     * @param {get1LanguageEnum} language Current language
     * @param {number} id Channel request id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get1(v: get1VEnum, language: get1LanguageEnum, id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Get invitation for channel
     * @param {getForProject1VEnum} v Version
     * @param {getForProject1LanguageEnum} language Current language
     * @param {number} projectId Current project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getForProject1(v: getForProject1VEnum, language: getForProject1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectChannelInviteLinkResponse>>;
    /**
     *
     * @summary Get channel invitation using a secret link
     * @param {getForSecret1VEnum} v Version
     * @param {getForSecret1LanguageEnum} language Current language
     * @param {number} channelId Channel id
     * @param {string} secret Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getForSecret1(v: getForSecret1VEnum, language: getForSecret1LanguageEnum, channelId: number, secret: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectChannelInviteLinkResponse>>;
    /**
     *
     * @summary List of invites for channel in project
     * @param {list1VEnum} v Version
     * @param {list1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(v: list1VEnum, language: list1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfProjectChannelInviteResponse>>;
};
/**
 * ProjectChannelInviteApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Accept channel invitation for selected project
     * @param {acceptForProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptForProject1(requestParameters: acceptForProject1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Accept channel invitation using a secret link
     * @param {acceptForSecret1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptForSecret1(requestParameters: acceptForSecret1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Add channel invite item for another user by email
     * @param {addByEmail1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addByEmail1(requestParameters: addByEmail1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectChannelInviteResponse>;
    /**
     *
     * @summary Add channel invite item for another user by id
     * @param {addById1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addById1(requestParameters: addById1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectChannelInviteResponse>;
    /**
     *
     * @summary Decline channel invitation for selected project
     * @param {declineForProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    declineForProject1(requestParameters: declineForProject1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Decline channel invitation using a secret link
     * @param {declineForSecret1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    declineForSecret1(requestParameters: declineForSecret1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Del channel invite item for my channel for another user
     * @param {del1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    del1(requestParameters: del1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get channel invite item for my channel for another user
     * @param {get1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get1(requestParameters: get1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get invitation for channel
     * @param {getForProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getForProject1(requestParameters: getForProject1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectChannelInviteLinkResponse>;
    /**
     *
     * @summary Get channel invitation using a secret link
     * @param {getForSecret1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getForSecret1(requestParameters: getForSecret1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectChannelInviteLinkResponse>;
    /**
     *
     * @summary List of invites for channel in project
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfProjectChannelInviteResponse>;
};
/**
 * Request parameters for acceptForProject1 operation in ProjectChannelInviteApi.
 * @export
 * @interface acceptForProject1Request
 */
export interface acceptForProject1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof acceptForProject1
     */
    readonly v?: acceptForProject1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof acceptForProject1
     */
    readonly language: acceptForProject1LanguageEnum;
    /**
     * The project to which you want to add a channel
     * @type {number}
     * @memberof acceptForProject1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof acceptForProject1
     */
    readonly channelId: number;
}
/**
 * Request parameters for acceptForSecret1 operation in ProjectChannelInviteApi.
 * @export
 * @interface acceptForSecret1Request
 */
export interface acceptForSecret1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof acceptForSecret1
     */
    readonly v?: acceptForSecret1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof acceptForSecret1
     */
    readonly language: acceptForSecret1LanguageEnum;
    /**
     * The project to which you want to add a channel
     * @type {number}
     * @memberof acceptForSecret1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof acceptForSecret1
     */
    readonly channelId: number;
    /**
     * Secret
     * @type {string}
     * @memberof acceptForSecret1
     */
    readonly secret: string;
}
/**
 * Request parameters for addByEmail1 operation in ProjectChannelInviteApi.
 * @export
 * @interface addByEmail1Request
 */
export interface addByEmail1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof addByEmail1
     */
    readonly v?: addByEmail1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof addByEmail1
     */
    readonly language: addByEmail1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof addByEmail1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof addByEmail1
     */
    readonly channelId: number;
    /**
     * Email
     * @type {string}
     * @memberof addByEmail1
     */
    readonly email: string;
    /**
     * Access type
     * @type {0 | 1 | 1 | 2}
     * @memberof addByEmail1
     */
    readonly accessType: addByEmail1AccessTypeEnum;
}
/**
 * Request parameters for addById1 operation in ProjectChannelInviteApi.
 * @export
 * @interface addById1Request
 */
export interface addById1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof addById1
     */
    readonly v?: addById1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof addById1
     */
    readonly language: addById1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof addById1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof addById1
     */
    readonly channelId: number;
    /**
     * Access type
     * @type {0 | 1 | 1 | 2}
     * @memberof addById1
     */
    readonly accessType: addById1AccessTypeEnum;
    /**
     * Project for get access by external id
     * @type {string}
     * @memberof addById1
     */
    readonly toProjectExternalId: string;
}
/**
 * Request parameters for declineForProject1 operation in ProjectChannelInviteApi.
 * @export
 * @interface declineForProject1Request
 */
export interface declineForProject1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof declineForProject1
     */
    readonly v?: declineForProject1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof declineForProject1
     */
    readonly language: declineForProject1LanguageEnum;
    /**
     * Channel id
     * @type {number}
     * @memberof declineForProject1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof declineForProject1
     */
    readonly channelId: number;
}
/**
 * Request parameters for declineForSecret1 operation in ProjectChannelInviteApi.
 * @export
 * @interface declineForSecret1Request
 */
export interface declineForSecret1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof declineForSecret1
     */
    readonly v?: declineForSecret1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof declineForSecret1
     */
    readonly language: declineForSecret1LanguageEnum;
    /**
     * The project to which you want to add a channel
     * @type {number}
     * @memberof declineForSecret1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof declineForSecret1
     */
    readonly channelId: number;
    /**
     * Secret
     * @type {string}
     * @memberof declineForSecret1
     */
    readonly secret: string;
}
/**
 * Request parameters for del1 operation in ProjectChannelInviteApi.
 * @export
 * @interface del1Request
 */
export interface del1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof del1
     */
    readonly v?: del1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof del1
     */
    readonly language: del1LanguageEnum;
    /**
     * Unique id
     * @type {number}
     * @memberof del1
     */
    readonly id: number;
}
/**
 * Request parameters for get1 operation in ProjectChannelInviteApi.
 * @export
 * @interface get1Request
 */
export interface get1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof get1
     */
    readonly v?: get1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof get1
     */
    readonly language: get1LanguageEnum;
    /**
     * Channel request id
     * @type {number}
     * @memberof get1
     */
    readonly id: number;
}
/**
 * Request parameters for getForProject1 operation in ProjectChannelInviteApi.
 * @export
 * @interface getForProject1Request
 */
export interface getForProject1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getForProject1
     */
    readonly v?: getForProject1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getForProject1
     */
    readonly language: getForProject1LanguageEnum;
    /**
     * Current project id
     * @type {number}
     * @memberof getForProject1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof getForProject1
     */
    readonly channelId: number;
}
/**
 * Request parameters for getForSecret1 operation in ProjectChannelInviteApi.
 * @export
 * @interface getForSecret1Request
 */
export interface getForSecret1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getForSecret1
     */
    readonly v?: getForSecret1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getForSecret1
     */
    readonly language: getForSecret1LanguageEnum;
    /**
     * Channel id
     * @type {number}
     * @memberof getForSecret1
     */
    readonly channelId: number;
    /**
     * Secret
     * @type {string}
     * @memberof getForSecret1
     */
    readonly secret: string;
}
/**
 * Request parameters for list1 operation in ProjectChannelInviteApi.
 * @export
 * @interface list1Request
 */
export interface list1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof list1
     */
    readonly v?: list1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof list1
     */
    readonly language: list1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof list1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof list1
     */
    readonly channelId: number;
}
/**
 * ProjectChannelInviteApi - object-oriented interface
 * @export
 * @class ProjectChannelInviteApi
 * @extends {BaseAPI}
 */
export declare class ProjectChannelInviteApi extends BaseAPI {
    /**
     *
     * @summary Accept channel invitation for selected project
     * @param {acceptForProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    acceptForProject1(requestParameters: acceptForProject1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Accept channel invitation using a secret link
     * @param {acceptForSecret1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    acceptForSecret1(requestParameters: acceptForSecret1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Add channel invite item for another user by email
     * @param {addByEmail1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    addByEmail1(requestParameters: addByEmail1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectChannelInviteResponse, any>>;
    /**
     *
     * @summary Add channel invite item for another user by id
     * @param {addById1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    addById1(requestParameters: addById1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectChannelInviteResponse, any>>;
    /**
     *
     * @summary Decline channel invitation for selected project
     * @param {declineForProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    declineForProject1(requestParameters: declineForProject1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Decline channel invitation using a secret link
     * @param {declineForSecret1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    declineForSecret1(requestParameters: declineForSecret1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Del channel invite item for my channel for another user
     * @param {del1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    del1(requestParameters: del1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Get channel invite item for my channel for another user
     * @param {get1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    get1(requestParameters: get1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Get invitation for channel
     * @param {getForProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    getForProject1(requestParameters: getForProject1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectChannelInviteLinkResponse, any>>;
    /**
     *
     * @summary Get channel invitation using a secret link
     * @param {getForSecret1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    getForSecret1(requestParameters: getForSecret1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectChannelInviteLinkResponse, any>>;
    /**
     *
     * @summary List of invites for channel in project
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").ListResponse, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum acceptForProject1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum acceptForProject1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum acceptForSecret1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum acceptForSecret1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum addByEmail1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum addByEmail1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum addByEmail1AccessTypeEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_12 = 1,
    NUMBER_2 = 2
}
/**
  * @export
  * @enum {string}
  */
export declare enum addById1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum addById1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum addById1AccessTypeEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_12 = 1,
    NUMBER_2 = 2
}
/**
  * @export
  * @enum {string}
  */
export declare enum declineForProject1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum declineForProject1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum declineForSecret1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum declineForSecret1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum del1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum del1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum get1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum get1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getForProject1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getForProject1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getForSecret1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getForSecret1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum list1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum list1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=project-channel-invite-api.d.ts.map