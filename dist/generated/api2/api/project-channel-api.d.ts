/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { ListOfProjectChannelResponse } from '../models';
import type { SuccessResponse } from '../models';
/**
 * ProjectChannelApi - axios parameter creator
 * @export
 */
export declare const ProjectChannelApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Change access for project in channel
     * @param {ProjectChannelChangeAccessV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} toProjectId Target project id
     * @param {ProjectChannelChangeAccessV1AccessTypeEnum} accessType Access type
     * @param {ProjectChannelChangeAccessV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectChannelChangeAccessV1: (language: ProjectChannelChangeAccessV1LanguageEnum, projectId: number, channelId: number, toProjectId: number, accessType: ProjectChannelChangeAccessV1AccessTypeEnum, v?: ProjectChannelChangeAccessV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove access for project in channel
     * @param {ProjectChannelDelV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} targetProjectId Target project id
     * @param {ProjectChannelDelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectChannelDelV1: (language: ProjectChannelDelV1LanguageEnum, projectId: number, channelId: number, targetProjectId: number, v?: ProjectChannelDelV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Project channel list
     * @param {ProjectChannelListV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {ProjectChannelListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectChannelListV1: (language: ProjectChannelListV1LanguageEnum, projectId: number, channelId: number, v?: ProjectChannelListV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Transfer owner for project in channel
     * @param {ProjectChannelTransferOwnerV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} toProjectId Target project id
     * @param {ProjectChannelTransferOwnerV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectChannelTransferOwnerV1: (language: ProjectChannelTransferOwnerV1LanguageEnum, projectId: number, channelId: number, toProjectId: number, v?: ProjectChannelTransferOwnerV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ProjectChannelApi - functional programming interface
 * @export
 */
export declare const ProjectChannelApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Change access for project in channel
     * @param {ProjectChannelChangeAccessV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} toProjectId Target project id
     * @param {ProjectChannelChangeAccessV1AccessTypeEnum} accessType Access type
     * @param {ProjectChannelChangeAccessV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectChannelChangeAccessV1(language: ProjectChannelChangeAccessV1LanguageEnum, projectId: number, channelId: number, toProjectId: number, accessType: ProjectChannelChangeAccessV1AccessTypeEnum, v?: ProjectChannelChangeAccessV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Remove access for project in channel
     * @param {ProjectChannelDelV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} targetProjectId Target project id
     * @param {ProjectChannelDelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectChannelDelV1(language: ProjectChannelDelV1LanguageEnum, projectId: number, channelId: number, targetProjectId: number, v?: ProjectChannelDelV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Project channel list
     * @param {ProjectChannelListV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {ProjectChannelListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectChannelListV1(language: ProjectChannelListV1LanguageEnum, projectId: number, channelId: number, v?: ProjectChannelListV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfProjectChannelResponse>>;
    /**
     *
     * @summary Transfer owner for project in channel
     * @param {ProjectChannelTransferOwnerV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} toProjectId Target project id
     * @param {ProjectChannelTransferOwnerV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectChannelTransferOwnerV1(language: ProjectChannelTransferOwnerV1LanguageEnum, projectId: number, channelId: number, toProjectId: number, v?: ProjectChannelTransferOwnerV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
};
/**
 * ProjectChannelApi - factory interface
 * @export
 */
export declare const ProjectChannelApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Change access for project in channel
     * @param {ProjectChannelApiProjectChannelChangeAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectChannelChangeAccessV1(requestParameters: ProjectChannelApiProjectChannelChangeAccessV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Remove access for project in channel
     * @param {ProjectChannelApiProjectChannelDelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectChannelDelV1(requestParameters: ProjectChannelApiProjectChannelDelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Project channel list
     * @param {ProjectChannelApiProjectChannelListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectChannelListV1(requestParameters: ProjectChannelApiProjectChannelListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfProjectChannelResponse>;
    /**
     *
     * @summary Transfer owner for project in channel
     * @param {ProjectChannelApiProjectChannelTransferOwnerV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectChannelTransferOwnerV1(requestParameters: ProjectChannelApiProjectChannelTransferOwnerV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
};
/**
 * ProjectChannelApi - interface
 * @export
 * @interface ProjectChannelApi
 */
export interface ProjectChannelApiInterface {
    /**
     *
     * @summary Change access for project in channel
     * @param {ProjectChannelApiProjectChannelChangeAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApiInterface
     */
    projectChannelChangeAccessV1(requestParameters: ProjectChannelApiProjectChannelChangeAccessV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Remove access for project in channel
     * @param {ProjectChannelApiProjectChannelDelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApiInterface
     */
    projectChannelDelV1(requestParameters: ProjectChannelApiProjectChannelDelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Project channel list
     * @param {ProjectChannelApiProjectChannelListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApiInterface
     */
    projectChannelListV1(requestParameters: ProjectChannelApiProjectChannelListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfProjectChannelResponse>;
    /**
     *
     * @summary Transfer owner for project in channel
     * @param {ProjectChannelApiProjectChannelTransferOwnerV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApiInterface
     */
    projectChannelTransferOwnerV1(requestParameters: ProjectChannelApiProjectChannelTransferOwnerV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
}
/**
 * Request parameters for projectChannelChangeAccessV1 operation in ProjectChannelApi.
 * @export
 * @interface ProjectChannelApiProjectChannelChangeAccessV1Request
 */
export interface ProjectChannelApiProjectChannelChangeAccessV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ProjectChannelApiProjectChannelChangeAccessV1
     */
    readonly language: ProjectChannelChangeAccessV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelChangeAccessV1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelChangeAccessV1
     */
    readonly channelId: number;
    /**
     * Target project id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelChangeAccessV1
     */
    readonly toProjectId: number;
    /**
     * Access type
     * @type {0 | 1 | 1 | 2}
     * @memberof ProjectChannelApiProjectChannelChangeAccessV1
     */
    readonly accessType: ProjectChannelChangeAccessV1AccessTypeEnum;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ProjectChannelApiProjectChannelChangeAccessV1
     */
    readonly v?: ProjectChannelChangeAccessV1VEnum;
}
/**
 * Request parameters for projectChannelDelV1 operation in ProjectChannelApi.
 * @export
 * @interface ProjectChannelApiProjectChannelDelV1Request
 */
export interface ProjectChannelApiProjectChannelDelV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ProjectChannelApiProjectChannelDelV1
     */
    readonly language: ProjectChannelDelV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelDelV1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelDelV1
     */
    readonly channelId: number;
    /**
     * Target project id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelDelV1
     */
    readonly targetProjectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ProjectChannelApiProjectChannelDelV1
     */
    readonly v?: ProjectChannelDelV1VEnum;
}
/**
 * Request parameters for projectChannelListV1 operation in ProjectChannelApi.
 * @export
 * @interface ProjectChannelApiProjectChannelListV1Request
 */
export interface ProjectChannelApiProjectChannelListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ProjectChannelApiProjectChannelListV1
     */
    readonly language: ProjectChannelListV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelListV1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelListV1
     */
    readonly channelId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ProjectChannelApiProjectChannelListV1
     */
    readonly v?: ProjectChannelListV1VEnum;
}
/**
 * Request parameters for projectChannelTransferOwnerV1 operation in ProjectChannelApi.
 * @export
 * @interface ProjectChannelApiProjectChannelTransferOwnerV1Request
 */
export interface ProjectChannelApiProjectChannelTransferOwnerV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ProjectChannelApiProjectChannelTransferOwnerV1
     */
    readonly language: ProjectChannelTransferOwnerV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelTransferOwnerV1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelTransferOwnerV1
     */
    readonly channelId: number;
    /**
     * Target project id
     * @type {number}
     * @memberof ProjectChannelApiProjectChannelTransferOwnerV1
     */
    readonly toProjectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ProjectChannelApiProjectChannelTransferOwnerV1
     */
    readonly v?: ProjectChannelTransferOwnerV1VEnum;
}
/**
 * ProjectChannelApi - object-oriented interface
 * @export
 * @class ProjectChannelApi
 * @extends {BaseAPI}
 */
export declare class ProjectChannelApi extends BaseAPI implements ProjectChannelApiInterface {
    /**
     *
     * @summary Change access for project in channel
     * @param {ProjectChannelApiProjectChannelChangeAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    projectChannelChangeAccessV1(requestParameters: ProjectChannelApiProjectChannelChangeAccessV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Remove access for project in channel
     * @param {ProjectChannelApiProjectChannelDelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    projectChannelDelV1(requestParameters: ProjectChannelApiProjectChannelDelV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Project channel list
     * @param {ProjectChannelApiProjectChannelListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    projectChannelListV1(requestParameters: ProjectChannelApiProjectChannelListV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").ListResponse, any>>;
    /**
     *
     * @summary Transfer owner for project in channel
     * @param {ProjectChannelApiProjectChannelTransferOwnerV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    projectChannelTransferOwnerV1(requestParameters: ProjectChannelApiProjectChannelTransferOwnerV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
}
/**
 * @export
 */
export declare const ProjectChannelChangeAccessV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type ProjectChannelChangeAccessV1LanguageEnum = typeof ProjectChannelChangeAccessV1LanguageEnum[keyof typeof ProjectChannelChangeAccessV1LanguageEnum];
/**
 * @export
 */
export declare const ProjectChannelChangeAccessV1AccessTypeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_12: 1;
    readonly NUMBER_2: 2;
};
export type ProjectChannelChangeAccessV1AccessTypeEnum = typeof ProjectChannelChangeAccessV1AccessTypeEnum[keyof typeof ProjectChannelChangeAccessV1AccessTypeEnum];
/**
 * @export
 */
export declare const ProjectChannelChangeAccessV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ProjectChannelChangeAccessV1VEnum = typeof ProjectChannelChangeAccessV1VEnum[keyof typeof ProjectChannelChangeAccessV1VEnum];
/**
 * @export
 */
export declare const ProjectChannelDelV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type ProjectChannelDelV1LanguageEnum = typeof ProjectChannelDelV1LanguageEnum[keyof typeof ProjectChannelDelV1LanguageEnum];
/**
 * @export
 */
export declare const ProjectChannelDelV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ProjectChannelDelV1VEnum = typeof ProjectChannelDelV1VEnum[keyof typeof ProjectChannelDelV1VEnum];
/**
 * @export
 */
export declare const ProjectChannelListV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type ProjectChannelListV1LanguageEnum = typeof ProjectChannelListV1LanguageEnum[keyof typeof ProjectChannelListV1LanguageEnum];
/**
 * @export
 */
export declare const ProjectChannelListV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ProjectChannelListV1VEnum = typeof ProjectChannelListV1VEnum[keyof typeof ProjectChannelListV1VEnum];
/**
 * @export
 */
export declare const ProjectChannelTransferOwnerV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type ProjectChannelTransferOwnerV1LanguageEnum = typeof ProjectChannelTransferOwnerV1LanguageEnum[keyof typeof ProjectChannelTransferOwnerV1LanguageEnum];
/**
 * @export
 */
export declare const ProjectChannelTransferOwnerV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ProjectChannelTransferOwnerV1VEnum = typeof ProjectChannelTransferOwnerV1VEnum[keyof typeof ProjectChannelTransferOwnerV1VEnum];
//# sourceMappingURL=project-channel-api.d.ts.map