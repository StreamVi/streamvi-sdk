/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { ListOfProjectChannelResponse } from '../models';
import type { SuccessResponse } from '../models';
/**
 * ProjectChannelApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Change access for project in channel
     * @param {changeAccess1VEnum} v Version
     * @param {changeAccess1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} toProjectId Target project id
     * @param {changeAccess1AccessTypeEnum} accessType Access type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAccess1: (v: changeAccess1VEnum, language: changeAccess1LanguageEnum, projectId: number, channelId: number, toProjectId: number, accessType: changeAccess1AccessTypeEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove access for project in channel
     * @param {del1VEnum} v Version
     * @param {del1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} targetProjectId Target project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    del1: (v: del1VEnum, language: del1LanguageEnum, projectId: number, channelId: number, targetProjectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Project channel list
     * @param {list1VEnum} v Version
     * @param {list1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1: (v: list1VEnum, language: list1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Transfer owner for project in channel
     * @param {transferOwner1VEnum} v Version
     * @param {transferOwner1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} toProjectId Target project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferOwner1: (v: transferOwner1VEnum, language: transferOwner1LanguageEnum, projectId: number, channelId: number, toProjectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ProjectChannelApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Change access for project in channel
     * @param {changeAccess1VEnum} v Version
     * @param {changeAccess1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} toProjectId Target project id
     * @param {changeAccess1AccessTypeEnum} accessType Access type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAccess1(v: changeAccess1VEnum, language: changeAccess1LanguageEnum, projectId: number, channelId: number, toProjectId: number, accessType: changeAccess1AccessTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Remove access for project in channel
     * @param {del1VEnum} v Version
     * @param {del1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} targetProjectId Target project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    del1(v: del1VEnum, language: del1LanguageEnum, projectId: number, channelId: number, targetProjectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Project channel list
     * @param {list1VEnum} v Version
     * @param {list1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(v: list1VEnum, language: list1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfProjectChannelResponse>>;
    /**
     *
     * @summary Transfer owner for project in channel
     * @param {transferOwner1VEnum} v Version
     * @param {transferOwner1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} toProjectId Target project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferOwner1(v: transferOwner1VEnum, language: transferOwner1LanguageEnum, projectId: number, channelId: number, toProjectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
};
/**
 * ProjectChannelApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Change access for project in channel
     * @param {changeAccess1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAccess1(requestParameters: changeAccess1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Remove access for project in channel
     * @param {del1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    del1(requestParameters: del1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Project channel list
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfProjectChannelResponse>;
    /**
     *
     * @summary Transfer owner for project in channel
     * @param {transferOwner1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferOwner1(requestParameters: transferOwner1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
};
/**
 * Request parameters for changeAccess1 operation in ProjectChannelApi.
 * @export
 * @interface changeAccess1Request
 */
export interface changeAccess1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof changeAccess1
     */
    readonly v?: changeAccess1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof changeAccess1
     */
    readonly language: changeAccess1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof changeAccess1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof changeAccess1
     */
    readonly channelId: number;
    /**
     * Target project id
     * @type {number}
     * @memberof changeAccess1
     */
    readonly toProjectId: number;
    /**
     * Access type
     * @type {0 | 1 | 1 | 2}
     * @memberof changeAccess1
     */
    readonly accessType: changeAccess1AccessTypeEnum;
}
/**
 * Request parameters for del1 operation in ProjectChannelApi.
 * @export
 * @interface del1Request
 */
export interface del1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof del1
     */
    readonly v?: del1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof del1
     */
    readonly language: del1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof del1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof del1
     */
    readonly channelId: number;
    /**
     * Target project id
     * @type {number}
     * @memberof del1
     */
    readonly targetProjectId: number;
}
/**
 * Request parameters for list1 operation in ProjectChannelApi.
 * @export
 * @interface list1Request
 */
export interface list1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof list1
     */
    readonly v?: list1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof list1
     */
    readonly language: list1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof list1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof list1
     */
    readonly channelId: number;
}
/**
 * Request parameters for transferOwner1 operation in ProjectChannelApi.
 * @export
 * @interface transferOwner1Request
 */
export interface transferOwner1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof transferOwner1
     */
    readonly v?: transferOwner1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof transferOwner1
     */
    readonly language: transferOwner1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof transferOwner1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof transferOwner1
     */
    readonly channelId: number;
    /**
     * Target project id
     * @type {number}
     * @memberof transferOwner1
     */
    readonly toProjectId: number;
}
/**
 * ProjectChannelApi - object-oriented interface
 * @export
 * @class ProjectChannelApi
 * @extends {BaseAPI}
 */
export declare class ProjectChannelApi extends BaseAPI {
    /**
     *
     * @summary Change access for project in channel
     * @param {changeAccess1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    changeAccess1(requestParameters: changeAccess1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Remove access for project in channel
     * @param {del1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    del1(requestParameters: del1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Project channel list
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").ListResponse, any>>;
    /**
     *
     * @summary Transfer owner for project in channel
     * @param {transferOwner1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    transferOwner1(requestParameters: transferOwner1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum changeAccess1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum changeAccess1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum changeAccess1AccessTypeEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_12 = 1,
    NUMBER_2 = 2
}
/**
  * @export
  * @enum {string}
  */
export declare enum del1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum del1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum list1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum list1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum transferOwner1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum transferOwner1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=project-channel-api.d.ts.map