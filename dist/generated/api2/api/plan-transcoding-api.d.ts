/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { PlanTranscodingCheckResponse } from '../models';
import type { PlanTranscodingDiscountResponse } from '../models';
import type { PlanTranscodingForProject } from '../models';
import type { PlanTranscodingResponseDto } from '../models';
import type { SuccessResponse } from '../models';
/**
 * PlanTranscodingApi - axios parameter creator
 * @export
 */
export declare const PlanTranscodingApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Buy transcoder tariff
     * @param {PlanTranscodingBuyV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanTranscodingBuyV1PeriodEnum} period Period
     * @param {number} planTranscodingId Transcoding plan id
     * @param {PlanTranscodingBuyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [count] Count flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planTranscodingBuyV1: (language: PlanTranscodingBuyV1LanguageEnum, projectId: number, period: PlanTranscodingBuyV1PeriodEnum, planTranscodingId: number, v?: PlanTranscodingBuyV1VEnum, count?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove after tariff
     * @param {PlanTranscodingCancelV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanTranscodingCancelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planTranscodingCancelV1: (language: PlanTranscodingCancelV1LanguageEnum, projectId: number, v?: PlanTranscodingCancelV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Check transcoding tariff before buy
     * @param {PlanTranscodingCheckV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanTranscodingCheckV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planTranscodingCheckV1: (language: PlanTranscodingCheckV1LanguageEnum, projectId: number, v?: PlanTranscodingCheckV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get discount transcoding
     * @param {PlanTranscodingGetDiscountV1LanguageEnum} language Current language
     * @param {PlanTranscodingGetDiscountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planTranscodingGetDiscountV1: (language: PlanTranscodingGetDiscountV1LanguageEnum, v?: PlanTranscodingGetDiscountV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get list of transcoding tariffs
     * @param {PlanTranscodingListV1LanguageEnum} language Current language
     * @param {PlanTranscodingListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planTranscodingListV1: (language: PlanTranscodingListV1LanguageEnum, v?: PlanTranscodingListV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get tariff for project
     * @param {PlanTranscodingTariffV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanTranscodingTariffV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planTranscodingTariffV1: (language: PlanTranscodingTariffV1LanguageEnum, projectId: number, v?: PlanTranscodingTariffV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PlanTranscodingApi - functional programming interface
 * @export
 */
export declare const PlanTranscodingApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Buy transcoder tariff
     * @param {PlanTranscodingBuyV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanTranscodingBuyV1PeriodEnum} period Period
     * @param {number} planTranscodingId Transcoding plan id
     * @param {PlanTranscodingBuyV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [count] Count flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planTranscodingBuyV1(language: PlanTranscodingBuyV1LanguageEnum, projectId: number, period: PlanTranscodingBuyV1PeriodEnum, planTranscodingId: number, v?: PlanTranscodingBuyV1VEnum, count?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Remove after tariff
     * @param {PlanTranscodingCancelV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanTranscodingCancelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planTranscodingCancelV1(language: PlanTranscodingCancelV1LanguageEnum, projectId: number, v?: PlanTranscodingCancelV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Check transcoding tariff before buy
     * @param {PlanTranscodingCheckV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanTranscodingCheckV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planTranscodingCheckV1(language: PlanTranscodingCheckV1LanguageEnum, projectId: number, v?: PlanTranscodingCheckV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanTranscodingCheckResponse>>;
    /**
     *
     * @summary Get discount transcoding
     * @param {PlanTranscodingGetDiscountV1LanguageEnum} language Current language
     * @param {PlanTranscodingGetDiscountV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planTranscodingGetDiscountV1(language: PlanTranscodingGetDiscountV1LanguageEnum, v?: PlanTranscodingGetDiscountV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanTranscodingDiscountResponse>>;
    /**
     *
     * @summary Get list of transcoding tariffs
     * @param {PlanTranscodingListV1LanguageEnum} language Current language
     * @param {PlanTranscodingListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planTranscodingListV1(language: PlanTranscodingListV1LanguageEnum, v?: PlanTranscodingListV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanTranscodingResponseDto>>;
    /**
     *
     * @summary Get tariff for project
     * @param {PlanTranscodingTariffV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PlanTranscodingTariffV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planTranscodingTariffV1(language: PlanTranscodingTariffV1LanguageEnum, projectId: number, v?: PlanTranscodingTariffV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanTranscodingForProject>>;
};
/**
 * PlanTranscodingApi - factory interface
 * @export
 */
export declare const PlanTranscodingApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Buy transcoder tariff
     * @param {PlanTranscodingApiPlanTranscodingBuyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planTranscodingBuyV1(requestParameters: PlanTranscodingApiPlanTranscodingBuyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Remove after tariff
     * @param {PlanTranscodingApiPlanTranscodingCancelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planTranscodingCancelV1(requestParameters: PlanTranscodingApiPlanTranscodingCancelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Check transcoding tariff before buy
     * @param {PlanTranscodingApiPlanTranscodingCheckV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planTranscodingCheckV1(requestParameters: PlanTranscodingApiPlanTranscodingCheckV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingCheckResponse>;
    /**
     *
     * @summary Get discount transcoding
     * @param {PlanTranscodingApiPlanTranscodingGetDiscountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planTranscodingGetDiscountV1(requestParameters: PlanTranscodingApiPlanTranscodingGetDiscountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingDiscountResponse>;
    /**
     *
     * @summary Get list of transcoding tariffs
     * @param {PlanTranscodingApiPlanTranscodingListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planTranscodingListV1(requestParameters: PlanTranscodingApiPlanTranscodingListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingResponseDto>;
    /**
     *
     * @summary Get tariff for project
     * @param {PlanTranscodingApiPlanTranscodingTariffV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planTranscodingTariffV1(requestParameters: PlanTranscodingApiPlanTranscodingTariffV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingForProject>;
};
/**
 * PlanTranscodingApi - interface
 * @export
 * @interface PlanTranscodingApi
 */
export interface PlanTranscodingApiInterface {
    /**
     *
     * @summary Buy transcoder tariff
     * @param {PlanTranscodingApiPlanTranscodingBuyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingBuyV1(requestParameters: PlanTranscodingApiPlanTranscodingBuyV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Remove after tariff
     * @param {PlanTranscodingApiPlanTranscodingCancelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingCancelV1(requestParameters: PlanTranscodingApiPlanTranscodingCancelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Check transcoding tariff before buy
     * @param {PlanTranscodingApiPlanTranscodingCheckV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingCheckV1(requestParameters: PlanTranscodingApiPlanTranscodingCheckV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingCheckResponse>;
    /**
     *
     * @summary Get discount transcoding
     * @param {PlanTranscodingApiPlanTranscodingGetDiscountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingGetDiscountV1(requestParameters: PlanTranscodingApiPlanTranscodingGetDiscountV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingDiscountResponse>;
    /**
     *
     * @summary Get list of transcoding tariffs
     * @param {PlanTranscodingApiPlanTranscodingListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingListV1(requestParameters: PlanTranscodingApiPlanTranscodingListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingResponseDto>;
    /**
     *
     * @summary Get tariff for project
     * @param {PlanTranscodingApiPlanTranscodingTariffV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApiInterface
     */
    planTranscodingTariffV1(requestParameters: PlanTranscodingApiPlanTranscodingTariffV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingForProject>;
}
/**
 * Request parameters for planTranscodingBuyV1 operation in PlanTranscodingApi.
 * @export
 * @interface PlanTranscodingApiPlanTranscodingBuyV1Request
 */
export interface PlanTranscodingApiPlanTranscodingBuyV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanTranscodingApiPlanTranscodingBuyV1
     */
    readonly language: PlanTranscodingBuyV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof PlanTranscodingApiPlanTranscodingBuyV1
     */
    readonly projectId: number;
    /**
     * Period
     * @type {'month' | 'year'}
     * @memberof PlanTranscodingApiPlanTranscodingBuyV1
     */
    readonly period: PlanTranscodingBuyV1PeriodEnum;
    /**
     * Transcoding plan id
     * @type {number}
     * @memberof PlanTranscodingApiPlanTranscodingBuyV1
     */
    readonly planTranscodingId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanTranscodingApiPlanTranscodingBuyV1
     */
    readonly v?: PlanTranscodingBuyV1VEnum;
    /**
     * Count flow
     * @type {number}
     * @memberof PlanTranscodingApiPlanTranscodingBuyV1
     */
    readonly count?: number;
}
/**
 * Request parameters for planTranscodingCancelV1 operation in PlanTranscodingApi.
 * @export
 * @interface PlanTranscodingApiPlanTranscodingCancelV1Request
 */
export interface PlanTranscodingApiPlanTranscodingCancelV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanTranscodingApiPlanTranscodingCancelV1
     */
    readonly language: PlanTranscodingCancelV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof PlanTranscodingApiPlanTranscodingCancelV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanTranscodingApiPlanTranscodingCancelV1
     */
    readonly v?: PlanTranscodingCancelV1VEnum;
}
/**
 * Request parameters for planTranscodingCheckV1 operation in PlanTranscodingApi.
 * @export
 * @interface PlanTranscodingApiPlanTranscodingCheckV1Request
 */
export interface PlanTranscodingApiPlanTranscodingCheckV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanTranscodingApiPlanTranscodingCheckV1
     */
    readonly language: PlanTranscodingCheckV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof PlanTranscodingApiPlanTranscodingCheckV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanTranscodingApiPlanTranscodingCheckV1
     */
    readonly v?: PlanTranscodingCheckV1VEnum;
}
/**
 * Request parameters for planTranscodingGetDiscountV1 operation in PlanTranscodingApi.
 * @export
 * @interface PlanTranscodingApiPlanTranscodingGetDiscountV1Request
 */
export interface PlanTranscodingApiPlanTranscodingGetDiscountV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanTranscodingApiPlanTranscodingGetDiscountV1
     */
    readonly language: PlanTranscodingGetDiscountV1LanguageEnum;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanTranscodingApiPlanTranscodingGetDiscountV1
     */
    readonly v?: PlanTranscodingGetDiscountV1VEnum;
}
/**
 * Request parameters for planTranscodingListV1 operation in PlanTranscodingApi.
 * @export
 * @interface PlanTranscodingApiPlanTranscodingListV1Request
 */
export interface PlanTranscodingApiPlanTranscodingListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanTranscodingApiPlanTranscodingListV1
     */
    readonly language: PlanTranscodingListV1LanguageEnum;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanTranscodingApiPlanTranscodingListV1
     */
    readonly v?: PlanTranscodingListV1VEnum;
}
/**
 * Request parameters for planTranscodingTariffV1 operation in PlanTranscodingApi.
 * @export
 * @interface PlanTranscodingApiPlanTranscodingTariffV1Request
 */
export interface PlanTranscodingApiPlanTranscodingTariffV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PlanTranscodingApiPlanTranscodingTariffV1
     */
    readonly language: PlanTranscodingTariffV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof PlanTranscodingApiPlanTranscodingTariffV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PlanTranscodingApiPlanTranscodingTariffV1
     */
    readonly v?: PlanTranscodingTariffV1VEnum;
}
/**
 * PlanTranscodingApi - object-oriented interface
 * @export
 * @class PlanTranscodingApi
 * @extends {BaseAPI}
 */
export declare class PlanTranscodingApi extends BaseAPI implements PlanTranscodingApiInterface {
    /**
     *
     * @summary Buy transcoder tariff
     * @param {PlanTranscodingApiPlanTranscodingBuyV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    planTranscodingBuyV1(requestParameters: PlanTranscodingApiPlanTranscodingBuyV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Remove after tariff
     * @param {PlanTranscodingApiPlanTranscodingCancelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    planTranscodingCancelV1(requestParameters: PlanTranscodingApiPlanTranscodingCancelV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Check transcoding tariff before buy
     * @param {PlanTranscodingApiPlanTranscodingCheckV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    planTranscodingCheckV1(requestParameters: PlanTranscodingApiPlanTranscodingCheckV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanTranscodingCheckResponse, any>>;
    /**
     *
     * @summary Get discount transcoding
     * @param {PlanTranscodingApiPlanTranscodingGetDiscountV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    planTranscodingGetDiscountV1(requestParameters: PlanTranscodingApiPlanTranscodingGetDiscountV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanTranscodingDiscountResponse, any>>;
    /**
     *
     * @summary Get list of transcoding tariffs
     * @param {PlanTranscodingApiPlanTranscodingListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    planTranscodingListV1(requestParameters: PlanTranscodingApiPlanTranscodingListV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanTranscodingResponseDto, any>>;
    /**
     *
     * @summary Get tariff for project
     * @param {PlanTranscodingApiPlanTranscodingTariffV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    planTranscodingTariffV1(requestParameters: PlanTranscodingApiPlanTranscodingTariffV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanTranscodingForProject, any>>;
}
/**
 * @export
 */
export declare const PlanTranscodingBuyV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanTranscodingBuyV1LanguageEnum = typeof PlanTranscodingBuyV1LanguageEnum[keyof typeof PlanTranscodingBuyV1LanguageEnum];
/**
 * @export
 */
export declare const PlanTranscodingBuyV1PeriodEnum: {
    readonly Month: "month";
    readonly Year: "year";
};
export type PlanTranscodingBuyV1PeriodEnum = typeof PlanTranscodingBuyV1PeriodEnum[keyof typeof PlanTranscodingBuyV1PeriodEnum];
/**
 * @export
 */
export declare const PlanTranscodingBuyV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanTranscodingBuyV1VEnum = typeof PlanTranscodingBuyV1VEnum[keyof typeof PlanTranscodingBuyV1VEnum];
/**
 * @export
 */
export declare const PlanTranscodingCancelV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanTranscodingCancelV1LanguageEnum = typeof PlanTranscodingCancelV1LanguageEnum[keyof typeof PlanTranscodingCancelV1LanguageEnum];
/**
 * @export
 */
export declare const PlanTranscodingCancelV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanTranscodingCancelV1VEnum = typeof PlanTranscodingCancelV1VEnum[keyof typeof PlanTranscodingCancelV1VEnum];
/**
 * @export
 */
export declare const PlanTranscodingCheckV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanTranscodingCheckV1LanguageEnum = typeof PlanTranscodingCheckV1LanguageEnum[keyof typeof PlanTranscodingCheckV1LanguageEnum];
/**
 * @export
 */
export declare const PlanTranscodingCheckV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanTranscodingCheckV1VEnum = typeof PlanTranscodingCheckV1VEnum[keyof typeof PlanTranscodingCheckV1VEnum];
/**
 * @export
 */
export declare const PlanTranscodingGetDiscountV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanTranscodingGetDiscountV1LanguageEnum = typeof PlanTranscodingGetDiscountV1LanguageEnum[keyof typeof PlanTranscodingGetDiscountV1LanguageEnum];
/**
 * @export
 */
export declare const PlanTranscodingGetDiscountV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanTranscodingGetDiscountV1VEnum = typeof PlanTranscodingGetDiscountV1VEnum[keyof typeof PlanTranscodingGetDiscountV1VEnum];
/**
 * @export
 */
export declare const PlanTranscodingListV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanTranscodingListV1LanguageEnum = typeof PlanTranscodingListV1LanguageEnum[keyof typeof PlanTranscodingListV1LanguageEnum];
/**
 * @export
 */
export declare const PlanTranscodingListV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanTranscodingListV1VEnum = typeof PlanTranscodingListV1VEnum[keyof typeof PlanTranscodingListV1VEnum];
/**
 * @export
 */
export declare const PlanTranscodingTariffV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PlanTranscodingTariffV1LanguageEnum = typeof PlanTranscodingTariffV1LanguageEnum[keyof typeof PlanTranscodingTariffV1LanguageEnum];
/**
 * @export
 */
export declare const PlanTranscodingTariffV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PlanTranscodingTariffV1VEnum = typeof PlanTranscodingTariffV1VEnum[keyof typeof PlanTranscodingTariffV1VEnum];
//# sourceMappingURL=plan-transcoding-api.d.ts.map