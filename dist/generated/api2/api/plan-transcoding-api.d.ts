/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { PlanTranscodingCheckResponse } from '../models';
import type { PlanTranscodingDiscountResponse } from '../models';
import type { PlanTranscodingForProject } from '../models';
import type { PlanTranscodingResponseDto } from '../models';
import type { SuccessResponse } from '../models';
/**
 * PlanTranscodingApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Buy transcoder tariff
     * @param {buy1VEnum} v Version
     * @param {buy1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {buy1PeriodEnum} period Period
     * @param {number} planTranscodingId Transcoding plan id
     * @param {number} [count] Count flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buy1: (v: buy1VEnum, language: buy1LanguageEnum, projectId: number, period: buy1PeriodEnum, planTranscodingId: number, count?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove after tariff
     * @param {cancel1VEnum} v Version
     * @param {cancel1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancel1: (v: cancel1VEnum, language: cancel1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Check transcoding tariff before buy
     * @param {check1VEnum} v Version
     * @param {check1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    check1: (v: check1VEnum, language: check1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get discount transcoding
     * @param {getDiscount1VEnum} v Version
     * @param {getDiscount1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiscount1: (v: getDiscount1VEnum, language: getDiscount1LanguageEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get list of transcoding tariffs
     * @param {list1VEnum} v Version
     * @param {list1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1: (v: list1VEnum, language: list1LanguageEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get tariff for project
     * @param {tariff1VEnum} v Version
     * @param {tariff1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tariff1: (v: tariff1VEnum, language: tariff1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PlanTranscodingApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Buy transcoder tariff
     * @param {buy1VEnum} v Version
     * @param {buy1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {buy1PeriodEnum} period Period
     * @param {number} planTranscodingId Transcoding plan id
     * @param {number} [count] Count flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buy1(v: buy1VEnum, language: buy1LanguageEnum, projectId: number, period: buy1PeriodEnum, planTranscodingId: number, count?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Remove after tariff
     * @param {cancel1VEnum} v Version
     * @param {cancel1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancel1(v: cancel1VEnum, language: cancel1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Check transcoding tariff before buy
     * @param {check1VEnum} v Version
     * @param {check1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    check1(v: check1VEnum, language: check1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanTranscodingCheckResponse>>;
    /**
     *
     * @summary Get discount transcoding
     * @param {getDiscount1VEnum} v Version
     * @param {getDiscount1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiscount1(v: getDiscount1VEnum, language: getDiscount1LanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanTranscodingDiscountResponse>>;
    /**
     *
     * @summary Get list of transcoding tariffs
     * @param {list1VEnum} v Version
     * @param {list1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(v: list1VEnum, language: list1LanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanTranscodingResponseDto>>;
    /**
     *
     * @summary Get tariff for project
     * @param {tariff1VEnum} v Version
     * @param {tariff1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tariff1(v: tariff1VEnum, language: tariff1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanTranscodingForProject>>;
};
/**
 * PlanTranscodingApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Buy transcoder tariff
     * @param {buy1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buy1(requestParameters: buy1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Remove after tariff
     * @param {cancel1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancel1(requestParameters: cancel1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Check transcoding tariff before buy
     * @param {check1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    check1(requestParameters: check1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingCheckResponse>;
    /**
     *
     * @summary Get discount transcoding
     * @param {getDiscount1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiscount1(requestParameters: getDiscount1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingDiscountResponse>;
    /**
     *
     * @summary Get list of transcoding tariffs
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingResponseDto>;
    /**
     *
     * @summary Get tariff for project
     * @param {tariff1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tariff1(requestParameters: tariff1Request, options?: RawAxiosRequestConfig): AxiosPromise<PlanTranscodingForProject>;
};
/**
 * Request parameters for buy1 operation in PlanTranscodingApi.
 * @export
 * @interface buy1Request
 */
export interface buy1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof buy1
     */
    readonly v?: buy1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof buy1
     */
    readonly language: buy1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof buy1
     */
    readonly projectId: number;
    /**
     * Period
     * @type {'month' | 'year'}
     * @memberof buy1
     */
    readonly period: buy1PeriodEnum;
    /**
     * Transcoding plan id
     * @type {number}
     * @memberof buy1
     */
    readonly planTranscodingId: number;
    /**
     * Count flow
     * @type {number}
     * @memberof buy1
     */
    readonly count?: number;
}
/**
 * Request parameters for cancel1 operation in PlanTranscodingApi.
 * @export
 * @interface cancel1Request
 */
export interface cancel1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof cancel1
     */
    readonly v?: cancel1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof cancel1
     */
    readonly language: cancel1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof cancel1
     */
    readonly projectId: number;
}
/**
 * Request parameters for check1 operation in PlanTranscodingApi.
 * @export
 * @interface check1Request
 */
export interface check1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof check1
     */
    readonly v?: check1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof check1
     */
    readonly language: check1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof check1
     */
    readonly projectId: number;
}
/**
 * Request parameters for getDiscount1 operation in PlanTranscodingApi.
 * @export
 * @interface getDiscount1Request
 */
export interface getDiscount1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getDiscount1
     */
    readonly v?: getDiscount1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getDiscount1
     */
    readonly language: getDiscount1LanguageEnum;
}
/**
 * Request parameters for list1 operation in PlanTranscodingApi.
 * @export
 * @interface list1Request
 */
export interface list1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof list1
     */
    readonly v?: list1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof list1
     */
    readonly language: list1LanguageEnum;
}
/**
 * Request parameters for tariff1 operation in PlanTranscodingApi.
 * @export
 * @interface tariff1Request
 */
export interface tariff1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof tariff1
     */
    readonly v?: tariff1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof tariff1
     */
    readonly language: tariff1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof tariff1
     */
    readonly projectId: number;
}
/**
 * PlanTranscodingApi - object-oriented interface
 * @export
 * @class PlanTranscodingApi
 * @extends {BaseAPI}
 */
export declare class PlanTranscodingApi extends BaseAPI {
    /**
     *
     * @summary Buy transcoder tariff
     * @param {buy1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    buy1(requestParameters: buy1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Remove after tariff
     * @param {cancel1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    cancel1(requestParameters: cancel1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Check transcoding tariff before buy
     * @param {check1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    check1(requestParameters: check1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanTranscodingCheckResponse, any>>;
    /**
     *
     * @summary Get discount transcoding
     * @param {getDiscount1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    getDiscount1(requestParameters: getDiscount1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanTranscodingDiscountResponse, any>>;
    /**
     *
     * @summary Get list of transcoding tariffs
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanTranscodingResponseDto, any>>;
    /**
     *
     * @summary Get tariff for project
     * @param {tariff1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    tariff1(requestParameters: tariff1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanTranscodingForProject, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum buy1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum buy1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum buy1PeriodEnum {
    month = "month",
    year = "year"
}
/**
  * @export
  * @enum {string}
  */
export declare enum cancel1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum cancel1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum check1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum check1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getDiscount1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getDiscount1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum list1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum list1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum tariff1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum tariff1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=plan-transcoding-api.d.ts.map