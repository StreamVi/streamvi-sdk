/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { SiteNotifyUserResponse } from '../models';
import type { SiteScreenNotifyUserResponse } from '../models';
import type { SiteSetNotifyUserRequest } from '../models';
import type { SuccessResponse } from '../models';
/**
 * NotifyUserApi - axios parameter creator
 * @export
 */
export declare const NotifyUserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete mobile token from user
     * @param {NotifyUserDelMobileTokenV1LanguageEnum} language Current language
     * @param {string} token Token in mobile app
     * @param {NotifyUserDelMobileTokenV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifyUserDelMobileTokenV1: (language: NotifyUserDelMobileTokenV1LanguageEnum, token: string, v?: NotifyUserDelMobileTokenV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get user screen notify
     * @param {NotifyUserGetScreenV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {NotifyUserGetScreenV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifyUserGetScreenV1: (language: NotifyUserGetScreenV1LanguageEnum, projectId: number, v?: NotifyUserGetScreenV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get user notify settings
     * @param {number} projectId Project id
     * @param {NotifyUserGetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifyUserGetV1: (projectId: number, v?: NotifyUserGetV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove user screen notify
     * @param {number} projectId Project id
     * @param {NotifyUserRemoveScreenV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifyUserRemoveScreenV1: (projectId: number, v?: NotifyUserRemoveScreenV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set user notify settings
     * @param {SiteSetNotifyUserRequest} siteSetNotifyUserRequest Set user notify settings
     * @param {NotifyUserSetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifyUserSetV1: (siteSetNotifyUserRequest: SiteSetNotifyUserRequest, v?: NotifyUserSetV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * NotifyUserApi - functional programming interface
 * @export
 */
export declare const NotifyUserApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete mobile token from user
     * @param {NotifyUserDelMobileTokenV1LanguageEnum} language Current language
     * @param {string} token Token in mobile app
     * @param {NotifyUserDelMobileTokenV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifyUserDelMobileTokenV1(language: NotifyUserDelMobileTokenV1LanguageEnum, token: string, v?: NotifyUserDelMobileTokenV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Get user screen notify
     * @param {NotifyUserGetScreenV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {NotifyUserGetScreenV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifyUserGetScreenV1(language: NotifyUserGetScreenV1LanguageEnum, projectId: number, v?: NotifyUserGetScreenV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteScreenNotifyUserResponse>>;
    /**
     *
     * @summary Get user notify settings
     * @param {number} projectId Project id
     * @param {NotifyUserGetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifyUserGetV1(projectId: number, v?: NotifyUserGetV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteNotifyUserResponse>>;
    /**
     *
     * @summary Remove user screen notify
     * @param {number} projectId Project id
     * @param {NotifyUserRemoveScreenV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifyUserRemoveScreenV1(projectId: number, v?: NotifyUserRemoveScreenV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Set user notify settings
     * @param {SiteSetNotifyUserRequest} siteSetNotifyUserRequest Set user notify settings
     * @param {NotifyUserSetV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifyUserSetV1(siteSetNotifyUserRequest: SiteSetNotifyUserRequest, v?: NotifyUserSetV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
};
/**
 * NotifyUserApi - factory interface
 * @export
 */
export declare const NotifyUserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Delete mobile token from user
     * @param {NotifyUserApiNotifyUserDelMobileTokenV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifyUserDelMobileTokenV1(requestParameters: NotifyUserApiNotifyUserDelMobileTokenV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get user screen notify
     * @param {NotifyUserApiNotifyUserGetScreenV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifyUserGetScreenV1(requestParameters: NotifyUserApiNotifyUserGetScreenV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteScreenNotifyUserResponse>;
    /**
     *
     * @summary Get user notify settings
     * @param {NotifyUserApiNotifyUserGetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifyUserGetV1(requestParameters: NotifyUserApiNotifyUserGetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteNotifyUserResponse>;
    /**
     *
     * @summary Remove user screen notify
     * @param {NotifyUserApiNotifyUserRemoveScreenV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifyUserRemoveScreenV1(requestParameters: NotifyUserApiNotifyUserRemoveScreenV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Set user notify settings
     * @param {NotifyUserApiNotifyUserSetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifyUserSetV1(requestParameters: NotifyUserApiNotifyUserSetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
};
/**
 * NotifyUserApi - interface
 * @export
 * @interface NotifyUserApi
 */
export interface NotifyUserApiInterface {
    /**
     *
     * @summary Delete mobile token from user
     * @param {NotifyUserApiNotifyUserDelMobileTokenV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApiInterface
     */
    notifyUserDelMobileTokenV1(requestParameters: NotifyUserApiNotifyUserDelMobileTokenV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get user screen notify
     * @param {NotifyUserApiNotifyUserGetScreenV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApiInterface
     */
    notifyUserGetScreenV1(requestParameters: NotifyUserApiNotifyUserGetScreenV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteScreenNotifyUserResponse>;
    /**
     *
     * @summary Get user notify settings
     * @param {NotifyUserApiNotifyUserGetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApiInterface
     */
    notifyUserGetV1(requestParameters: NotifyUserApiNotifyUserGetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteNotifyUserResponse>;
    /**
     *
     * @summary Remove user screen notify
     * @param {NotifyUserApiNotifyUserRemoveScreenV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApiInterface
     */
    notifyUserRemoveScreenV1(requestParameters: NotifyUserApiNotifyUserRemoveScreenV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Set user notify settings
     * @param {NotifyUserApiNotifyUserSetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApiInterface
     */
    notifyUserSetV1(requestParameters: NotifyUserApiNotifyUserSetV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
}
/**
 * Request parameters for notifyUserDelMobileTokenV1 operation in NotifyUserApi.
 * @export
 * @interface NotifyUserApiNotifyUserDelMobileTokenV1Request
 */
export interface NotifyUserApiNotifyUserDelMobileTokenV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof NotifyUserApiNotifyUserDelMobileTokenV1
     */
    readonly language: NotifyUserDelMobileTokenV1LanguageEnum;
    /**
     * Token in mobile app
     * @type {string}
     * @memberof NotifyUserApiNotifyUserDelMobileTokenV1
     */
    readonly token: string;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof NotifyUserApiNotifyUserDelMobileTokenV1
     */
    readonly v?: NotifyUserDelMobileTokenV1VEnum;
}
/**
 * Request parameters for notifyUserGetScreenV1 operation in NotifyUserApi.
 * @export
 * @interface NotifyUserApiNotifyUserGetScreenV1Request
 */
export interface NotifyUserApiNotifyUserGetScreenV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof NotifyUserApiNotifyUserGetScreenV1
     */
    readonly language: NotifyUserGetScreenV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof NotifyUserApiNotifyUserGetScreenV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof NotifyUserApiNotifyUserGetScreenV1
     */
    readonly v?: NotifyUserGetScreenV1VEnum;
}
/**
 * Request parameters for notifyUserGetV1 operation in NotifyUserApi.
 * @export
 * @interface NotifyUserApiNotifyUserGetV1Request
 */
export interface NotifyUserApiNotifyUserGetV1Request {
    /**
     * Project id
     * @type {number}
     * @memberof NotifyUserApiNotifyUserGetV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1'}
     * @memberof NotifyUserApiNotifyUserGetV1
     */
    readonly v?: NotifyUserGetV1VEnum;
}
/**
 * Request parameters for notifyUserRemoveScreenV1 operation in NotifyUserApi.
 * @export
 * @interface NotifyUserApiNotifyUserRemoveScreenV1Request
 */
export interface NotifyUserApiNotifyUserRemoveScreenV1Request {
    /**
     * Project id
     * @type {number}
     * @memberof NotifyUserApiNotifyUserRemoveScreenV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1'}
     * @memberof NotifyUserApiNotifyUserRemoveScreenV1
     */
    readonly v?: NotifyUserRemoveScreenV1VEnum;
}
/**
 * Request parameters for notifyUserSetV1 operation in NotifyUserApi.
 * @export
 * @interface NotifyUserApiNotifyUserSetV1Request
 */
export interface NotifyUserApiNotifyUserSetV1Request {
    /**
     * Set user notify settings
     * @type {SiteSetNotifyUserRequest}
     * @memberof NotifyUserApiNotifyUserSetV1
     */
    readonly siteSetNotifyUserRequest: SiteSetNotifyUserRequest;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1'}
     * @memberof NotifyUserApiNotifyUserSetV1
     */
    readonly v?: NotifyUserSetV1VEnum;
}
/**
 * NotifyUserApi - object-oriented interface
 * @export
 * @class NotifyUserApi
 * @extends {BaseAPI}
 */
export declare class NotifyUserApi extends BaseAPI implements NotifyUserApiInterface {
    /**
     *
     * @summary Delete mobile token from user
     * @param {NotifyUserApiNotifyUserDelMobileTokenV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    notifyUserDelMobileTokenV1(requestParameters: NotifyUserApiNotifyUserDelMobileTokenV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Get user screen notify
     * @param {NotifyUserApiNotifyUserGetScreenV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    notifyUserGetScreenV1(requestParameters: NotifyUserApiNotifyUserGetScreenV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteScreenNotifyUserResponse, any>>;
    /**
     *
     * @summary Get user notify settings
     * @param {NotifyUserApiNotifyUserGetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    notifyUserGetV1(requestParameters: NotifyUserApiNotifyUserGetV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteNotifyUserResponse, any>>;
    /**
     *
     * @summary Remove user screen notify
     * @param {NotifyUserApiNotifyUserRemoveScreenV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    notifyUserRemoveScreenV1(requestParameters: NotifyUserApiNotifyUserRemoveScreenV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Set user notify settings
     * @param {NotifyUserApiNotifyUserSetV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    notifyUserSetV1(requestParameters: NotifyUserApiNotifyUserSetV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
}
/**
 * @export
 */
export declare const NotifyUserDelMobileTokenV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type NotifyUserDelMobileTokenV1LanguageEnum = typeof NotifyUserDelMobileTokenV1LanguageEnum[keyof typeof NotifyUserDelMobileTokenV1LanguageEnum];
/**
 * @export
 */
export declare const NotifyUserDelMobileTokenV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type NotifyUserDelMobileTokenV1VEnum = typeof NotifyUserDelMobileTokenV1VEnum[keyof typeof NotifyUserDelMobileTokenV1VEnum];
/**
 * @export
 */
export declare const NotifyUserGetScreenV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type NotifyUserGetScreenV1LanguageEnum = typeof NotifyUserGetScreenV1LanguageEnum[keyof typeof NotifyUserGetScreenV1LanguageEnum];
/**
 * @export
 */
export declare const NotifyUserGetScreenV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type NotifyUserGetScreenV1VEnum = typeof NotifyUserGetScreenV1VEnum[keyof typeof NotifyUserGetScreenV1VEnum];
/**
 * @export
 */
export declare const NotifyUserGetV1VEnum: {
    readonly _1: "1";
};
export type NotifyUserGetV1VEnum = typeof NotifyUserGetV1VEnum[keyof typeof NotifyUserGetV1VEnum];
/**
 * @export
 */
export declare const NotifyUserRemoveScreenV1VEnum: {
    readonly _1: "1";
};
export type NotifyUserRemoveScreenV1VEnum = typeof NotifyUserRemoveScreenV1VEnum[keyof typeof NotifyUserRemoveScreenV1VEnum];
/**
 * @export
 */
export declare const NotifyUserSetV1VEnum: {
    readonly _1: "1";
};
export type NotifyUserSetV1VEnum = typeof NotifyUserSetV1VEnum[keyof typeof NotifyUserSetV1VEnum];
//# sourceMappingURL=notify-user-api.d.ts.map