/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { SiteNotifyUserResponse } from '../models';
import type { SiteScreenNotifyUserResponse } from '../models';
import type { SiteSetNotifyUserRequest } from '../models';
import type { SuccessResponse } from '../models';
/**
 * NotifyUserApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete mobile token from user
     * @param {delMobileToken1VEnum} v Version
     * @param {delMobileToken1LanguageEnum} language Current language
     * @param {string} token Token in mobile app
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delMobileToken1: (v: delMobileToken1VEnum, language: delMobileToken1LanguageEnum, token: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get user notify settings
     * @param {get1VEnum} v Version
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get1: (v: get1VEnum, projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get user screen notify
     * @param {getScreen1VEnum} v Version
     * @param {getScreen1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreen1: (v: getScreen1VEnum, language: getScreen1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove user screen notify
     * @param {removeScreen1VEnum} v Version
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeScreen1: (v: removeScreen1VEnum, projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set user notify settings
     * @param {set1VEnum} v Version
     * @param {SiteSetNotifyUserRequest} siteSetNotifyUserRequest Set user notify settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    set1: (v: set1VEnum, siteSetNotifyUserRequest: SiteSetNotifyUserRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * NotifyUserApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete mobile token from user
     * @param {delMobileToken1VEnum} v Version
     * @param {delMobileToken1LanguageEnum} language Current language
     * @param {string} token Token in mobile app
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delMobileToken1(v: delMobileToken1VEnum, language: delMobileToken1LanguageEnum, token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Get user notify settings
     * @param {get1VEnum} v Version
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get1(v: get1VEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteNotifyUserResponse>>;
    /**
     *
     * @summary Get user screen notify
     * @param {getScreen1VEnum} v Version
     * @param {getScreen1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreen1(v: getScreen1VEnum, language: getScreen1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteScreenNotifyUserResponse>>;
    /**
     *
     * @summary Remove user screen notify
     * @param {removeScreen1VEnum} v Version
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeScreen1(v: removeScreen1VEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Set user notify settings
     * @param {set1VEnum} v Version
     * @param {SiteSetNotifyUserRequest} siteSetNotifyUserRequest Set user notify settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    set1(v: set1VEnum, siteSetNotifyUserRequest: SiteSetNotifyUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
};
/**
 * NotifyUserApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Delete mobile token from user
     * @param {delMobileToken1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delMobileToken1(requestParameters: delMobileToken1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get user notify settings
     * @param {get1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get1(requestParameters: get1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteNotifyUserResponse>;
    /**
     *
     * @summary Get user screen notify
     * @param {getScreen1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreen1(requestParameters: getScreen1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteScreenNotifyUserResponse>;
    /**
     *
     * @summary Remove user screen notify
     * @param {removeScreen1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeScreen1(requestParameters: removeScreen1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Set user notify settings
     * @param {set1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    set1(requestParameters: set1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
};
/**
 * Request parameters for delMobileToken1 operation in NotifyUserApi.
 * @export
 * @interface delMobileToken1Request
 */
export interface delMobileToken1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof delMobileToken1
     */
    readonly v?: delMobileToken1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof delMobileToken1
     */
    readonly language: delMobileToken1LanguageEnum;
    /**
     * Token in mobile app
     * @type {string}
     * @memberof delMobileToken1
     */
    readonly token: string;
}
/**
 * Request parameters for get1 operation in NotifyUserApi.
 * @export
 * @interface get1Request
 */
export interface get1Request {
    /**
     * Version
     * @type {'1'}
     * @memberof get1
     */
    readonly v?: get1VEnum;
    /**
     * Project id
     * @type {number}
     * @memberof get1
     */
    readonly projectId: number;
}
/**
 * Request parameters for getScreen1 operation in NotifyUserApi.
 * @export
 * @interface getScreen1Request
 */
export interface getScreen1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getScreen1
     */
    readonly v?: getScreen1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getScreen1
     */
    readonly language: getScreen1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof getScreen1
     */
    readonly projectId: number;
}
/**
 * Request parameters for removeScreen1 operation in NotifyUserApi.
 * @export
 * @interface removeScreen1Request
 */
export interface removeScreen1Request {
    /**
     * Version
     * @type {'1'}
     * @memberof removeScreen1
     */
    readonly v?: removeScreen1VEnum;
    /**
     * Project id
     * @type {number}
     * @memberof removeScreen1
     */
    readonly projectId: number;
}
/**
 * Request parameters for set1 operation in NotifyUserApi.
 * @export
 * @interface set1Request
 */
export interface set1Request {
    /**
     * Version
     * @type {'1'}
     * @memberof set1
     */
    readonly v?: set1VEnum;
    /**
     * Set user notify settings
     * @type {SiteSetNotifyUserRequest}
     * @memberof set1
     */
    readonly siteSetNotifyUserRequest: SiteSetNotifyUserRequest;
}
/**
 * NotifyUserApi - object-oriented interface
 * @export
 * @class NotifyUserApi
 * @extends {BaseAPI}
 */
export declare class NotifyUserApi extends BaseAPI {
    /**
     *
     * @summary Delete mobile token from user
     * @param {delMobileToken1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    delMobileToken1(requestParameters: delMobileToken1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Get user notify settings
     * @param {get1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    get1(requestParameters: get1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteNotifyUserResponse, any>>;
    /**
     *
     * @summary Get user screen notify
     * @param {getScreen1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    getScreen1(requestParameters: getScreen1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteScreenNotifyUserResponse, any>>;
    /**
     *
     * @summary Remove user screen notify
     * @param {removeScreen1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    removeScreen1(requestParameters: removeScreen1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Set user notify settings
     * @param {set1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    set1(requestParameters: set1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum delMobileToken1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum delMobileToken1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum get1VEnum {
    _1 = "1"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getScreen1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getScreen1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum removeScreen1VEnum {
    _1 = "1"
}
/**
  * @export
  * @enum {string}
  */
export declare enum set1VEnum {
    _1 = "1"
}
//# sourceMappingURL=notify-user-api.d.ts.map