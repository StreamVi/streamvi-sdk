/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { ListOfPayoutSystemAccountListItemResponse } from '../models';
import type { PayoutCreateRequestBodyDto } from '../models';
import type { SuccessResponse } from '../models';
/**
 * PayoutApi - axios parameter creator
 * @export
 */
export declare const PayoutApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create payout
     * @param {PayoutCreateV1LanguageEnum} language Current language
     * @param {PayoutCreateRequestBodyDto} payoutCreateRequestBodyDto
     * @param {PayoutCreateV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payoutCreateV1: (language: PayoutCreateV1LanguageEnum, payoutCreateRequestBodyDto: PayoutCreateRequestBodyDto, v?: PayoutCreateV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get payout data for create
     * @param {PayoutPrepareV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PayoutPrepareV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payoutPrepareV1: (language: PayoutPrepareV1LanguageEnum, projectId: number, v?: PayoutPrepareV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PayoutApi - functional programming interface
 * @export
 */
export declare const PayoutApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create payout
     * @param {PayoutCreateV1LanguageEnum} language Current language
     * @param {PayoutCreateRequestBodyDto} payoutCreateRequestBodyDto
     * @param {PayoutCreateV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payoutCreateV1(language: PayoutCreateV1LanguageEnum, payoutCreateRequestBodyDto: PayoutCreateRequestBodyDto, v?: PayoutCreateV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Get payout data for create
     * @param {PayoutPrepareV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {PayoutPrepareV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payoutPrepareV1(language: PayoutPrepareV1LanguageEnum, projectId: number, v?: PayoutPrepareV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfPayoutSystemAccountListItemResponse>>;
};
/**
 * PayoutApi - factory interface
 * @export
 */
export declare const PayoutApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create payout
     * @param {PayoutApiPayoutCreateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payoutCreateV1(requestParameters: PayoutApiPayoutCreateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get payout data for create
     * @param {PayoutApiPayoutPrepareV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payoutPrepareV1(requestParameters: PayoutApiPayoutPrepareV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfPayoutSystemAccountListItemResponse>;
};
/**
 * PayoutApi - interface
 * @export
 * @interface PayoutApi
 */
export interface PayoutApiInterface {
    /**
     *
     * @summary Create payout
     * @param {PayoutApiPayoutCreateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApiInterface
     */
    payoutCreateV1(requestParameters: PayoutApiPayoutCreateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get payout data for create
     * @param {PayoutApiPayoutPrepareV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApiInterface
     */
    payoutPrepareV1(requestParameters: PayoutApiPayoutPrepareV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfPayoutSystemAccountListItemResponse>;
}
/**
 * Request parameters for payoutCreateV1 operation in PayoutApi.
 * @export
 * @interface PayoutApiPayoutCreateV1Request
 */
export interface PayoutApiPayoutCreateV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PayoutApiPayoutCreateV1
     */
    readonly language: PayoutCreateV1LanguageEnum;
    /**
     *
     * @type {PayoutCreateRequestBodyDto}
     * @memberof PayoutApiPayoutCreateV1
     */
    readonly payoutCreateRequestBodyDto: PayoutCreateRequestBodyDto;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PayoutApiPayoutCreateV1
     */
    readonly v?: PayoutCreateV1VEnum;
}
/**
 * Request parameters for payoutPrepareV1 operation in PayoutApi.
 * @export
 * @interface PayoutApiPayoutPrepareV1Request
 */
export interface PayoutApiPayoutPrepareV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof PayoutApiPayoutPrepareV1
     */
    readonly language: PayoutPrepareV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof PayoutApiPayoutPrepareV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof PayoutApiPayoutPrepareV1
     */
    readonly v?: PayoutPrepareV1VEnum;
}
/**
 * PayoutApi - object-oriented interface
 * @export
 * @class PayoutApi
 * @extends {BaseAPI}
 */
export declare class PayoutApi extends BaseAPI implements PayoutApiInterface {
    /**
     *
     * @summary Create payout
     * @param {PayoutApiPayoutCreateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApi
     */
    payoutCreateV1(requestParameters: PayoutApiPayoutCreateV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Get payout data for create
     * @param {PayoutApiPayoutPrepareV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApi
     */
    payoutPrepareV1(requestParameters: PayoutApiPayoutPrepareV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").ListResponse, any>>;
}
/**
 * @export
 */
export declare const PayoutCreateV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PayoutCreateV1LanguageEnum = typeof PayoutCreateV1LanguageEnum[keyof typeof PayoutCreateV1LanguageEnum];
/**
 * @export
 */
export declare const PayoutCreateV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PayoutCreateV1VEnum = typeof PayoutCreateV1VEnum[keyof typeof PayoutCreateV1VEnum];
/**
 * @export
 */
export declare const PayoutPrepareV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type PayoutPrepareV1LanguageEnum = typeof PayoutPrepareV1LanguageEnum[keyof typeof PayoutPrepareV1LanguageEnum];
/**
 * @export
 */
export declare const PayoutPrepareV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type PayoutPrepareV1VEnum = typeof PayoutPrepareV1VEnum[keyof typeof PayoutPrepareV1VEnum];
//# sourceMappingURL=payout-api.d.ts.map