/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { ListOfPayoutSystemAccountListItemResponse } from '../models';
import type { PayoutCreateRequestBodyDto } from '../models';
import type { SuccessResponse } from '../models';
/**
 * PayoutApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create payout
     * @param {create1VEnum} v Version
     * @param {create1LanguageEnum} language Current language
     * @param {PayoutCreateRequestBodyDto} payoutCreateRequestBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create1: (v: create1VEnum, language: create1LanguageEnum, payoutCreateRequestBodyDto: PayoutCreateRequestBodyDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get payout data for create
     * @param {prepare1VEnum} v Version
     * @param {prepare1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    prepare1: (v: prepare1VEnum, language: prepare1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PayoutApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create payout
     * @param {create1VEnum} v Version
     * @param {create1LanguageEnum} language Current language
     * @param {PayoutCreateRequestBodyDto} payoutCreateRequestBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create1(v: create1VEnum, language: create1LanguageEnum, payoutCreateRequestBodyDto: PayoutCreateRequestBodyDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Get payout data for create
     * @param {prepare1VEnum} v Version
     * @param {prepare1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    prepare1(v: prepare1VEnum, language: prepare1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfPayoutSystemAccountListItemResponse>>;
};
/**
 * PayoutApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create payout
     * @param {create1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create1(requestParameters: create1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get payout data for create
     * @param {prepare1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    prepare1(requestParameters: prepare1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfPayoutSystemAccountListItemResponse>;
};
/**
 * Request parameters for create1 operation in PayoutApi.
 * @export
 * @interface create1Request
 */
export interface create1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof create1
     */
    readonly v?: create1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof create1
     */
    readonly language: create1LanguageEnum;
    /**
     *
     * @type {PayoutCreateRequestBodyDto}
     * @memberof create1
     */
    readonly payoutCreateRequestBodyDto: PayoutCreateRequestBodyDto;
}
/**
 * Request parameters for prepare1 operation in PayoutApi.
 * @export
 * @interface prepare1Request
 */
export interface prepare1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof prepare1
     */
    readonly v?: prepare1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof prepare1
     */
    readonly language: prepare1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof prepare1
     */
    readonly projectId: number;
}
/**
 * PayoutApi - object-oriented interface
 * @export
 * @class PayoutApi
 * @extends {BaseAPI}
 */
export declare class PayoutApi extends BaseAPI {
    /**
     *
     * @summary Create payout
     * @param {create1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApi
     */
    create1(requestParameters: create1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Get payout data for create
     * @param {prepare1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApi
     */
    prepare1(requestParameters: prepare1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").ListResponse, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum create1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum create1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum prepare1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum prepare1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=payout-api.d.ts.map