/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { ListOfPlaylistItemResponse } from '../models';
import type { ListOfSitePlannedResponse } from '../models';
import type { SiteChannelStatusResponse } from '../models';
import type { SitePlannedResponse } from '../models';
import type { SiteSetNameRequest } from '../models';
import type { SiteSetPlannedRequest } from '../models';
import type { SiteSetTranscoderRequest } from '../models';
import type { SiteSetUrlRequest } from '../models';
import type { SiteTelegramChatPostsItem } from '../models';
import type { SiteTelegramChatPostsResponseDto } from '../models';
import type { SiteTelegramSetSettingsRequestDto } from '../models';
import type { SiteUpdateChatTelegramRequest } from '../models';
import type { SiteUpdateOptionsOkRequest } from '../models';
import type { SiteUpdateOptionsTrovoRequest } from '../models';
import type { SiteUpdateOptionsTwitchRequest } from '../models';
import type { SiteUpdateOptionsVkRequest } from '../models';
import type { SiteUpdateOptionsVkVideoLiveRequest } from '../models';
import type { SiteUpdateOptionsYoutubeRequest } from '../models';
import type { SuccessResponse } from '../models';
import type { TelegramInitConnectResponseDto } from '../models';
import type { TelegramSettingsResponseDto } from '../models';
/**
 * ChannelSettingsApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get telegram settings
     * @param {getTelegramSetting1VEnum} v Version
     * @param {getTelegramSetting1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTelegramSetting1: (v: getTelegramSetting1VEnum, language: getTelegramSetting1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get code for connected chat
     * @param {initTelegramChatConnect1VEnum} v Version
     * @param {initTelegramChatConnect1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initTelegramChatConnect1: (v: initTelegramChatConnect1VEnum, language: initTelegramChatConnect1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Disconnect telegram chat
     * @param {removeTelegramChat1VEnum} v Version
     * @param {removeTelegramChat1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeTelegramChat1: (v: removeTelegramChat1VEnum, language: removeTelegramChat1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set telegram settings
     * @param {setTelegramSetting1VEnum} v Version
     * @param {setTelegramSetting1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {SiteTelegramSetSettingsRequestDto} siteTelegramSetSettingsRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setTelegramSetting1: (v: setTelegramSetting1VEnum, language: setTelegramSetting1LanguageEnum, projectId: number, channelId: number, siteTelegramSetSettingsRequestDto: SiteTelegramSetSettingsRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get telegram post list
     * @param {telegramPosts1VEnum} v Version
     * @param {telegramPosts1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    telegramPosts1: (v: telegramPosts1VEnum, language: telegramPosts1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Optional settings for telegram
     * @param {SiteUpdateChatTelegramRequest} siteUpdateChatTelegramRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsTelegram1: (siteUpdateChatTelegramRequest: SiteUpdateChatTelegramRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get planned list
     * @param {getPlanned1VEnum} v Version
     * @param {getPlanned1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlanned1: (v: getPlanned1VEnum, language: getPlanned1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get playlists from the platform
     * @param {getPlayList1VEnum} v Version
     * @param {getPlayList1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlayList1: (v: getPlayList1VEnum, language: getPlayList1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Optional settings for ok. Depends on the tariff.
     * @param {SiteUpdateOptionsOkRequest} siteUpdateOptionsOkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsOk1: (siteUpdateOptionsOkRequest: SiteUpdateOptionsOkRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Optional settings for trovo. Depends on the tariff.
     * @param {SiteUpdateOptionsTrovoRequest} siteUpdateOptionsTrovoRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsTrovo1: (siteUpdateOptionsTrovoRequest: SiteUpdateOptionsTrovoRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Optional settings for twitch. Depends on the tariff.
     * @param {SiteUpdateOptionsTwitchRequest} siteUpdateOptionsTwitchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsTwitch1: (siteUpdateOptionsTwitchRequest: SiteUpdateOptionsTwitchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Optional settings for vk. Depends on the tariff.
     * @param {SiteUpdateOptionsVkRequest} siteUpdateOptionsVkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsVk1: (siteUpdateOptionsVkRequest: SiteUpdateOptionsVkRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Optional settings for vk video live. Depends on the tariff.
     * @param {SiteUpdateOptionsVkVideoLiveRequest} siteUpdateOptionsVkVideoLiveRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsVkVideoLive1: (siteUpdateOptionsVkVideoLiveRequest: SiteUpdateOptionsVkVideoLiveRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Optional settings for youtube. Depends on the tariff.
     * @param {SiteUpdateOptionsYoutubeRequest} siteUpdateOptionsYoutubeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsYoutube1: (siteUpdateOptionsYoutubeRequest: SiteUpdateOptionsYoutubeRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set planned id. Depends on the tariff.
     * @param {SiteSetPlannedRequest} siteSetPlannedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePlanned1: (siteSetPlannedRequest: SiteSetPlannedRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get status platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatus1: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set name from custom channel. Global settings.
     * @param {SiteSetNameRequest} siteSetNameRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setName1: (siteSetNameRequest: SiteSetNameRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set rtmp url from channel. Global settings.
     * @param {SiteSetUrlRequest} siteSetUrlRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRtmp1: (siteSetUrlRequest: SiteSetUrlRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get status platform
     * @param {updateToken1VEnum} v Version
     * @param {updateToken1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {updateToken1RoleEnum} role Token role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateToken1: (v: updateToken1VEnum, language: updateToken1LanguageEnum, projectId: number, channelId: number, role: updateToken1RoleEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set transcoder from channel. Personal settings.
     * @param {SiteSetTranscoderRequest} siteSetTranscoderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTranscoder1: (siteSetTranscoderRequest: SiteSetTranscoderRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get telegram post by filter
     * @param {TelegramGetPostByFilterVEnum} v Version
     * @param {TelegramGetPostByFilterLanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} filterMode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    telegramGetPostByFilter: (v: TelegramGetPostByFilterVEnum, language: TelegramGetPostByFilterLanguageEnum, projectId: number, channelId: number, filterMode: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ChannelSettingsApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get telegram settings
     * @param {getTelegramSetting1VEnum} v Version
     * @param {getTelegramSetting1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTelegramSetting1(v: getTelegramSetting1VEnum, language: getTelegramSetting1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TelegramSettingsResponseDto>>;
    /**
     *
     * @summary Get code for connected chat
     * @param {initTelegramChatConnect1VEnum} v Version
     * @param {initTelegramChatConnect1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initTelegramChatConnect1(v: initTelegramChatConnect1VEnum, language: initTelegramChatConnect1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TelegramInitConnectResponseDto>>;
    /**
     *
     * @summary Disconnect telegram chat
     * @param {removeTelegramChat1VEnum} v Version
     * @param {removeTelegramChat1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeTelegramChat1(v: removeTelegramChat1VEnum, language: removeTelegramChat1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Set telegram settings
     * @param {setTelegramSetting1VEnum} v Version
     * @param {setTelegramSetting1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {SiteTelegramSetSettingsRequestDto} siteTelegramSetSettingsRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setTelegramSetting1(v: setTelegramSetting1VEnum, language: setTelegramSetting1LanguageEnum, projectId: number, channelId: number, siteTelegramSetSettingsRequestDto: SiteTelegramSetSettingsRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Get telegram post list
     * @param {telegramPosts1VEnum} v Version
     * @param {telegramPosts1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    telegramPosts1(v: telegramPosts1VEnum, language: telegramPosts1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteTelegramChatPostsResponseDto>>;
    /**
     *
     * @summary Optional settings for telegram
     * @param {SiteUpdateChatTelegramRequest} siteUpdateChatTelegramRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsTelegram1(siteUpdateChatTelegramRequest: SiteUpdateChatTelegramRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Get planned list
     * @param {getPlanned1VEnum} v Version
     * @param {getPlanned1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlanned1(v: getPlanned1VEnum, language: getPlanned1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfSitePlannedResponse>>;
    /**
     *
     * @summary Get playlists from the platform
     * @param {getPlayList1VEnum} v Version
     * @param {getPlayList1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlayList1(v: getPlayList1VEnum, language: getPlayList1LanguageEnum, projectId: number, channelId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfPlaylistItemResponse>>;
    /**
     *
     * @summary Optional settings for ok. Depends on the tariff.
     * @param {SiteUpdateOptionsOkRequest} siteUpdateOptionsOkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsOk1(siteUpdateOptionsOkRequest: SiteUpdateOptionsOkRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Optional settings for trovo. Depends on the tariff.
     * @param {SiteUpdateOptionsTrovoRequest} siteUpdateOptionsTrovoRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsTrovo1(siteUpdateOptionsTrovoRequest: SiteUpdateOptionsTrovoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Optional settings for twitch. Depends on the tariff.
     * @param {SiteUpdateOptionsTwitchRequest} siteUpdateOptionsTwitchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsTwitch1(siteUpdateOptionsTwitchRequest: SiteUpdateOptionsTwitchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Optional settings for vk. Depends on the tariff.
     * @param {SiteUpdateOptionsVkRequest} siteUpdateOptionsVkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsVk1(siteUpdateOptionsVkRequest: SiteUpdateOptionsVkRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Optional settings for vk video live. Depends on the tariff.
     * @param {SiteUpdateOptionsVkVideoLiveRequest} siteUpdateOptionsVkVideoLiveRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsVkVideoLive1(siteUpdateOptionsVkVideoLiveRequest: SiteUpdateOptionsVkVideoLiveRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Optional settings for youtube. Depends on the tariff.
     * @param {SiteUpdateOptionsYoutubeRequest} siteUpdateOptionsYoutubeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsYoutube1(siteUpdateOptionsYoutubeRequest: SiteUpdateOptionsYoutubeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Set planned id. Depends on the tariff.
     * @param {SiteSetPlannedRequest} siteSetPlannedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePlanned1(siteSetPlannedRequest: SiteSetPlannedRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SitePlannedResponse>>;
    /**
     *
     * @summary Get status platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatus1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteChannelStatusResponse>>;
    /**
     *
     * @summary Set name from custom channel. Global settings.
     * @param {SiteSetNameRequest} siteSetNameRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setName1(siteSetNameRequest: SiteSetNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Set rtmp url from channel. Global settings.
     * @param {SiteSetUrlRequest} siteSetUrlRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRtmp1(siteSetUrlRequest: SiteSetUrlRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Get status platform
     * @param {updateToken1VEnum} v Version
     * @param {updateToken1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {updateToken1RoleEnum} role Token role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateToken1(v: updateToken1VEnum, language: updateToken1LanguageEnum, projectId: number, channelId: number, role: updateToken1RoleEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Set transcoder from channel. Personal settings.
     * @param {SiteSetTranscoderRequest} siteSetTranscoderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTranscoder1(siteSetTranscoderRequest: SiteSetTranscoderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Get telegram post by filter
     * @param {TelegramGetPostByFilterVEnum} v Version
     * @param {TelegramGetPostByFilterLanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} filterMode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    telegramGetPostByFilter(v: TelegramGetPostByFilterVEnum, language: TelegramGetPostByFilterLanguageEnum, projectId: number, channelId: number, filterMode: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteTelegramChatPostsItem>>;
};
/**
 * ChannelSettingsApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get telegram settings
     * @param {getTelegramSetting1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTelegramSetting1(requestParameters: getTelegramSetting1Request, options?: RawAxiosRequestConfig): AxiosPromise<TelegramSettingsResponseDto>;
    /**
     *
     * @summary Get code for connected chat
     * @param {initTelegramChatConnect1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initTelegramChatConnect1(requestParameters: initTelegramChatConnect1Request, options?: RawAxiosRequestConfig): AxiosPromise<TelegramInitConnectResponseDto>;
    /**
     *
     * @summary Disconnect telegram chat
     * @param {removeTelegramChat1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeTelegramChat1(requestParameters: removeTelegramChat1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Set telegram settings
     * @param {setTelegramSetting1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setTelegramSetting1(requestParameters: setTelegramSetting1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get telegram post list
     * @param {telegramPosts1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    telegramPosts1(requestParameters: telegramPosts1Request, options?: RawAxiosRequestConfig): AxiosPromise<SiteTelegramChatPostsResponseDto>;
    /**
     *
     * @summary Optional settings for telegram
     * @param {updateOptionsTelegram1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsTelegram1(requestParameters: updateOptionsTelegram1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get planned list
     * @param {getPlanned1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlanned1(requestParameters: getPlanned1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfSitePlannedResponse>;
    /**
     *
     * @summary Get playlists from the platform
     * @param {getPlayList1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlayList1(requestParameters: getPlayList1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfPlaylistItemResponse>;
    /**
     *
     * @summary Optional settings for ok. Depends on the tariff.
     * @param {updateOptionsOk1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsOk1(requestParameters: updateOptionsOk1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for trovo. Depends on the tariff.
     * @param {updateOptionsTrovo1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsTrovo1(requestParameters: updateOptionsTrovo1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for twitch. Depends on the tariff.
     * @param {updateOptionsTwitch1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsTwitch1(requestParameters: updateOptionsTwitch1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for vk. Depends on the tariff.
     * @param {updateOptionsVk1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsVk1(requestParameters: updateOptionsVk1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for vk video live. Depends on the tariff.
     * @param {updateOptionsVkVideoLive1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsVkVideoLive1(requestParameters: updateOptionsVkVideoLive1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for youtube. Depends on the tariff.
     * @param {updateOptionsYoutube1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOptionsYoutube1(requestParameters: updateOptionsYoutube1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Set planned id. Depends on the tariff.
     * @param {updatePlanned1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePlanned1(requestParameters: updatePlanned1Request, options?: RawAxiosRequestConfig): AxiosPromise<SitePlannedResponse>;
    /**
     *
     * @summary Get status platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatus1(options?: RawAxiosRequestConfig): AxiosPromise<SiteChannelStatusResponse>;
    /**
     *
     * @summary Set name from custom channel. Global settings.
     * @param {setName1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setName1(requestParameters: setName1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Set rtmp url from channel. Global settings.
     * @param {updateRtmp1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRtmp1(requestParameters: updateRtmp1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get status platform
     * @param {updateToken1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateToken1(requestParameters: updateToken1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Set transcoder from channel. Personal settings.
     * @param {updateTranscoder1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTranscoder1(requestParameters: updateTranscoder1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get telegram post by filter
     * @param {telegramGetPostByFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    telegramGetPostByFilter(requestParameters: telegramGetPostByFilterRequest, options?: RawAxiosRequestConfig): AxiosPromise<SiteTelegramChatPostsItem>;
};
/**
 * Request parameters for getTelegramSetting1 operation in ChannelSettingsApi.
 * @export
 * @interface getTelegramSetting1Request
 */
export interface getTelegramSetting1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getTelegramSetting1
     */
    readonly v?: getTelegramSetting1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getTelegramSetting1
     */
    readonly language: getTelegramSetting1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof getTelegramSetting1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof getTelegramSetting1
     */
    readonly channelId: number;
}
/**
 * Request parameters for initTelegramChatConnect1 operation in ChannelSettingsApi.
 * @export
 * @interface initTelegramChatConnect1Request
 */
export interface initTelegramChatConnect1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof initTelegramChatConnect1
     */
    readonly v?: initTelegramChatConnect1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof initTelegramChatConnect1
     */
    readonly language: initTelegramChatConnect1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof initTelegramChatConnect1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof initTelegramChatConnect1
     */
    readonly channelId: number;
}
/**
 * Request parameters for removeTelegramChat1 operation in ChannelSettingsApi.
 * @export
 * @interface removeTelegramChat1Request
 */
export interface removeTelegramChat1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof removeTelegramChat1
     */
    readonly v?: removeTelegramChat1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof removeTelegramChat1
     */
    readonly language: removeTelegramChat1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof removeTelegramChat1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof removeTelegramChat1
     */
    readonly channelId: number;
}
/**
 * Request parameters for setTelegramSetting1 operation in ChannelSettingsApi.
 * @export
 * @interface setTelegramSetting1Request
 */
export interface setTelegramSetting1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof setTelegramSetting1
     */
    readonly v?: setTelegramSetting1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof setTelegramSetting1
     */
    readonly language: setTelegramSetting1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof setTelegramSetting1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof setTelegramSetting1
     */
    readonly channelId: number;
    /**
     *
     * @type {SiteTelegramSetSettingsRequestDto}
     * @memberof setTelegramSetting1
     */
    readonly siteTelegramSetSettingsRequestDto: SiteTelegramSetSettingsRequestDto;
}
/**
 * Request parameters for telegramPosts1 operation in ChannelSettingsApi.
 * @export
 * @interface telegramPosts1Request
 */
export interface telegramPosts1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof telegramPosts1
     */
    readonly v?: telegramPosts1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof telegramPosts1
     */
    readonly language: telegramPosts1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof telegramPosts1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof telegramPosts1
     */
    readonly channelId: number;
}
/**
 * Request parameters for updateOptionsTelegram1 operation in ChannelSettingsApi.
 * @export
 * @interface updateOptionsTelegram1Request
 */
export interface updateOptionsTelegram1Request {
    /**
     *
     * @type {SiteUpdateChatTelegramRequest}
     * @memberof updateOptionsTelegram1
     */
    readonly siteUpdateChatTelegramRequest: SiteUpdateChatTelegramRequest;
}
/**
 * Request parameters for getPlanned1 operation in ChannelSettingsApi.
 * @export
 * @interface getPlanned1Request
 */
export interface getPlanned1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getPlanned1
     */
    readonly v?: getPlanned1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getPlanned1
     */
    readonly language: getPlanned1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof getPlanned1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof getPlanned1
     */
    readonly channelId: number;
}
/**
 * Request parameters for getPlayList1 operation in ChannelSettingsApi.
 * @export
 * @interface getPlayList1Request
 */
export interface getPlayList1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getPlayList1
     */
    readonly v?: getPlayList1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getPlayList1
     */
    readonly language: getPlayList1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof getPlayList1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof getPlayList1
     */
    readonly channelId: number;
}
/**
 * Request parameters for updateOptionsOk1 operation in ChannelSettingsApi.
 * @export
 * @interface updateOptionsOk1Request
 */
export interface updateOptionsOk1Request {
    /**
     *
     * @type {SiteUpdateOptionsOkRequest}
     * @memberof updateOptionsOk1
     */
    readonly siteUpdateOptionsOkRequest: SiteUpdateOptionsOkRequest;
}
/**
 * Request parameters for updateOptionsTrovo1 operation in ChannelSettingsApi.
 * @export
 * @interface updateOptionsTrovo1Request
 */
export interface updateOptionsTrovo1Request {
    /**
     *
     * @type {SiteUpdateOptionsTrovoRequest}
     * @memberof updateOptionsTrovo1
     */
    readonly siteUpdateOptionsTrovoRequest: SiteUpdateOptionsTrovoRequest;
}
/**
 * Request parameters for updateOptionsTwitch1 operation in ChannelSettingsApi.
 * @export
 * @interface updateOptionsTwitch1Request
 */
export interface updateOptionsTwitch1Request {
    /**
     *
     * @type {SiteUpdateOptionsTwitchRequest}
     * @memberof updateOptionsTwitch1
     */
    readonly siteUpdateOptionsTwitchRequest: SiteUpdateOptionsTwitchRequest;
}
/**
 * Request parameters for updateOptionsVk1 operation in ChannelSettingsApi.
 * @export
 * @interface updateOptionsVk1Request
 */
export interface updateOptionsVk1Request {
    /**
     *
     * @type {SiteUpdateOptionsVkRequest}
     * @memberof updateOptionsVk1
     */
    readonly siteUpdateOptionsVkRequest: SiteUpdateOptionsVkRequest;
}
/**
 * Request parameters for updateOptionsVkVideoLive1 operation in ChannelSettingsApi.
 * @export
 * @interface updateOptionsVkVideoLive1Request
 */
export interface updateOptionsVkVideoLive1Request {
    /**
     *
     * @type {SiteUpdateOptionsVkVideoLiveRequest}
     * @memberof updateOptionsVkVideoLive1
     */
    readonly siteUpdateOptionsVkVideoLiveRequest: SiteUpdateOptionsVkVideoLiveRequest;
}
/**
 * Request parameters for updateOptionsYoutube1 operation in ChannelSettingsApi.
 * @export
 * @interface updateOptionsYoutube1Request
 */
export interface updateOptionsYoutube1Request {
    /**
     *
     * @type {SiteUpdateOptionsYoutubeRequest}
     * @memberof updateOptionsYoutube1
     */
    readonly siteUpdateOptionsYoutubeRequest: SiteUpdateOptionsYoutubeRequest;
}
/**
 * Request parameters for updatePlanned1 operation in ChannelSettingsApi.
 * @export
 * @interface updatePlanned1Request
 */
export interface updatePlanned1Request {
    /**
     *
     * @type {SiteSetPlannedRequest}
     * @memberof updatePlanned1
     */
    readonly siteSetPlannedRequest: SiteSetPlannedRequest;
}
/**
 * Request parameters for setName1 operation in ChannelSettingsApi.
 * @export
 * @interface setName1Request
 */
export interface setName1Request {
    /**
     *
     * @type {SiteSetNameRequest}
     * @memberof setName1
     */
    readonly siteSetNameRequest: SiteSetNameRequest;
}
/**
 * Request parameters for updateRtmp1 operation in ChannelSettingsApi.
 * @export
 * @interface updateRtmp1Request
 */
export interface updateRtmp1Request {
    /**
     *
     * @type {SiteSetUrlRequest}
     * @memberof updateRtmp1
     */
    readonly siteSetUrlRequest: SiteSetUrlRequest;
}
/**
 * Request parameters for updateToken1 operation in ChannelSettingsApi.
 * @export
 * @interface updateToken1Request
 */
export interface updateToken1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof updateToken1
     */
    readonly v?: updateToken1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof updateToken1
     */
    readonly language: updateToken1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof updateToken1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof updateToken1
     */
    readonly channelId: number;
    /**
     * Token role
     * @type {'account' | 'group'}
     * @memberof updateToken1
     */
    readonly role: updateToken1RoleEnum;
}
/**
 * Request parameters for updateTranscoder1 operation in ChannelSettingsApi.
 * @export
 * @interface updateTranscoder1Request
 */
export interface updateTranscoder1Request {
    /**
     *
     * @type {SiteSetTranscoderRequest}
     * @memberof updateTranscoder1
     */
    readonly siteSetTranscoderRequest: SiteSetTranscoderRequest;
}
/**
 * Request parameters for telegramGetPostByFilter operation in ChannelSettingsApi.
 * @export
 * @interface telegramGetPostByFilterRequest
 */
export interface telegramGetPostByFilterRequest {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof telegramGetPostByFilter
     */
    readonly v: TelegramGetPostByFilterVEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof telegramGetPostByFilter
     */
    readonly language: TelegramGetPostByFilterLanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof telegramGetPostByFilter
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof telegramGetPostByFilter
     */
    readonly channelId: number;
    /**
     *
     * @type {number}
     * @memberof telegramGetPostByFilter
     */
    readonly filterMode: number;
}
/**
 * ChannelSettingsApi - object-oriented interface
 * @export
 * @class ChannelSettingsApi
 * @extends {BaseAPI}
 */
export declare class ChannelSettingsApi extends BaseAPI {
    /**
     *
     * @summary Get telegram settings
     * @param {getTelegramSetting1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    getTelegramSetting1(requestParameters: getTelegramSetting1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TelegramSettingsResponseDto, any>>;
    /**
     *
     * @summary Get code for connected chat
     * @param {initTelegramChatConnect1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    initTelegramChatConnect1(requestParameters: initTelegramChatConnect1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TelegramInitConnectResponseDto, any>>;
    /**
     *
     * @summary Disconnect telegram chat
     * @param {removeTelegramChat1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    removeTelegramChat1(requestParameters: removeTelegramChat1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Set telegram settings
     * @param {setTelegramSetting1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    setTelegramSetting1(requestParameters: setTelegramSetting1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Get telegram post list
     * @param {telegramPosts1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    telegramPosts1(requestParameters: telegramPosts1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteTelegramChatPostsResponseDto, any>>;
    /**
     *
     * @summary Optional settings for telegram
     * @param {updateOptionsTelegram1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    updateOptionsTelegram1(requestParameters: updateOptionsTelegram1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Get planned list
     * @param {getPlanned1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    getPlanned1(requestParameters: getPlanned1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").ListResponse, any>>;
    /**
     *
     * @summary Get playlists from the platform
     * @param {getPlayList1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    getPlayList1(requestParameters: getPlayList1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").ListResponse, any>>;
    /**
     *
     * @summary Optional settings for ok. Depends on the tariff.
     * @param {updateOptionsOk1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    updateOptionsOk1(requestParameters: updateOptionsOk1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Optional settings for trovo. Depends on the tariff.
     * @param {updateOptionsTrovo1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    updateOptionsTrovo1(requestParameters: updateOptionsTrovo1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Optional settings for twitch. Depends on the tariff.
     * @param {updateOptionsTwitch1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    updateOptionsTwitch1(requestParameters: updateOptionsTwitch1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Optional settings for vk. Depends on the tariff.
     * @param {updateOptionsVk1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    updateOptionsVk1(requestParameters: updateOptionsVk1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Optional settings for vk video live. Depends on the tariff.
     * @param {updateOptionsVkVideoLive1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    updateOptionsVkVideoLive1(requestParameters: updateOptionsVkVideoLive1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Optional settings for youtube. Depends on the tariff.
     * @param {updateOptionsYoutube1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    updateOptionsYoutube1(requestParameters: updateOptionsYoutube1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Set planned id. Depends on the tariff.
     * @param {updatePlanned1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    updatePlanned1(requestParameters: updatePlanned1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SitePlannedResponse, any>>;
    /**
     *
     * @summary Get status platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    getStatus1(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteChannelStatusResponse, any>>;
    /**
     *
     * @summary Set name from custom channel. Global settings.
     * @param {setName1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    setName1(requestParameters: setName1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Set rtmp url from channel. Global settings.
     * @param {updateRtmp1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    updateRtmp1(requestParameters: updateRtmp1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Get status platform
     * @param {updateToken1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    updateToken1(requestParameters: updateToken1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Set transcoder from channel. Personal settings.
     * @param {updateTranscoder1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    updateTranscoder1(requestParameters: updateTranscoder1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Get telegram post by filter
     * @param {telegramGetPostByFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    telegramGetPostByFilter(requestParameters: telegramGetPostByFilterRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteTelegramChatPostsItem, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum getTelegramSetting1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getTelegramSetting1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum initTelegramChatConnect1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum initTelegramChatConnect1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum removeTelegramChat1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum removeTelegramChat1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum setTelegramSetting1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum setTelegramSetting1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum telegramPosts1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum telegramPosts1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getPlanned1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getPlanned1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getPlayList1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getPlayList1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum updateToken1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum updateToken1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum updateToken1RoleEnum {
    account = "account",
    group = "group"
}
/**
  * @export
  * @enum {string}
  */
export declare enum TelegramGetPostByFilterVEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum TelegramGetPostByFilterLanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=channel-settings-api.d.ts.map