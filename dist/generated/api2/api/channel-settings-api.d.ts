/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { ListOfPlaylistItemResponse } from '../models';
import type { ListOfSitePlannedResponse } from '../models';
import type { SiteChannelStatusResponse } from '../models';
import type { SitePlannedResponse } from '../models';
import type { SiteSetNameRequest } from '../models';
import type { SiteSetPlannedRequest } from '../models';
import type { SiteSetTranscoderRequest } from '../models';
import type { SiteSetUrlRequest } from '../models';
import type { SiteUpdateChatTelegramRequest } from '../models';
import type { SiteUpdateOptionsOkRequest } from '../models';
import type { SiteUpdateOptionsTrovoRequest } from '../models';
import type { SiteUpdateOptionsTwitchRequest } from '../models';
import type { SiteUpdateOptionsVkRequest } from '../models';
import type { SiteUpdateOptionsVkVideoLiveRequest } from '../models';
import type { SiteUpdateOptionsYoutubeRequest } from '../models';
import type { SuccessResponse } from '../models';
import type { TelegramChatPostsItem } from '../models';
import type { TelegramChatPostsResponseDto } from '../models';
import type { TelegramInitConnectResponseDto } from '../models';
import type { TelegramSetSettingsRequestDto } from '../models';
import type { TelegramSettingsResponseDto } from '../models';
/**
 * ChannelSettingsApi - axios parameter creator
 * @export
 */
export declare const ChannelSettingsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get telegram settings
     * @param {ChannelChatGetTelegramSettingV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {ChannelChatGetTelegramSettingV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelChatGetTelegramSettingV1: (language: ChannelChatGetTelegramSettingV1LanguageEnum, projectId: number, channelId: number, v?: ChannelChatGetTelegramSettingV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get code for connected chat
     * @param {ChannelChatInitTelegramChatConnectV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {ChannelChatInitTelegramChatConnectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelChatInitTelegramChatConnectV1: (language: ChannelChatInitTelegramChatConnectV1LanguageEnum, projectId: number, channelId: number, v?: ChannelChatInitTelegramChatConnectV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Disconnect telegram chat
     * @param {ChannelChatRemoveTelegramChatV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {ChannelChatRemoveTelegramChatV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelChatRemoveTelegramChatV1: (language: ChannelChatRemoveTelegramChatV1LanguageEnum, projectId: number, channelId: number, v?: ChannelChatRemoveTelegramChatV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set telegram settings
     * @param {ChannelChatSetTelegramSettingV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {TelegramSetSettingsRequestDto} telegramSetSettingsRequestDto
     * @param {ChannelChatSetTelegramSettingV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelChatSetTelegramSettingV1: (language: ChannelChatSetTelegramSettingV1LanguageEnum, projectId: number, channelId: number, telegramSetSettingsRequestDto: TelegramSetSettingsRequestDto, v?: ChannelChatSetTelegramSettingV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get telegram post list
     * @param {ChannelChatTelegramPostsV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {ChannelChatTelegramPostsV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelChatTelegramPostsV1: (language: ChannelChatTelegramPostsV1LanguageEnum, projectId: number, channelId: number, v?: ChannelChatTelegramPostsV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Optional settings for telegram
     * @param {SiteUpdateChatTelegramRequest} siteUpdateChatTelegramRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelChatUpdateOptionsTelegramV1: (siteUpdateChatTelegramRequest: SiteUpdateChatTelegramRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get planned list
     * @param {ChannelOptionsGetPlannedV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {ChannelOptionsGetPlannedV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsGetPlannedV1: (language: ChannelOptionsGetPlannedV1LanguageEnum, projectId: number, channelId: number, v?: ChannelOptionsGetPlannedV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get playlists from the platform
     * @param {ChannelOptionsGetPlayListV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {ChannelOptionsGetPlayListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsGetPlayListV1: (language: ChannelOptionsGetPlayListV1LanguageEnum, projectId: number, channelId: number, v?: ChannelOptionsGetPlayListV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Optional settings for ok. Depends on the tariff.
     * @param {SiteUpdateOptionsOkRequest} siteUpdateOptionsOkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdateOptionsOkV1: (siteUpdateOptionsOkRequest: SiteUpdateOptionsOkRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Optional settings for trovo. Depends on the tariff.
     * @param {SiteUpdateOptionsTrovoRequest} siteUpdateOptionsTrovoRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdateOptionsTrovoV1: (siteUpdateOptionsTrovoRequest: SiteUpdateOptionsTrovoRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Optional settings for twitch. Depends on the tariff.
     * @param {SiteUpdateOptionsTwitchRequest} siteUpdateOptionsTwitchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdateOptionsTwitchV1: (siteUpdateOptionsTwitchRequest: SiteUpdateOptionsTwitchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Optional settings for vk. Depends on the tariff.
     * @param {SiteUpdateOptionsVkRequest} siteUpdateOptionsVkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdateOptionsVkV1: (siteUpdateOptionsVkRequest: SiteUpdateOptionsVkRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Optional settings for vk video live. Depends on the tariff.
     * @param {SiteUpdateOptionsVkVideoLiveRequest} siteUpdateOptionsVkVideoLiveRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdateOptionsVkVideoLiveV1: (siteUpdateOptionsVkVideoLiveRequest: SiteUpdateOptionsVkVideoLiveRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Optional settings for youtube. Depends on the tariff.
     * @param {SiteUpdateOptionsYoutubeRequest} siteUpdateOptionsYoutubeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdateOptionsYoutubeV1: (siteUpdateOptionsYoutubeRequest: SiteUpdateOptionsYoutubeRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set planned id. Depends on the tariff.
     * @param {SiteSetPlannedRequest} siteSetPlannedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdatePlannedV1: (siteSetPlannedRequest: SiteSetPlannedRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get status platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelSettingGetStatusV1: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set name from custom channel. Global settings.
     * @param {SiteSetNameRequest} siteSetNameRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelSettingSetNameV1: (siteSetNameRequest: SiteSetNameRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set rtmp url from channel. Global settings.
     * @param {SiteSetUrlRequest} siteSetUrlRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelSettingUpdateRtmpV1: (siteSetUrlRequest: SiteSetUrlRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get status platform
     * @param {ChannelSettingUpdateTokenV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {ChannelSettingUpdateTokenV1RoleEnum} role Token role
     * @param {ChannelSettingUpdateTokenV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelSettingUpdateTokenV1: (language: ChannelSettingUpdateTokenV1LanguageEnum, projectId: number, channelId: number, role: ChannelSettingUpdateTokenV1RoleEnum, v?: ChannelSettingUpdateTokenV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set transcoder from channel. Personal settings.
     * @param {SiteSetTranscoderRequest} siteSetTranscoderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelSettingUpdateTranscoderV1: (siteSetTranscoderRequest: SiteSetTranscoderRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get telegram post by filter
     * @param {TelegramGetPostByFilterV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} filterMode
     * @param {TelegramGetPostByFilterV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    telegramGetPostByFilterV1: (language: TelegramGetPostByFilterV1LanguageEnum, projectId: number, channelId: number, filterMode: number, v?: TelegramGetPostByFilterV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ChannelSettingsApi - functional programming interface
 * @export
 */
export declare const ChannelSettingsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get telegram settings
     * @param {ChannelChatGetTelegramSettingV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {ChannelChatGetTelegramSettingV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelChatGetTelegramSettingV1(language: ChannelChatGetTelegramSettingV1LanguageEnum, projectId: number, channelId: number, v?: ChannelChatGetTelegramSettingV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TelegramSettingsResponseDto>>;
    /**
     *
     * @summary Get code for connected chat
     * @param {ChannelChatInitTelegramChatConnectV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {ChannelChatInitTelegramChatConnectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelChatInitTelegramChatConnectV1(language: ChannelChatInitTelegramChatConnectV1LanguageEnum, projectId: number, channelId: number, v?: ChannelChatInitTelegramChatConnectV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TelegramInitConnectResponseDto>>;
    /**
     *
     * @summary Disconnect telegram chat
     * @param {ChannelChatRemoveTelegramChatV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {ChannelChatRemoveTelegramChatV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelChatRemoveTelegramChatV1(language: ChannelChatRemoveTelegramChatV1LanguageEnum, projectId: number, channelId: number, v?: ChannelChatRemoveTelegramChatV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Set telegram settings
     * @param {ChannelChatSetTelegramSettingV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {TelegramSetSettingsRequestDto} telegramSetSettingsRequestDto
     * @param {ChannelChatSetTelegramSettingV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelChatSetTelegramSettingV1(language: ChannelChatSetTelegramSettingV1LanguageEnum, projectId: number, channelId: number, telegramSetSettingsRequestDto: TelegramSetSettingsRequestDto, v?: ChannelChatSetTelegramSettingV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Get telegram post list
     * @param {ChannelChatTelegramPostsV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {ChannelChatTelegramPostsV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelChatTelegramPostsV1(language: ChannelChatTelegramPostsV1LanguageEnum, projectId: number, channelId: number, v?: ChannelChatTelegramPostsV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TelegramChatPostsResponseDto>>;
    /**
     *
     * @summary Optional settings for telegram
     * @param {SiteUpdateChatTelegramRequest} siteUpdateChatTelegramRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelChatUpdateOptionsTelegramV1(siteUpdateChatTelegramRequest: SiteUpdateChatTelegramRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Get planned list
     * @param {ChannelOptionsGetPlannedV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {ChannelOptionsGetPlannedV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsGetPlannedV1(language: ChannelOptionsGetPlannedV1LanguageEnum, projectId: number, channelId: number, v?: ChannelOptionsGetPlannedV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfSitePlannedResponse>>;
    /**
     *
     * @summary Get playlists from the platform
     * @param {ChannelOptionsGetPlayListV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {ChannelOptionsGetPlayListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsGetPlayListV1(language: ChannelOptionsGetPlayListV1LanguageEnum, projectId: number, channelId: number, v?: ChannelOptionsGetPlayListV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfPlaylistItemResponse>>;
    /**
     *
     * @summary Optional settings for ok. Depends on the tariff.
     * @param {SiteUpdateOptionsOkRequest} siteUpdateOptionsOkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdateOptionsOkV1(siteUpdateOptionsOkRequest: SiteUpdateOptionsOkRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Optional settings for trovo. Depends on the tariff.
     * @param {SiteUpdateOptionsTrovoRequest} siteUpdateOptionsTrovoRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdateOptionsTrovoV1(siteUpdateOptionsTrovoRequest: SiteUpdateOptionsTrovoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Optional settings for twitch. Depends on the tariff.
     * @param {SiteUpdateOptionsTwitchRequest} siteUpdateOptionsTwitchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdateOptionsTwitchV1(siteUpdateOptionsTwitchRequest: SiteUpdateOptionsTwitchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Optional settings for vk. Depends on the tariff.
     * @param {SiteUpdateOptionsVkRequest} siteUpdateOptionsVkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdateOptionsVkV1(siteUpdateOptionsVkRequest: SiteUpdateOptionsVkRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Optional settings for vk video live. Depends on the tariff.
     * @param {SiteUpdateOptionsVkVideoLiveRequest} siteUpdateOptionsVkVideoLiveRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdateOptionsVkVideoLiveV1(siteUpdateOptionsVkVideoLiveRequest: SiteUpdateOptionsVkVideoLiveRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Optional settings for youtube. Depends on the tariff.
     * @param {SiteUpdateOptionsYoutubeRequest} siteUpdateOptionsYoutubeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdateOptionsYoutubeV1(siteUpdateOptionsYoutubeRequest: SiteUpdateOptionsYoutubeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Set planned id. Depends on the tariff.
     * @param {SiteSetPlannedRequest} siteSetPlannedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdatePlannedV1(siteSetPlannedRequest: SiteSetPlannedRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SitePlannedResponse>>;
    /**
     *
     * @summary Get status platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelSettingGetStatusV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteChannelStatusResponse>>;
    /**
     *
     * @summary Set name from custom channel. Global settings.
     * @param {SiteSetNameRequest} siteSetNameRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelSettingSetNameV1(siteSetNameRequest: SiteSetNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Set rtmp url from channel. Global settings.
     * @param {SiteSetUrlRequest} siteSetUrlRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelSettingUpdateRtmpV1(siteSetUrlRequest: SiteSetUrlRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Get status platform
     * @param {ChannelSettingUpdateTokenV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {ChannelSettingUpdateTokenV1RoleEnum} role Token role
     * @param {ChannelSettingUpdateTokenV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelSettingUpdateTokenV1(language: ChannelSettingUpdateTokenV1LanguageEnum, projectId: number, channelId: number, role: ChannelSettingUpdateTokenV1RoleEnum, v?: ChannelSettingUpdateTokenV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Set transcoder from channel. Personal settings.
     * @param {SiteSetTranscoderRequest} siteSetTranscoderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelSettingUpdateTranscoderV1(siteSetTranscoderRequest: SiteSetTranscoderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Get telegram post by filter
     * @param {TelegramGetPostByFilterV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} filterMode
     * @param {TelegramGetPostByFilterV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    telegramGetPostByFilterV1(language: TelegramGetPostByFilterV1LanguageEnum, projectId: number, channelId: number, filterMode: number, v?: TelegramGetPostByFilterV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TelegramChatPostsItem>>;
};
/**
 * ChannelSettingsApi - factory interface
 * @export
 */
export declare const ChannelSettingsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get telegram settings
     * @param {ChannelSettingsApiChannelChatGetTelegramSettingV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelChatGetTelegramSettingV1(requestParameters: ChannelSettingsApiChannelChatGetTelegramSettingV1Request, options?: RawAxiosRequestConfig): AxiosPromise<TelegramSettingsResponseDto>;
    /**
     *
     * @summary Get code for connected chat
     * @param {ChannelSettingsApiChannelChatInitTelegramChatConnectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelChatInitTelegramChatConnectV1(requestParameters: ChannelSettingsApiChannelChatInitTelegramChatConnectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<TelegramInitConnectResponseDto>;
    /**
     *
     * @summary Disconnect telegram chat
     * @param {ChannelSettingsApiChannelChatRemoveTelegramChatV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelChatRemoveTelegramChatV1(requestParameters: ChannelSettingsApiChannelChatRemoveTelegramChatV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Set telegram settings
     * @param {ChannelSettingsApiChannelChatSetTelegramSettingV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelChatSetTelegramSettingV1(requestParameters: ChannelSettingsApiChannelChatSetTelegramSettingV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get telegram post list
     * @param {ChannelSettingsApiChannelChatTelegramPostsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelChatTelegramPostsV1(requestParameters: ChannelSettingsApiChannelChatTelegramPostsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<TelegramChatPostsResponseDto>;
    /**
     *
     * @summary Optional settings for telegram
     * @param {ChannelSettingsApiChannelChatUpdateOptionsTelegramV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelChatUpdateOptionsTelegramV1(requestParameters: ChannelSettingsApiChannelChatUpdateOptionsTelegramV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get planned list
     * @param {ChannelSettingsApiChannelOptionsGetPlannedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsGetPlannedV1(requestParameters: ChannelSettingsApiChannelOptionsGetPlannedV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfSitePlannedResponse>;
    /**
     *
     * @summary Get playlists from the platform
     * @param {ChannelSettingsApiChannelOptionsGetPlayListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsGetPlayListV1(requestParameters: ChannelSettingsApiChannelOptionsGetPlayListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfPlaylistItemResponse>;
    /**
     *
     * @summary Optional settings for ok. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsOkV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdateOptionsOkV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsOkV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for trovo. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdateOptionsTrovoV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for twitch. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdateOptionsTwitchV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for vk. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsVkV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdateOptionsVkV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsVkV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for vk video live. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdateOptionsVkVideoLiveV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for youtube. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdateOptionsYoutubeV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Set planned id. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdatePlannedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelOptionsUpdatePlannedV1(requestParameters: ChannelSettingsApiChannelOptionsUpdatePlannedV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SitePlannedResponse>;
    /**
     *
     * @summary Get status platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelSettingGetStatusV1(options?: RawAxiosRequestConfig): AxiosPromise<SiteChannelStatusResponse>;
    /**
     *
     * @summary Set name from custom channel. Global settings.
     * @param {ChannelSettingsApiChannelSettingSetNameV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelSettingSetNameV1(requestParameters: ChannelSettingsApiChannelSettingSetNameV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Set rtmp url from channel. Global settings.
     * @param {ChannelSettingsApiChannelSettingUpdateRtmpV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelSettingUpdateRtmpV1(requestParameters: ChannelSettingsApiChannelSettingUpdateRtmpV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get status platform
     * @param {ChannelSettingsApiChannelSettingUpdateTokenV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelSettingUpdateTokenV1(requestParameters: ChannelSettingsApiChannelSettingUpdateTokenV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Set transcoder from channel. Personal settings.
     * @param {ChannelSettingsApiChannelSettingUpdateTranscoderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelSettingUpdateTranscoderV1(requestParameters: ChannelSettingsApiChannelSettingUpdateTranscoderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get telegram post by filter
     * @param {ChannelSettingsApiTelegramGetPostByFilterV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    telegramGetPostByFilterV1(requestParameters: ChannelSettingsApiTelegramGetPostByFilterV1Request, options?: RawAxiosRequestConfig): AxiosPromise<TelegramChatPostsItem>;
};
/**
 * ChannelSettingsApi - interface
 * @export
 * @interface ChannelSettingsApi
 */
export interface ChannelSettingsApiInterface {
    /**
     *
     * @summary Get telegram settings
     * @param {ChannelSettingsApiChannelChatGetTelegramSettingV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatGetTelegramSettingV1(requestParameters: ChannelSettingsApiChannelChatGetTelegramSettingV1Request, options?: RawAxiosRequestConfig): AxiosPromise<TelegramSettingsResponseDto>;
    /**
     *
     * @summary Get code for connected chat
     * @param {ChannelSettingsApiChannelChatInitTelegramChatConnectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatInitTelegramChatConnectV1(requestParameters: ChannelSettingsApiChannelChatInitTelegramChatConnectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<TelegramInitConnectResponseDto>;
    /**
     *
     * @summary Disconnect telegram chat
     * @param {ChannelSettingsApiChannelChatRemoveTelegramChatV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatRemoveTelegramChatV1(requestParameters: ChannelSettingsApiChannelChatRemoveTelegramChatV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Set telegram settings
     * @param {ChannelSettingsApiChannelChatSetTelegramSettingV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatSetTelegramSettingV1(requestParameters: ChannelSettingsApiChannelChatSetTelegramSettingV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get telegram post list
     * @param {ChannelSettingsApiChannelChatTelegramPostsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatTelegramPostsV1(requestParameters: ChannelSettingsApiChannelChatTelegramPostsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<TelegramChatPostsResponseDto>;
    /**
     *
     * @summary Optional settings for telegram
     * @param {ChannelSettingsApiChannelChatUpdateOptionsTelegramV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelChatUpdateOptionsTelegramV1(requestParameters: ChannelSettingsApiChannelChatUpdateOptionsTelegramV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get planned list
     * @param {ChannelSettingsApiChannelOptionsGetPlannedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsGetPlannedV1(requestParameters: ChannelSettingsApiChannelOptionsGetPlannedV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfSitePlannedResponse>;
    /**
     *
     * @summary Get playlists from the platform
     * @param {ChannelSettingsApiChannelOptionsGetPlayListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsGetPlayListV1(requestParameters: ChannelSettingsApiChannelOptionsGetPlayListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfPlaylistItemResponse>;
    /**
     *
     * @summary Optional settings for ok. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsOkV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsOkV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsOkV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for trovo. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsTrovoV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for twitch. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsTwitchV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for vk. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsVkV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsVkV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsVkV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for vk video live. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsVkVideoLiveV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Optional settings for youtube. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdateOptionsYoutubeV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Set planned id. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdatePlannedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelOptionsUpdatePlannedV1(requestParameters: ChannelSettingsApiChannelOptionsUpdatePlannedV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SitePlannedResponse>;
    /**
     *
     * @summary Get status platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingGetStatusV1(options?: RawAxiosRequestConfig): AxiosPromise<SiteChannelStatusResponse>;
    /**
     *
     * @summary Set name from custom channel. Global settings.
     * @param {ChannelSettingsApiChannelSettingSetNameV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingSetNameV1(requestParameters: ChannelSettingsApiChannelSettingSetNameV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Set rtmp url from channel. Global settings.
     * @param {ChannelSettingsApiChannelSettingUpdateRtmpV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingUpdateRtmpV1(requestParameters: ChannelSettingsApiChannelSettingUpdateRtmpV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get status platform
     * @param {ChannelSettingsApiChannelSettingUpdateTokenV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingUpdateTokenV1(requestParameters: ChannelSettingsApiChannelSettingUpdateTokenV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Set transcoder from channel. Personal settings.
     * @param {ChannelSettingsApiChannelSettingUpdateTranscoderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    channelSettingUpdateTranscoderV1(requestParameters: ChannelSettingsApiChannelSettingUpdateTranscoderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get telegram post by filter
     * @param {ChannelSettingsApiTelegramGetPostByFilterV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApiInterface
     */
    telegramGetPostByFilterV1(requestParameters: ChannelSettingsApiTelegramGetPostByFilterV1Request, options?: RawAxiosRequestConfig): AxiosPromise<TelegramChatPostsItem>;
}
/**
 * Request parameters for channelChatGetTelegramSettingV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelChatGetTelegramSettingV1Request
 */
export interface ChannelSettingsApiChannelChatGetTelegramSettingV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelSettingsApiChannelChatGetTelegramSettingV1
     */
    readonly language: ChannelChatGetTelegramSettingV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatGetTelegramSettingV1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatGetTelegramSettingV1
     */
    readonly channelId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelSettingsApiChannelChatGetTelegramSettingV1
     */
    readonly v?: ChannelChatGetTelegramSettingV1VEnum;
}
/**
 * Request parameters for channelChatInitTelegramChatConnectV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelChatInitTelegramChatConnectV1Request
 */
export interface ChannelSettingsApiChannelChatInitTelegramChatConnectV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelSettingsApiChannelChatInitTelegramChatConnectV1
     */
    readonly language: ChannelChatInitTelegramChatConnectV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatInitTelegramChatConnectV1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatInitTelegramChatConnectV1
     */
    readonly channelId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelSettingsApiChannelChatInitTelegramChatConnectV1
     */
    readonly v?: ChannelChatInitTelegramChatConnectV1VEnum;
}
/**
 * Request parameters for channelChatRemoveTelegramChatV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelChatRemoveTelegramChatV1Request
 */
export interface ChannelSettingsApiChannelChatRemoveTelegramChatV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelSettingsApiChannelChatRemoveTelegramChatV1
     */
    readonly language: ChannelChatRemoveTelegramChatV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatRemoveTelegramChatV1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatRemoveTelegramChatV1
     */
    readonly channelId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelSettingsApiChannelChatRemoveTelegramChatV1
     */
    readonly v?: ChannelChatRemoveTelegramChatV1VEnum;
}
/**
 * Request parameters for channelChatSetTelegramSettingV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelChatSetTelegramSettingV1Request
 */
export interface ChannelSettingsApiChannelChatSetTelegramSettingV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelSettingsApiChannelChatSetTelegramSettingV1
     */
    readonly language: ChannelChatSetTelegramSettingV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatSetTelegramSettingV1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatSetTelegramSettingV1
     */
    readonly channelId: number;
    /**
     *
     * @type {TelegramSetSettingsRequestDto}
     * @memberof ChannelSettingsApiChannelChatSetTelegramSettingV1
     */
    readonly telegramSetSettingsRequestDto: TelegramSetSettingsRequestDto;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelSettingsApiChannelChatSetTelegramSettingV1
     */
    readonly v?: ChannelChatSetTelegramSettingV1VEnum;
}
/**
 * Request parameters for channelChatTelegramPostsV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelChatTelegramPostsV1Request
 */
export interface ChannelSettingsApiChannelChatTelegramPostsV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelSettingsApiChannelChatTelegramPostsV1
     */
    readonly language: ChannelChatTelegramPostsV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatTelegramPostsV1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof ChannelSettingsApiChannelChatTelegramPostsV1
     */
    readonly channelId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelSettingsApiChannelChatTelegramPostsV1
     */
    readonly v?: ChannelChatTelegramPostsV1VEnum;
}
/**
 * Request parameters for channelChatUpdateOptionsTelegramV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelChatUpdateOptionsTelegramV1Request
 */
export interface ChannelSettingsApiChannelChatUpdateOptionsTelegramV1Request {
    /**
     *
     * @type {SiteUpdateChatTelegramRequest}
     * @memberof ChannelSettingsApiChannelChatUpdateOptionsTelegramV1
     */
    readonly siteUpdateChatTelegramRequest: SiteUpdateChatTelegramRequest;
}
/**
 * Request parameters for channelOptionsGetPlannedV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelOptionsGetPlannedV1Request
 */
export interface ChannelSettingsApiChannelOptionsGetPlannedV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelSettingsApiChannelOptionsGetPlannedV1
     */
    readonly language: ChannelOptionsGetPlannedV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof ChannelSettingsApiChannelOptionsGetPlannedV1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof ChannelSettingsApiChannelOptionsGetPlannedV1
     */
    readonly channelId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelSettingsApiChannelOptionsGetPlannedV1
     */
    readonly v?: ChannelOptionsGetPlannedV1VEnum;
}
/**
 * Request parameters for channelOptionsGetPlayListV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelOptionsGetPlayListV1Request
 */
export interface ChannelSettingsApiChannelOptionsGetPlayListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelSettingsApiChannelOptionsGetPlayListV1
     */
    readonly language: ChannelOptionsGetPlayListV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof ChannelSettingsApiChannelOptionsGetPlayListV1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof ChannelSettingsApiChannelOptionsGetPlayListV1
     */
    readonly channelId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelSettingsApiChannelOptionsGetPlayListV1
     */
    readonly v?: ChannelOptionsGetPlayListV1VEnum;
}
/**
 * Request parameters for channelOptionsUpdateOptionsOkV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelOptionsUpdateOptionsOkV1Request
 */
export interface ChannelSettingsApiChannelOptionsUpdateOptionsOkV1Request {
    /**
     *
     * @type {SiteUpdateOptionsOkRequest}
     * @memberof ChannelSettingsApiChannelOptionsUpdateOptionsOkV1
     */
    readonly siteUpdateOptionsOkRequest: SiteUpdateOptionsOkRequest;
}
/**
 * Request parameters for channelOptionsUpdateOptionsTrovoV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1Request
 */
export interface ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1Request {
    /**
     *
     * @type {SiteUpdateOptionsTrovoRequest}
     * @memberof ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1
     */
    readonly siteUpdateOptionsTrovoRequest: SiteUpdateOptionsTrovoRequest;
}
/**
 * Request parameters for channelOptionsUpdateOptionsTwitchV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1Request
 */
export interface ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1Request {
    /**
     *
     * @type {SiteUpdateOptionsTwitchRequest}
     * @memberof ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1
     */
    readonly siteUpdateOptionsTwitchRequest: SiteUpdateOptionsTwitchRequest;
}
/**
 * Request parameters for channelOptionsUpdateOptionsVkV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelOptionsUpdateOptionsVkV1Request
 */
export interface ChannelSettingsApiChannelOptionsUpdateOptionsVkV1Request {
    /**
     *
     * @type {SiteUpdateOptionsVkRequest}
     * @memberof ChannelSettingsApiChannelOptionsUpdateOptionsVkV1
     */
    readonly siteUpdateOptionsVkRequest: SiteUpdateOptionsVkRequest;
}
/**
 * Request parameters for channelOptionsUpdateOptionsVkVideoLiveV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1Request
 */
export interface ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1Request {
    /**
     *
     * @type {SiteUpdateOptionsVkVideoLiveRequest}
     * @memberof ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1
     */
    readonly siteUpdateOptionsVkVideoLiveRequest: SiteUpdateOptionsVkVideoLiveRequest;
}
/**
 * Request parameters for channelOptionsUpdateOptionsYoutubeV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1Request
 */
export interface ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1Request {
    /**
     *
     * @type {SiteUpdateOptionsYoutubeRequest}
     * @memberof ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1
     */
    readonly siteUpdateOptionsYoutubeRequest: SiteUpdateOptionsYoutubeRequest;
}
/**
 * Request parameters for channelOptionsUpdatePlannedV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelOptionsUpdatePlannedV1Request
 */
export interface ChannelSettingsApiChannelOptionsUpdatePlannedV1Request {
    /**
     *
     * @type {SiteSetPlannedRequest}
     * @memberof ChannelSettingsApiChannelOptionsUpdatePlannedV1
     */
    readonly siteSetPlannedRequest: SiteSetPlannedRequest;
}
/**
 * Request parameters for channelSettingSetNameV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelSettingSetNameV1Request
 */
export interface ChannelSettingsApiChannelSettingSetNameV1Request {
    /**
     *
     * @type {SiteSetNameRequest}
     * @memberof ChannelSettingsApiChannelSettingSetNameV1
     */
    readonly siteSetNameRequest: SiteSetNameRequest;
}
/**
 * Request parameters for channelSettingUpdateRtmpV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelSettingUpdateRtmpV1Request
 */
export interface ChannelSettingsApiChannelSettingUpdateRtmpV1Request {
    /**
     *
     * @type {SiteSetUrlRequest}
     * @memberof ChannelSettingsApiChannelSettingUpdateRtmpV1
     */
    readonly siteSetUrlRequest: SiteSetUrlRequest;
}
/**
 * Request parameters for channelSettingUpdateTokenV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelSettingUpdateTokenV1Request
 */
export interface ChannelSettingsApiChannelSettingUpdateTokenV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelSettingsApiChannelSettingUpdateTokenV1
     */
    readonly language: ChannelSettingUpdateTokenV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof ChannelSettingsApiChannelSettingUpdateTokenV1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof ChannelSettingsApiChannelSettingUpdateTokenV1
     */
    readonly channelId: number;
    /**
     * Token role
     * @type {'account' | 'group'}
     * @memberof ChannelSettingsApiChannelSettingUpdateTokenV1
     */
    readonly role: ChannelSettingUpdateTokenV1RoleEnum;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelSettingsApiChannelSettingUpdateTokenV1
     */
    readonly v?: ChannelSettingUpdateTokenV1VEnum;
}
/**
 * Request parameters for channelSettingUpdateTranscoderV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiChannelSettingUpdateTranscoderV1Request
 */
export interface ChannelSettingsApiChannelSettingUpdateTranscoderV1Request {
    /**
     *
     * @type {SiteSetTranscoderRequest}
     * @memberof ChannelSettingsApiChannelSettingUpdateTranscoderV1
     */
    readonly siteSetTranscoderRequest: SiteSetTranscoderRequest;
}
/**
 * Request parameters for telegramGetPostByFilterV1 operation in ChannelSettingsApi.
 * @export
 * @interface ChannelSettingsApiTelegramGetPostByFilterV1Request
 */
export interface ChannelSettingsApiTelegramGetPostByFilterV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof ChannelSettingsApiTelegramGetPostByFilterV1
     */
    readonly language: TelegramGetPostByFilterV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof ChannelSettingsApiTelegramGetPostByFilterV1
     */
    readonly projectId: number;
    /**
     * Channel id
     * @type {number}
     * @memberof ChannelSettingsApiTelegramGetPostByFilterV1
     */
    readonly channelId: number;
    /**
     *
     * @type {number}
     * @memberof ChannelSettingsApiTelegramGetPostByFilterV1
     */
    readonly filterMode: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof ChannelSettingsApiTelegramGetPostByFilterV1
     */
    readonly v?: TelegramGetPostByFilterV1VEnum;
}
/**
 * ChannelSettingsApi - object-oriented interface
 * @export
 * @class ChannelSettingsApi
 * @extends {BaseAPI}
 */
export declare class ChannelSettingsApi extends BaseAPI implements ChannelSettingsApiInterface {
    /**
     *
     * @summary Get telegram settings
     * @param {ChannelSettingsApiChannelChatGetTelegramSettingV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelChatGetTelegramSettingV1(requestParameters: ChannelSettingsApiChannelChatGetTelegramSettingV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TelegramSettingsResponseDto, any>>;
    /**
     *
     * @summary Get code for connected chat
     * @param {ChannelSettingsApiChannelChatInitTelegramChatConnectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelChatInitTelegramChatConnectV1(requestParameters: ChannelSettingsApiChannelChatInitTelegramChatConnectV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TelegramInitConnectResponseDto, any>>;
    /**
     *
     * @summary Disconnect telegram chat
     * @param {ChannelSettingsApiChannelChatRemoveTelegramChatV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelChatRemoveTelegramChatV1(requestParameters: ChannelSettingsApiChannelChatRemoveTelegramChatV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Set telegram settings
     * @param {ChannelSettingsApiChannelChatSetTelegramSettingV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelChatSetTelegramSettingV1(requestParameters: ChannelSettingsApiChannelChatSetTelegramSettingV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Get telegram post list
     * @param {ChannelSettingsApiChannelChatTelegramPostsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelChatTelegramPostsV1(requestParameters: ChannelSettingsApiChannelChatTelegramPostsV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TelegramChatPostsResponseDto, any>>;
    /**
     *
     * @summary Optional settings for telegram
     * @param {ChannelSettingsApiChannelChatUpdateOptionsTelegramV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelChatUpdateOptionsTelegramV1(requestParameters: ChannelSettingsApiChannelChatUpdateOptionsTelegramV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Get planned list
     * @param {ChannelSettingsApiChannelOptionsGetPlannedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelOptionsGetPlannedV1(requestParameters: ChannelSettingsApiChannelOptionsGetPlannedV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").ListResponse, any>>;
    /**
     *
     * @summary Get playlists from the platform
     * @param {ChannelSettingsApiChannelOptionsGetPlayListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelOptionsGetPlayListV1(requestParameters: ChannelSettingsApiChannelOptionsGetPlayListV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").ListResponse, any>>;
    /**
     *
     * @summary Optional settings for ok. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsOkV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelOptionsUpdateOptionsOkV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsOkV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Optional settings for trovo. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelOptionsUpdateOptionsTrovoV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsTrovoV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Optional settings for twitch. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelOptionsUpdateOptionsTwitchV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsTwitchV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Optional settings for vk. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsVkV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelOptionsUpdateOptionsVkV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsVkV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Optional settings for vk video live. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelOptionsUpdateOptionsVkVideoLiveV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsVkVideoLiveV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Optional settings for youtube. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelOptionsUpdateOptionsYoutubeV1(requestParameters: ChannelSettingsApiChannelOptionsUpdateOptionsYoutubeV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Set planned id. Depends on the tariff.
     * @param {ChannelSettingsApiChannelOptionsUpdatePlannedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelOptionsUpdatePlannedV1(requestParameters: ChannelSettingsApiChannelOptionsUpdatePlannedV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SitePlannedResponse, any>>;
    /**
     *
     * @summary Get status platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelSettingGetStatusV1(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SiteChannelStatusResponse, any>>;
    /**
     *
     * @summary Set name from custom channel. Global settings.
     * @param {ChannelSettingsApiChannelSettingSetNameV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelSettingSetNameV1(requestParameters: ChannelSettingsApiChannelSettingSetNameV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Set rtmp url from channel. Global settings.
     * @param {ChannelSettingsApiChannelSettingUpdateRtmpV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelSettingUpdateRtmpV1(requestParameters: ChannelSettingsApiChannelSettingUpdateRtmpV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Get status platform
     * @param {ChannelSettingsApiChannelSettingUpdateTokenV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelSettingUpdateTokenV1(requestParameters: ChannelSettingsApiChannelSettingUpdateTokenV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Set transcoder from channel. Personal settings.
     * @param {ChannelSettingsApiChannelSettingUpdateTranscoderV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    channelSettingUpdateTranscoderV1(requestParameters: ChannelSettingsApiChannelSettingUpdateTranscoderV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Get telegram post by filter
     * @param {ChannelSettingsApiTelegramGetPostByFilterV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    telegramGetPostByFilterV1(requestParameters: ChannelSettingsApiTelegramGetPostByFilterV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TelegramChatPostsItem, any>>;
}
/**
 * @export
 */
export declare const ChannelChatGetTelegramSettingV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type ChannelChatGetTelegramSettingV1LanguageEnum = typeof ChannelChatGetTelegramSettingV1LanguageEnum[keyof typeof ChannelChatGetTelegramSettingV1LanguageEnum];
/**
 * @export
 */
export declare const ChannelChatGetTelegramSettingV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ChannelChatGetTelegramSettingV1VEnum = typeof ChannelChatGetTelegramSettingV1VEnum[keyof typeof ChannelChatGetTelegramSettingV1VEnum];
/**
 * @export
 */
export declare const ChannelChatInitTelegramChatConnectV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type ChannelChatInitTelegramChatConnectV1LanguageEnum = typeof ChannelChatInitTelegramChatConnectV1LanguageEnum[keyof typeof ChannelChatInitTelegramChatConnectV1LanguageEnum];
/**
 * @export
 */
export declare const ChannelChatInitTelegramChatConnectV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ChannelChatInitTelegramChatConnectV1VEnum = typeof ChannelChatInitTelegramChatConnectV1VEnum[keyof typeof ChannelChatInitTelegramChatConnectV1VEnum];
/**
 * @export
 */
export declare const ChannelChatRemoveTelegramChatV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type ChannelChatRemoveTelegramChatV1LanguageEnum = typeof ChannelChatRemoveTelegramChatV1LanguageEnum[keyof typeof ChannelChatRemoveTelegramChatV1LanguageEnum];
/**
 * @export
 */
export declare const ChannelChatRemoveTelegramChatV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ChannelChatRemoveTelegramChatV1VEnum = typeof ChannelChatRemoveTelegramChatV1VEnum[keyof typeof ChannelChatRemoveTelegramChatV1VEnum];
/**
 * @export
 */
export declare const ChannelChatSetTelegramSettingV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type ChannelChatSetTelegramSettingV1LanguageEnum = typeof ChannelChatSetTelegramSettingV1LanguageEnum[keyof typeof ChannelChatSetTelegramSettingV1LanguageEnum];
/**
 * @export
 */
export declare const ChannelChatSetTelegramSettingV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ChannelChatSetTelegramSettingV1VEnum = typeof ChannelChatSetTelegramSettingV1VEnum[keyof typeof ChannelChatSetTelegramSettingV1VEnum];
/**
 * @export
 */
export declare const ChannelChatTelegramPostsV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type ChannelChatTelegramPostsV1LanguageEnum = typeof ChannelChatTelegramPostsV1LanguageEnum[keyof typeof ChannelChatTelegramPostsV1LanguageEnum];
/**
 * @export
 */
export declare const ChannelChatTelegramPostsV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ChannelChatTelegramPostsV1VEnum = typeof ChannelChatTelegramPostsV1VEnum[keyof typeof ChannelChatTelegramPostsV1VEnum];
/**
 * @export
 */
export declare const ChannelOptionsGetPlannedV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type ChannelOptionsGetPlannedV1LanguageEnum = typeof ChannelOptionsGetPlannedV1LanguageEnum[keyof typeof ChannelOptionsGetPlannedV1LanguageEnum];
/**
 * @export
 */
export declare const ChannelOptionsGetPlannedV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ChannelOptionsGetPlannedV1VEnum = typeof ChannelOptionsGetPlannedV1VEnum[keyof typeof ChannelOptionsGetPlannedV1VEnum];
/**
 * @export
 */
export declare const ChannelOptionsGetPlayListV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type ChannelOptionsGetPlayListV1LanguageEnum = typeof ChannelOptionsGetPlayListV1LanguageEnum[keyof typeof ChannelOptionsGetPlayListV1LanguageEnum];
/**
 * @export
 */
export declare const ChannelOptionsGetPlayListV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ChannelOptionsGetPlayListV1VEnum = typeof ChannelOptionsGetPlayListV1VEnum[keyof typeof ChannelOptionsGetPlayListV1VEnum];
/**
 * @export
 */
export declare const ChannelSettingUpdateTokenV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type ChannelSettingUpdateTokenV1LanguageEnum = typeof ChannelSettingUpdateTokenV1LanguageEnum[keyof typeof ChannelSettingUpdateTokenV1LanguageEnum];
/**
 * @export
 */
export declare const ChannelSettingUpdateTokenV1RoleEnum: {
    readonly Account: "account";
    readonly Group: "group";
};
export type ChannelSettingUpdateTokenV1RoleEnum = typeof ChannelSettingUpdateTokenV1RoleEnum[keyof typeof ChannelSettingUpdateTokenV1RoleEnum];
/**
 * @export
 */
export declare const ChannelSettingUpdateTokenV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type ChannelSettingUpdateTokenV1VEnum = typeof ChannelSettingUpdateTokenV1VEnum[keyof typeof ChannelSettingUpdateTokenV1VEnum];
/**
 * @export
 */
export declare const TelegramGetPostByFilterV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type TelegramGetPostByFilterV1LanguageEnum = typeof TelegramGetPostByFilterV1LanguageEnum[keyof typeof TelegramGetPostByFilterV1LanguageEnum];
/**
 * @export
 */
export declare const TelegramGetPostByFilterV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type TelegramGetPostByFilterV1VEnum = typeof TelegramGetPostByFilterV1VEnum[keyof typeof TelegramGetPostByFilterV1VEnum];
//# sourceMappingURL=channel-settings-api.d.ts.map