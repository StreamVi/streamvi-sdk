"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.shortChannelList1LanguageEnum = exports.shortChannelList1VEnum = exports.searchTypeEnum = exports.searchLanguageEnum = exports.searchVEnum = exports.ChannelApi = exports.factory = exports.fp = exports.axiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ChannelApi - axios parameter creator
 * @export
 */
const axiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Search channel list
         * @param {searchVEnum} v Version
         * @param {searchLanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {searchTypeEnum} [type]
         * @param {string} [platform] platform type
         * @param {string} [name] name
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (v, language, projectId, type, platform, name, limit, offset, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('search', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('search', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('search', 'projectId', projectId);
            const localVarPath = `/method/channel/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication X-API-KEY required
            await (0, common_1.keyToObject)(localVarHeaderParameter, "X-API-KEY", configuration);
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get live status
         * @param {MethodSetStatusChannelRequest} methodSetStatusChannelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStatus: async (methodSetStatusChannelRequest, options = {}) => {
            // verify required parameter 'methodSetStatusChannelRequest' is not null or undefined
            (0, common_1.assertParamExists)('setStatus', 'methodSetStatusChannelRequest', methodSetStatusChannelRequest);
            const localVarPath = `/method/channel/set-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication X-API-KEY required
            await (0, common_1.keyToObject)(localVarHeaderParameter, "X-API-KEY", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(methodSetStatusChannelRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Minimal channel list
         * @param {shortChannelList1VEnum} v Version
         * @param {shortChannelList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shortChannelList1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('shortChannelList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('shortChannelList1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('shortChannelList1', 'projectId', projectId);
            const localVarPath = `/method/channel/short`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.axiosParamCreator = axiosParamCreator;
/**
 * ChannelApi - functional programming interface
 * @export
 */
const fp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.axiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Search channel list
         * @param {searchVEnum} v Version
         * @param {searchLanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {searchTypeEnum} [type]
         * @param {string} [platform] platform type
         * @param {string} [name] name
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(v, language, projectId, type, platform, name, limit, offset, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(v, language, projectId, type, platform, name, limit, offset, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelApi.search']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get live status
         * @param {MethodSetStatusChannelRequest} methodSetStatusChannelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setStatus(methodSetStatusChannelRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.setStatus(methodSetStatusChannelRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelApi.setStatus']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Minimal channel list
         * @param {shortChannelList1VEnum} v Version
         * @param {shortChannelList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shortChannelList1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.shortChannelList1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelApi.shortChannelList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.fp = fp;
/**
 * ChannelApi - factory interface
 * @export
 */
const factory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.fp)(configuration);
    return {
        /**
         *
         * @summary Search channel list
         * @param {searchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(requestParameters, options) {
            return localVarFp.search(requestParameters.v, requestParameters.language, requestParameters.projectId, requestParameters.type, requestParameters.platform, requestParameters.name, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get live status
         * @param {setStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStatus(requestParameters, options) {
            return localVarFp.setStatus(requestParameters.methodSetStatusChannelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Minimal channel list
         * @param {shortChannelList1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shortChannelList1(requestParameters, options) {
            // Автоматически устанавливаем версию из названия метода если не передана
            const actualV = requestParameters.v || shortChannelList1VEnum._1;
            return localVarFp.shortChannelList1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.factory = factory;
/**
 * ChannelApi - object-oriented interface
 * @export
 * @class ChannelApi
 * @extends {BaseAPI}
 */
class ChannelApi extends base_1.BaseAPI {
    /**
     *
     * @summary Search channel list
     * @param {searchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    search(requestParameters, options) {
        return (0, exports.fp)(this.configuration).search(requestParameters.v, requestParameters.language, requestParameters.projectId, requestParameters.type, requestParameters.platform, requestParameters.name, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get live status
     * @param {setStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    setStatus(requestParameters, options) {
        return (0, exports.fp)(this.configuration).setStatus(requestParameters.methodSetStatusChannelRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Minimal channel list
     * @param {shortChannelList1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    shortChannelList1(requestParameters, options) {
        // Автоматически устанавливаем версию из названия метода если не передана
        const actualV = requestParameters.v || shortChannelList1VEnum._1;
        return (0, exports.fp)(this.configuration).shortChannelList1(actualV, requestParameters.language, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ChannelApi = ChannelApi;
/**
  * @export
  * @enum {string}
  */
var searchVEnum;
(function (searchVEnum) {
    searchVEnum["_1"] = "1";
    searchVEnum["_2"] = "2";
    searchVEnum["_3"] = "3";
})(searchVEnum || (exports.searchVEnum = searchVEnum = {}));
/**
  * @export
  * @enum {string}
  */
var searchLanguageEnum;
(function (searchLanguageEnum) {
    searchLanguageEnum["ru"] = "ru";
    searchLanguageEnum["en"] = "en";
    searchLanguageEnum["cn"] = "cn";
})(searchLanguageEnum || (exports.searchLanguageEnum = searchLanguageEnum = {}));
/**
  * @export
  * @enum {string}
  */
var searchTypeEnum;
(function (searchTypeEnum) {
    searchTypeEnum["all"] = "all";
    searchTypeEnum["my"] = "my";
    searchTypeEnum["available"] = "available";
    searchTypeEnum["active"] = "active";
})(searchTypeEnum || (exports.searchTypeEnum = searchTypeEnum = {}));
/**
  * @export
  * @enum {string}
  */
var shortChannelList1VEnum;
(function (shortChannelList1VEnum) {
    shortChannelList1VEnum["_1"] = "1";
    shortChannelList1VEnum["_2"] = "2";
    shortChannelList1VEnum["_3"] = "3";
})(shortChannelList1VEnum || (exports.shortChannelList1VEnum = shortChannelList1VEnum = {}));
/**
  * @export
  * @enum {string}
  */
var shortChannelList1LanguageEnum;
(function (shortChannelList1LanguageEnum) {
    shortChannelList1LanguageEnum["ru"] = "ru";
    shortChannelList1LanguageEnum["en"] = "en";
    shortChannelList1LanguageEnum["cn"] = "cn";
})(shortChannelList1LanguageEnum || (exports.shortChannelList1LanguageEnum = shortChannelList1LanguageEnum = {}));
