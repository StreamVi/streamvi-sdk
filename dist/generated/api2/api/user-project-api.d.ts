/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { ListOfUserProject2ProjectResponse } from '../models';
import type { PaginatedResponseOfUserProjectResponse } from '../models';
import type { ProjectInfoResponse } from '../models';
import type { SuccessResponse } from '../models';
import type { UserProjectGetResponse } from '../models';
/**
 * UserProjectApi - axios parameter creator
 * @export
 */
export declare const UserProjectApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Change access user from project
     * @param {UserProjectChangeAccessV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} userId User id
     * @param {UserProjectChangeAccessV1AccessTypeEnum} accessType Access type
     * @param {UserProjectChangeAccessV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectChangeAccessV1: (language: UserProjectChangeAccessV1LanguageEnum, projectId: number, userId: number, accessType: UserProjectChangeAccessV1AccessTypeEnum, v?: UserProjectChangeAccessV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove user from project
     * @param {UserProjectDelV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} userId User id
     * @param {UserProjectDelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectDelV1: (language: UserProjectDelV1LanguageEnum, projectId: number, userId: number, v?: UserProjectDelV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get project full info
     * @param {UserProjectGetProjectInfoV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {UserProjectGetProjectInfoV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectGetProjectInfoV1: (language: UserProjectGetProjectInfoV1LanguageEnum, projectId: number, v?: UserProjectGetProjectInfoV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get project by number id
     * @param {UserProjectGetProjectV1LanguageEnum} language Current language
     * @param {string} projectExternalId Project external id
     * @param {UserProjectGetProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectGetProjectV1: (language: UserProjectGetProjectV1LanguageEnum, projectExternalId: string, v?: UserProjectGetProjectV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get user by number id
     * @param {UserProjectGetUserV1LanguageEnum} language Current language
     * @param {string} userExternalId User external id
     * @param {UserProjectGetUserV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectGetUserV1: (language: UserProjectGetUserV1LanguageEnum, userExternalId: string, v?: UserProjectGetUserV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of user in project
     * @param {UserProjectListAccessV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {UserProjectListAccessV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectListAccessV1: (language: UserProjectListAccessV1LanguageEnum, projectId: number, v?: UserProjectListAccessV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of project for current user
     * @param {UserProjectListV1LanguageEnum} language Current language
     * @param {UserProjectListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectListV1: (language: UserProjectListV1LanguageEnum, v?: UserProjectListV1VEnum, limit?: number, offset?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Select user for project
     * @param {UserProjectSelectProjectV1LanguageEnum} language Current language
     * @param {number} id Project internal id
     * @param {UserProjectSelectProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectSelectProjectV1: (language: UserProjectSelectProjectV1LanguageEnum, id: number, v?: UserProjectSelectProjectV1VEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserProjectApi - functional programming interface
 * @export
 */
export declare const UserProjectApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Change access user from project
     * @param {UserProjectChangeAccessV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} userId User id
     * @param {UserProjectChangeAccessV1AccessTypeEnum} accessType Access type
     * @param {UserProjectChangeAccessV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectChangeAccessV1(language: UserProjectChangeAccessV1LanguageEnum, projectId: number, userId: number, accessType: UserProjectChangeAccessV1AccessTypeEnum, v?: UserProjectChangeAccessV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Remove user from project
     * @param {UserProjectDelV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} userId User id
     * @param {UserProjectDelV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectDelV1(language: UserProjectDelV1LanguageEnum, projectId: number, userId: number, v?: UserProjectDelV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Get project full info
     * @param {UserProjectGetProjectInfoV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {UserProjectGetProjectInfoV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectGetProjectInfoV1(language: UserProjectGetProjectInfoV1LanguageEnum, projectId: number, v?: UserProjectGetProjectInfoV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectInfoResponse>>;
    /**
     *
     * @summary Get project by number id
     * @param {UserProjectGetProjectV1LanguageEnum} language Current language
     * @param {string} projectExternalId Project external id
     * @param {UserProjectGetProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectGetProjectV1(language: UserProjectGetProjectV1LanguageEnum, projectExternalId: string, v?: UserProjectGetProjectV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProjectGetResponse>>;
    /**
     *
     * @summary Get user by number id
     * @param {UserProjectGetUserV1LanguageEnum} language Current language
     * @param {string} userExternalId User external id
     * @param {UserProjectGetUserV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectGetUserV1(language: UserProjectGetUserV1LanguageEnum, userExternalId: string, v?: UserProjectGetUserV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProjectGetResponse>>;
    /**
     *
     * @summary List of user in project
     * @param {UserProjectListAccessV1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {UserProjectListAccessV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectListAccessV1(language: UserProjectListAccessV1LanguageEnum, projectId: number, v?: UserProjectListAccessV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfUserProject2ProjectResponse>>;
    /**
     *
     * @summary List of project for current user
     * @param {UserProjectListV1LanguageEnum} language Current language
     * @param {UserProjectListV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectListV1(language: UserProjectListV1LanguageEnum, v?: UserProjectListV1VEnum, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseOfUserProjectResponse>>;
    /**
     *
     * @summary Select user for project
     * @param {UserProjectSelectProjectV1LanguageEnum} language Current language
     * @param {number} id Project internal id
     * @param {UserProjectSelectProjectV1VEnum} [v] Version (automatically defaults to 1 based on method version, can be overridden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectSelectProjectV1(language: UserProjectSelectProjectV1LanguageEnum, id: number, v?: UserProjectSelectProjectV1VEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProjectGetResponse>>;
};
/**
 * UserProjectApi - factory interface
 * @export
 */
export declare const UserProjectApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Change access user from project
     * @param {UserProjectApiUserProjectChangeAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectChangeAccessV1(requestParameters: UserProjectApiUserProjectChangeAccessV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Remove user from project
     * @param {UserProjectApiUserProjectDelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectDelV1(requestParameters: UserProjectApiUserProjectDelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get project full info
     * @param {UserProjectApiUserProjectGetProjectInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectGetProjectInfoV1(requestParameters: UserProjectApiUserProjectGetProjectInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectInfoResponse>;
    /**
     *
     * @summary Get project by number id
     * @param {UserProjectApiUserProjectGetProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectGetProjectV1(requestParameters: UserProjectApiUserProjectGetProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProjectGetResponse>;
    /**
     *
     * @summary Get user by number id
     * @param {UserProjectApiUserProjectGetUserV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectGetUserV1(requestParameters: UserProjectApiUserProjectGetUserV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProjectGetResponse>;
    /**
     *
     * @summary List of user in project
     * @param {UserProjectApiUserProjectListAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectListAccessV1(requestParameters: UserProjectApiUserProjectListAccessV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfUserProject2ProjectResponse>;
    /**
     *
     * @summary List of project for current user
     * @param {UserProjectApiUserProjectListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectListV1(requestParameters: UserProjectApiUserProjectListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfUserProjectResponse>;
    /**
     *
     * @summary Select user for project
     * @param {UserProjectApiUserProjectSelectProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userProjectSelectProjectV1(requestParameters: UserProjectApiUserProjectSelectProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProjectGetResponse>;
};
/**
 * UserProjectApi - interface
 * @export
 * @interface UserProjectApi
 */
export interface UserProjectApiInterface {
    /**
     *
     * @summary Change access user from project
     * @param {UserProjectApiUserProjectChangeAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApiInterface
     */
    userProjectChangeAccessV1(requestParameters: UserProjectApiUserProjectChangeAccessV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Remove user from project
     * @param {UserProjectApiUserProjectDelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApiInterface
     */
    userProjectDelV1(requestParameters: UserProjectApiUserProjectDelV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get project full info
     * @param {UserProjectApiUserProjectGetProjectInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApiInterface
     */
    userProjectGetProjectInfoV1(requestParameters: UserProjectApiUserProjectGetProjectInfoV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectInfoResponse>;
    /**
     *
     * @summary Get project by number id
     * @param {UserProjectApiUserProjectGetProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApiInterface
     */
    userProjectGetProjectV1(requestParameters: UserProjectApiUserProjectGetProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProjectGetResponse>;
    /**
     *
     * @summary Get user by number id
     * @param {UserProjectApiUserProjectGetUserV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApiInterface
     */
    userProjectGetUserV1(requestParameters: UserProjectApiUserProjectGetUserV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProjectGetResponse>;
    /**
     *
     * @summary List of user in project
     * @param {UserProjectApiUserProjectListAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApiInterface
     */
    userProjectListAccessV1(requestParameters: UserProjectApiUserProjectListAccessV1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfUserProject2ProjectResponse>;
    /**
     *
     * @summary List of project for current user
     * @param {UserProjectApiUserProjectListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApiInterface
     */
    userProjectListV1(requestParameters: UserProjectApiUserProjectListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfUserProjectResponse>;
    /**
     *
     * @summary Select user for project
     * @param {UserProjectApiUserProjectSelectProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApiInterface
     */
    userProjectSelectProjectV1(requestParameters: UserProjectApiUserProjectSelectProjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProjectGetResponse>;
}
/**
 * Request parameters for userProjectChangeAccessV1 operation in UserProjectApi.
 * @export
 * @interface UserProjectApiUserProjectChangeAccessV1Request
 */
export interface UserProjectApiUserProjectChangeAccessV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof UserProjectApiUserProjectChangeAccessV1
     */
    readonly language: UserProjectChangeAccessV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof UserProjectApiUserProjectChangeAccessV1
     */
    readonly projectId: number;
    /**
     * User id
     * @type {number}
     * @memberof UserProjectApiUserProjectChangeAccessV1
     */
    readonly userId: number;
    /**
     * Access type
     * @type {0 | 1 | 2}
     * @memberof UserProjectApiUserProjectChangeAccessV1
     */
    readonly accessType: UserProjectChangeAccessV1AccessTypeEnum;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof UserProjectApiUserProjectChangeAccessV1
     */
    readonly v?: UserProjectChangeAccessV1VEnum;
}
/**
 * Request parameters for userProjectDelV1 operation in UserProjectApi.
 * @export
 * @interface UserProjectApiUserProjectDelV1Request
 */
export interface UserProjectApiUserProjectDelV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof UserProjectApiUserProjectDelV1
     */
    readonly language: UserProjectDelV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof UserProjectApiUserProjectDelV1
     */
    readonly projectId: number;
    /**
     * User id
     * @type {number}
     * @memberof UserProjectApiUserProjectDelV1
     */
    readonly userId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof UserProjectApiUserProjectDelV1
     */
    readonly v?: UserProjectDelV1VEnum;
}
/**
 * Request parameters for userProjectGetProjectInfoV1 operation in UserProjectApi.
 * @export
 * @interface UserProjectApiUserProjectGetProjectInfoV1Request
 */
export interface UserProjectApiUserProjectGetProjectInfoV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof UserProjectApiUserProjectGetProjectInfoV1
     */
    readonly language: UserProjectGetProjectInfoV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof UserProjectApiUserProjectGetProjectInfoV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof UserProjectApiUserProjectGetProjectInfoV1
     */
    readonly v?: UserProjectGetProjectInfoV1VEnum;
}
/**
 * Request parameters for userProjectGetProjectV1 operation in UserProjectApi.
 * @export
 * @interface UserProjectApiUserProjectGetProjectV1Request
 */
export interface UserProjectApiUserProjectGetProjectV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof UserProjectApiUserProjectGetProjectV1
     */
    readonly language: UserProjectGetProjectV1LanguageEnum;
    /**
     * Project external id
     * @type {string}
     * @memberof UserProjectApiUserProjectGetProjectV1
     */
    readonly projectExternalId: string;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof UserProjectApiUserProjectGetProjectV1
     */
    readonly v?: UserProjectGetProjectV1VEnum;
}
/**
 * Request parameters for userProjectGetUserV1 operation in UserProjectApi.
 * @export
 * @interface UserProjectApiUserProjectGetUserV1Request
 */
export interface UserProjectApiUserProjectGetUserV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof UserProjectApiUserProjectGetUserV1
     */
    readonly language: UserProjectGetUserV1LanguageEnum;
    /**
     * User external id
     * @type {string}
     * @memberof UserProjectApiUserProjectGetUserV1
     */
    readonly userExternalId: string;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof UserProjectApiUserProjectGetUserV1
     */
    readonly v?: UserProjectGetUserV1VEnum;
}
/**
 * Request parameters for userProjectListAccessV1 operation in UserProjectApi.
 * @export
 * @interface UserProjectApiUserProjectListAccessV1Request
 */
export interface UserProjectApiUserProjectListAccessV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof UserProjectApiUserProjectListAccessV1
     */
    readonly language: UserProjectListAccessV1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof UserProjectApiUserProjectListAccessV1
     */
    readonly projectId: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof UserProjectApiUserProjectListAccessV1
     */
    readonly v?: UserProjectListAccessV1VEnum;
}
/**
 * Request parameters for userProjectListV1 operation in UserProjectApi.
 * @export
 * @interface UserProjectApiUserProjectListV1Request
 */
export interface UserProjectApiUserProjectListV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof UserProjectApiUserProjectListV1
     */
    readonly language: UserProjectListV1LanguageEnum;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof UserProjectApiUserProjectListV1
     */
    readonly v?: UserProjectListV1VEnum;
    /**
     * Number of results
     * @type {number}
     * @memberof UserProjectApiUserProjectListV1
     */
    readonly limit?: number;
    /**
     * Page offset number
     * @type {number}
     * @memberof UserProjectApiUserProjectListV1
     */
    readonly offset?: number;
}
/**
 * Request parameters for userProjectSelectProjectV1 operation in UserProjectApi.
 * @export
 * @interface UserProjectApiUserProjectSelectProjectV1Request
 */
export interface UserProjectApiUserProjectSelectProjectV1Request {
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof UserProjectApiUserProjectSelectProjectV1
     */
    readonly language: UserProjectSelectProjectV1LanguageEnum;
    /**
     * Project internal id
     * @type {number}
     * @memberof UserProjectApiUserProjectSelectProjectV1
     */
    readonly id: number;
    /**
     * Version (automatically defaults to 1 based on method version, can be overridden)
     * @type {'1' | '2' | '3'}
     * @memberof UserProjectApiUserProjectSelectProjectV1
     */
    readonly v?: UserProjectSelectProjectV1VEnum;
}
/**
 * UserProjectApi - object-oriented interface
 * @export
 * @class UserProjectApi
 * @extends {BaseAPI}
 */
export declare class UserProjectApi extends BaseAPI implements UserProjectApiInterface {
    /**
     *
     * @summary Change access user from project
     * @param {UserProjectApiUserProjectChangeAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    userProjectChangeAccessV1(requestParameters: UserProjectApiUserProjectChangeAccessV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Remove user from project
     * @param {UserProjectApiUserProjectDelV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    userProjectDelV1(requestParameters: UserProjectApiUserProjectDelV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Get project full info
     * @param {UserProjectApiUserProjectGetProjectInfoV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    userProjectGetProjectInfoV1(requestParameters: UserProjectApiUserProjectGetProjectInfoV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectInfoResponse, any>>;
    /**
     *
     * @summary Get project by number id
     * @param {UserProjectApiUserProjectGetProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    userProjectGetProjectV1(requestParameters: UserProjectApiUserProjectGetProjectV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserProjectGetResponse, any>>;
    /**
     *
     * @summary Get user by number id
     * @param {UserProjectApiUserProjectGetUserV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    userProjectGetUserV1(requestParameters: UserProjectApiUserProjectGetUserV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserProjectGetResponse, any>>;
    /**
     *
     * @summary List of user in project
     * @param {UserProjectApiUserProjectListAccessV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    userProjectListAccessV1(requestParameters: UserProjectApiUserProjectListAccessV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").ListResponse, any>>;
    /**
     *
     * @summary List of project for current user
     * @param {UserProjectApiUserProjectListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    userProjectListV1(requestParameters: UserProjectApiUserProjectListV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").PaginatedResponse, any>>;
    /**
     *
     * @summary Select user for project
     * @param {UserProjectApiUserProjectSelectProjectV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    userProjectSelectProjectV1(requestParameters: UserProjectApiUserProjectSelectProjectV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserProjectGetResponse, any>>;
}
/**
 * @export
 */
export declare const UserProjectChangeAccessV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type UserProjectChangeAccessV1LanguageEnum = typeof UserProjectChangeAccessV1LanguageEnum[keyof typeof UserProjectChangeAccessV1LanguageEnum];
/**
 * @export
 */
export declare const UserProjectChangeAccessV1AccessTypeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export type UserProjectChangeAccessV1AccessTypeEnum = typeof UserProjectChangeAccessV1AccessTypeEnum[keyof typeof UserProjectChangeAccessV1AccessTypeEnum];
/**
 * @export
 */
export declare const UserProjectChangeAccessV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type UserProjectChangeAccessV1VEnum = typeof UserProjectChangeAccessV1VEnum[keyof typeof UserProjectChangeAccessV1VEnum];
/**
 * @export
 */
export declare const UserProjectDelV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type UserProjectDelV1LanguageEnum = typeof UserProjectDelV1LanguageEnum[keyof typeof UserProjectDelV1LanguageEnum];
/**
 * @export
 */
export declare const UserProjectDelV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type UserProjectDelV1VEnum = typeof UserProjectDelV1VEnum[keyof typeof UserProjectDelV1VEnum];
/**
 * @export
 */
export declare const UserProjectGetProjectInfoV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type UserProjectGetProjectInfoV1LanguageEnum = typeof UserProjectGetProjectInfoV1LanguageEnum[keyof typeof UserProjectGetProjectInfoV1LanguageEnum];
/**
 * @export
 */
export declare const UserProjectGetProjectInfoV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type UserProjectGetProjectInfoV1VEnum = typeof UserProjectGetProjectInfoV1VEnum[keyof typeof UserProjectGetProjectInfoV1VEnum];
/**
 * @export
 */
export declare const UserProjectGetProjectV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type UserProjectGetProjectV1LanguageEnum = typeof UserProjectGetProjectV1LanguageEnum[keyof typeof UserProjectGetProjectV1LanguageEnum];
/**
 * @export
 */
export declare const UserProjectGetProjectV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type UserProjectGetProjectV1VEnum = typeof UserProjectGetProjectV1VEnum[keyof typeof UserProjectGetProjectV1VEnum];
/**
 * @export
 */
export declare const UserProjectGetUserV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type UserProjectGetUserV1LanguageEnum = typeof UserProjectGetUserV1LanguageEnum[keyof typeof UserProjectGetUserV1LanguageEnum];
/**
 * @export
 */
export declare const UserProjectGetUserV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type UserProjectGetUserV1VEnum = typeof UserProjectGetUserV1VEnum[keyof typeof UserProjectGetUserV1VEnum];
/**
 * @export
 */
export declare const UserProjectListAccessV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type UserProjectListAccessV1LanguageEnum = typeof UserProjectListAccessV1LanguageEnum[keyof typeof UserProjectListAccessV1LanguageEnum];
/**
 * @export
 */
export declare const UserProjectListAccessV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type UserProjectListAccessV1VEnum = typeof UserProjectListAccessV1VEnum[keyof typeof UserProjectListAccessV1VEnum];
/**
 * @export
 */
export declare const UserProjectListV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type UserProjectListV1LanguageEnum = typeof UserProjectListV1LanguageEnum[keyof typeof UserProjectListV1LanguageEnum];
/**
 * @export
 */
export declare const UserProjectListV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type UserProjectListV1VEnum = typeof UserProjectListV1VEnum[keyof typeof UserProjectListV1VEnum];
/**
 * @export
 */
export declare const UserProjectSelectProjectV1LanguageEnum: {
    readonly Ru: "ru";
    readonly En: "en";
    readonly Cn: "cn";
};
export type UserProjectSelectProjectV1LanguageEnum = typeof UserProjectSelectProjectV1LanguageEnum[keyof typeof UserProjectSelectProjectV1LanguageEnum];
/**
 * @export
 */
export declare const UserProjectSelectProjectV1VEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export type UserProjectSelectProjectV1VEnum = typeof UserProjectSelectProjectV1VEnum[keyof typeof UserProjectSelectProjectV1VEnum];
//# sourceMappingURL=user-project-api.d.ts.map