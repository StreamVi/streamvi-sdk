/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { ListOfUserProject2ProjectResponse } from '../models';
import type { PaginatedResponseOfUserProjectResponse } from '../models';
import type { ProjectInfoResponse } from '../models';
import type { SuccessResponse } from '../models';
import type { UserProjectGetResponse } from '../models';
/**
 * UserProjectApi - axios parameter creator
 * @export
 */
export declare const axiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Change access user from project
     * @param {changeAccess1VEnum} v Version
     * @param {changeAccess1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} userId User id
     * @param {changeAccess1AccessTypeEnum} accessType Access type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAccess1: (v: changeAccess1VEnum, language: changeAccess1LanguageEnum, projectId: number, userId: number, accessType: changeAccess1AccessTypeEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove user from project
     * @param {del1VEnum} v Version
     * @param {del1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    del1: (v: del1VEnum, language: del1LanguageEnum, projectId: number, userId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get project by number id
     * @param {getProject1VEnum} v Version
     * @param {getProject1LanguageEnum} language Current language
     * @param {string} projectExternalId Project external id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject1: (v: getProject1VEnum, language: getProject1LanguageEnum, projectExternalId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get project full info
     * @param {getProjectInfo1VEnum} v Version
     * @param {getProjectInfo1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectInfo1: (v: getProjectInfo1VEnum, language: getProjectInfo1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get user by number id
     * @param {getUser1VEnum} v Version
     * @param {getUser1LanguageEnum} language Current language
     * @param {string} userExternalId User external id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser1: (v: getUser1VEnum, language: getUser1LanguageEnum, userExternalId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of project for current user
     * @param {list1VEnum} v Version
     * @param {list1LanguageEnum} language Current language
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1: (v: list1VEnum, language: list1LanguageEnum, limit?: number, offset?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List of user in project
     * @param {listAccess1VEnum} v Version
     * @param {listAccess1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccess1: (v: listAccess1VEnum, language: listAccess1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Select user for project
     * @param {selectProject1VEnum} v Version
     * @param {selectProject1LanguageEnum} language Current language
     * @param {number} id Project internal id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    selectProject1: (v: selectProject1VEnum, language: selectProject1LanguageEnum, id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserProjectApi - functional programming interface
 * @export
 */
export declare const fp: (configuration?: Configuration) => {
    /**
     *
     * @summary Change access user from project
     * @param {changeAccess1VEnum} v Version
     * @param {changeAccess1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} userId User id
     * @param {changeAccess1AccessTypeEnum} accessType Access type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAccess1(v: changeAccess1VEnum, language: changeAccess1LanguageEnum, projectId: number, userId: number, accessType: changeAccess1AccessTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Remove user from project
     * @param {del1VEnum} v Version
     * @param {del1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    del1(v: del1VEnum, language: del1LanguageEnum, projectId: number, userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     *
     * @summary Get project by number id
     * @param {getProject1VEnum} v Version
     * @param {getProject1LanguageEnum} language Current language
     * @param {string} projectExternalId Project external id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject1(v: getProject1VEnum, language: getProject1LanguageEnum, projectExternalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProjectGetResponse>>;
    /**
     *
     * @summary Get project full info
     * @param {getProjectInfo1VEnum} v Version
     * @param {getProjectInfo1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectInfo1(v: getProjectInfo1VEnum, language: getProjectInfo1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectInfoResponse>>;
    /**
     *
     * @summary Get user by number id
     * @param {getUser1VEnum} v Version
     * @param {getUser1LanguageEnum} language Current language
     * @param {string} userExternalId User external id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser1(v: getUser1VEnum, language: getUser1LanguageEnum, userExternalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProjectGetResponse>>;
    /**
     *
     * @summary List of project for current user
     * @param {list1VEnum} v Version
     * @param {list1LanguageEnum} language Current language
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(v: list1VEnum, language: list1LanguageEnum, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseOfUserProjectResponse>>;
    /**
     *
     * @summary List of user in project
     * @param {listAccess1VEnum} v Version
     * @param {listAccess1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccess1(v: listAccess1VEnum, language: listAccess1LanguageEnum, projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfUserProject2ProjectResponse>>;
    /**
     *
     * @summary Select user for project
     * @param {selectProject1VEnum} v Version
     * @param {selectProject1LanguageEnum} language Current language
     * @param {number} id Project internal id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    selectProject1(v: selectProject1VEnum, language: selectProject1LanguageEnum, id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProjectGetResponse>>;
};
/**
 * UserProjectApi - factory interface
 * @export
 */
export declare const factory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Change access user from project
     * @param {changeAccess1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAccess1(requestParameters: changeAccess1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Remove user from project
     * @param {del1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    del1(requestParameters: del1Request, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;
    /**
     *
     * @summary Get project by number id
     * @param {getProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject1(requestParameters: getProject1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProjectGetResponse>;
    /**
     *
     * @summary Get project full info
     * @param {getProjectInfo1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectInfo1(requestParameters: getProjectInfo1Request, options?: RawAxiosRequestConfig): AxiosPromise<ProjectInfoResponse>;
    /**
     *
     * @summary Get user by number id
     * @param {getUser1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser1(requestParameters: getUser1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProjectGetResponse>;
    /**
     *
     * @summary List of project for current user
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseOfUserProjectResponse>;
    /**
     *
     * @summary List of user in project
     * @param {listAccess1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccess1(requestParameters: listAccess1Request, options?: RawAxiosRequestConfig): AxiosPromise<ListOfUserProject2ProjectResponse>;
    /**
     *
     * @summary Select user for project
     * @param {selectProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    selectProject1(requestParameters: selectProject1Request, options?: RawAxiosRequestConfig): AxiosPromise<UserProjectGetResponse>;
};
/**
 * Request parameters for changeAccess1 operation in UserProjectApi.
 * @export
 * @interface changeAccess1Request
 */
export interface changeAccess1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof changeAccess1
     */
    readonly v?: changeAccess1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof changeAccess1
     */
    readonly language: changeAccess1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof changeAccess1
     */
    readonly projectId: number;
    /**
     * User id
     * @type {number}
     * @memberof changeAccess1
     */
    readonly userId: number;
    /**
     * Access type
     * @type {0 | 1 | 2}
     * @memberof changeAccess1
     */
    readonly accessType: changeAccess1AccessTypeEnum;
}
/**
 * Request parameters for del1 operation in UserProjectApi.
 * @export
 * @interface del1Request
 */
export interface del1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof del1
     */
    readonly v?: del1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof del1
     */
    readonly language: del1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof del1
     */
    readonly projectId: number;
    /**
     * User id
     * @type {number}
     * @memberof del1
     */
    readonly userId: number;
}
/**
 * Request parameters for getProject1 operation in UserProjectApi.
 * @export
 * @interface getProject1Request
 */
export interface getProject1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getProject1
     */
    readonly v?: getProject1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getProject1
     */
    readonly language: getProject1LanguageEnum;
    /**
     * Project external id
     * @type {string}
     * @memberof getProject1
     */
    readonly projectExternalId: string;
}
/**
 * Request parameters for getProjectInfo1 operation in UserProjectApi.
 * @export
 * @interface getProjectInfo1Request
 */
export interface getProjectInfo1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getProjectInfo1
     */
    readonly v?: getProjectInfo1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getProjectInfo1
     */
    readonly language: getProjectInfo1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof getProjectInfo1
     */
    readonly projectId: number;
}
/**
 * Request parameters for getUser1 operation in UserProjectApi.
 * @export
 * @interface getUser1Request
 */
export interface getUser1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof getUser1
     */
    readonly v?: getUser1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof getUser1
     */
    readonly language: getUser1LanguageEnum;
    /**
     * User external id
     * @type {string}
     * @memberof getUser1
     */
    readonly userExternalId: string;
}
/**
 * Request parameters for list1 operation in UserProjectApi.
 * @export
 * @interface list1Request
 */
export interface list1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof list1
     */
    readonly v?: list1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof list1
     */
    readonly language: list1LanguageEnum;
    /**
     * Number of results
     * @type {number}
     * @memberof list1
     */
    readonly limit?: number;
    /**
     * Page offset number
     * @type {number}
     * @memberof list1
     */
    readonly offset?: number;
}
/**
 * Request parameters for listAccess1 operation in UserProjectApi.
 * @export
 * @interface listAccess1Request
 */
export interface listAccess1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof listAccess1
     */
    readonly v?: listAccess1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof listAccess1
     */
    readonly language: listAccess1LanguageEnum;
    /**
     * Project id
     * @type {number}
     * @memberof listAccess1
     */
    readonly projectId: number;
}
/**
 * Request parameters for selectProject1 operation in UserProjectApi.
 * @export
 * @interface selectProject1Request
 */
export interface selectProject1Request {
    /**
     * Version
     * @type {'1' | '2' | '3'}
     * @memberof selectProject1
     */
    readonly v?: selectProject1VEnum;
    /**
     * Current language
     * @type {'ru' | 'en' | 'cn'}
     * @memberof selectProject1
     */
    readonly language: selectProject1LanguageEnum;
    /**
     * Project internal id
     * @type {number}
     * @memberof selectProject1
     */
    readonly id: number;
}
/**
 * UserProjectApi - object-oriented interface
 * @export
 * @class UserProjectApi
 * @extends {BaseAPI}
 */
export declare class UserProjectApi extends BaseAPI {
    /**
     *
     * @summary Change access user from project
     * @param {changeAccess1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    changeAccess1(requestParameters: changeAccess1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Remove user from project
     * @param {del1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    del1(requestParameters: del1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     *
     * @summary Get project by number id
     * @param {getProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    getProject1(requestParameters: getProject1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserProjectGetResponse, any>>;
    /**
     *
     * @summary Get project full info
     * @param {getProjectInfo1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    getProjectInfo1(requestParameters: getProjectInfo1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectInfoResponse, any>>;
    /**
     *
     * @summary Get user by number id
     * @param {getUser1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    getUser1(requestParameters: getUser1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserProjectGetResponse, any>>;
    /**
     *
     * @summary List of project for current user
     * @param {list1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    list1(requestParameters: list1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").PaginatedResponse, any>>;
    /**
     *
     * @summary List of user in project
     * @param {listAccess1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    listAccess1(requestParameters: listAccess1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").ListResponse, any>>;
    /**
     *
     * @summary Select user for project
     * @param {selectProject1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    selectProject1(requestParameters: selectProject1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserProjectGetResponse, any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum changeAccess1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum changeAccess1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum changeAccess1AccessTypeEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
  * @export
  * @enum {string}
  */
export declare enum del1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum del1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getProject1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getProject1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getProjectInfo1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getProjectInfo1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getUser1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum getUser1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum list1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum list1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum listAccess1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum listAccess1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
/**
  * @export
  * @enum {string}
  */
export declare enum selectProject1VEnum {
    _1 = "1",
    _2 = "2",
    _3 = "3"
}
/**
  * @export
  * @enum {string}
  */
export declare enum selectProject1LanguageEnum {
    ru = "ru",
    en = "en",
    cn = "cn"
}
//# sourceMappingURL=user-project-api.d.ts.map