"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * StreamVi Backend
 * API
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentCreateRequestRestreamBodyDtoPlanPeriodEnum = exports.PaymentCreateRequestRestreamBodyDtoTypeEnum = exports.PaymentCreateRequestRestreamBodyDtoLanguageEnum = exports.PaymentCreateRequestRestreamBodyDtoVEnum = exports.PaySystemListResponseCurrencyEnum = exports.PaySettingResponseV3CurrencyEnum = exports.PaySettingBodyDtoLanguageEnum = exports.PaySettingBodyDtoVEnum = exports.PayCheckCountryResponseCurrencyEnum = exports.NotifyUserRelationMobileEnum = exports.NotifyUserRelationTelegramEnum = exports.NotifyUserRelationCabinetEnum = exports.NotifyHistorySiteResponseCategoryEnum = exports.NotifyHistorySiteResponseChannelEnum = exports.MoneyFlowResponseTypeEnum = exports.MoneyFlowResponseCurrencyEnum = exports.MethodSetStatusChannelRequestLanguageEnum = exports.MethodSetStatusChannelRequestVEnum = exports.InternalNotifyTypeTextLanguageIsoEnum = exports.InternalNotifyTypeTextLanguageEnum = exports.InternalNotifyTypeActionTextLanguageIsoEnum = exports.InternalNotifyTypeActionTextLanguageEnum = exports.InternalNotifyTypeActionGroupTypeEnum = exports.InternalNotifyTypeActionTypeEnum = exports.InternalNotifyTypeActionNameEnum = exports.HelpPageResponseAltLanguagesEnum = exports.HelpPageResponseLanguageIsoEnum = exports.HelpPageResponseLanguageEnum = exports.HelpPageResponseStatusEnum = exports.CreatePullKeyRequestTransportEnum = exports.CreatePullKeyRequestLanguageEnum = exports.CreatePullKeyRequestVEnum = exports.CheckPullKeyResponseStatusEnum = exports.CheckPullKeyResponseTransportEnum = exports.ChannelYoutubeInfoDtoAudienceEnum = exports.ChannelYoutubeInfoDtoLatencyEnum = exports.ChannelYoutubeInfoDtoPrivacyVideoEnum = exports.ChannelYoutubeInfoDtoLangEnum = exports.ChannelVkInfoDtoPrivacyCommentsEnum = exports.ChannelVkInfoDtoPrivacyVideoEnum = exports.ChannelTwitchInfoDtoLangEnum = exports.ChannelTrovoInfoDtoAudienceEnum = exports.ChannelTrovoInfoDtoLangEnum = exports.BlogPageSiteResponseAltLanguagesEnum = exports.BlogPageSiteResponseLanguageIsoEnum = exports.BlogPageSiteResponseLanguageEnum = exports.BlogPageSiteResponseStatusEnum = exports.BalanceForPayResponseBalancesAllowEnum = exports.BalanceForPayResponseCurrencyEnum = exports.AmountItemCurrencyEnum = void 0;
exports.SiteAuthExchangeRequestLanguageEnum = exports.SiteAuthExchangeRequestVEnum = exports.SetRecordStreamRequestLanguageEnum = exports.SetRecordStreamRequestVEnum = exports.RtmpServerStateItemServerStatusEnum = exports.RtmpServerPlatformQualityStatusEnum = exports.RtmpServerListItemServerStatusEnum = exports.RtmpServerGraphResponseTypeEnum = exports.PullKeyItemResponseStatusEnum = exports.PullKeyItemResponseTransportEnum = exports.ProjectInfoResponseLanguageEnum = exports.ProjectInfoResponseVEnum = exports.ProjectInfoDataResponseCurrencyEnum = exports.ProjectInfoDataResponseTypeEnum = exports.ProjectInfoAccessResponseAccessTypeEnum = exports.ProjectHistoryResponseActionEnum = exports.PlanTranscodingResponseFpsEnum = exports.PlanTranscodingResponseResolutionEnum = exports.PlanTranscodingResponseTypeEnum = exports.PlanTranscoding2UserItemResponsePeriodEnum = exports.PlanStorageItemPeriodEnum = exports.PlanStorage2UserItemResponsePeriodEnum = exports.PlanRestreamResponseFpsEnum = exports.PlanRestreamResponseResolutionEnum = exports.PlanRestreamResponseTypeEnum = exports.PlanRestreamProjectResponseStatusEnum = exports.PlanRestreamProjectResponseTypeEnum = exports.PlanRestreamFeatureItemV2TypeEnum = exports.PlanRestreamFeatureItemNameEnum = exports.PlanRestreamCheckV2ResponseStatusEnum = exports.PlanRestreamCheckV2ResponseChooseStatusEnum = exports.PlanRestreamCheckV2ResponseCurrencyEnum = exports.PlanRestream2UserItemResponsePeriodEnum = exports.PayoutSystemAccountListItemResponseCurrencyEnum = exports.PayoutSystemAccountListItemResponseCommissionTypeEnum = exports.PayoutCreateRequestBodyDtoLanguageEnum = exports.PayoutCreateRequestBodyDtoVEnum = exports.PaymentStatusResponsePlanPeriodEnum = exports.PaymentStatusResponseCurrencyEnum = exports.PaymentCreateRequestTranscoderBodyDtoPlanPeriodEnum = exports.PaymentCreateRequestTranscoderBodyDtoTypeEnum = exports.PaymentCreateRequestTranscoderBodyDtoLanguageEnum = exports.PaymentCreateRequestTranscoderBodyDtoVEnum = exports.PaymentCreateRequestTopUpBodyDtoTypeEnum = exports.PaymentCreateRequestTopUpBodyDtoLanguageEnum = exports.PaymentCreateRequestTopUpBodyDtoVEnum = exports.PaymentCreateRequestStorageBodyDtoPlanPeriodEnum = exports.PaymentCreateRequestStorageBodyDtoTypeEnum = exports.PaymentCreateRequestStorageBodyDtoLanguageEnum = exports.PaymentCreateRequestStorageBodyDtoVEnum = void 0;
exports.SiteUpdateOptionsVkVideoLiveRequestVEnum = exports.SiteUpdateOptionsVkRequestPrivacyVideoEnum = exports.SiteUpdateOptionsVkRequestPrivacyCommentsEnum = exports.SiteUpdateOptionsVkRequestLanguageEnum = exports.SiteUpdateOptionsVkRequestVEnum = exports.SiteUpdateOptionsTwitchRequestLangEnum = exports.SiteUpdateOptionsTwitchRequestLanguageEnum = exports.SiteUpdateOptionsTwitchRequestVEnum = exports.SiteUpdateOptionsTrovoRequestLangEnum = exports.SiteUpdateOptionsTrovoRequestAudienceEnum = exports.SiteUpdateOptionsTrovoRequestLanguageEnum = exports.SiteUpdateOptionsTrovoRequestVEnum = exports.SiteUpdateOptionsOkRequestLanguageEnum = exports.SiteUpdateOptionsOkRequestVEnum = exports.SiteUpdateChatTelegramRequestLanguageEnum = exports.SiteUpdateChatTelegramRequestVEnum = exports.SiteTranscoderUpdateDtoLanguageEnum = exports.SiteTranscoderUpdateDtoVEnum = exports.SiteTranscoderListItemVideoCodecEnum = exports.SiteTranscoderListItemStatusEnum = exports.SiteTranscoderItemDtoLanguageEnum = exports.SiteTranscoderItemDtoVEnum = exports.SiteTranscoderCreateDtoLanguageEnum = exports.SiteTranscoderCreateDtoVEnum = exports.SiteTelegramSetSettingsRequestDtoFilterModeEnum = exports.SiteSetUrlRequestLanguageEnum = exports.SiteSetUrlRequestVEnum = exports.SiteSetTranscoderRequestLanguageEnum = exports.SiteSetTranscoderRequestVEnum = exports.SiteSetPlannedRequestLanguageEnum = exports.SiteSetPlannedRequestVEnum = exports.SiteSetNotifyUserRequestStatusEnum = exports.SiteSetNotifyUserRequestNotifyCategoryEnum = exports.SiteSetNotifyUserRequestNotifyChannelEnum = exports.SiteSetNameRequestLanguageEnum = exports.SiteSetNameRequestVEnum = exports.SiteSearchChannelTokensDtoStatusEnum = exports.SiteSearchChannelPlatformDtoExtensionEnum = exports.SiteSearchChannelItemStatusEnum = exports.SiteScreenNotifyUserResponseTypeEnum = exports.SiteRefreshAuthBodyRequestAppEnum = exports.SiteRefreshAuthBodyRequestLanguageEnum = exports.SiteRefreshAuthBodyRequestVEnum = exports.SitePromoApplyResponseResultEnum = exports.SitePlatformsSupportedItemExtensionEnum = exports.SiteLogoutAuthRequestAppEnum = exports.SiteGetPolicyStructureResultsEnum = exports.SiteBlogPageTagResponseLanguageIsoEnum = exports.SiteBlogPageTagResponseLanguageEnum = exports.SiteAuthExchangeRequestAppEnum = void 0;
exports.AuthControllerConnectResult1LanguageEnum = exports.AuthControllerConnectResult1VEnum = exports.AuthControllerConnect1AppEnum = exports.AuthControllerConnect1ProviderEnum = exports.AuthControllerConnect1LanguageEnum = exports.AuthControllerConnect1VEnum = exports.AuthControllerCode1AppEnum = exports.AuthControllerCode1LanguageEnum = exports.AuthControllerCode1VEnum = exports.AuthControllerAuthTelegram1AppEnum = exports.AuthControllerAuthTelegram1LanguageEnum = exports.AuthControllerAuthTelegram1VEnum = exports.AuthApi = exports.AuthApiFactory = exports.AuthApiFp = exports.AuthApiAxiosParamCreator = exports.SiteAnalyticsTsControllerStreamViewers1LanguageEnum = exports.SiteAnalyticsTsControllerStreamViewers1VEnum = exports.SiteAnalyticsTsControllerStreamEvents1LanguageEnum = exports.SiteAnalyticsTsControllerStreamEvents1VEnum = exports.SiteAnalyticsTsControllerStreamBitrate1LanguageEnum = exports.SiteAnalyticsTsControllerStreamBitrate1VEnum = exports.AnalyticsApi = exports.AnalyticsApiFactory = exports.AnalyticsApiFp = exports.AnalyticsApiAxiosParamCreator = exports.UserProjectResponseAccessTypeEnum = exports.UserProjectGetResponseCurrencyEnum = exports.UserProjectGetResponseTypeEnum = exports.UserProject2ProjectResponseAccessTypeEnum = exports.UserProject2ProjectResponseTypeEnum = exports.UserProfileResponseLanguageEnum = exports.UserProfileResponseCurrencyEnum = exports.UserProfileResponseIdEnum = exports.UpdatePullKeyRequestLanguageEnum = exports.UpdatePullKeyRequestVEnum = exports.TelegramSettingsDtoFilterModeEnum = exports.StructureHelpPageItemResponse3StatusEnum = exports.StructureHelpPageItemResponse2StatusEnum = exports.StructureHelpPageItemResponseStatusEnum = exports.StructureHelpPageConnectionsItemLangLanguageIsoEnum = exports.StructureHelpPageConnectionsItemLangLanguageEnum = exports.StructureHelpPageConnectionsItemFinalStatusEnum = exports.SiteUpdateOptionsYoutubeRequestLangEnum = exports.SiteUpdateOptionsYoutubeRequestPrivacyVideoEnum = exports.SiteUpdateOptionsYoutubeRequestLatencyEnum = exports.SiteUpdateOptionsYoutubeRequestAudienceEnum = exports.SiteUpdateOptionsYoutubeRequestLanguageEnum = exports.SiteUpdateOptionsYoutubeRequestVEnum = exports.SiteUpdateOptionsVkVideoLiveRequestLanguageEnum = void 0;
exports.ChannelSettingsApiAxiosParamCreator = exports.SiteChannelControllerShortChannelList1LanguageEnum = exports.SiteChannelControllerShortChannelList1VEnum = exports.MethodControllerSearchTypeEnum = exports.MethodControllerSearchLanguageEnum = exports.MethodControllerSearchVEnum = exports.ChannelApi = exports.ChannelApiFactory = exports.ChannelApiFp = exports.ChannelApiAxiosParamCreator = exports.SiteCentrifugeControllerProject1LanguageEnum = exports.SiteCentrifugeControllerProject1VEnum = exports.GetTokenBroadcastLanguageEnum = exports.GetTokenBroadcastVEnum = exports.CentrifugeApi = exports.CentrifugeApiFactory = exports.CentrifugeApiFp = exports.CentrifugeApiAxiosParamCreator = exports.MethodBroadcastControllerTokenChannelLanguageEnum = exports.MethodBroadcastControllerTokenChannelVEnum = exports.MethodBroadcastControllerRestreamsLanguageEnum = exports.MethodBroadcastControllerRestreamsVEnum = exports.BroadcastApi = exports.BroadcastApiFactory = exports.BroadcastApiFp = exports.BroadcastApiAxiosParamCreator = exports.SiteBlogPageTagControllerList1LanguageEnum = exports.SiteBlogPageTagControllerList1VEnum = exports.BlogPageTagApi = exports.BlogPageTagApiFactory = exports.BlogPageTagApiFp = exports.BlogPageTagApiAxiosParamCreator = exports.SiteBlogPageControllerList1LanguageEnum = exports.SiteBlogPageControllerList1VEnum = exports.SiteBlogPageControllerGet1LanguageEnum = exports.SiteBlogPageControllerGet1VEnum = exports.BlogPageApi = exports.BlogPageApiFactory = exports.BlogPageApiFp = exports.BlogPageApiAxiosParamCreator = exports.AuthControllerGetProfile1LanguageEnum = exports.AuthControllerGetProfile1VEnum = exports.AuthControllerGetAuthUrl1AppEnum = exports.AuthControllerGetAuthUrl1ProviderEnum = exports.AuthControllerGetAuthUrl1LanguageEnum = exports.AuthControllerGetAuthUrl1VEnum = exports.AuthControllerDisconnect1LanguageEnum = exports.AuthControllerDisconnect1VEnum = exports.AuthControllerConnectTelegram1LanguageEnum = exports.AuthControllerConnectTelegram1VEnum = void 0;
exports.ControllersControllerRestreams1LanguageEnum = exports.ControllersControllerRestreams1VEnum = exports.LiveApi = exports.LiveApiFactory = exports.LiveApiFp = exports.LiveApiAxiosParamCreator = exports.SiteHelpPageControllerStructure1LanguageEnum = exports.SiteHelpPageControllerStructure1VEnum = exports.SiteHelpPageControllerList1LanguageEnum = exports.SiteHelpPageControllerList1VEnum = exports.SiteHelpPageControllerGet1LanguageEnum = exports.SiteHelpPageControllerGet1VEnum = exports.HelpPageApi = exports.HelpPageApiFactory = exports.HelpPageApiFp = exports.HelpPageApiAxiosParamCreator = exports.MethodChatGatewayControllerSendLanguageEnum = exports.MethodChatGatewayControllerSendVEnum = exports.MethodChatGatewayControllerHistoryLanguageEnum = exports.MethodChatGatewayControllerHistoryVEnum = exports.MethodChatGatewayControllerGetMessageLanguageEnum = exports.MethodChatGatewayControllerGetMessageVEnum = exports.MethodChatGatewayControllerDeleteLanguageEnum = exports.MethodChatGatewayControllerDeleteVEnum = exports.ChatGatewayApi = exports.ChatGatewayApiFactory = exports.ChatGatewayApiFp = exports.ChatGatewayApiAxiosParamCreator = exports.TelegramGetPostByFilterLanguageEnum = exports.TelegramGetPostByFilterVEnum = exports.SiteChannelSettingControllerUpdateToken1RoleEnum = exports.SiteChannelSettingControllerUpdateToken1LanguageEnum = exports.SiteChannelSettingControllerUpdateToken1VEnum = exports.SiteChannelOptionsControllerGetPlayList1LanguageEnum = exports.SiteChannelOptionsControllerGetPlayList1VEnum = exports.SiteChannelOptionsControllerGetPlanned1LanguageEnum = exports.SiteChannelOptionsControllerGetPlanned1VEnum = exports.SiteChannelChatControllerTelegramPosts1LanguageEnum = exports.SiteChannelChatControllerTelegramPosts1VEnum = exports.SiteChannelChatControllerSetTelegramSetting1LanguageEnum = exports.SiteChannelChatControllerSetTelegramSetting1VEnum = exports.SiteChannelChatControllerRemoveTelegramChat1LanguageEnum = exports.SiteChannelChatControllerRemoveTelegramChat1VEnum = exports.SiteChannelChatControllerInitTelegramChatConnect1LanguageEnum = exports.SiteChannelChatControllerInitTelegramChatConnect1VEnum = exports.SiteChannelChatControllerGetTelegramSetting1LanguageEnum = exports.SiteChannelChatControllerGetTelegramSetting1VEnum = exports.ChannelSettingsApi = exports.ChannelSettingsApiFactory = exports.ChannelSettingsApiFp = void 0;
exports.PaymentApiFp = exports.PaymentApiAxiosParamCreator = exports.PaySystemControllerCreateUnitpay1LanguageEnum = exports.PaySystemControllerCreateUnitpay1VEnum = exports.PaySystemControllerCreateChallenge1LanguageEnum = exports.PaySystemControllerCreateChallenge1VEnum = exports.PaySystemApi = exports.PaySystemApiFactory = exports.PaySystemApiFp = exports.PaySystemApiAxiosParamCreator = exports.PaySettingControllerGetSettingV31LanguageEnum = exports.PaySettingControllerGetSettingV31VEnum = exports.PaySettingControllerCheckCountry1LanguageEnum = exports.PaySettingControllerCheckCountry1VEnum = exports.PaySettingApi = exports.PaySettingApiFactory = exports.PaySettingApiFp = exports.PaySettingApiAxiosParamCreator = exports.SiteNotifyUserControllerSet1VEnum = exports.SiteNotifyUserControllerRemoveScreen1VEnum = exports.SiteNotifyUserControllerGetScreen1LanguageEnum = exports.SiteNotifyUserControllerGetScreen1VEnum = exports.SiteNotifyUserControllerGet1VEnum = exports.SiteNotifyUserControllerDelMobileToken1LanguageEnum = exports.SiteNotifyUserControllerDelMobileToken1VEnum = exports.NotifyUserApi = exports.NotifyUserApiFactory = exports.NotifyUserApiFp = exports.NotifyUserApiAxiosParamCreator = exports.SiteNotifyHistoryControllerRunAction1VEnum = exports.SiteNotifyHistoryControllerMarkOfRead1LanguageEnum = exports.SiteNotifyHistoryControllerMarkOfRead1VEnum = exports.SiteNotifyHistoryControllerGetStatusMy1LanguageEnum = exports.SiteNotifyHistoryControllerGetStatusMy1VEnum = exports.SiteNotifyHistoryControllerGetListMy1StatusReadEnum = exports.SiteNotifyHistoryControllerGetListMy1ChannelEnum = exports.SiteNotifyHistoryControllerGetListMy1NameEnum = exports.SiteNotifyHistoryControllerGetListMy1LanguageEnum = exports.SiteNotifyHistoryControllerGetListMy1VEnum = exports.SiteNotifyHistoryControllerGet1VEnum = exports.NotifyHistoryApi = exports.NotifyHistoryApiFactory = exports.NotifyHistoryApiFp = exports.NotifyHistoryApiAxiosParamCreator = exports.SiteMoneyFlowControllerList1LanguageEnum = exports.SiteMoneyFlowControllerList1VEnum = exports.MoneyFlowApi = exports.MoneyFlowApiFactory = exports.MoneyFlowApiFp = exports.MoneyFlowApiAxiosParamCreator = void 0;
exports.SitePlanStorageControllerList1VEnum = exports.SitePlanStorageControllerGetDiscount1LanguageEnum = exports.SitePlanStorageControllerGetDiscount1VEnum = exports.SitePlanStorageControllerCheck1LanguageEnum = exports.SitePlanStorageControllerCheck1VEnum = exports.SitePlanStorageControllerCancel1LanguageEnum = exports.SitePlanStorageControllerCancel1VEnum = exports.SitePlanStorageControllerBuy1PeriodEnum = exports.SitePlanStorageControllerBuy1LanguageEnum = exports.SitePlanStorageControllerBuy1VEnum = exports.PlanStorageApi = exports.PlanStorageApiFactory = exports.PlanStorageApiFp = exports.PlanStorageApiAxiosParamCreator = exports.SitePlanRestreamControllerTariff1LanguageEnum = exports.SitePlanRestreamControllerTariff1VEnum = exports.SitePlanRestreamControllerRemove1LanguageEnum = exports.SitePlanRestreamControllerRemove1VEnum = exports.SitePlanRestreamControllerListProject1LanguageEnum = exports.SitePlanRestreamControllerListProject1VEnum = exports.SitePlanRestreamControllerList1LanguageEnum = exports.SitePlanRestreamControllerList1VEnum = exports.SitePlanRestreamControllerGetDiscount1LanguageEnum = exports.SitePlanRestreamControllerGetDiscount1VEnum = exports.SitePlanRestreamControllerCheck21PeriodEnum = exports.SitePlanRestreamControllerCheck21LanguageEnum = exports.SitePlanRestreamControllerCheck21VEnum = exports.SitePlanRestreamControllerBuy1PeriodEnum = exports.SitePlanRestreamControllerBuy1LanguageEnum = exports.SitePlanRestreamControllerBuy1VEnum = exports.PlanRestreamApi = exports.PlanRestreamApiFactory = exports.PlanRestreamApiFp = exports.PlanRestreamApiAxiosParamCreator = exports.PayoutControllerPrepare1LanguageEnum = exports.PayoutControllerPrepare1VEnum = exports.PayoutControllerCreate1LanguageEnum = exports.PayoutControllerCreate1VEnum = exports.PayoutApi = exports.PayoutApiFactory = exports.PayoutApiFp = exports.PayoutApiAxiosParamCreator = exports.PaymentControllerList1LanguageEnum = exports.PaymentControllerList1VEnum = exports.PaymentControllerGetStatus1LanguageEnum = exports.PaymentControllerGetStatus1VEnum = exports.PaymentControllerCreate1LanguageEnum = exports.PaymentControllerCreate1VEnum = exports.PaymentApi = exports.PaymentApiFactory = void 0;
exports.ProjectChannelApiFp = exports.ProjectChannelApiAxiosParamCreator = exports.ProjectApi = exports.ProjectApiFactory = exports.ProjectApiFp = exports.ProjectApiAxiosParamCreator = exports.SitePolicyPageControllerGetStructure1LanguageEnum = exports.SitePolicyPageControllerGetStructure1VEnum = exports.SitePolicyPageControllerGetItem1FileNameEnum = exports.SitePolicyPageControllerGetItem1LanguageEnum = exports.SitePolicyPageControllerGetItem1VEnum = exports.PolicyPageApi = exports.PolicyPageApiFactory = exports.PolicyPageApiFp = exports.PolicyPageApiAxiosParamCreator = exports.SitePlatformsControllerPlatformList1LanguageEnum = exports.SitePlatformsControllerPlatformList1VEnum = exports.SitePlatformsControllerLogoutAccount1PlatformEnum = exports.SitePlatformsControllerLogoutAccount1LanguageEnum = exports.SitePlatformsControllerLogoutAccount1VEnum = exports.SitePlatformsControllerGetCategory1TypeEnum = exports.SitePlatformsControllerGetCategory1LanguageEnum = exports.SitePlatformsControllerGetCategory1VEnum = exports.SitePlatformsControllerAddAccount1PlatformEnum = exports.SitePlatformsControllerAddAccount1LanguageEnum = exports.SitePlatformsControllerAddAccount1VEnum = exports.PlatformsApi = exports.PlatformsApiFactory = exports.PlatformsApiFp = exports.PlatformsApiAxiosParamCreator = exports.SitePlanTranscodingControllerTariff1LanguageEnum = exports.SitePlanTranscodingControllerTariff1VEnum = exports.SitePlanTranscodingControllerList1LanguageEnum = exports.SitePlanTranscodingControllerList1VEnum = exports.SitePlanTranscodingControllerGetDiscount1LanguageEnum = exports.SitePlanTranscodingControllerGetDiscount1VEnum = exports.SitePlanTranscodingControllerCheck1LanguageEnum = exports.SitePlanTranscodingControllerCheck1VEnum = exports.SitePlanTranscodingControllerCancel1LanguageEnum = exports.SitePlanTranscodingControllerCancel1VEnum = exports.SitePlanTranscodingControllerBuy1PeriodEnum = exports.SitePlanTranscodingControllerBuy1LanguageEnum = exports.SitePlanTranscodingControllerBuy1VEnum = exports.PlanTranscodingApi = exports.PlanTranscodingApiFactory = exports.PlanTranscodingApiFp = exports.PlanTranscodingApiAxiosParamCreator = exports.SitePlanStorageControllerTariff1LanguageEnum = exports.SitePlanStorageControllerTariff1VEnum = exports.SitePlanStorageControllerList1LanguageEnum = void 0;
exports.PromoApi = exports.PromoApiFactory = exports.PromoApiFp = exports.PromoApiAxiosParamCreator = exports.SiteProjectHistoryControllerList1ActionEnum = exports.SiteProjectHistoryControllerList1LanguageEnum = exports.SiteProjectHistoryControllerList1VEnum = exports.ProjectHistoryApi = exports.ProjectHistoryApiFactory = exports.ProjectHistoryApiFp = exports.ProjectHistoryApiAxiosParamCreator = exports.SiteProjectChannelInviteControllerList1LanguageEnum = exports.SiteProjectChannelInviteControllerList1VEnum = exports.SiteProjectChannelInviteControllerGetForSecret1LanguageEnum = exports.SiteProjectChannelInviteControllerGetForSecret1VEnum = exports.SiteProjectChannelInviteControllerGetForProject1LanguageEnum = exports.SiteProjectChannelInviteControllerGetForProject1VEnum = exports.SiteProjectChannelInviteControllerGet1LanguageEnum = exports.SiteProjectChannelInviteControllerGet1VEnum = exports.SiteProjectChannelInviteControllerDel1LanguageEnum = exports.SiteProjectChannelInviteControllerDel1VEnum = exports.SiteProjectChannelInviteControllerDeclineForSecret1LanguageEnum = exports.SiteProjectChannelInviteControllerDeclineForSecret1VEnum = exports.SiteProjectChannelInviteControllerDeclineForProject1LanguageEnum = exports.SiteProjectChannelInviteControllerDeclineForProject1VEnum = exports.SiteProjectChannelInviteControllerAddById1AccessTypeEnum = exports.SiteProjectChannelInviteControllerAddById1LanguageEnum = exports.SiteProjectChannelInviteControllerAddById1VEnum = exports.SiteProjectChannelInviteControllerAddByEmail1AccessTypeEnum = exports.SiteProjectChannelInviteControllerAddByEmail1LanguageEnum = exports.SiteProjectChannelInviteControllerAddByEmail1VEnum = exports.SiteProjectChannelInviteControllerAcceptForSecret1LanguageEnum = exports.SiteProjectChannelInviteControllerAcceptForSecret1VEnum = exports.SiteProjectChannelInviteControllerAcceptForProject1LanguageEnum = exports.SiteProjectChannelInviteControllerAcceptForProject1VEnum = exports.ProjectChannelInviteApi = exports.ProjectChannelInviteApiFactory = exports.ProjectChannelInviteApiFp = exports.ProjectChannelInviteApiAxiosParamCreator = exports.SiteProjectChannelControllerTransferOwner1LanguageEnum = exports.SiteProjectChannelControllerTransferOwner1VEnum = exports.SiteProjectChannelControllerList1LanguageEnum = exports.SiteProjectChannelControllerList1VEnum = exports.SiteProjectChannelControllerDel1LanguageEnum = exports.SiteProjectChannelControllerDel1VEnum = exports.SiteProjectChannelControllerChangeAccess1AccessTypeEnum = exports.SiteProjectChannelControllerChangeAccess1LanguageEnum = exports.SiteProjectChannelControllerChangeAccess1VEnum = exports.ProjectChannelApi = exports.ProjectChannelApiFactory = void 0;
exports.StreamPullKeysApiFactory = exports.StreamPullKeysApiFp = exports.StreamPullKeysApiAxiosParamCreator = exports.SiteStreamKeysControllerKey1LanguageEnum = exports.SiteStreamKeysControllerKey1VEnum = exports.StreamKeyApi = exports.StreamKeyApiFactory = exports.StreamKeyApiFp = exports.StreamKeyApiAxiosParamCreator = exports.SocialsApi = exports.SocialsApiFactory = exports.SocialsApiFp = exports.SocialsApiAxiosParamCreator = exports.SiteRtmpServerControllerState1IntervalEnum = exports.SiteRtmpServerControllerState1LanguageEnum = exports.SiteRtmpServerControllerState1VEnum = exports.SiteRtmpServerControllerList1IntervalEnum = exports.SiteRtmpServerControllerList1LanguageEnum = exports.SiteRtmpServerControllerList1VEnum = exports.SiteRtmpServerControllerGraph1TypeEnum = exports.SiteRtmpServerControllerGraph1IntervalEnum = exports.SiteRtmpServerControllerGraph1LanguageEnum = exports.SiteRtmpServerControllerGraph1VEnum = exports.MethodRtmpServerControllerListLocationsUnauthorizedLanguageEnum = exports.MethodRtmpServerControllerListLocationsUnauthorizedVEnum = exports.RtmpServerApi = exports.RtmpServerApiFactory = exports.RtmpServerApiFp = exports.RtmpServerApiAxiosParamCreator = exports.SiteReleaseAppControllerCabinet1AppEnum = exports.SiteReleaseAppControllerCabinet1LanguageEnum = exports.SiteReleaseAppControllerCabinet1VEnum = exports.ReleaseApi = exports.ReleaseApiFactory = exports.ReleaseApiFp = exports.ReleaseApiAxiosParamCreator = exports.SiteReferralsControllerTotalInfo1LanguageEnum = exports.SiteReferralsControllerTotalInfo1VEnum = exports.ReferralsApi = exports.ReferralsApiFactory = exports.ReferralsApiFp = exports.ReferralsApiAxiosParamCreator = exports.PullServersApi = exports.PullServersApiFactory = exports.PullServersApiFp = exports.PullServersApiAxiosParamCreator = exports.PromoControllerCheck1LanguageEnum = exports.PromoControllerCheck1VEnum = exports.PromoControllerApply1LanguageEnum = exports.PromoControllerApply1VEnum = void 0;
exports.SiteUserProjectControllerSelectProject1LanguageEnum = exports.SiteUserProjectControllerSelectProject1VEnum = exports.SiteUserProjectControllerListAccess1LanguageEnum = exports.SiteUserProjectControllerListAccess1VEnum = exports.SiteUserProjectControllerList1LanguageEnum = exports.SiteUserProjectControllerList1VEnum = exports.SiteUserProjectControllerGetUser1LanguageEnum = exports.SiteUserProjectControllerGetUser1VEnum = exports.SiteUserProjectControllerGetProjectInfo1LanguageEnum = exports.SiteUserProjectControllerGetProjectInfo1VEnum = exports.SiteUserProjectControllerGetProject1LanguageEnum = exports.SiteUserProjectControllerGetProject1VEnum = exports.SiteUserProjectControllerDel1LanguageEnum = exports.SiteUserProjectControllerDel1VEnum = exports.SiteUserProjectControllerChangeAccess1AccessTypeEnum = exports.SiteUserProjectControllerChangeAccess1LanguageEnum = exports.SiteUserProjectControllerChangeAccess1VEnum = exports.UserProjectApi = exports.UserProjectApiFactory = exports.UserProjectApiFp = exports.UserProjectApiAxiosParamCreator = exports.SiteUserControllerUpdateProfile1LanguageEnum = exports.SiteUserControllerUpdateProfile1VEnum = exports.SiteUserControllerGetProfile1LanguageEnum = exports.SiteUserControllerGetProfile1VEnum = exports.UserApi = exports.UserApiFactory = exports.UserApiFp = exports.UserApiAxiosParamCreator = exports.TranscodersControllerList1LanguageEnum = exports.TranscodersControllerList1VEnum = exports.TranscodersApi = exports.TranscodersApiFactory = exports.TranscodersApiFp = exports.TranscodersApiAxiosParamCreator = exports.SiteTransactionsControllerList1LanguageEnum = exports.SiteTransactionsControllerList1VEnum = exports.TransactionsApi = exports.TransactionsApiFactory = exports.TransactionsApiFp = exports.TransactionsApiAxiosParamCreator = exports.StreamPullKeysSiteControllerRemove1LanguageEnum = exports.StreamPullKeysSiteControllerRemove1VEnum = exports.StreamPullKeysSiteControllerGet1LanguageEnum = exports.StreamPullKeysSiteControllerGet1VEnum = exports.StreamPullKeysSiteControllerCheck1LanguageEnum = exports.StreamPullKeysSiteControllerCheck1VEnum = exports.StreamPullKeysApi = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
exports.AmountItemCurrencyEnum = {
    Rub: 'rub',
    Usd: 'usd'
};
exports.BalanceForPayResponseCurrencyEnum = {
    Rub: 'rub',
    Usd: 'usd'
};
exports.BalanceForPayResponseBalancesAllowEnum = {
    Bonus: 'bonus',
    Payment: 'payment',
    Profit: 'profit'
};
exports.BlogPageSiteResponseStatusEnum = {
    None: 'None',
    Backlog: 'Backlog',
    Drafting: 'Drafting',
    Reviewing: 'Reviewing',
    Done: 'Done',
    Published: 'Published'
};
exports.BlogPageSiteResponseLanguageEnum = {
    Russian: 'russian',
    English: 'english',
    None: 'none'
};
exports.BlogPageSiteResponseLanguageIsoEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.BlogPageSiteResponseAltLanguagesEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.ChannelTrovoInfoDtoLangEnum = {
    Ru: 'ru',
    En: 'en'
};
exports.ChannelTrovoInfoDtoAudienceEnum = {
    ChannelAudienceTypeFamilyfriendly: 'CHANNEL_AUDIENCE_TYPE_FAMILYFRIENDLY',
    ChannelAudienceTypeTeen: 'CHANNEL_AUDIENCE_TYPE_TEEN',
    ChannelAudienceTypeEighteenplus: 'CHANNEL_AUDIENCE_TYPE_EIGHTEENPLUS'
};
exports.ChannelTwitchInfoDtoLangEnum = {
    Ru: 'ru',
    En: 'en'
};
exports.ChannelVkInfoDtoPrivacyVideoEnum = {
    All: 'all',
    Members: 'members',
    Editors: 'editors',
    ByLink: 'by_link',
    Donut: 'donut'
};
exports.ChannelVkInfoDtoPrivacyCommentsEnum = {
    All: 'all',
    Members: 'members',
    Editors: 'editors',
    Nobody: 'nobody'
};
exports.ChannelYoutubeInfoDtoLangEnum = {
    Ru: 'ru',
    En: 'en'
};
exports.ChannelYoutubeInfoDtoPrivacyVideoEnum = {
    Private: 'private',
    Public: 'public',
    Unlisted: 'unlisted'
};
exports.ChannelYoutubeInfoDtoLatencyEnum = {
    Normal: 'normal',
    Low: 'low',
    UltraLow: 'ultraLow'
};
exports.ChannelYoutubeInfoDtoAudienceEnum = {
    MarkForKids: 'mark_for_kids',
    MarkForNokids: 'mark_for_nokids'
};
exports.CheckPullKeyResponseTransportEnum = {
    Rtmp: 'rtmp',
    Srt: 'srt',
    Hls: 'hls'
};
exports.CheckPullKeyResponseStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Error: 'error'
};
exports.CreatePullKeyRequestVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.CreatePullKeyRequestLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.CreatePullKeyRequestTransportEnum = {
    Rtmp: 'rtmp',
    Srt: 'srt',
    Hls: 'hls'
};
exports.HelpPageResponseStatusEnum = {
    None: 'None',
    Backlog: 'Backlog',
    Drafting: 'Drafting',
    Reviewing: 'Reviewing',
    Done: 'Done',
    Published: 'Published'
};
exports.HelpPageResponseLanguageEnum = {
    Russian: 'russian',
    English: 'english',
    None: 'none'
};
exports.HelpPageResponseLanguageIsoEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.HelpPageResponseAltLanguagesEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.InternalNotifyTypeActionNameEnum = {
    ExternalLink: 'external_link',
    CabinetLink: 'cabinet_link',
    LandingLink: 'landing_link',
    Link: 'link',
    Accept: 'accept',
    Decline: 'decline',
    Accept1: 'accept_1',
    Accept2: 'accept_2',
    Accept3: 'accept_3'
};
exports.InternalNotifyTypeActionTypeEnum = {
    Primary: 'primary',
    Secondary: 'secondary',
    Link: 'link'
};
exports.InternalNotifyTypeActionGroupTypeEnum = {
    Toggle: 'toggle',
    Select: 'select',
    Default: 'default'
};
exports.InternalNotifyTypeActionTextLanguageEnum = {
    Russian: 'russian',
    English: 'english',
    None: 'none'
};
exports.InternalNotifyTypeActionTextLanguageIsoEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.InternalNotifyTypeTextLanguageEnum = {
    Russian: 'russian',
    English: 'english',
    None: 'none'
};
exports.InternalNotifyTypeTextLanguageIsoEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.MethodSetStatusChannelRequestVEnum = {
    _1: '1'
};
exports.MethodSetStatusChannelRequestLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.MoneyFlowResponseCurrencyEnum = {
    Rub: 'rub',
    Usd: 'usd'
};
exports.MoneyFlowResponseTypeEnum = {
    RegistrationBonus: 'registration_bonus',
    PlanRestreamBuy: 'plan_restream_buy',
    PlanTranscodingBuy: 'plan_transcoding_buy',
    PlanStorageBuy: 'plan_storage_buy',
    ChannelStoryBuy: 'channel_story_buy',
    ChannelShopSell: 'channel_shop_sell',
    ReferralProfit: 'referral_profit',
    Payment: 'payment',
    PaymentCancel: 'payment_cancel',
    Payout: 'payout',
    PayoutCancel: 'payout_cancel',
    Refund: 'refund',
    Conversion: 'conversion',
    Withdrawal: 'withdrawal',
    TransferredOfOldSite: 'transferred_of_old_site',
    AccruedAdmin: 'accrued_admin',
    ReducedAdmin: 'reduced_admin',
    PromoTopup1: 'promo_topup_1',
    PromoTopup2: 'promo_topup_2',
    PromoCreatePlanRestream1: 'promo_create_plan_restream_1',
    PromoCreatePlanRestream2: 'promo_create_plan_restream_2'
};
exports.NotifyHistorySiteResponseChannelEnum = {
    Telegram: 'telegram',
    Cabinet: 'cabinet',
    Mobile: 'mobile'
};
exports.NotifyHistorySiteResponseCategoryEnum = {
    Important: 'important',
    Stream: 'stream'
};
exports.NotifyUserRelationCabinetEnum = {
    Important: 'important',
    Stream: 'stream'
};
exports.NotifyUserRelationTelegramEnum = {
    Important: 'important',
    Stream: 'stream'
};
exports.NotifyUserRelationMobileEnum = {
    Important: 'important',
    Stream: 'stream'
};
exports.PayCheckCountryResponseCurrencyEnum = {
    Rub: 'rub',
    Usd: 'usd'
};
exports.PaySettingBodyDtoVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.PaySettingBodyDtoLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.PaySettingResponseV3CurrencyEnum = {
    Rub: 'rub',
    Usd: 'usd'
};
exports.PaySystemListResponseCurrencyEnum = {
    Rub: 'rub',
    Usd: 'usd'
};
exports.PaymentCreateRequestRestreamBodyDtoVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.PaymentCreateRequestRestreamBodyDtoLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.PaymentCreateRequestRestreamBodyDtoTypeEnum = {
    Restream: 'restream',
    Transcoding: 'transcoding',
    Storage: 'storage',
    Topup: 'topup'
};
exports.PaymentCreateRequestRestreamBodyDtoPlanPeriodEnum = {
    Month: 'month',
    Year: 'year'
};
exports.PaymentCreateRequestStorageBodyDtoVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.PaymentCreateRequestStorageBodyDtoLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.PaymentCreateRequestStorageBodyDtoTypeEnum = {
    Restream: 'restream',
    Transcoding: 'transcoding',
    Storage: 'storage',
    Topup: 'topup'
};
exports.PaymentCreateRequestStorageBodyDtoPlanPeriodEnum = {
    Month: 'month',
    Year: 'year'
};
exports.PaymentCreateRequestTopUpBodyDtoVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.PaymentCreateRequestTopUpBodyDtoLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.PaymentCreateRequestTopUpBodyDtoTypeEnum = {
    Restream: 'restream',
    Transcoding: 'transcoding',
    Storage: 'storage',
    Topup: 'topup'
};
exports.PaymentCreateRequestTranscoderBodyDtoVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.PaymentCreateRequestTranscoderBodyDtoLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.PaymentCreateRequestTranscoderBodyDtoTypeEnum = {
    Restream: 'restream',
    Transcoding: 'transcoding',
    Storage: 'storage',
    Topup: 'topup'
};
exports.PaymentCreateRequestTranscoderBodyDtoPlanPeriodEnum = {
    Month: 'month',
    Year: 'year'
};
exports.PaymentStatusResponseCurrencyEnum = {
    Rub: 'rub',
    Usd: 'usd'
};
exports.PaymentStatusResponsePlanPeriodEnum = {
    Month: 'month',
    Year: 'year'
};
exports.PayoutCreateRequestBodyDtoVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.PayoutCreateRequestBodyDtoLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.PayoutSystemAccountListItemResponseCommissionTypeEnum = {
    Percent: 'percent',
    Fix: 'fix'
};
exports.PayoutSystemAccountListItemResponseCurrencyEnum = {
    Rub: 'rub',
    Usd: 'usd'
};
exports.PlanRestream2UserItemResponsePeriodEnum = {
    Month: 'month',
    Year: 'year'
};
exports.PlanRestreamCheckV2ResponseCurrencyEnum = {
    Rub: 'rub',
    Usd: 'usd'
};
exports.PlanRestreamCheckV2ResponseChooseStatusEnum = {
    New: 'new',
    Prolongate: 'prolongate',
    Upgrade: 'upgrade',
    Downgrade: 'downgrade'
};
exports.PlanRestreamCheckV2ResponseStatusEnum = {
    New: 'new',
    Current: 'current',
    CurrentUpgrade: 'current_upgrade',
    CurrentDowngrade: 'current_downgrade',
    Upgrade: 'upgrade',
    Downgrade: 'downgrade'
};
exports.PlanRestreamFeatureItemNameEnum = {
    CountChannelMax: 'count_channel_max',
    BitrateMax: 'bitrate_max',
    Resolution: 'resolution',
    CreateProjects: 'create_projects',
    Chat: 'chat',
    Video: 'video',
    VideoStorage: 'video_storage',
    ChangeSubject: 'change_subject',
    BackgroundChat: 'background_chat',
    DedicatedServer: 'dedicated_server',
    PersonalManager: 'personal_manager'
};
exports.PlanRestreamFeatureItemV2TypeEnum = {
    String: 'string',
    Number: 'number',
    Boolean: 'boolean'
};
exports.PlanRestreamProjectResponseTypeEnum = {
    Free: 'free',
    PaidFix: 'paid_fix',
    PaidFlex: 'paid_flex',
    Custom: 'custom'
};
exports.PlanRestreamProjectResponseStatusEnum = {
    Current: 'current',
    Upgrade: 'upgrade',
    Downgrade: 'downgrade'
};
exports.PlanRestreamResponseTypeEnum = {
    Free: 'free',
    PaidFix: 'paid_fix',
    PaidFlex: 'paid_flex',
    Custom: 'custom'
};
exports.PlanRestreamResponseResolutionEnum = {
    _720p: '720p',
    _1080p: '1080p',
    _2K: '2K',
    Uw: 'UW',
    _4K: '4K',
    _8K: '8K'
};
exports.PlanRestreamResponseFpsEnum = {
    _30: '30',
    _60: '60'
};
exports.PlanStorage2UserItemResponsePeriodEnum = {
    Month: 'month',
    Year: 'year'
};
exports.PlanStorageItemPeriodEnum = {
    Month: 'month',
    Year: 'year'
};
exports.PlanTranscoding2UserItemResponsePeriodEnum = {
    Month: 'month',
    Year: 'year'
};
exports.PlanTranscodingResponseTypeEnum = {
    Free: 'free',
    PaidMonth: 'paid_month',
    PaidMinute: 'paid_minute',
    Custom: 'custom'
};
exports.PlanTranscodingResponseResolutionEnum = {
    _720p: '720p',
    _1080p: '1080p',
    _2K: '2K',
    Uw: 'UW',
    _4K: '4K',
    _8K: '8K'
};
exports.PlanTranscodingResponseFpsEnum = {
    _30: '30',
    _60: '60'
};
exports.ProjectHistoryResponseActionEnum = {
    ProjectChannelInviteAdd: 'project_channel_invite_add',
    ProjectChannelInviteDel: 'project_channel_invite_del',
    ProjectChannelInviteAccept: 'project_channel_invite_accept',
    ProjectChannelInviteDecline: 'project_channel_invite_decline',
    UserProjectInviteAdd: 'user_project_invite_add',
    UserProjectInviteDel: 'user_project_invite_del',
    UserProjectInviteAccept: 'user_project_invite_accept',
    UserProjectInviteDecline: 'user_project_invite_decline',
    UserProjectAdd: 'user_project_add',
    UserProjectDel: 'user_project_del',
    UserProjectChange: 'user_project_change',
    ProjectChannelAdd: 'project_channel_add',
    ProjectChannelDel: 'project_channel_del',
    ProjectChannelChange: 'project_channel_change'
};
exports.ProjectInfoAccessResponseAccessTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
};
exports.ProjectInfoDataResponseTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
};
exports.ProjectInfoDataResponseCurrencyEnum = {};
exports.ProjectInfoResponseVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.ProjectInfoResponseLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.PullKeyItemResponseTransportEnum = {
    Rtmp: 'rtmp',
    Srt: 'srt',
    Hls: 'hls'
};
exports.PullKeyItemResponseStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Error: 'error'
};
exports.RtmpServerGraphResponseTypeEnum = {
    Performance: 'performance',
    Network: 'network',
    Cpu: 'cpu',
    Ram: 'ram',
    DeliveredPackages: 'deliveredPackages'
};
exports.RtmpServerListItemServerStatusEnum = {
    Good: 'good',
    Problem: 'problem',
    Bad: 'bad'
};
exports.RtmpServerPlatformQualityStatusEnum = {
    Good: 'good',
    Problem: 'problem',
    Bad: 'bad'
};
exports.RtmpServerStateItemServerStatusEnum = {
    Good: 'good',
    Problem: 'problem',
    Bad: 'bad'
};
exports.SetRecordStreamRequestVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.SetRecordStreamRequestLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.SiteAuthExchangeRequestVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.SiteAuthExchangeRequestLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.SiteAuthExchangeRequestAppEnum = {
    Site: 'site',
    Admin: 'admin',
    Mobile: 'mobile',
    Desktop: 'desktop'
};
exports.SiteBlogPageTagResponseLanguageEnum = {
    Russian: 'russian',
    English: 'english',
    None: 'none'
};
exports.SiteBlogPageTagResponseLanguageIsoEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.SiteGetPolicyStructureResultsEnum = {
    RefundPolicy: 'refund-policy',
    TermsOfUse: 'terms-of-use',
    UsingCookie: 'using-cookie',
    AcceptableUse: 'acceptable-use',
    PrivacyNotice: 'privacy-notice'
};
exports.SiteLogoutAuthRequestAppEnum = {
    Site: 'site',
    Admin: 'admin',
    Mobile: 'mobile',
    Desktop: 'desktop'
};
exports.SitePlatformsSupportedItemExtensionEnum = {
    Png: 'png',
    Svg: 'svg'
};
exports.SitePromoApplyResponseResultEnum = {
    TopUp: 'top_up',
    Tariff: 'tariff'
};
exports.SiteRefreshAuthBodyRequestVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.SiteRefreshAuthBodyRequestLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.SiteRefreshAuthBodyRequestAppEnum = {
    Site: 'site',
    Admin: 'admin',
    Mobile: 'mobile',
    Desktop: 'desktop'
};
exports.SiteScreenNotifyUserResponseTypeEnum = {
    Debug: 'debug',
    Info: 'info',
    Warning: 'warning',
    Error: 'error'
};
exports.SiteSearchChannelItemStatusEnum = {
    Init: 'init',
    Pending: 'pending',
    Error: 'error',
    Live: 'live',
    Offline: 'offline',
    Busy: 'busy'
};
exports.SiteSearchChannelPlatformDtoExtensionEnum = {
    Png: 'png',
    Svg: 'svg'
};
exports.SiteSearchChannelTokensDtoStatusEnum = {
    Unused: 'unused',
    Invalid: 'invalid',
    Deprecated: 'deprecated',
    Valid: 'valid'
};
exports.SiteSetNameRequestVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.SiteSetNameRequestLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.SiteSetNotifyUserRequestNotifyChannelEnum = {
    Telegram: 'telegram',
    Cabinet: 'cabinet',
    Mobile: 'mobile'
};
exports.SiteSetNotifyUserRequestNotifyCategoryEnum = {
    Important: 'important',
    Stream: 'stream'
};
exports.SiteSetNotifyUserRequestStatusEnum = {
    Enable: 'enable',
    Disable: 'disable'
};
exports.SiteSetPlannedRequestVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.SiteSetPlannedRequestLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.SiteSetTranscoderRequestVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.SiteSetTranscoderRequestLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.SiteSetUrlRequestVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.SiteSetUrlRequestLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.SiteTelegramSetSettingsRequestDtoFilterModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
};
exports.SiteTranscoderCreateDtoVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.SiteTranscoderCreateDtoLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.SiteTranscoderItemDtoVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.SiteTranscoderItemDtoLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.SiteTranscoderListItemStatusEnum = {
    Active: 'active',
    Inactive: 'inactive'
};
exports.SiteTranscoderListItemVideoCodecEnum = {
    H264: 'h264',
    Hevc: 'hevc'
};
exports.SiteTranscoderUpdateDtoVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.SiteTranscoderUpdateDtoLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.SiteUpdateChatTelegramRequestVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.SiteUpdateChatTelegramRequestLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.SiteUpdateOptionsOkRequestVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.SiteUpdateOptionsOkRequestLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.SiteUpdateOptionsTrovoRequestVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.SiteUpdateOptionsTrovoRequestLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.SiteUpdateOptionsTrovoRequestAudienceEnum = {
    ChannelAudienceTypeFamilyfriendly: 'CHANNEL_AUDIENCE_TYPE_FAMILYFRIENDLY',
    ChannelAudienceTypeTeen: 'CHANNEL_AUDIENCE_TYPE_TEEN',
    ChannelAudienceTypeEighteenplus: 'CHANNEL_AUDIENCE_TYPE_EIGHTEENPLUS'
};
exports.SiteUpdateOptionsTrovoRequestLangEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.SiteUpdateOptionsTwitchRequestVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.SiteUpdateOptionsTwitchRequestLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.SiteUpdateOptionsTwitchRequestLangEnum = {
    Ru: 'ru',
    En: 'en'
};
exports.SiteUpdateOptionsVkRequestVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.SiteUpdateOptionsVkRequestLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.SiteUpdateOptionsVkRequestPrivacyCommentsEnum = {
    All: 'all',
    Members: 'members',
    Editors: 'editors',
    Nobody: 'nobody'
};
exports.SiteUpdateOptionsVkRequestPrivacyVideoEnum = {
    All: 'all',
    Members: 'members',
    Editors: 'editors',
    Nobody: 'nobody'
};
exports.SiteUpdateOptionsVkVideoLiveRequestVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.SiteUpdateOptionsVkVideoLiveRequestLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.SiteUpdateOptionsYoutubeRequestVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.SiteUpdateOptionsYoutubeRequestLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.SiteUpdateOptionsYoutubeRequestAudienceEnum = {
    MarkForKids: 'mark_for_kids',
    MarkForNokids: 'mark_for_nokids'
};
exports.SiteUpdateOptionsYoutubeRequestLatencyEnum = {
    Normal: 'normal',
    Low: 'low',
    UltraLow: 'ultraLow'
};
exports.SiteUpdateOptionsYoutubeRequestPrivacyVideoEnum = {
    Private: 'private',
    Public: 'public',
    Unlisted: 'unlisted'
};
exports.SiteUpdateOptionsYoutubeRequestLangEnum = {
    Ru: 'ru',
    En: 'en'
};
exports.StructureHelpPageConnectionsItemFinalStatusEnum = {
    None: 'None',
    Backlog: 'Backlog',
    Drafting: 'Drafting',
    Reviewing: 'Reviewing',
    Done: 'Done',
    Published: 'Published'
};
exports.StructureHelpPageConnectionsItemLangLanguageEnum = {
    Russian: 'russian',
    English: 'english',
    None: 'none'
};
exports.StructureHelpPageConnectionsItemLangLanguageIsoEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.StructureHelpPageItemResponseStatusEnum = {
    None: 'None',
    Backlog: 'Backlog',
    Drafting: 'Drafting',
    Reviewing: 'Reviewing',
    Done: 'Done',
    Published: 'Published'
};
exports.StructureHelpPageItemResponse2StatusEnum = {
    None: 'None',
    Backlog: 'Backlog',
    Drafting: 'Drafting',
    Reviewing: 'Reviewing',
    Done: 'Done',
    Published: 'Published'
};
exports.StructureHelpPageItemResponse3StatusEnum = {
    None: 'None',
    Backlog: 'Backlog',
    Drafting: 'Drafting',
    Reviewing: 'Reviewing',
    Done: 'Done',
    Published: 'Published'
};
exports.TelegramSettingsDtoFilterModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
};
exports.UpdatePullKeyRequestVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
exports.UpdatePullKeyRequestLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.UserProfileResponseIdEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
};
exports.UserProfileResponseCurrencyEnum = {
    Rub: 'rub',
    Usd: 'usd'
};
exports.UserProfileResponseLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
exports.UserProject2ProjectResponseTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
};
exports.UserProject2ProjectResponseAccessTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
};
exports.UserProjectGetResponseTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
};
exports.UserProjectGetResponseCurrencyEnum = {
    Rub: 'rub',
    Usd: 'usd'
};
exports.UserProjectResponseAccessTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
};
/**
 * AnalyticsApi - axios parameter creator
 * @export
 */
const AnalyticsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Bitrate for stream
         * @param {SiteAnalyticsTsControllerStreamBitrate1VEnum} v Version
         * @param {SiteAnalyticsTsControllerStreamBitrate1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} streamId stream id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteAnalyticsTsControllerStreamBitrate1: async (v, language, projectId, streamId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteAnalyticsTsControllerStreamBitrate1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteAnalyticsTsControllerStreamBitrate1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteAnalyticsTsControllerStreamBitrate1', 'projectId', projectId);
            // verify required parameter 'streamId' is not null or undefined
            (0, common_1.assertParamExists)('siteAnalyticsTsControllerStreamBitrate1', 'streamId', streamId);
            const localVarPath = `/method/analytics/stream/graph/bitrate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (streamId !== undefined) {
                localVarQueryParameter['stream_id'] = streamId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Events for stream
         * @param {SiteAnalyticsTsControllerStreamEvents1VEnum} v Version
         * @param {SiteAnalyticsTsControllerStreamEvents1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} streamId stream id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteAnalyticsTsControllerStreamEvents1: async (v, language, projectId, streamId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteAnalyticsTsControllerStreamEvents1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteAnalyticsTsControllerStreamEvents1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteAnalyticsTsControllerStreamEvents1', 'projectId', projectId);
            // verify required parameter 'streamId' is not null or undefined
            (0, common_1.assertParamExists)('siteAnalyticsTsControllerStreamEvents1', 'streamId', streamId);
            const localVarPath = `/method/analytics/stream/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (streamId !== undefined) {
                localVarQueryParameter['stream_id'] = streamId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Viewers for stream
         * @param {SiteAnalyticsTsControllerStreamViewers1VEnum} v Version
         * @param {SiteAnalyticsTsControllerStreamViewers1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} streamId stream id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteAnalyticsTsControllerStreamViewers1: async (v, language, projectId, streamId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteAnalyticsTsControllerStreamViewers1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteAnalyticsTsControllerStreamViewers1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteAnalyticsTsControllerStreamViewers1', 'projectId', projectId);
            // verify required parameter 'streamId' is not null or undefined
            (0, common_1.assertParamExists)('siteAnalyticsTsControllerStreamViewers1', 'streamId', streamId);
            const localVarPath = `/method/analytics/stream/graph/viewers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (streamId !== undefined) {
                localVarQueryParameter['stream_id'] = streamId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.AnalyticsApiAxiosParamCreator = AnalyticsApiAxiosParamCreator;
/**
 * AnalyticsApi - functional programming interface
 * @export
 */
const AnalyticsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AnalyticsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Bitrate for stream
         * @param {SiteAnalyticsTsControllerStreamBitrate1VEnum} v Version
         * @param {SiteAnalyticsTsControllerStreamBitrate1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} streamId stream id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteAnalyticsTsControllerStreamBitrate1(v, language, projectId, streamId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteAnalyticsTsControllerStreamBitrate1(v, language, projectId, streamId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AnalyticsApi.siteAnalyticsTsControllerStreamBitrate1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Events for stream
         * @param {SiteAnalyticsTsControllerStreamEvents1VEnum} v Version
         * @param {SiteAnalyticsTsControllerStreamEvents1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} streamId stream id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteAnalyticsTsControllerStreamEvents1(v, language, projectId, streamId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteAnalyticsTsControllerStreamEvents1(v, language, projectId, streamId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AnalyticsApi.siteAnalyticsTsControllerStreamEvents1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Viewers for stream
         * @param {SiteAnalyticsTsControllerStreamViewers1VEnum} v Version
         * @param {SiteAnalyticsTsControllerStreamViewers1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} streamId stream id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteAnalyticsTsControllerStreamViewers1(v, language, projectId, streamId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteAnalyticsTsControllerStreamViewers1(v, language, projectId, streamId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AnalyticsApi.siteAnalyticsTsControllerStreamViewers1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.AnalyticsApiFp = AnalyticsApiFp;
/**
 * AnalyticsApi - factory interface
 * @export
 */
const AnalyticsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AnalyticsApiFp)(configuration);
    return {
        /**
         *
         * @summary Bitrate for stream
         * @param {SiteAnalyticsTsControllerStreamBitrate1VEnum} v Version
         * @param {SiteAnalyticsTsControllerStreamBitrate1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} streamId stream id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteAnalyticsTsControllerStreamBitrate1(v, language, projectId, streamId, options) {
            return localVarFp.siteAnalyticsTsControllerStreamBitrate1(v, language, projectId, streamId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Events for stream
         * @param {SiteAnalyticsTsControllerStreamEvents1VEnum} v Version
         * @param {SiteAnalyticsTsControllerStreamEvents1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} streamId stream id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteAnalyticsTsControllerStreamEvents1(v, language, projectId, streamId, options) {
            return localVarFp.siteAnalyticsTsControllerStreamEvents1(v, language, projectId, streamId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Viewers for stream
         * @param {SiteAnalyticsTsControllerStreamViewers1VEnum} v Version
         * @param {SiteAnalyticsTsControllerStreamViewers1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} streamId stream id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteAnalyticsTsControllerStreamViewers1(v, language, projectId, streamId, options) {
            return localVarFp.siteAnalyticsTsControllerStreamViewers1(v, language, projectId, streamId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AnalyticsApiFactory = AnalyticsApiFactory;
/**
 * AnalyticsApi - object-oriented interface
 * @export
 * @class AnalyticsApi
 * @extends {BaseAPI}
 */
class AnalyticsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Bitrate for stream
     * @param {SiteAnalyticsTsControllerStreamBitrate1VEnum} v Version
     * @param {SiteAnalyticsTsControllerStreamBitrate1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} streamId stream id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    siteAnalyticsTsControllerStreamBitrate1(v, language, projectId, streamId, options) {
        return (0, exports.AnalyticsApiFp)(this.configuration).siteAnalyticsTsControllerStreamBitrate1(v, language, projectId, streamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Events for stream
     * @param {SiteAnalyticsTsControllerStreamEvents1VEnum} v Version
     * @param {SiteAnalyticsTsControllerStreamEvents1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} streamId stream id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    siteAnalyticsTsControllerStreamEvents1(v, language, projectId, streamId, options) {
        return (0, exports.AnalyticsApiFp)(this.configuration).siteAnalyticsTsControllerStreamEvents1(v, language, projectId, streamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Viewers for stream
     * @param {SiteAnalyticsTsControllerStreamViewers1VEnum} v Version
     * @param {SiteAnalyticsTsControllerStreamViewers1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} streamId stream id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    siteAnalyticsTsControllerStreamViewers1(v, language, projectId, streamId, options) {
        return (0, exports.AnalyticsApiFp)(this.configuration).siteAnalyticsTsControllerStreamViewers1(v, language, projectId, streamId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AnalyticsApi = AnalyticsApi;
/**
 * @export
 */
exports.SiteAnalyticsTsControllerStreamBitrate1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteAnalyticsTsControllerStreamBitrate1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteAnalyticsTsControllerStreamEvents1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteAnalyticsTsControllerStreamEvents1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteAnalyticsTsControllerStreamViewers1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteAnalyticsTsControllerStreamViewers1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * AuthApi - axios parameter creator
 * @export
 */
const AuthApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Auth telegram
         * @param {AuthControllerAuthTelegram1VEnum} v Version
         * @param {AuthControllerAuthTelegram1LanguageEnum} language Current language
         * @param {number} authDate Time auth
         * @param {number} id Telegram userId
         * @param {string} firstName First name
         * @param {string} hash Hash
         * @param {AuthControllerAuthTelegram1AppEnum} app App oauth
         * @param {string} [lastName] Last name
         * @param {string} [username] Nickname
         * @param {string} [photoUrl] Photo
         * @param {string} [languageCode] IETF language tag of the user\&#39;s language
         * @param {boolean} [isPremium] True, if this user is a Telegram Premium user
         * @param {boolean} [addedToAttachmentMenu] True, if this user added the bot to the attachment menu
         * @param {string} [refId] Referal id
         * @param {string} [redirect] Redirect url
         * @param {string} [country] Country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAuthTelegram1: async (v, language, authDate, id, firstName, hash, app, lastName, username, photoUrl, languageCode, isPremium, addedToAttachmentMenu, refId, redirect, country, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('authControllerAuthTelegram1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('authControllerAuthTelegram1', 'language', language);
            // verify required parameter 'authDate' is not null or undefined
            (0, common_1.assertParamExists)('authControllerAuthTelegram1', 'authDate', authDate);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('authControllerAuthTelegram1', 'id', id);
            // verify required parameter 'firstName' is not null or undefined
            (0, common_1.assertParamExists)('authControllerAuthTelegram1', 'firstName', firstName);
            // verify required parameter 'hash' is not null or undefined
            (0, common_1.assertParamExists)('authControllerAuthTelegram1', 'hash', hash);
            // verify required parameter 'app' is not null or undefined
            (0, common_1.assertParamExists)('authControllerAuthTelegram1', 'app', app);
            const localVarPath = `/method/auth/auth-telegram`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (authDate !== undefined) {
                localVarQueryParameter['auth_date'] = authDate;
            }
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (firstName !== undefined) {
                localVarQueryParameter['first_name'] = firstName;
            }
            if (lastName !== undefined) {
                localVarQueryParameter['last_name'] = lastName;
            }
            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }
            if (photoUrl !== undefined) {
                localVarQueryParameter['photo_url'] = photoUrl;
            }
            if (languageCode !== undefined) {
                localVarQueryParameter['language_code'] = languageCode;
            }
            if (isPremium !== undefined) {
                localVarQueryParameter['is_premium'] = isPremium;
            }
            if (addedToAttachmentMenu !== undefined) {
                localVarQueryParameter['added_to_attachment_menu'] = addedToAttachmentMenu;
            }
            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }
            if (refId !== undefined) {
                localVarQueryParameter['refId'] = refId;
            }
            if (app !== undefined) {
                localVarQueryParameter['app'] = app;
            }
            if (redirect !== undefined) {
                localVarQueryParameter['redirect'] = redirect;
            }
            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Internal request of auth google
         * @param {string} state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCallbackGoogle1: async (state, options = {}) => {
            // verify required parameter 'state' is not null or undefined
            (0, common_1.assertParamExists)('authControllerCallbackGoogle1', 'state', state);
            const localVarPath = `/method/auth/callback/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Internal request of auth old vk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCallbackVk1: async (options = {}) => {
            const localVarPath = `/method/auth/callback/vk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Internal request of auth new vk
         * @param {string} state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCallbackVkId1: async (state, options = {}) => {
            // verify required parameter 'state' is not null or undefined
            (0, common_1.assertParamExists)('authControllerCallbackVkId1', 'state', state);
            const localVarPath = `/method/auth/callback/vk-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get code for auth
         * @param {AuthControllerCode1VEnum} v Version
         * @param {AuthControllerCode1LanguageEnum} language Current language
         * @param {AuthControllerCode1AppEnum} app Create auth code for app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCode1: async (v, language, app, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('authControllerCode1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('authControllerCode1', 'language', language);
            // verify required parameter 'app' is not null or undefined
            (0, common_1.assertParamExists)('authControllerCode1', 'app', app);
            const localVarPath = `/method/auth/app/code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (app !== undefined) {
                localVarQueryParameter['app'] = app;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Connected social account
         * @param {AuthControllerConnect1VEnum} v Version
         * @param {AuthControllerConnect1LanguageEnum} language Current language
         * @param {AuthControllerConnect1ProviderEnum} provider Provider oauth
         * @param {AuthControllerConnect1AppEnum} [app] App oauth
         * @param {string} [redirect] Redirect url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerConnect1: async (v, language, provider, app, redirect, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('authControllerConnect1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('authControllerConnect1', 'language', language);
            // verify required parameter 'provider' is not null or undefined
            (0, common_1.assertParamExists)('authControllerConnect1', 'provider', provider);
            const localVarPath = `/method/auth/connect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }
            if (app !== undefined) {
                localVarQueryParameter['app'] = app;
            }
            if (redirect !== undefined) {
                localVarQueryParameter['redirect'] = redirect;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary CallBack for connect social
         * @param {AuthControllerConnectResult1VEnum} v Version
         * @param {AuthControllerConnectResult1LanguageEnum} language Current language
         * @param {string} message Result message for connect
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerConnectResult1: async (v, language, message, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('authControllerConnectResult1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('authControllerConnectResult1', 'language', language);
            // verify required parameter 'message' is not null or undefined
            (0, common_1.assertParamExists)('authControllerConnectResult1', 'message', message);
            const localVarPath = `/method/auth/connect/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (message !== undefined) {
                localVarQueryParameter['message'] = message;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Connect telegram in account
         * @param {AuthControllerConnectTelegram1VEnum} v Version
         * @param {AuthControllerConnectTelegram1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerConnectTelegram1: async (v, language, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('authControllerConnectTelegram1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('authControllerConnectTelegram1', 'language', language);
            const localVarPath = `/method/auth/connect-telegram`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Disconnected social account
         * @param {AuthControllerDisconnect1VEnum} v Version
         * @param {AuthControllerDisconnect1LanguageEnum} language Current language
         * @param {number} socialId Social id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerDisconnect1: async (v, language, socialId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('authControllerDisconnect1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('authControllerDisconnect1', 'language', language);
            // verify required parameter 'socialId' is not null or undefined
            (0, common_1.assertParamExists)('authControllerDisconnect1', 'socialId', socialId);
            const localVarPath = `/method/auth/disconnect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (socialId !== undefined) {
                localVarQueryParameter['social_id'] = socialId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Code exchange
         * @param {SiteAuthExchangeRequest} siteAuthExchangeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerExchange1: async (siteAuthExchangeRequest, options = {}) => {
            // verify required parameter 'siteAuthExchangeRequest' is not null or undefined
            (0, common_1.assertParamExists)('authControllerExchange1', 'siteAuthExchangeRequest', siteAuthExchangeRequest);
            const localVarPath = `/method/auth/app/exchange`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteAuthExchangeRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get url for start oauth
         * @param {AuthControllerGetAuthUrl1VEnum} v Version
         * @param {AuthControllerGetAuthUrl1LanguageEnum} language Current language
         * @param {AuthControllerGetAuthUrl1ProviderEnum} provider Provider oauth
         * @param {AuthControllerGetAuthUrl1AppEnum} [app] App oauth
         * @param {string} [redirect] Redirect url
         * @param {string} [refId] Referal id
         * @param {string} [country] Country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetAuthUrl1: async (v, language, provider, app, redirect, refId, country, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('authControllerGetAuthUrl1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('authControllerGetAuthUrl1', 'language', language);
            // verify required parameter 'provider' is not null or undefined
            (0, common_1.assertParamExists)('authControllerGetAuthUrl1', 'provider', provider);
            const localVarPath = `/method/auth/redirect-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }
            if (app !== undefined) {
                localVarQueryParameter['app'] = app;
            }
            if (redirect !== undefined) {
                localVarQueryParameter['redirect'] = redirect;
            }
            if (refId !== undefined) {
                localVarQueryParameter['refId'] = refId;
            }
            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get basic data for auth user
         * @param {AuthControllerGetProfile1VEnum} v Version
         * @param {AuthControllerGetProfile1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetProfile1: async (v, language, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('authControllerGetProfile1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('authControllerGetProfile1', 'language', language);
            const localVarPath = `/method/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Guest request of auth
         * @param {string} refId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGuest1: async (refId, options = {}) => {
            // verify required parameter 'refId' is not null or undefined
            (0, common_1.assertParamExists)('authControllerGuest1', 'refId', refId);
            const localVarPath = `/method/auth/guest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (refId !== undefined) {
                localVarQueryParameter['refId'] = refId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Logout
         * @param {SiteLogoutAuthRequest} siteLogoutAuthRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout1: async (siteLogoutAuthRequest, options = {}) => {
            // verify required parameter 'siteLogoutAuthRequest' is not null or undefined
            (0, common_1.assertParamExists)('authControllerLogout1', 'siteLogoutAuthRequest', siteLogoutAuthRequest);
            const localVarPath = `/method/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteLogoutAuthRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update access token
         * @param {string} userAgent
         * @param {SiteRefreshAuthBodyRequest} siteRefreshAuthBodyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefreshAccess1: async (userAgent, siteRefreshAuthBodyRequest, options = {}) => {
            // verify required parameter 'userAgent' is not null or undefined
            (0, common_1.assertParamExists)('authControllerRefreshAccess1', 'userAgent', userAgent);
            // verify required parameter 'siteRefreshAuthBodyRequest' is not null or undefined
            (0, common_1.assertParamExists)('authControllerRefreshAccess1', 'siteRefreshAuthBodyRequest', siteRefreshAuthBodyRequest);
            const localVarPath = `/method/auth/refresh-access`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (userAgent != null) {
                localVarHeaderParameter['User-Agent'] = String(userAgent);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteRefreshAuthBodyRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.AuthApiAxiosParamCreator = AuthApiAxiosParamCreator;
/**
 * AuthApi - functional programming interface
 * @export
 */
const AuthApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AuthApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Auth telegram
         * @param {AuthControllerAuthTelegram1VEnum} v Version
         * @param {AuthControllerAuthTelegram1LanguageEnum} language Current language
         * @param {number} authDate Time auth
         * @param {number} id Telegram userId
         * @param {string} firstName First name
         * @param {string} hash Hash
         * @param {AuthControllerAuthTelegram1AppEnum} app App oauth
         * @param {string} [lastName] Last name
         * @param {string} [username] Nickname
         * @param {string} [photoUrl] Photo
         * @param {string} [languageCode] IETF language tag of the user\&#39;s language
         * @param {boolean} [isPremium] True, if this user is a Telegram Premium user
         * @param {boolean} [addedToAttachmentMenu] True, if this user added the bot to the attachment menu
         * @param {string} [refId] Referal id
         * @param {string} [redirect] Redirect url
         * @param {string} [country] Country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerAuthTelegram1(v, language, authDate, id, firstName, hash, app, lastName, username, photoUrl, languageCode, isPremium, addedToAttachmentMenu, refId, redirect, country, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerAuthTelegram1(v, language, authDate, id, firstName, hash, app, lastName, username, photoUrl, languageCode, isPremium, addedToAttachmentMenu, refId, redirect, country, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerAuthTelegram1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Internal request of auth google
         * @param {string} state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerCallbackGoogle1(state, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerCallbackGoogle1(state, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerCallbackGoogle1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Internal request of auth old vk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerCallbackVk1(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerCallbackVk1(options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerCallbackVk1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Internal request of auth new vk
         * @param {string} state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerCallbackVkId1(state, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerCallbackVkId1(state, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerCallbackVkId1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get code for auth
         * @param {AuthControllerCode1VEnum} v Version
         * @param {AuthControllerCode1LanguageEnum} language Current language
         * @param {AuthControllerCode1AppEnum} app Create auth code for app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerCode1(v, language, app, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerCode1(v, language, app, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerCode1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Connected social account
         * @param {AuthControllerConnect1VEnum} v Version
         * @param {AuthControllerConnect1LanguageEnum} language Current language
         * @param {AuthControllerConnect1ProviderEnum} provider Provider oauth
         * @param {AuthControllerConnect1AppEnum} [app] App oauth
         * @param {string} [redirect] Redirect url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerConnect1(v, language, provider, app, redirect, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerConnect1(v, language, provider, app, redirect, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerConnect1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary CallBack for connect social
         * @param {AuthControllerConnectResult1VEnum} v Version
         * @param {AuthControllerConnectResult1LanguageEnum} language Current language
         * @param {string} message Result message for connect
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerConnectResult1(v, language, message, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerConnectResult1(v, language, message, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerConnectResult1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Connect telegram in account
         * @param {AuthControllerConnectTelegram1VEnum} v Version
         * @param {AuthControllerConnectTelegram1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerConnectTelegram1(v, language, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerConnectTelegram1(v, language, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerConnectTelegram1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Disconnected social account
         * @param {AuthControllerDisconnect1VEnum} v Version
         * @param {AuthControllerDisconnect1LanguageEnum} language Current language
         * @param {number} socialId Social id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerDisconnect1(v, language, socialId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerDisconnect1(v, language, socialId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerDisconnect1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Code exchange
         * @param {SiteAuthExchangeRequest} siteAuthExchangeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerExchange1(siteAuthExchangeRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerExchange1(siteAuthExchangeRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerExchange1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get url for start oauth
         * @param {AuthControllerGetAuthUrl1VEnum} v Version
         * @param {AuthControllerGetAuthUrl1LanguageEnum} language Current language
         * @param {AuthControllerGetAuthUrl1ProviderEnum} provider Provider oauth
         * @param {AuthControllerGetAuthUrl1AppEnum} [app] App oauth
         * @param {string} [redirect] Redirect url
         * @param {string} [refId] Referal id
         * @param {string} [country] Country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerGetAuthUrl1(v, language, provider, app, redirect, refId, country, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerGetAuthUrl1(v, language, provider, app, redirect, refId, country, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerGetAuthUrl1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get basic data for auth user
         * @param {AuthControllerGetProfile1VEnum} v Version
         * @param {AuthControllerGetProfile1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerGetProfile1(v, language, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerGetProfile1(v, language, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerGetProfile1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Guest request of auth
         * @param {string} refId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerGuest1(refId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerGuest1(refId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerGuest1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Logout
         * @param {SiteLogoutAuthRequest} siteLogoutAuthRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogout1(siteLogoutAuthRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogout1(siteLogoutAuthRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerLogout1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update access token
         * @param {string} userAgent
         * @param {SiteRefreshAuthBodyRequest} siteRefreshAuthBodyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRefreshAccess1(userAgent, siteRefreshAuthBodyRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRefreshAccess1(userAgent, siteRefreshAuthBodyRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerRefreshAccess1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.AuthApiFp = AuthApiFp;
/**
 * AuthApi - factory interface
 * @export
 */
const AuthApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AuthApiFp)(configuration);
    return {
        /**
         *
         * @summary Auth telegram
         * @param {AuthControllerAuthTelegram1VEnum} v Version
         * @param {AuthControllerAuthTelegram1LanguageEnum} language Current language
         * @param {number} authDate Time auth
         * @param {number} id Telegram userId
         * @param {string} firstName First name
         * @param {string} hash Hash
         * @param {AuthControllerAuthTelegram1AppEnum} app App oauth
         * @param {string} [lastName] Last name
         * @param {string} [username] Nickname
         * @param {string} [photoUrl] Photo
         * @param {string} [languageCode] IETF language tag of the user\&#39;s language
         * @param {boolean} [isPremium] True, if this user is a Telegram Premium user
         * @param {boolean} [addedToAttachmentMenu] True, if this user added the bot to the attachment menu
         * @param {string} [refId] Referal id
         * @param {string} [redirect] Redirect url
         * @param {string} [country] Country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAuthTelegram1(v, language, authDate, id, firstName, hash, app, lastName, username, photoUrl, languageCode, isPremium, addedToAttachmentMenu, refId, redirect, country, options) {
            return localVarFp.authControllerAuthTelegram1(v, language, authDate, id, firstName, hash, app, lastName, username, photoUrl, languageCode, isPremium, addedToAttachmentMenu, refId, redirect, country, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Internal request of auth google
         * @param {string} state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCallbackGoogle1(state, options) {
            return localVarFp.authControllerCallbackGoogle1(state, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Internal request of auth old vk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCallbackVk1(options) {
            return localVarFp.authControllerCallbackVk1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Internal request of auth new vk
         * @param {string} state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCallbackVkId1(state, options) {
            return localVarFp.authControllerCallbackVkId1(state, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get code for auth
         * @param {AuthControllerCode1VEnum} v Version
         * @param {AuthControllerCode1LanguageEnum} language Current language
         * @param {AuthControllerCode1AppEnum} app Create auth code for app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCode1(v, language, app, options) {
            return localVarFp.authControllerCode1(v, language, app, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Connected social account
         * @param {AuthControllerConnect1VEnum} v Version
         * @param {AuthControllerConnect1LanguageEnum} language Current language
         * @param {AuthControllerConnect1ProviderEnum} provider Provider oauth
         * @param {AuthControllerConnect1AppEnum} [app] App oauth
         * @param {string} [redirect] Redirect url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerConnect1(v, language, provider, app, redirect, options) {
            return localVarFp.authControllerConnect1(v, language, provider, app, redirect, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary CallBack for connect social
         * @param {AuthControllerConnectResult1VEnum} v Version
         * @param {AuthControllerConnectResult1LanguageEnum} language Current language
         * @param {string} message Result message for connect
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerConnectResult1(v, language, message, options) {
            return localVarFp.authControllerConnectResult1(v, language, message, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Connect telegram in account
         * @param {AuthControllerConnectTelegram1VEnum} v Version
         * @param {AuthControllerConnectTelegram1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerConnectTelegram1(v, language, options) {
            return localVarFp.authControllerConnectTelegram1(v, language, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Disconnected social account
         * @param {AuthControllerDisconnect1VEnum} v Version
         * @param {AuthControllerDisconnect1LanguageEnum} language Current language
         * @param {number} socialId Social id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerDisconnect1(v, language, socialId, options) {
            return localVarFp.authControllerDisconnect1(v, language, socialId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Code exchange
         * @param {SiteAuthExchangeRequest} siteAuthExchangeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerExchange1(siteAuthExchangeRequest, options) {
            return localVarFp.authControllerExchange1(siteAuthExchangeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get url for start oauth
         * @param {AuthControllerGetAuthUrl1VEnum} v Version
         * @param {AuthControllerGetAuthUrl1LanguageEnum} language Current language
         * @param {AuthControllerGetAuthUrl1ProviderEnum} provider Provider oauth
         * @param {AuthControllerGetAuthUrl1AppEnum} [app] App oauth
         * @param {string} [redirect] Redirect url
         * @param {string} [refId] Referal id
         * @param {string} [country] Country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetAuthUrl1(v, language, provider, app, redirect, refId, country, options) {
            return localVarFp.authControllerGetAuthUrl1(v, language, provider, app, redirect, refId, country, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get basic data for auth user
         * @param {AuthControllerGetProfile1VEnum} v Version
         * @param {AuthControllerGetProfile1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetProfile1(v, language, options) {
            return localVarFp.authControllerGetProfile1(v, language, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Guest request of auth
         * @param {string} refId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGuest1(refId, options) {
            return localVarFp.authControllerGuest1(refId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Logout
         * @param {SiteLogoutAuthRequest} siteLogoutAuthRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout1(siteLogoutAuthRequest, options) {
            return localVarFp.authControllerLogout1(siteLogoutAuthRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update access token
         * @param {string} userAgent
         * @param {SiteRefreshAuthBodyRequest} siteRefreshAuthBodyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefreshAccess1(userAgent, siteRefreshAuthBodyRequest, options) {
            return localVarFp.authControllerRefreshAccess1(userAgent, siteRefreshAuthBodyRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AuthApiFactory = AuthApiFactory;
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
class AuthApi extends base_1.BaseAPI {
    /**
     *
     * @summary Auth telegram
     * @param {AuthControllerAuthTelegram1VEnum} v Version
     * @param {AuthControllerAuthTelegram1LanguageEnum} language Current language
     * @param {number} authDate Time auth
     * @param {number} id Telegram userId
     * @param {string} firstName First name
     * @param {string} hash Hash
     * @param {AuthControllerAuthTelegram1AppEnum} app App oauth
     * @param {string} [lastName] Last name
     * @param {string} [username] Nickname
     * @param {string} [photoUrl] Photo
     * @param {string} [languageCode] IETF language tag of the user\&#39;s language
     * @param {boolean} [isPremium] True, if this user is a Telegram Premium user
     * @param {boolean} [addedToAttachmentMenu] True, if this user added the bot to the attachment menu
     * @param {string} [refId] Referal id
     * @param {string} [redirect] Redirect url
     * @param {string} [country] Country code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerAuthTelegram1(v, language, authDate, id, firstName, hash, app, lastName, username, photoUrl, languageCode, isPremium, addedToAttachmentMenu, refId, redirect, country, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerAuthTelegram1(v, language, authDate, id, firstName, hash, app, lastName, username, photoUrl, languageCode, isPremium, addedToAttachmentMenu, refId, redirect, country, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Internal request of auth google
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerCallbackGoogle1(state, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerCallbackGoogle1(state, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Internal request of auth old vk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerCallbackVk1(options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerCallbackVk1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Internal request of auth new vk
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerCallbackVkId1(state, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerCallbackVkId1(state, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get code for auth
     * @param {AuthControllerCode1VEnum} v Version
     * @param {AuthControllerCode1LanguageEnum} language Current language
     * @param {AuthControllerCode1AppEnum} app Create auth code for app
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerCode1(v, language, app, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerCode1(v, language, app, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Connected social account
     * @param {AuthControllerConnect1VEnum} v Version
     * @param {AuthControllerConnect1LanguageEnum} language Current language
     * @param {AuthControllerConnect1ProviderEnum} provider Provider oauth
     * @param {AuthControllerConnect1AppEnum} [app] App oauth
     * @param {string} [redirect] Redirect url
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerConnect1(v, language, provider, app, redirect, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerConnect1(v, language, provider, app, redirect, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary CallBack for connect social
     * @param {AuthControllerConnectResult1VEnum} v Version
     * @param {AuthControllerConnectResult1LanguageEnum} language Current language
     * @param {string} message Result message for connect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerConnectResult1(v, language, message, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerConnectResult1(v, language, message, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Connect telegram in account
     * @param {AuthControllerConnectTelegram1VEnum} v Version
     * @param {AuthControllerConnectTelegram1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerConnectTelegram1(v, language, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerConnectTelegram1(v, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Disconnected social account
     * @param {AuthControllerDisconnect1VEnum} v Version
     * @param {AuthControllerDisconnect1LanguageEnum} language Current language
     * @param {number} socialId Social id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerDisconnect1(v, language, socialId, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerDisconnect1(v, language, socialId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Code exchange
     * @param {SiteAuthExchangeRequest} siteAuthExchangeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerExchange1(siteAuthExchangeRequest, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerExchange1(siteAuthExchangeRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get url for start oauth
     * @param {AuthControllerGetAuthUrl1VEnum} v Version
     * @param {AuthControllerGetAuthUrl1LanguageEnum} language Current language
     * @param {AuthControllerGetAuthUrl1ProviderEnum} provider Provider oauth
     * @param {AuthControllerGetAuthUrl1AppEnum} [app] App oauth
     * @param {string} [redirect] Redirect url
     * @param {string} [refId] Referal id
     * @param {string} [country] Country code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerGetAuthUrl1(v, language, provider, app, redirect, refId, country, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerGetAuthUrl1(v, language, provider, app, redirect, refId, country, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get basic data for auth user
     * @param {AuthControllerGetProfile1VEnum} v Version
     * @param {AuthControllerGetProfile1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerGetProfile1(v, language, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerGetProfile1(v, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Guest request of auth
     * @param {string} refId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerGuest1(refId, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerGuest1(refId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Logout
     * @param {SiteLogoutAuthRequest} siteLogoutAuthRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerLogout1(siteLogoutAuthRequest, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerLogout1(siteLogoutAuthRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update access token
     * @param {string} userAgent
     * @param {SiteRefreshAuthBodyRequest} siteRefreshAuthBodyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerRefreshAccess1(userAgent, siteRefreshAuthBodyRequest, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerRefreshAccess1(userAgent, siteRefreshAuthBodyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AuthApi = AuthApi;
/**
 * @export
 */
exports.AuthControllerAuthTelegram1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.AuthControllerAuthTelegram1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.AuthControllerAuthTelegram1AppEnum = {
    Site: 'site',
    Admin: 'admin',
    Mobile: 'mobile',
    Desktop: 'desktop'
};
/**
 * @export
 */
exports.AuthControllerCode1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.AuthControllerCode1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.AuthControllerCode1AppEnum = {
    Site: 'site',
    Admin: 'admin',
    Mobile: 'mobile',
    Desktop: 'desktop'
};
/**
 * @export
 */
exports.AuthControllerConnect1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.AuthControllerConnect1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.AuthControllerConnect1ProviderEnum = {
    Google: 'google',
    Vk: 'vk',
    VkId: 'vk-id',
    Telegram: 'telegram'
};
/**
 * @export
 */
exports.AuthControllerConnect1AppEnum = {
    Site: 'site',
    Admin: 'admin',
    Mobile: 'mobile',
    Desktop: 'desktop'
};
/**
 * @export
 */
exports.AuthControllerConnectResult1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.AuthControllerConnectResult1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.AuthControllerConnectTelegram1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.AuthControllerConnectTelegram1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.AuthControllerDisconnect1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.AuthControllerDisconnect1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.AuthControllerGetAuthUrl1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.AuthControllerGetAuthUrl1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.AuthControllerGetAuthUrl1ProviderEnum = {
    Google: 'google',
    Vk: 'vk',
    VkId: 'vk-id',
    Telegram: 'telegram'
};
/**
 * @export
 */
exports.AuthControllerGetAuthUrl1AppEnum = {
    Site: 'site',
    Admin: 'admin',
    Mobile: 'mobile',
    Desktop: 'desktop'
};
/**
 * @export
 */
exports.AuthControllerGetProfile1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.AuthControllerGetProfile1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * BlogPageApi - axios parameter creator
 * @export
 */
const BlogPageApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get blog page
         * @param {SiteBlogPageControllerGet1VEnum} v Version
         * @param {SiteBlogPageControllerGet1LanguageEnum} language Current language
         * @param {string} url Url of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteBlogPageControllerGet1: async (v, language, url, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteBlogPageControllerGet1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteBlogPageControllerGet1', 'language', language);
            // verify required parameter 'url' is not null or undefined
            (0, common_1.assertParamExists)('siteBlogPageControllerGet1', 'url', url);
            const localVarPath = `/method/blog/page/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get list of blog pages
         * @param {SiteBlogPageControllerList1VEnum} v Version
         * @param {SiteBlogPageControllerList1LanguageEnum} language Current language
         * @param {string} [s] String for search
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteBlogPageControllerList1: async (v, language, s, limit, offset, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteBlogPageControllerList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteBlogPageControllerList1', 'language', language);
            const localVarPath = `/method/blog/page/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (s !== undefined) {
                localVarQueryParameter['s'] = s;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.BlogPageApiAxiosParamCreator = BlogPageApiAxiosParamCreator;
/**
 * BlogPageApi - functional programming interface
 * @export
 */
const BlogPageApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.BlogPageApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get blog page
         * @param {SiteBlogPageControllerGet1VEnum} v Version
         * @param {SiteBlogPageControllerGet1LanguageEnum} language Current language
         * @param {string} url Url of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteBlogPageControllerGet1(v, language, url, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteBlogPageControllerGet1(v, language, url, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BlogPageApi.siteBlogPageControllerGet1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get list of blog pages
         * @param {SiteBlogPageControllerList1VEnum} v Version
         * @param {SiteBlogPageControllerList1LanguageEnum} language Current language
         * @param {string} [s] String for search
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteBlogPageControllerList1(v, language, s, limit, offset, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteBlogPageControllerList1(v, language, s, limit, offset, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BlogPageApi.siteBlogPageControllerList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.BlogPageApiFp = BlogPageApiFp;
/**
 * BlogPageApi - factory interface
 * @export
 */
const BlogPageApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.BlogPageApiFp)(configuration);
    return {
        /**
         *
         * @summary Get blog page
         * @param {SiteBlogPageControllerGet1VEnum} v Version
         * @param {SiteBlogPageControllerGet1LanguageEnum} language Current language
         * @param {string} url Url of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteBlogPageControllerGet1(v, language, url, options) {
            return localVarFp.siteBlogPageControllerGet1(v, language, url, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get list of blog pages
         * @param {SiteBlogPageControllerList1VEnum} v Version
         * @param {SiteBlogPageControllerList1LanguageEnum} language Current language
         * @param {string} [s] String for search
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteBlogPageControllerList1(v, language, s, limit, offset, options) {
            return localVarFp.siteBlogPageControllerList1(v, language, s, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};
exports.BlogPageApiFactory = BlogPageApiFactory;
/**
 * BlogPageApi - object-oriented interface
 * @export
 * @class BlogPageApi
 * @extends {BaseAPI}
 */
class BlogPageApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get blog page
     * @param {SiteBlogPageControllerGet1VEnum} v Version
     * @param {SiteBlogPageControllerGet1LanguageEnum} language Current language
     * @param {string} url Url of page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPageApi
     */
    siteBlogPageControllerGet1(v, language, url, options) {
        return (0, exports.BlogPageApiFp)(this.configuration).siteBlogPageControllerGet1(v, language, url, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get list of blog pages
     * @param {SiteBlogPageControllerList1VEnum} v Version
     * @param {SiteBlogPageControllerList1LanguageEnum} language Current language
     * @param {string} [s] String for search
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPageApi
     */
    siteBlogPageControllerList1(v, language, s, limit, offset, options) {
        return (0, exports.BlogPageApiFp)(this.configuration).siteBlogPageControllerList1(v, language, s, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.BlogPageApi = BlogPageApi;
/**
 * @export
 */
exports.SiteBlogPageControllerGet1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteBlogPageControllerGet1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteBlogPageControllerList1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteBlogPageControllerList1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * BlogPageTagApi - axios parameter creator
 * @export
 */
const BlogPageTagApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get list of blog pages
         * @param {SiteBlogPageTagControllerList1VEnum} v Version
         * @param {SiteBlogPageTagControllerList1LanguageEnum} language Current language
         * @param {string} [s] String for search
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteBlogPageTagControllerList1: async (v, language, s, limit, offset, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteBlogPageTagControllerList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteBlogPageTagControllerList1', 'language', language);
            const localVarPath = `/method/blog/tag/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (s !== undefined) {
                localVarQueryParameter['s'] = s;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.BlogPageTagApiAxiosParamCreator = BlogPageTagApiAxiosParamCreator;
/**
 * BlogPageTagApi - functional programming interface
 * @export
 */
const BlogPageTagApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.BlogPageTagApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get list of blog pages
         * @param {SiteBlogPageTagControllerList1VEnum} v Version
         * @param {SiteBlogPageTagControllerList1LanguageEnum} language Current language
         * @param {string} [s] String for search
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteBlogPageTagControllerList1(v, language, s, limit, offset, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteBlogPageTagControllerList1(v, language, s, limit, offset, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BlogPageTagApi.siteBlogPageTagControllerList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.BlogPageTagApiFp = BlogPageTagApiFp;
/**
 * BlogPageTagApi - factory interface
 * @export
 */
const BlogPageTagApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.BlogPageTagApiFp)(configuration);
    return {
        /**
         *
         * @summary Get list of blog pages
         * @param {SiteBlogPageTagControllerList1VEnum} v Version
         * @param {SiteBlogPageTagControllerList1LanguageEnum} language Current language
         * @param {string} [s] String for search
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteBlogPageTagControllerList1(v, language, s, limit, offset, options) {
            return localVarFp.siteBlogPageTagControllerList1(v, language, s, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};
exports.BlogPageTagApiFactory = BlogPageTagApiFactory;
/**
 * BlogPageTagApi - object-oriented interface
 * @export
 * @class BlogPageTagApi
 * @extends {BaseAPI}
 */
class BlogPageTagApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get list of blog pages
     * @param {SiteBlogPageTagControllerList1VEnum} v Version
     * @param {SiteBlogPageTagControllerList1LanguageEnum} language Current language
     * @param {string} [s] String for search
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPageTagApi
     */
    siteBlogPageTagControllerList1(v, language, s, limit, offset, options) {
        return (0, exports.BlogPageTagApiFp)(this.configuration).siteBlogPageTagControllerList1(v, language, s, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.BlogPageTagApi = BlogPageTagApi;
/**
 * @export
 */
exports.SiteBlogPageTagControllerList1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteBlogPageTagControllerList1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * BroadcastApi - axios parameter creator
 * @export
 */
const BroadcastApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get restreams
         * @param {MethodBroadcastControllerRestreamsVEnum} v Version
         * @param {MethodBroadcastControllerRestreamsLanguageEnum} language Current language
         * @param {number} broadcastId broadcast id
         * @param {string} key Chat token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodBroadcastControllerRestreams: async (v, language, broadcastId, key, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('methodBroadcastControllerRestreams', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('methodBroadcastControllerRestreams', 'language', language);
            // verify required parameter 'broadcastId' is not null or undefined
            (0, common_1.assertParamExists)('methodBroadcastControllerRestreams', 'broadcastId', broadcastId);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('methodBroadcastControllerRestreams', 'key', key);
            const localVarPath = `/method/broadcast/restreams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Connect channel, long polling
         * @param {MethodBroadcastControllerTokenChannelVEnum} v Version
         * @param {MethodBroadcastControllerTokenChannelLanguageEnum} language Current language
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodBroadcastControllerTokenChannel: async (v, language, key, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('methodBroadcastControllerTokenChannel', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('methodBroadcastControllerTokenChannel', 'language', language);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('methodBroadcastControllerTokenChannel', 'key', key);
            const localVarPath = `/method/broadcast/longpoll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.BroadcastApiAxiosParamCreator = BroadcastApiAxiosParamCreator;
/**
 * BroadcastApi - functional programming interface
 * @export
 */
const BroadcastApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.BroadcastApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get restreams
         * @param {MethodBroadcastControllerRestreamsVEnum} v Version
         * @param {MethodBroadcastControllerRestreamsLanguageEnum} language Current language
         * @param {number} broadcastId broadcast id
         * @param {string} key Chat token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async methodBroadcastControllerRestreams(v, language, broadcastId, key, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.methodBroadcastControllerRestreams(v, language, broadcastId, key, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BroadcastApi.methodBroadcastControllerRestreams']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Connect channel, long polling
         * @param {MethodBroadcastControllerTokenChannelVEnum} v Version
         * @param {MethodBroadcastControllerTokenChannelLanguageEnum} language Current language
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async methodBroadcastControllerTokenChannel(v, language, key, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.methodBroadcastControllerTokenChannel(v, language, key, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BroadcastApi.methodBroadcastControllerTokenChannel']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.BroadcastApiFp = BroadcastApiFp;
/**
 * BroadcastApi - factory interface
 * @export
 */
const BroadcastApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.BroadcastApiFp)(configuration);
    return {
        /**
         *
         * @summary Get restreams
         * @param {MethodBroadcastControllerRestreamsVEnum} v Version
         * @param {MethodBroadcastControllerRestreamsLanguageEnum} language Current language
         * @param {number} broadcastId broadcast id
         * @param {string} key Chat token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodBroadcastControllerRestreams(v, language, broadcastId, key, options) {
            return localVarFp.methodBroadcastControllerRestreams(v, language, broadcastId, key, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Connect channel, long polling
         * @param {MethodBroadcastControllerTokenChannelVEnum} v Version
         * @param {MethodBroadcastControllerTokenChannelLanguageEnum} language Current language
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodBroadcastControllerTokenChannel(v, language, key, options) {
            return localVarFp.methodBroadcastControllerTokenChannel(v, language, key, options).then((request) => request(axios, basePath));
        },
    };
};
exports.BroadcastApiFactory = BroadcastApiFactory;
/**
 * BroadcastApi - object-oriented interface
 * @export
 * @class BroadcastApi
 * @extends {BaseAPI}
 */
class BroadcastApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get restreams
     * @param {MethodBroadcastControllerRestreamsVEnum} v Version
     * @param {MethodBroadcastControllerRestreamsLanguageEnum} language Current language
     * @param {number} broadcastId broadcast id
     * @param {string} key Chat token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    methodBroadcastControllerRestreams(v, language, broadcastId, key, options) {
        return (0, exports.BroadcastApiFp)(this.configuration).methodBroadcastControllerRestreams(v, language, broadcastId, key, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Connect channel, long polling
     * @param {MethodBroadcastControllerTokenChannelVEnum} v Version
     * @param {MethodBroadcastControllerTokenChannelLanguageEnum} language Current language
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApi
     */
    methodBroadcastControllerTokenChannel(v, language, key, options) {
        return (0, exports.BroadcastApiFp)(this.configuration).methodBroadcastControllerTokenChannel(v, language, key, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.BroadcastApi = BroadcastApi;
/**
 * @export
 */
exports.MethodBroadcastControllerRestreamsVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.MethodBroadcastControllerRestreamsLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.MethodBroadcastControllerTokenChannelVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.MethodBroadcastControllerTokenChannelLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * CentrifugeApi - axios parameter creator
 * @export
 */
const CentrifugeApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min
         * @summary Auth token for broadcast
         * @param {number} broadcastId
         * @param {GetTokenBroadcastVEnum} v Version
         * @param {GetTokenBroadcastLanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenBroadcast: async (broadcastId, v, language, projectId, options = {}) => {
            // verify required parameter 'broadcastId' is not null or undefined
            (0, common_1.assertParamExists)('getTokenBroadcast', 'broadcastId', broadcastId);
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('getTokenBroadcast', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('getTokenBroadcast', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('getTokenBroadcast', 'projectId', projectId);
            const localVarPath = `/method/centrifuge/token/broadcast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Auth centrifuge
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteCentrifugeControllerAuthV21: async (projectId, options = {}) => {
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteCentrifugeControllerAuthV21', 'projectId', projectId);
            const localVarPath = `/method/centrifuge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor
         * @summary Auth token for project
         * @param {SiteCentrifugeControllerProject1VEnum} v Version
         * @param {SiteCentrifugeControllerProject1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteCentrifugeControllerProject1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteCentrifugeControllerProject1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteCentrifugeControllerProject1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteCentrifugeControllerProject1', 'projectId', projectId);
            const localVarPath = `/method/centrifuge/auth/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.CentrifugeApiAxiosParamCreator = CentrifugeApiAxiosParamCreator;
/**
 * CentrifugeApi - functional programming interface
 * @export
 */
const CentrifugeApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.CentrifugeApiAxiosParamCreator)(configuration);
    return {
        /**
         *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min
         * @summary Auth token for broadcast
         * @param {number} broadcastId
         * @param {GetTokenBroadcastVEnum} v Version
         * @param {GetTokenBroadcastLanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTokenBroadcast(broadcastId, v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTokenBroadcast(broadcastId, v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CentrifugeApi.getTokenBroadcast']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Auth centrifuge
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteCentrifugeControllerAuthV21(projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteCentrifugeControllerAuthV21(projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CentrifugeApi.siteCentrifugeControllerAuthV21']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor
         * @summary Auth token for project
         * @param {SiteCentrifugeControllerProject1VEnum} v Version
         * @param {SiteCentrifugeControllerProject1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteCentrifugeControllerProject1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteCentrifugeControllerProject1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CentrifugeApi.siteCentrifugeControllerProject1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.CentrifugeApiFp = CentrifugeApiFp;
/**
 * CentrifugeApi - factory interface
 * @export
 */
const CentrifugeApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.CentrifugeApiFp)(configuration);
    return {
        /**
         *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min
         * @summary Auth token for broadcast
         * @param {number} broadcastId
         * @param {GetTokenBroadcastVEnum} v Version
         * @param {GetTokenBroadcastLanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenBroadcast(broadcastId, v, language, projectId, options) {
            return localVarFp.getTokenBroadcast(broadcastId, v, language, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Auth centrifuge
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteCentrifugeControllerAuthV21(projectId, options) {
            return localVarFp.siteCentrifugeControllerAuthV21(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor
         * @summary Auth token for project
         * @param {SiteCentrifugeControllerProject1VEnum} v Version
         * @param {SiteCentrifugeControllerProject1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteCentrifugeControllerProject1(v, language, projectId, options) {
            return localVarFp.siteCentrifugeControllerProject1(v, language, projectId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.CentrifugeApiFactory = CentrifugeApiFactory;
/**
 * CentrifugeApi - object-oriented interface
 * @export
 * @class CentrifugeApi
 * @extends {BaseAPI}
 */
class CentrifugeApi extends base_1.BaseAPI {
    /**
     *        channel - \"$broadcast:{broadcast_id}\"       expiresIn - 30min
     * @summary Auth token for broadcast
     * @param {number} broadcastId
     * @param {GetTokenBroadcastVEnum} v Version
     * @param {GetTokenBroadcastLanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApi
     */
    getTokenBroadcast(broadcastId, v, language, projectId, options) {
        return (0, exports.CentrifugeApiFp)(this.configuration).getTokenBroadcast(broadcastId, v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Auth centrifuge
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApi
     */
    siteCentrifugeControllerAuthV21(projectId, options) {
        return (0, exports.CentrifugeApiFp)(this.configuration).siteCentrifugeControllerAuthV21(projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *        channel - \"$project_channels:{project_id}\"       expiresIn - 30min       project access min - editor
     * @summary Auth token for project
     * @param {SiteCentrifugeControllerProject1VEnum} v Version
     * @param {SiteCentrifugeControllerProject1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentrifugeApi
     */
    siteCentrifugeControllerProject1(v, language, projectId, options) {
        return (0, exports.CentrifugeApiFp)(this.configuration).siteCentrifugeControllerProject1(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CentrifugeApi = CentrifugeApi;
/**
 * @export
 */
exports.GetTokenBroadcastVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.GetTokenBroadcastLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteCentrifugeControllerProject1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteCentrifugeControllerProject1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * ChannelApi - axios parameter creator
 * @export
 */
const ChannelApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Search channel list
         * @param {MethodControllerSearchVEnum} v Version
         * @param {MethodControllerSearchLanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {MethodControllerSearchTypeEnum} [type]
         * @param {string} [platform] platform type
         * @param {string} [name] name
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodControllerSearch: async (v, language, projectId, type, platform, name, limit, offset, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('methodControllerSearch', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('methodControllerSearch', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('methodControllerSearch', 'projectId', projectId);
            const localVarPath = `/method/channel/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication X-API-KEY required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration);
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get live status
         * @param {MethodSetStatusChannelRequest} methodSetStatusChannelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodControllerSetStatus: async (methodSetStatusChannelRequest, options = {}) => {
            // verify required parameter 'methodSetStatusChannelRequest' is not null or undefined
            (0, common_1.assertParamExists)('methodControllerSetStatus', 'methodSetStatusChannelRequest', methodSetStatusChannelRequest);
            const localVarPath = `/method/channel/set-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication X-API-KEY required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(methodSetStatusChannelRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Minimal channel list
         * @param {SiteChannelControllerShortChannelList1VEnum} v Version
         * @param {SiteChannelControllerShortChannelList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelControllerShortChannelList1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelControllerShortChannelList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelControllerShortChannelList1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelControllerShortChannelList1', 'projectId', projectId);
            const localVarPath = `/method/channel/short`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ChannelApiAxiosParamCreator = ChannelApiAxiosParamCreator;
/**
 * ChannelApi - functional programming interface
 * @export
 */
const ChannelApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ChannelApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Search channel list
         * @param {MethodControllerSearchVEnum} v Version
         * @param {MethodControllerSearchLanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {MethodControllerSearchTypeEnum} [type]
         * @param {string} [platform] platform type
         * @param {string} [name] name
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async methodControllerSearch(v, language, projectId, type, platform, name, limit, offset, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.methodControllerSearch(v, language, projectId, type, platform, name, limit, offset, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelApi.methodControllerSearch']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get live status
         * @param {MethodSetStatusChannelRequest} methodSetStatusChannelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async methodControllerSetStatus(methodSetStatusChannelRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.methodControllerSetStatus(methodSetStatusChannelRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelApi.methodControllerSetStatus']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Minimal channel list
         * @param {SiteChannelControllerShortChannelList1VEnum} v Version
         * @param {SiteChannelControllerShortChannelList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelControllerShortChannelList1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelControllerShortChannelList1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelApi.siteChannelControllerShortChannelList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.ChannelApiFp = ChannelApiFp;
/**
 * ChannelApi - factory interface
 * @export
 */
const ChannelApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ChannelApiFp)(configuration);
    return {
        /**
         *
         * @summary Search channel list
         * @param {MethodControllerSearchVEnum} v Version
         * @param {MethodControllerSearchLanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {MethodControllerSearchTypeEnum} [type]
         * @param {string} [platform] platform type
         * @param {string} [name] name
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodControllerSearch(v, language, projectId, type, platform, name, limit, offset, options) {
            return localVarFp.methodControllerSearch(v, language, projectId, type, platform, name, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get live status
         * @param {MethodSetStatusChannelRequest} methodSetStatusChannelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodControllerSetStatus(methodSetStatusChannelRequest, options) {
            return localVarFp.methodControllerSetStatus(methodSetStatusChannelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Minimal channel list
         * @param {SiteChannelControllerShortChannelList1VEnum} v Version
         * @param {SiteChannelControllerShortChannelList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelControllerShortChannelList1(v, language, projectId, options) {
            return localVarFp.siteChannelControllerShortChannelList1(v, language, projectId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ChannelApiFactory = ChannelApiFactory;
/**
 * ChannelApi - object-oriented interface
 * @export
 * @class ChannelApi
 * @extends {BaseAPI}
 */
class ChannelApi extends base_1.BaseAPI {
    /**
     *
     * @summary Search channel list
     * @param {MethodControllerSearchVEnum} v Version
     * @param {MethodControllerSearchLanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {MethodControllerSearchTypeEnum} [type]
     * @param {string} [platform] platform type
     * @param {string} [name] name
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    methodControllerSearch(v, language, projectId, type, platform, name, limit, offset, options) {
        return (0, exports.ChannelApiFp)(this.configuration).methodControllerSearch(v, language, projectId, type, platform, name, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get live status
     * @param {MethodSetStatusChannelRequest} methodSetStatusChannelRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    methodControllerSetStatus(methodSetStatusChannelRequest, options) {
        return (0, exports.ChannelApiFp)(this.configuration).methodControllerSetStatus(methodSetStatusChannelRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Minimal channel list
     * @param {SiteChannelControllerShortChannelList1VEnum} v Version
     * @param {SiteChannelControllerShortChannelList1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    siteChannelControllerShortChannelList1(v, language, projectId, options) {
        return (0, exports.ChannelApiFp)(this.configuration).siteChannelControllerShortChannelList1(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ChannelApi = ChannelApi;
/**
 * @export
 */
exports.MethodControllerSearchVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.MethodControllerSearchLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.MethodControllerSearchTypeEnum = {
    All: 'all',
    My: 'my',
    Available: 'available',
    Active: 'active'
};
/**
 * @export
 */
exports.SiteChannelControllerShortChannelList1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteChannelControllerShortChannelList1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * ChannelSettingsApi - axios parameter creator
 * @export
 */
const ChannelSettingsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get telegram settings
         * @param {SiteChannelChatControllerGetTelegramSetting1VEnum} v Version
         * @param {SiteChannelChatControllerGetTelegramSetting1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelChatControllerGetTelegramSetting1: async (v, language, projectId, channelId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerGetTelegramSetting1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerGetTelegramSetting1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerGetTelegramSetting1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerGetTelegramSetting1', 'channelId', channelId);
            const localVarPath = `/method/channel_settings/chat/telegram/setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get code for connected chat
         * @param {SiteChannelChatControllerInitTelegramChatConnect1VEnum} v Version
         * @param {SiteChannelChatControllerInitTelegramChatConnect1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelChatControllerInitTelegramChatConnect1: async (v, language, projectId, channelId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerInitTelegramChatConnect1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerInitTelegramChatConnect1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerInitTelegramChatConnect1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerInitTelegramChatConnect1', 'channelId', channelId);
            const localVarPath = `/method/channel_settings/chat/telegram/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Disconnect telegram chat
         * @param {SiteChannelChatControllerRemoveTelegramChat1VEnum} v Version
         * @param {SiteChannelChatControllerRemoveTelegramChat1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelChatControllerRemoveTelegramChat1: async (v, language, projectId, channelId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerRemoveTelegramChat1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerRemoveTelegramChat1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerRemoveTelegramChat1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerRemoveTelegramChat1', 'channelId', channelId);
            const localVarPath = `/method/channel_settings/chat/telegram/disconnect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set telegram settings
         * @param {SiteChannelChatControllerSetTelegramSetting1VEnum} v Version
         * @param {SiteChannelChatControllerSetTelegramSetting1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {SiteTelegramSetSettingsRequestDto} siteTelegramSetSettingsRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelChatControllerSetTelegramSetting1: async (v, language, projectId, channelId, siteTelegramSetSettingsRequestDto, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerSetTelegramSetting1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerSetTelegramSetting1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerSetTelegramSetting1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerSetTelegramSetting1', 'channelId', channelId);
            // verify required parameter 'siteTelegramSetSettingsRequestDto' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerSetTelegramSetting1', 'siteTelegramSetSettingsRequestDto', siteTelegramSetSettingsRequestDto);
            const localVarPath = `/method/channel_settings/chat/telegram/setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteTelegramSetSettingsRequestDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get telegram post list
         * @param {SiteChannelChatControllerTelegramPosts1VEnum} v Version
         * @param {SiteChannelChatControllerTelegramPosts1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelChatControllerTelegramPosts1: async (v, language, projectId, channelId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerTelegramPosts1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerTelegramPosts1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerTelegramPosts1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerTelegramPosts1', 'channelId', channelId);
            const localVarPath = `/method/channel_settings/chat/telegram/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Optional settings for telegram
         * @param {SiteUpdateChatTelegramRequest} siteUpdateChatTelegramRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelChatControllerUpdateOptionsTelegram1: async (siteUpdateChatTelegramRequest, options = {}) => {
            // verify required parameter 'siteUpdateChatTelegramRequest' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelChatControllerUpdateOptionsTelegram1', 'siteUpdateChatTelegramRequest', siteUpdateChatTelegramRequest);
            const localVarPath = `/method/channel_settings/chat/setTelegram`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteUpdateChatTelegramRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get planned list
         * @param {SiteChannelOptionsControllerGetPlanned1VEnum} v Version
         * @param {SiteChannelOptionsControllerGetPlanned1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelOptionsControllerGetPlanned1: async (v, language, projectId, channelId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelOptionsControllerGetPlanned1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelOptionsControllerGetPlanned1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelOptionsControllerGetPlanned1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelOptionsControllerGetPlanned1', 'channelId', channelId);
            const localVarPath = `/method/channel_settings/options/getPlanned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get playlists from the platform
         * @param {SiteChannelOptionsControllerGetPlayList1VEnum} v Version
         * @param {SiteChannelOptionsControllerGetPlayList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelOptionsControllerGetPlayList1: async (v, language, projectId, channelId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelOptionsControllerGetPlayList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelOptionsControllerGetPlayList1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelOptionsControllerGetPlayList1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelOptionsControllerGetPlayList1', 'channelId', channelId);
            const localVarPath = `/method/channel_settings/options/getPlaylist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Optional settings for ok. Depends on the tariff.
         * @param {SiteUpdateOptionsOkRequest} siteUpdateOptionsOkRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelOptionsControllerUpdateOptionsOk1: async (siteUpdateOptionsOkRequest, options = {}) => {
            // verify required parameter 'siteUpdateOptionsOkRequest' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelOptionsControllerUpdateOptionsOk1', 'siteUpdateOptionsOkRequest', siteUpdateOptionsOkRequest);
            const localVarPath = `/method/channel_settings/options/setOk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteUpdateOptionsOkRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Optional settings for trovo. Depends on the tariff.
         * @param {SiteUpdateOptionsTrovoRequest} siteUpdateOptionsTrovoRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelOptionsControllerUpdateOptionsTrovo1: async (siteUpdateOptionsTrovoRequest, options = {}) => {
            // verify required parameter 'siteUpdateOptionsTrovoRequest' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelOptionsControllerUpdateOptionsTrovo1', 'siteUpdateOptionsTrovoRequest', siteUpdateOptionsTrovoRequest);
            const localVarPath = `/method/channel_settings/options/setTrovo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteUpdateOptionsTrovoRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Optional settings for twitch. Depends on the tariff.
         * @param {SiteUpdateOptionsTwitchRequest} siteUpdateOptionsTwitchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelOptionsControllerUpdateOptionsTwitch1: async (siteUpdateOptionsTwitchRequest, options = {}) => {
            // verify required parameter 'siteUpdateOptionsTwitchRequest' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelOptionsControllerUpdateOptionsTwitch1', 'siteUpdateOptionsTwitchRequest', siteUpdateOptionsTwitchRequest);
            const localVarPath = `/method/channel_settings/options/setTwitch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteUpdateOptionsTwitchRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Optional settings for vk. Depends on the tariff.
         * @param {SiteUpdateOptionsVkRequest} siteUpdateOptionsVkRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelOptionsControllerUpdateOptionsVk1: async (siteUpdateOptionsVkRequest, options = {}) => {
            // verify required parameter 'siteUpdateOptionsVkRequest' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelOptionsControllerUpdateOptionsVk1', 'siteUpdateOptionsVkRequest', siteUpdateOptionsVkRequest);
            const localVarPath = `/method/channel_settings/options/setVk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteUpdateOptionsVkRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Optional settings for vk video live. Depends on the tariff.
         * @param {SiteUpdateOptionsVkVideoLiveRequest} siteUpdateOptionsVkVideoLiveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelOptionsControllerUpdateOptionsVkVideoLive1: async (siteUpdateOptionsVkVideoLiveRequest, options = {}) => {
            // verify required parameter 'siteUpdateOptionsVkVideoLiveRequest' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelOptionsControllerUpdateOptionsVkVideoLive1', 'siteUpdateOptionsVkVideoLiveRequest', siteUpdateOptionsVkVideoLiveRequest);
            const localVarPath = `/method/channel_settings/options/setVkVideoLive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteUpdateOptionsVkVideoLiveRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Optional settings for youtube. Depends on the tariff.
         * @param {SiteUpdateOptionsYoutubeRequest} siteUpdateOptionsYoutubeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelOptionsControllerUpdateOptionsYoutube1: async (siteUpdateOptionsYoutubeRequest, options = {}) => {
            // verify required parameter 'siteUpdateOptionsYoutubeRequest' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelOptionsControllerUpdateOptionsYoutube1', 'siteUpdateOptionsYoutubeRequest', siteUpdateOptionsYoutubeRequest);
            const localVarPath = `/method/channel_settings/options/setYoutube`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteUpdateOptionsYoutubeRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set planned id. Depends on the tariff.
         * @param {SiteSetPlannedRequest} siteSetPlannedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelOptionsControllerUpdatePlanned1: async (siteSetPlannedRequest, options = {}) => {
            // verify required parameter 'siteSetPlannedRequest' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelOptionsControllerUpdatePlanned1', 'siteSetPlannedRequest', siteSetPlannedRequest);
            const localVarPath = `/method/channel_settings/options/setPlanned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteSetPlannedRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get status platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelSettingControllerGetStatus1: async (options = {}) => {
            const localVarPath = `/method/channel_settings/getStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set name from custom channel. Global settings.
         * @param {SiteSetNameRequest} siteSetNameRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelSettingControllerSetName1: async (siteSetNameRequest, options = {}) => {
            // verify required parameter 'siteSetNameRequest' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelSettingControllerSetName1', 'siteSetNameRequest', siteSetNameRequest);
            const localVarPath = `/method/channel_settings/setName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteSetNameRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set rtmp url from channel. Global settings.
         * @param {SiteSetUrlRequest} siteSetUrlRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelSettingControllerUpdateRtmp1: async (siteSetUrlRequest, options = {}) => {
            // verify required parameter 'siteSetUrlRequest' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelSettingControllerUpdateRtmp1', 'siteSetUrlRequest', siteSetUrlRequest);
            const localVarPath = `/method/channel_settings/setRtmp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteSetUrlRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get status platform
         * @param {SiteChannelSettingControllerUpdateToken1VEnum} v Version
         * @param {SiteChannelSettingControllerUpdateToken1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {SiteChannelSettingControllerUpdateToken1RoleEnum} role Token role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelSettingControllerUpdateToken1: async (v, language, projectId, channelId, role, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelSettingControllerUpdateToken1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelSettingControllerUpdateToken1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelSettingControllerUpdateToken1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelSettingControllerUpdateToken1', 'channelId', channelId);
            // verify required parameter 'role' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelSettingControllerUpdateToken1', 'role', role);
            const localVarPath = `/method/channel_settings/update-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set transcoder from channel. Personal settings.
         * @param {SiteSetTranscoderRequest} siteSetTranscoderRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelSettingControllerUpdateTranscoder1: async (siteSetTranscoderRequest, options = {}) => {
            // verify required parameter 'siteSetTranscoderRequest' is not null or undefined
            (0, common_1.assertParamExists)('siteChannelSettingControllerUpdateTranscoder1', 'siteSetTranscoderRequest', siteSetTranscoderRequest);
            const localVarPath = `/method/channel_settings/setTranscoder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteSetTranscoderRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get telegram post by filter
         * @param {TelegramGetPostByFilterVEnum} v Version
         * @param {TelegramGetPostByFilterLanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} filterMode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        telegramGetPostByFilter: async (v, language, projectId, channelId, filterMode, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('telegramGetPostByFilter', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('telegramGetPostByFilter', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('telegramGetPostByFilter', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('telegramGetPostByFilter', 'channelId', channelId);
            // verify required parameter 'filterMode' is not null or undefined
            (0, common_1.assertParamExists)('telegramGetPostByFilter', 'filterMode', filterMode);
            const localVarPath = `/method/channel_settings/chat/telegram/posts/get-by-filter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (filterMode !== undefined) {
                localVarQueryParameter['filter_mode'] = filterMode;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ChannelSettingsApiAxiosParamCreator = ChannelSettingsApiAxiosParamCreator;
/**
 * ChannelSettingsApi - functional programming interface
 * @export
 */
const ChannelSettingsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ChannelSettingsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get telegram settings
         * @param {SiteChannelChatControllerGetTelegramSetting1VEnum} v Version
         * @param {SiteChannelChatControllerGetTelegramSetting1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelChatControllerGetTelegramSetting1(v, language, projectId, channelId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelChatControllerGetTelegramSetting1(v, language, projectId, channelId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelChatControllerGetTelegramSetting1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get code for connected chat
         * @param {SiteChannelChatControllerInitTelegramChatConnect1VEnum} v Version
         * @param {SiteChannelChatControllerInitTelegramChatConnect1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelChatControllerInitTelegramChatConnect1(v, language, projectId, channelId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelChatControllerInitTelegramChatConnect1(v, language, projectId, channelId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelChatControllerInitTelegramChatConnect1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Disconnect telegram chat
         * @param {SiteChannelChatControllerRemoveTelegramChat1VEnum} v Version
         * @param {SiteChannelChatControllerRemoveTelegramChat1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelChatControllerRemoveTelegramChat1(v, language, projectId, channelId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelChatControllerRemoveTelegramChat1(v, language, projectId, channelId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelChatControllerRemoveTelegramChat1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Set telegram settings
         * @param {SiteChannelChatControllerSetTelegramSetting1VEnum} v Version
         * @param {SiteChannelChatControllerSetTelegramSetting1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {SiteTelegramSetSettingsRequestDto} siteTelegramSetSettingsRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelChatControllerSetTelegramSetting1(v, language, projectId, channelId, siteTelegramSetSettingsRequestDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelChatControllerSetTelegramSetting1(v, language, projectId, channelId, siteTelegramSetSettingsRequestDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelChatControllerSetTelegramSetting1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get telegram post list
         * @param {SiteChannelChatControllerTelegramPosts1VEnum} v Version
         * @param {SiteChannelChatControllerTelegramPosts1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelChatControllerTelegramPosts1(v, language, projectId, channelId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelChatControllerTelegramPosts1(v, language, projectId, channelId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelChatControllerTelegramPosts1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Optional settings for telegram
         * @param {SiteUpdateChatTelegramRequest} siteUpdateChatTelegramRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelChatControllerUpdateOptionsTelegram1(siteUpdateChatTelegramRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelChatControllerUpdateOptionsTelegram1(siteUpdateChatTelegramRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelChatControllerUpdateOptionsTelegram1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get planned list
         * @param {SiteChannelOptionsControllerGetPlanned1VEnum} v Version
         * @param {SiteChannelOptionsControllerGetPlanned1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelOptionsControllerGetPlanned1(v, language, projectId, channelId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelOptionsControllerGetPlanned1(v, language, projectId, channelId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelOptionsControllerGetPlanned1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get playlists from the platform
         * @param {SiteChannelOptionsControllerGetPlayList1VEnum} v Version
         * @param {SiteChannelOptionsControllerGetPlayList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelOptionsControllerGetPlayList1(v, language, projectId, channelId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelOptionsControllerGetPlayList1(v, language, projectId, channelId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelOptionsControllerGetPlayList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Optional settings for ok. Depends on the tariff.
         * @param {SiteUpdateOptionsOkRequest} siteUpdateOptionsOkRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelOptionsControllerUpdateOptionsOk1(siteUpdateOptionsOkRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelOptionsControllerUpdateOptionsOk1(siteUpdateOptionsOkRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelOptionsControllerUpdateOptionsOk1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Optional settings for trovo. Depends on the tariff.
         * @param {SiteUpdateOptionsTrovoRequest} siteUpdateOptionsTrovoRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelOptionsControllerUpdateOptionsTrovo1(siteUpdateOptionsTrovoRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelOptionsControllerUpdateOptionsTrovo1(siteUpdateOptionsTrovoRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelOptionsControllerUpdateOptionsTrovo1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Optional settings for twitch. Depends on the tariff.
         * @param {SiteUpdateOptionsTwitchRequest} siteUpdateOptionsTwitchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelOptionsControllerUpdateOptionsTwitch1(siteUpdateOptionsTwitchRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelOptionsControllerUpdateOptionsTwitch1(siteUpdateOptionsTwitchRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelOptionsControllerUpdateOptionsTwitch1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Optional settings for vk. Depends on the tariff.
         * @param {SiteUpdateOptionsVkRequest} siteUpdateOptionsVkRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelOptionsControllerUpdateOptionsVk1(siteUpdateOptionsVkRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelOptionsControllerUpdateOptionsVk1(siteUpdateOptionsVkRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelOptionsControllerUpdateOptionsVk1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Optional settings for vk video live. Depends on the tariff.
         * @param {SiteUpdateOptionsVkVideoLiveRequest} siteUpdateOptionsVkVideoLiveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelOptionsControllerUpdateOptionsVkVideoLive1(siteUpdateOptionsVkVideoLiveRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelOptionsControllerUpdateOptionsVkVideoLive1(siteUpdateOptionsVkVideoLiveRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelOptionsControllerUpdateOptionsVkVideoLive1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Optional settings for youtube. Depends on the tariff.
         * @param {SiteUpdateOptionsYoutubeRequest} siteUpdateOptionsYoutubeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelOptionsControllerUpdateOptionsYoutube1(siteUpdateOptionsYoutubeRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelOptionsControllerUpdateOptionsYoutube1(siteUpdateOptionsYoutubeRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelOptionsControllerUpdateOptionsYoutube1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Set planned id. Depends on the tariff.
         * @param {SiteSetPlannedRequest} siteSetPlannedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelOptionsControllerUpdatePlanned1(siteSetPlannedRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelOptionsControllerUpdatePlanned1(siteSetPlannedRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelOptionsControllerUpdatePlanned1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get status platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelSettingControllerGetStatus1(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelSettingControllerGetStatus1(options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelSettingControllerGetStatus1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Set name from custom channel. Global settings.
         * @param {SiteSetNameRequest} siteSetNameRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelSettingControllerSetName1(siteSetNameRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelSettingControllerSetName1(siteSetNameRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelSettingControllerSetName1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Set rtmp url from channel. Global settings.
         * @param {SiteSetUrlRequest} siteSetUrlRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelSettingControllerUpdateRtmp1(siteSetUrlRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelSettingControllerUpdateRtmp1(siteSetUrlRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelSettingControllerUpdateRtmp1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get status platform
         * @param {SiteChannelSettingControllerUpdateToken1VEnum} v Version
         * @param {SiteChannelSettingControllerUpdateToken1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {SiteChannelSettingControllerUpdateToken1RoleEnum} role Token role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelSettingControllerUpdateToken1(v, language, projectId, channelId, role, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelSettingControllerUpdateToken1(v, language, projectId, channelId, role, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelSettingControllerUpdateToken1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Set transcoder from channel. Personal settings.
         * @param {SiteSetTranscoderRequest} siteSetTranscoderRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteChannelSettingControllerUpdateTranscoder1(siteSetTranscoderRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteChannelSettingControllerUpdateTranscoder1(siteSetTranscoderRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.siteChannelSettingControllerUpdateTranscoder1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get telegram post by filter
         * @param {TelegramGetPostByFilterVEnum} v Version
         * @param {TelegramGetPostByFilterLanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} filterMode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async telegramGetPostByFilter(v, language, projectId, channelId, filterMode, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.telegramGetPostByFilter(v, language, projectId, channelId, filterMode, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChannelSettingsApi.telegramGetPostByFilter']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.ChannelSettingsApiFp = ChannelSettingsApiFp;
/**
 * ChannelSettingsApi - factory interface
 * @export
 */
const ChannelSettingsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ChannelSettingsApiFp)(configuration);
    return {
        /**
         *
         * @summary Get telegram settings
         * @param {SiteChannelChatControllerGetTelegramSetting1VEnum} v Version
         * @param {SiteChannelChatControllerGetTelegramSetting1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelChatControllerGetTelegramSetting1(v, language, projectId, channelId, options) {
            return localVarFp.siteChannelChatControllerGetTelegramSetting1(v, language, projectId, channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get code for connected chat
         * @param {SiteChannelChatControllerInitTelegramChatConnect1VEnum} v Version
         * @param {SiteChannelChatControllerInitTelegramChatConnect1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelChatControllerInitTelegramChatConnect1(v, language, projectId, channelId, options) {
            return localVarFp.siteChannelChatControllerInitTelegramChatConnect1(v, language, projectId, channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Disconnect telegram chat
         * @param {SiteChannelChatControllerRemoveTelegramChat1VEnum} v Version
         * @param {SiteChannelChatControllerRemoveTelegramChat1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelChatControllerRemoveTelegramChat1(v, language, projectId, channelId, options) {
            return localVarFp.siteChannelChatControllerRemoveTelegramChat1(v, language, projectId, channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set telegram settings
         * @param {SiteChannelChatControllerSetTelegramSetting1VEnum} v Version
         * @param {SiteChannelChatControllerSetTelegramSetting1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {SiteTelegramSetSettingsRequestDto} siteTelegramSetSettingsRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelChatControllerSetTelegramSetting1(v, language, projectId, channelId, siteTelegramSetSettingsRequestDto, options) {
            return localVarFp.siteChannelChatControllerSetTelegramSetting1(v, language, projectId, channelId, siteTelegramSetSettingsRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get telegram post list
         * @param {SiteChannelChatControllerTelegramPosts1VEnum} v Version
         * @param {SiteChannelChatControllerTelegramPosts1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelChatControllerTelegramPosts1(v, language, projectId, channelId, options) {
            return localVarFp.siteChannelChatControllerTelegramPosts1(v, language, projectId, channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Optional settings for telegram
         * @param {SiteUpdateChatTelegramRequest} siteUpdateChatTelegramRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelChatControllerUpdateOptionsTelegram1(siteUpdateChatTelegramRequest, options) {
            return localVarFp.siteChannelChatControllerUpdateOptionsTelegram1(siteUpdateChatTelegramRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get planned list
         * @param {SiteChannelOptionsControllerGetPlanned1VEnum} v Version
         * @param {SiteChannelOptionsControllerGetPlanned1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelOptionsControllerGetPlanned1(v, language, projectId, channelId, options) {
            return localVarFp.siteChannelOptionsControllerGetPlanned1(v, language, projectId, channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get playlists from the platform
         * @param {SiteChannelOptionsControllerGetPlayList1VEnum} v Version
         * @param {SiteChannelOptionsControllerGetPlayList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelOptionsControllerGetPlayList1(v, language, projectId, channelId, options) {
            return localVarFp.siteChannelOptionsControllerGetPlayList1(v, language, projectId, channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Optional settings for ok. Depends on the tariff.
         * @param {SiteUpdateOptionsOkRequest} siteUpdateOptionsOkRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelOptionsControllerUpdateOptionsOk1(siteUpdateOptionsOkRequest, options) {
            return localVarFp.siteChannelOptionsControllerUpdateOptionsOk1(siteUpdateOptionsOkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Optional settings for trovo. Depends on the tariff.
         * @param {SiteUpdateOptionsTrovoRequest} siteUpdateOptionsTrovoRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelOptionsControllerUpdateOptionsTrovo1(siteUpdateOptionsTrovoRequest, options) {
            return localVarFp.siteChannelOptionsControllerUpdateOptionsTrovo1(siteUpdateOptionsTrovoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Optional settings for twitch. Depends on the tariff.
         * @param {SiteUpdateOptionsTwitchRequest} siteUpdateOptionsTwitchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelOptionsControllerUpdateOptionsTwitch1(siteUpdateOptionsTwitchRequest, options) {
            return localVarFp.siteChannelOptionsControllerUpdateOptionsTwitch1(siteUpdateOptionsTwitchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Optional settings for vk. Depends on the tariff.
         * @param {SiteUpdateOptionsVkRequest} siteUpdateOptionsVkRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelOptionsControllerUpdateOptionsVk1(siteUpdateOptionsVkRequest, options) {
            return localVarFp.siteChannelOptionsControllerUpdateOptionsVk1(siteUpdateOptionsVkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Optional settings for vk video live. Depends on the tariff.
         * @param {SiteUpdateOptionsVkVideoLiveRequest} siteUpdateOptionsVkVideoLiveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelOptionsControllerUpdateOptionsVkVideoLive1(siteUpdateOptionsVkVideoLiveRequest, options) {
            return localVarFp.siteChannelOptionsControllerUpdateOptionsVkVideoLive1(siteUpdateOptionsVkVideoLiveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Optional settings for youtube. Depends on the tariff.
         * @param {SiteUpdateOptionsYoutubeRequest} siteUpdateOptionsYoutubeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelOptionsControllerUpdateOptionsYoutube1(siteUpdateOptionsYoutubeRequest, options) {
            return localVarFp.siteChannelOptionsControllerUpdateOptionsYoutube1(siteUpdateOptionsYoutubeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set planned id. Depends on the tariff.
         * @param {SiteSetPlannedRequest} siteSetPlannedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelOptionsControllerUpdatePlanned1(siteSetPlannedRequest, options) {
            return localVarFp.siteChannelOptionsControllerUpdatePlanned1(siteSetPlannedRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get status platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelSettingControllerGetStatus1(options) {
            return localVarFp.siteChannelSettingControllerGetStatus1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set name from custom channel. Global settings.
         * @param {SiteSetNameRequest} siteSetNameRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelSettingControllerSetName1(siteSetNameRequest, options) {
            return localVarFp.siteChannelSettingControllerSetName1(siteSetNameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set rtmp url from channel. Global settings.
         * @param {SiteSetUrlRequest} siteSetUrlRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelSettingControllerUpdateRtmp1(siteSetUrlRequest, options) {
            return localVarFp.siteChannelSettingControllerUpdateRtmp1(siteSetUrlRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get status platform
         * @param {SiteChannelSettingControllerUpdateToken1VEnum} v Version
         * @param {SiteChannelSettingControllerUpdateToken1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {SiteChannelSettingControllerUpdateToken1RoleEnum} role Token role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelSettingControllerUpdateToken1(v, language, projectId, channelId, role, options) {
            return localVarFp.siteChannelSettingControllerUpdateToken1(v, language, projectId, channelId, role, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set transcoder from channel. Personal settings.
         * @param {SiteSetTranscoderRequest} siteSetTranscoderRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteChannelSettingControllerUpdateTranscoder1(siteSetTranscoderRequest, options) {
            return localVarFp.siteChannelSettingControllerUpdateTranscoder1(siteSetTranscoderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get telegram post by filter
         * @param {TelegramGetPostByFilterVEnum} v Version
         * @param {TelegramGetPostByFilterLanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} filterMode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        telegramGetPostByFilter(v, language, projectId, channelId, filterMode, options) {
            return localVarFp.telegramGetPostByFilter(v, language, projectId, channelId, filterMode, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ChannelSettingsApiFactory = ChannelSettingsApiFactory;
/**
 * ChannelSettingsApi - object-oriented interface
 * @export
 * @class ChannelSettingsApi
 * @extends {BaseAPI}
 */
class ChannelSettingsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get telegram settings
     * @param {SiteChannelChatControllerGetTelegramSetting1VEnum} v Version
     * @param {SiteChannelChatControllerGetTelegramSetting1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelChatControllerGetTelegramSetting1(v, language, projectId, channelId, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelChatControllerGetTelegramSetting1(v, language, projectId, channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get code for connected chat
     * @param {SiteChannelChatControllerInitTelegramChatConnect1VEnum} v Version
     * @param {SiteChannelChatControllerInitTelegramChatConnect1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelChatControllerInitTelegramChatConnect1(v, language, projectId, channelId, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelChatControllerInitTelegramChatConnect1(v, language, projectId, channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Disconnect telegram chat
     * @param {SiteChannelChatControllerRemoveTelegramChat1VEnum} v Version
     * @param {SiteChannelChatControllerRemoveTelegramChat1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelChatControllerRemoveTelegramChat1(v, language, projectId, channelId, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelChatControllerRemoveTelegramChat1(v, language, projectId, channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set telegram settings
     * @param {SiteChannelChatControllerSetTelegramSetting1VEnum} v Version
     * @param {SiteChannelChatControllerSetTelegramSetting1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {SiteTelegramSetSettingsRequestDto} siteTelegramSetSettingsRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelChatControllerSetTelegramSetting1(v, language, projectId, channelId, siteTelegramSetSettingsRequestDto, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelChatControllerSetTelegramSetting1(v, language, projectId, channelId, siteTelegramSetSettingsRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get telegram post list
     * @param {SiteChannelChatControllerTelegramPosts1VEnum} v Version
     * @param {SiteChannelChatControllerTelegramPosts1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelChatControllerTelegramPosts1(v, language, projectId, channelId, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelChatControllerTelegramPosts1(v, language, projectId, channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Optional settings for telegram
     * @param {SiteUpdateChatTelegramRequest} siteUpdateChatTelegramRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelChatControllerUpdateOptionsTelegram1(siteUpdateChatTelegramRequest, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelChatControllerUpdateOptionsTelegram1(siteUpdateChatTelegramRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get planned list
     * @param {SiteChannelOptionsControllerGetPlanned1VEnum} v Version
     * @param {SiteChannelOptionsControllerGetPlanned1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelOptionsControllerGetPlanned1(v, language, projectId, channelId, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelOptionsControllerGetPlanned1(v, language, projectId, channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get playlists from the platform
     * @param {SiteChannelOptionsControllerGetPlayList1VEnum} v Version
     * @param {SiteChannelOptionsControllerGetPlayList1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelOptionsControllerGetPlayList1(v, language, projectId, channelId, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelOptionsControllerGetPlayList1(v, language, projectId, channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Optional settings for ok. Depends on the tariff.
     * @param {SiteUpdateOptionsOkRequest} siteUpdateOptionsOkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelOptionsControllerUpdateOptionsOk1(siteUpdateOptionsOkRequest, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelOptionsControllerUpdateOptionsOk1(siteUpdateOptionsOkRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Optional settings for trovo. Depends on the tariff.
     * @param {SiteUpdateOptionsTrovoRequest} siteUpdateOptionsTrovoRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelOptionsControllerUpdateOptionsTrovo1(siteUpdateOptionsTrovoRequest, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelOptionsControllerUpdateOptionsTrovo1(siteUpdateOptionsTrovoRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Optional settings for twitch. Depends on the tariff.
     * @param {SiteUpdateOptionsTwitchRequest} siteUpdateOptionsTwitchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelOptionsControllerUpdateOptionsTwitch1(siteUpdateOptionsTwitchRequest, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelOptionsControllerUpdateOptionsTwitch1(siteUpdateOptionsTwitchRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Optional settings for vk. Depends on the tariff.
     * @param {SiteUpdateOptionsVkRequest} siteUpdateOptionsVkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelOptionsControllerUpdateOptionsVk1(siteUpdateOptionsVkRequest, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelOptionsControllerUpdateOptionsVk1(siteUpdateOptionsVkRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Optional settings for vk video live. Depends on the tariff.
     * @param {SiteUpdateOptionsVkVideoLiveRequest} siteUpdateOptionsVkVideoLiveRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelOptionsControllerUpdateOptionsVkVideoLive1(siteUpdateOptionsVkVideoLiveRequest, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelOptionsControllerUpdateOptionsVkVideoLive1(siteUpdateOptionsVkVideoLiveRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Optional settings for youtube. Depends on the tariff.
     * @param {SiteUpdateOptionsYoutubeRequest} siteUpdateOptionsYoutubeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelOptionsControllerUpdateOptionsYoutube1(siteUpdateOptionsYoutubeRequest, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelOptionsControllerUpdateOptionsYoutube1(siteUpdateOptionsYoutubeRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set planned id. Depends on the tariff.
     * @param {SiteSetPlannedRequest} siteSetPlannedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelOptionsControllerUpdatePlanned1(siteSetPlannedRequest, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelOptionsControllerUpdatePlanned1(siteSetPlannedRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get status platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelSettingControllerGetStatus1(options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelSettingControllerGetStatus1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set name from custom channel. Global settings.
     * @param {SiteSetNameRequest} siteSetNameRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelSettingControllerSetName1(siteSetNameRequest, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelSettingControllerSetName1(siteSetNameRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set rtmp url from channel. Global settings.
     * @param {SiteSetUrlRequest} siteSetUrlRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelSettingControllerUpdateRtmp1(siteSetUrlRequest, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelSettingControllerUpdateRtmp1(siteSetUrlRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get status platform
     * @param {SiteChannelSettingControllerUpdateToken1VEnum} v Version
     * @param {SiteChannelSettingControllerUpdateToken1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {SiteChannelSettingControllerUpdateToken1RoleEnum} role Token role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelSettingControllerUpdateToken1(v, language, projectId, channelId, role, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelSettingControllerUpdateToken1(v, language, projectId, channelId, role, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set transcoder from channel. Personal settings.
     * @param {SiteSetTranscoderRequest} siteSetTranscoderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    siteChannelSettingControllerUpdateTranscoder1(siteSetTranscoderRequest, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).siteChannelSettingControllerUpdateTranscoder1(siteSetTranscoderRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get telegram post by filter
     * @param {TelegramGetPostByFilterVEnum} v Version
     * @param {TelegramGetPostByFilterLanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} filterMode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelSettingsApi
     */
    telegramGetPostByFilter(v, language, projectId, channelId, filterMode, options) {
        return (0, exports.ChannelSettingsApiFp)(this.configuration).telegramGetPostByFilter(v, language, projectId, channelId, filterMode, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ChannelSettingsApi = ChannelSettingsApi;
/**
 * @export
 */
exports.SiteChannelChatControllerGetTelegramSetting1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteChannelChatControllerGetTelegramSetting1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteChannelChatControllerInitTelegramChatConnect1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteChannelChatControllerInitTelegramChatConnect1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteChannelChatControllerRemoveTelegramChat1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteChannelChatControllerRemoveTelegramChat1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteChannelChatControllerSetTelegramSetting1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteChannelChatControllerSetTelegramSetting1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteChannelChatControllerTelegramPosts1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteChannelChatControllerTelegramPosts1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteChannelOptionsControllerGetPlanned1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteChannelOptionsControllerGetPlanned1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteChannelOptionsControllerGetPlayList1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteChannelOptionsControllerGetPlayList1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteChannelSettingControllerUpdateToken1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteChannelSettingControllerUpdateToken1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteChannelSettingControllerUpdateToken1RoleEnum = {
    Account: 'account',
    Group: 'group'
};
/**
 * @export
 */
exports.TelegramGetPostByFilterVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.TelegramGetPostByFilterLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * ChatGatewayApi - axios parameter creator
 * @export
 */
const ChatGatewayApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Remove message
         * @param {MethodChatGatewayControllerDeleteVEnum} v Version
         * @param {MethodChatGatewayControllerDeleteLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {string} eventId Event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodChatGatewayControllerDelete: async (v, language, key, broadcastId, eventId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayControllerDelete', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayControllerDelete', 'language', language);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayControllerDelete', 'key', key);
            // verify required parameter 'broadcastId' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayControllerDelete', 'broadcastId', broadcastId);
            // verify required parameter 'eventId' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayControllerDelete', 'eventId', eventId);
            const localVarPath = `/method/chat/messages/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }
            if (eventId !== undefined) {
                localVarQueryParameter['event_id'] = eventId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get one message
         * @param {MethodChatGatewayControllerGetMessageVEnum} v Version
         * @param {MethodChatGatewayControllerGetMessageLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {string} eventId Event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodChatGatewayControllerGetMessage: async (v, language, key, broadcastId, eventId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayControllerGetMessage', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayControllerGetMessage', 'language', language);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayControllerGetMessage', 'key', key);
            // verify required parameter 'broadcastId' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayControllerGetMessage', 'broadcastId', broadcastId);
            // verify required parameter 'eventId' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayControllerGetMessage', 'eventId', eventId);
            const localVarPath = `/method/chat/messages/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }
            if (eventId !== undefined) {
                localVarQueryParameter['event_id'] = eventId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List history message
         * @param {MethodChatGatewayControllerHistoryVEnum} v Version
         * @param {MethodChatGatewayControllerHistoryLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodChatGatewayControllerHistory: async (v, language, key, broadcastId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayControllerHistory', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayControllerHistory', 'language', language);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayControllerHistory', 'key', key);
            // verify required parameter 'broadcastId' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayControllerHistory', 'broadcastId', broadcastId);
            const localVarPath = `/method/chat/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Send message
         * @param {MethodChatGatewayControllerSendVEnum} v Version
         * @param {MethodChatGatewayControllerSendLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId
         * @param {MethodChatSendMessageRequestDto} methodChatSendMessageRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodChatGatewayControllerSend: async (v, language, key, broadcastId, methodChatSendMessageRequestDto, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayControllerSend', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayControllerSend', 'language', language);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayControllerSend', 'key', key);
            // verify required parameter 'broadcastId' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayControllerSend', 'broadcastId', broadcastId);
            // verify required parameter 'methodChatSendMessageRequestDto' is not null or undefined
            (0, common_1.assertParamExists)('methodChatGatewayControllerSend', 'methodChatSendMessageRequestDto', methodChatSendMessageRequestDto);
            const localVarPath = `/method/chat/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(methodChatSendMessageRequestDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ChatGatewayApiAxiosParamCreator = ChatGatewayApiAxiosParamCreator;
/**
 * ChatGatewayApi - functional programming interface
 * @export
 */
const ChatGatewayApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ChatGatewayApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Remove message
         * @param {MethodChatGatewayControllerDeleteVEnum} v Version
         * @param {MethodChatGatewayControllerDeleteLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {string} eventId Event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async methodChatGatewayControllerDelete(v, language, key, broadcastId, eventId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.methodChatGatewayControllerDelete(v, language, key, broadcastId, eventId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChatGatewayApi.methodChatGatewayControllerDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get one message
         * @param {MethodChatGatewayControllerGetMessageVEnum} v Version
         * @param {MethodChatGatewayControllerGetMessageLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {string} eventId Event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async methodChatGatewayControllerGetMessage(v, language, key, broadcastId, eventId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.methodChatGatewayControllerGetMessage(v, language, key, broadcastId, eventId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChatGatewayApi.methodChatGatewayControllerGetMessage']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary List history message
         * @param {MethodChatGatewayControllerHistoryVEnum} v Version
         * @param {MethodChatGatewayControllerHistoryLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async methodChatGatewayControllerHistory(v, language, key, broadcastId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.methodChatGatewayControllerHistory(v, language, key, broadcastId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChatGatewayApi.methodChatGatewayControllerHistory']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Send message
         * @param {MethodChatGatewayControllerSendVEnum} v Version
         * @param {MethodChatGatewayControllerSendLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId
         * @param {MethodChatSendMessageRequestDto} methodChatSendMessageRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async methodChatGatewayControllerSend(v, language, key, broadcastId, methodChatSendMessageRequestDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.methodChatGatewayControllerSend(v, language, key, broadcastId, methodChatSendMessageRequestDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ChatGatewayApi.methodChatGatewayControllerSend']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.ChatGatewayApiFp = ChatGatewayApiFp;
/**
 * ChatGatewayApi - factory interface
 * @export
 */
const ChatGatewayApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ChatGatewayApiFp)(configuration);
    return {
        /**
         *
         * @summary Remove message
         * @param {MethodChatGatewayControllerDeleteVEnum} v Version
         * @param {MethodChatGatewayControllerDeleteLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {string} eventId Event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodChatGatewayControllerDelete(v, language, key, broadcastId, eventId, options) {
            return localVarFp.methodChatGatewayControllerDelete(v, language, key, broadcastId, eventId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get one message
         * @param {MethodChatGatewayControllerGetMessageVEnum} v Version
         * @param {MethodChatGatewayControllerGetMessageLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {string} eventId Event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodChatGatewayControllerGetMessage(v, language, key, broadcastId, eventId, options) {
            return localVarFp.methodChatGatewayControllerGetMessage(v, language, key, broadcastId, eventId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List history message
         * @param {MethodChatGatewayControllerHistoryVEnum} v Version
         * @param {MethodChatGatewayControllerHistoryLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId broadcast id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodChatGatewayControllerHistory(v, language, key, broadcastId, options) {
            return localVarFp.methodChatGatewayControllerHistory(v, language, key, broadcastId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Send message
         * @param {MethodChatGatewayControllerSendVEnum} v Version
         * @param {MethodChatGatewayControllerSendLanguageEnum} language Current language
         * @param {string} key Key
         * @param {number} broadcastId
         * @param {MethodChatSendMessageRequestDto} methodChatSendMessageRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodChatGatewayControllerSend(v, language, key, broadcastId, methodChatSendMessageRequestDto, options) {
            return localVarFp.methodChatGatewayControllerSend(v, language, key, broadcastId, methodChatSendMessageRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ChatGatewayApiFactory = ChatGatewayApiFactory;
/**
 * ChatGatewayApi - object-oriented interface
 * @export
 * @class ChatGatewayApi
 * @extends {BaseAPI}
 */
class ChatGatewayApi extends base_1.BaseAPI {
    /**
     *
     * @summary Remove message
     * @param {MethodChatGatewayControllerDeleteVEnum} v Version
     * @param {MethodChatGatewayControllerDeleteLanguageEnum} language Current language
     * @param {string} key Key
     * @param {number} broadcastId broadcast id
     * @param {string} eventId Event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    methodChatGatewayControllerDelete(v, language, key, broadcastId, eventId, options) {
        return (0, exports.ChatGatewayApiFp)(this.configuration).methodChatGatewayControllerDelete(v, language, key, broadcastId, eventId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get one message
     * @param {MethodChatGatewayControllerGetMessageVEnum} v Version
     * @param {MethodChatGatewayControllerGetMessageLanguageEnum} language Current language
     * @param {string} key Key
     * @param {number} broadcastId broadcast id
     * @param {string} eventId Event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    methodChatGatewayControllerGetMessage(v, language, key, broadcastId, eventId, options) {
        return (0, exports.ChatGatewayApiFp)(this.configuration).methodChatGatewayControllerGetMessage(v, language, key, broadcastId, eventId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List history message
     * @param {MethodChatGatewayControllerHistoryVEnum} v Version
     * @param {MethodChatGatewayControllerHistoryLanguageEnum} language Current language
     * @param {string} key Key
     * @param {number} broadcastId broadcast id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    methodChatGatewayControllerHistory(v, language, key, broadcastId, options) {
        return (0, exports.ChatGatewayApiFp)(this.configuration).methodChatGatewayControllerHistory(v, language, key, broadcastId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Send message
     * @param {MethodChatGatewayControllerSendVEnum} v Version
     * @param {MethodChatGatewayControllerSendLanguageEnum} language Current language
     * @param {string} key Key
     * @param {number} broadcastId
     * @param {MethodChatSendMessageRequestDto} methodChatSendMessageRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatGatewayApi
     */
    methodChatGatewayControllerSend(v, language, key, broadcastId, methodChatSendMessageRequestDto, options) {
        return (0, exports.ChatGatewayApiFp)(this.configuration).methodChatGatewayControllerSend(v, language, key, broadcastId, methodChatSendMessageRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ChatGatewayApi = ChatGatewayApi;
/**
 * @export
 */
exports.MethodChatGatewayControllerDeleteVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.MethodChatGatewayControllerDeleteLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.MethodChatGatewayControllerGetMessageVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.MethodChatGatewayControllerGetMessageLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.MethodChatGatewayControllerHistoryVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.MethodChatGatewayControllerHistoryLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.MethodChatGatewayControllerSendVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.MethodChatGatewayControllerSendLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * HelpPageApi - axios parameter creator
 * @export
 */
const HelpPageApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get help page
         * @param {SiteHelpPageControllerGet1VEnum} v Version
         * @param {SiteHelpPageControllerGet1LanguageEnum} language Current language
         * @param {string} url Url of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteHelpPageControllerGet1: async (v, language, url, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteHelpPageControllerGet1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteHelpPageControllerGet1', 'language', language);
            // verify required parameter 'url' is not null or undefined
            (0, common_1.assertParamExists)('siteHelpPageControllerGet1', 'url', url);
            const localVarPath = `/method/help/page/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get list of help pages
         * @param {SiteHelpPageControllerList1VEnum} v Version
         * @param {SiteHelpPageControllerList1LanguageEnum} language Current language
         * @param {string} [s] String for search
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteHelpPageControllerList1: async (v, language, s, limit, offset, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteHelpPageControllerList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteHelpPageControllerList1', 'language', language);
            const localVarPath = `/method/help/page/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (s !== undefined) {
                localVarQueryParameter['s'] = s;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get structure of help pages
         * @param {SiteHelpPageControllerStructure1VEnum} v Version
         * @param {SiteHelpPageControllerStructure1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteHelpPageControllerStructure1: async (v, language, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteHelpPageControllerStructure1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteHelpPageControllerStructure1', 'language', language);
            const localVarPath = `/method/help/page/structure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.HelpPageApiAxiosParamCreator = HelpPageApiAxiosParamCreator;
/**
 * HelpPageApi - functional programming interface
 * @export
 */
const HelpPageApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.HelpPageApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get help page
         * @param {SiteHelpPageControllerGet1VEnum} v Version
         * @param {SiteHelpPageControllerGet1LanguageEnum} language Current language
         * @param {string} url Url of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteHelpPageControllerGet1(v, language, url, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteHelpPageControllerGet1(v, language, url, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['HelpPageApi.siteHelpPageControllerGet1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get list of help pages
         * @param {SiteHelpPageControllerList1VEnum} v Version
         * @param {SiteHelpPageControllerList1LanguageEnum} language Current language
         * @param {string} [s] String for search
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteHelpPageControllerList1(v, language, s, limit, offset, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteHelpPageControllerList1(v, language, s, limit, offset, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['HelpPageApi.siteHelpPageControllerList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get structure of help pages
         * @param {SiteHelpPageControllerStructure1VEnum} v Version
         * @param {SiteHelpPageControllerStructure1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteHelpPageControllerStructure1(v, language, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteHelpPageControllerStructure1(v, language, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['HelpPageApi.siteHelpPageControllerStructure1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.HelpPageApiFp = HelpPageApiFp;
/**
 * HelpPageApi - factory interface
 * @export
 */
const HelpPageApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.HelpPageApiFp)(configuration);
    return {
        /**
         *
         * @summary Get help page
         * @param {SiteHelpPageControllerGet1VEnum} v Version
         * @param {SiteHelpPageControllerGet1LanguageEnum} language Current language
         * @param {string} url Url of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteHelpPageControllerGet1(v, language, url, options) {
            return localVarFp.siteHelpPageControllerGet1(v, language, url, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get list of help pages
         * @param {SiteHelpPageControllerList1VEnum} v Version
         * @param {SiteHelpPageControllerList1LanguageEnum} language Current language
         * @param {string} [s] String for search
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteHelpPageControllerList1(v, language, s, limit, offset, options) {
            return localVarFp.siteHelpPageControllerList1(v, language, s, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get structure of help pages
         * @param {SiteHelpPageControllerStructure1VEnum} v Version
         * @param {SiteHelpPageControllerStructure1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteHelpPageControllerStructure1(v, language, options) {
            return localVarFp.siteHelpPageControllerStructure1(v, language, options).then((request) => request(axios, basePath));
        },
    };
};
exports.HelpPageApiFactory = HelpPageApiFactory;
/**
 * HelpPageApi - object-oriented interface
 * @export
 * @class HelpPageApi
 * @extends {BaseAPI}
 */
class HelpPageApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get help page
     * @param {SiteHelpPageControllerGet1VEnum} v Version
     * @param {SiteHelpPageControllerGet1LanguageEnum} language Current language
     * @param {string} url Url of page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpPageApi
     */
    siteHelpPageControllerGet1(v, language, url, options) {
        return (0, exports.HelpPageApiFp)(this.configuration).siteHelpPageControllerGet1(v, language, url, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get list of help pages
     * @param {SiteHelpPageControllerList1VEnum} v Version
     * @param {SiteHelpPageControllerList1LanguageEnum} language Current language
     * @param {string} [s] String for search
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpPageApi
     */
    siteHelpPageControllerList1(v, language, s, limit, offset, options) {
        return (0, exports.HelpPageApiFp)(this.configuration).siteHelpPageControllerList1(v, language, s, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get structure of help pages
     * @param {SiteHelpPageControllerStructure1VEnum} v Version
     * @param {SiteHelpPageControllerStructure1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpPageApi
     */
    siteHelpPageControllerStructure1(v, language, options) {
        return (0, exports.HelpPageApiFp)(this.configuration).siteHelpPageControllerStructure1(v, language, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.HelpPageApi = HelpPageApi;
/**
 * @export
 */
exports.SiteHelpPageControllerGet1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteHelpPageControllerGet1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteHelpPageControllerList1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteHelpPageControllerList1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteHelpPageControllerStructure1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteHelpPageControllerStructure1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * LiveApi - axios parameter creator
 * @export
 */
const LiveApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary View live info
         * @param {ControllersControllerRestreams1VEnum} v Version
         * @param {ControllersControllerRestreams1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} broadcastId Broadcast id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controllersControllerRestreams1: async (v, language, projectId, broadcastId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('controllersControllerRestreams1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('controllersControllerRestreams1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('controllersControllerRestreams1', 'projectId', projectId);
            // verify required parameter 'broadcastId' is not null or undefined
            (0, common_1.assertParamExists)('controllersControllerRestreams1', 'broadcastId', broadcastId);
            const localVarPath = `/method/live/restreams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (broadcastId !== undefined) {
                localVarQueryParameter['broadcast_id'] = broadcastId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.LiveApiAxiosParamCreator = LiveApiAxiosParamCreator;
/**
 * LiveApi - functional programming interface
 * @export
 */
const LiveApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.LiveApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary View live info
         * @param {ControllersControllerRestreams1VEnum} v Version
         * @param {ControllersControllerRestreams1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} broadcastId Broadcast id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async controllersControllerRestreams1(v, language, projectId, broadcastId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.controllersControllerRestreams1(v, language, projectId, broadcastId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['LiveApi.controllersControllerRestreams1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.LiveApiFp = LiveApiFp;
/**
 * LiveApi - factory interface
 * @export
 */
const LiveApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.LiveApiFp)(configuration);
    return {
        /**
         *
         * @summary View live info
         * @param {ControllersControllerRestreams1VEnum} v Version
         * @param {ControllersControllerRestreams1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} broadcastId Broadcast id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controllersControllerRestreams1(v, language, projectId, broadcastId, options) {
            return localVarFp.controllersControllerRestreams1(v, language, projectId, broadcastId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.LiveApiFactory = LiveApiFactory;
/**
 * LiveApi - object-oriented interface
 * @export
 * @class LiveApi
 * @extends {BaseAPI}
 */
class LiveApi extends base_1.BaseAPI {
    /**
     *
     * @summary View live info
     * @param {ControllersControllerRestreams1VEnum} v Version
     * @param {ControllersControllerRestreams1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} broadcastId Broadcast id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    controllersControllerRestreams1(v, language, projectId, broadcastId, options) {
        return (0, exports.LiveApiFp)(this.configuration).controllersControllerRestreams1(v, language, projectId, broadcastId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.LiveApi = LiveApi;
/**
 * @export
 */
exports.ControllersControllerRestreams1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.ControllersControllerRestreams1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * MoneyFlowApi - axios parameter creator
 * @export
 */
const MoneyFlowApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Transaction list for frontend
         * @param {SiteMoneyFlowControllerList1VEnum} v Version
         * @param {SiteMoneyFlowControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {string} [type] Filter code transaction. example 1 or 1,2,3
         * @param {string} [balanceType] Filter code transaction. example 1 or 1,2,3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteMoneyFlowControllerList1: async (v, language, projectId, limit, offset, dateFrom, dateTo, type, balanceType, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteMoneyFlowControllerList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteMoneyFlowControllerList1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteMoneyFlowControllerList1', 'projectId', projectId);
            const localVarPath = `/method/money_flow/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom instanceof Date) ?
                    dateFrom.toISOString() :
                    dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo instanceof Date) ?
                    dateTo.toISOString() :
                    dateTo;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (balanceType !== undefined) {
                localVarQueryParameter['balance_type'] = balanceType;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.MoneyFlowApiAxiosParamCreator = MoneyFlowApiAxiosParamCreator;
/**
 * MoneyFlowApi - functional programming interface
 * @export
 */
const MoneyFlowApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.MoneyFlowApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Transaction list for frontend
         * @param {SiteMoneyFlowControllerList1VEnum} v Version
         * @param {SiteMoneyFlowControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {string} [type] Filter code transaction. example 1 or 1,2,3
         * @param {string} [balanceType] Filter code transaction. example 1 or 1,2,3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteMoneyFlowControllerList1(v, language, projectId, limit, offset, dateFrom, dateTo, type, balanceType, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteMoneyFlowControllerList1(v, language, projectId, limit, offset, dateFrom, dateTo, type, balanceType, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MoneyFlowApi.siteMoneyFlowControllerList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.MoneyFlowApiFp = MoneyFlowApiFp;
/**
 * MoneyFlowApi - factory interface
 * @export
 */
const MoneyFlowApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.MoneyFlowApiFp)(configuration);
    return {
        /**
         *
         * @summary Transaction list for frontend
         * @param {SiteMoneyFlowControllerList1VEnum} v Version
         * @param {SiteMoneyFlowControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {string} [type] Filter code transaction. example 1 or 1,2,3
         * @param {string} [balanceType] Filter code transaction. example 1 or 1,2,3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteMoneyFlowControllerList1(v, language, projectId, limit, offset, dateFrom, dateTo, type, balanceType, options) {
            return localVarFp.siteMoneyFlowControllerList1(v, language, projectId, limit, offset, dateFrom, dateTo, type, balanceType, options).then((request) => request(axios, basePath));
        },
    };
};
exports.MoneyFlowApiFactory = MoneyFlowApiFactory;
/**
 * MoneyFlowApi - object-oriented interface
 * @export
 * @class MoneyFlowApi
 * @extends {BaseAPI}
 */
class MoneyFlowApi extends base_1.BaseAPI {
    /**
     *
     * @summary Transaction list for frontend
     * @param {SiteMoneyFlowControllerList1VEnum} v Version
     * @param {SiteMoneyFlowControllerList1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {string} [dateFrom] Date from
     * @param {string} [dateTo] Date to
     * @param {string} [type] Filter code transaction. example 1 or 1,2,3
     * @param {string} [balanceType] Filter code transaction. example 1 or 1,2,3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoneyFlowApi
     */
    siteMoneyFlowControllerList1(v, language, projectId, limit, offset, dateFrom, dateTo, type, balanceType, options) {
        return (0, exports.MoneyFlowApiFp)(this.configuration).siteMoneyFlowControllerList1(v, language, projectId, limit, offset, dateFrom, dateTo, type, balanceType, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.MoneyFlowApi = MoneyFlowApi;
/**
 * @export
 */
exports.SiteMoneyFlowControllerList1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteMoneyFlowControllerList1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * NotifyHistoryApi - axios parameter creator
 * @export
 */
const NotifyHistoryApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get my NotifyHistory item by id
         * @param {SiteNotifyHistoryControllerGet1VEnum} v Version
         * @param {string} id Id of page in mongodb
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyHistoryControllerGet1: async (v, id, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyHistoryControllerGet1', 'v', v);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyHistoryControllerGet1', 'id', id);
            const localVarPath = `/method/notify_history/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (id !== undefined) {
                localVarQueryParameter['_id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get list of my notifications
         * @param {SiteNotifyHistoryControllerGetListMy1VEnum} v Version
         * @param {SiteNotifyHistoryControllerGetListMy1LanguageEnum} language Current language
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {number} [projectId] Project id
         * @param {SiteNotifyHistoryControllerGetListMy1NameEnum} [name] Name
         * @param {SiteNotifyHistoryControllerGetListMy1ChannelEnum} [channel] Channel
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {SiteNotifyHistoryControllerGetListMy1StatusReadEnum} [statusRead] Status read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyHistoryControllerGetListMy1: async (v, language, limit, offset, projectId, name, channel, dateFrom, dateTo, statusRead, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyHistoryControllerGetListMy1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyHistoryControllerGetListMy1', 'language', language);
            const localVarPath = `/method/notify_history/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }
            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom instanceof Date) ?
                    dateFrom.toISOString() :
                    dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo instanceof Date) ?
                    dateTo.toISOString() :
                    dateTo;
            }
            if (statusRead !== undefined) {
                localVarQueryParameter['status_read'] = statusRead;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get my status unread message for user
         * @param {SiteNotifyHistoryControllerGetStatusMy1VEnum} v Version
         * @param {SiteNotifyHistoryControllerGetStatusMy1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyHistoryControllerGetStatusMy1: async (v, language, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyHistoryControllerGetStatusMy1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyHistoryControllerGetStatusMy1', 'language', language);
            const localVarPath = `/method/notify_history/get_status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set notification in cabinet as read
         * @param {SiteNotifyHistoryControllerMarkOfRead1VEnum} v Version
         * @param {SiteNotifyHistoryControllerMarkOfRead1LanguageEnum} language Current language
         * @param {SiteMarkReadHistoryRequest} siteMarkReadHistoryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyHistoryControllerMarkOfRead1: async (v, language, siteMarkReadHistoryRequest, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyHistoryControllerMarkOfRead1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyHistoryControllerMarkOfRead1', 'language', language);
            // verify required parameter 'siteMarkReadHistoryRequest' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyHistoryControllerMarkOfRead1', 'siteMarkReadHistoryRequest', siteMarkReadHistoryRequest);
            const localVarPath = `/method/notify_history/read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteMarkReadHistoryRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Run action in my notify item
         * @param {SiteNotifyHistoryControllerRunAction1VEnum} v Version
         * @param {string} notifyHistoryId Id of page in mongodb
         * @param {string} actionName Action name
         * @param {string} groupId Group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyHistoryControllerRunAction1: async (v, notifyHistoryId, actionName, groupId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyHistoryControllerRunAction1', 'v', v);
            // verify required parameter 'notifyHistoryId' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyHistoryControllerRunAction1', 'notifyHistoryId', notifyHistoryId);
            // verify required parameter 'actionName' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyHistoryControllerRunAction1', 'actionName', actionName);
            // verify required parameter 'groupId' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyHistoryControllerRunAction1', 'groupId', groupId);
            const localVarPath = `/method/notify_history/run_action`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (notifyHistoryId !== undefined) {
                localVarQueryParameter['notify_history_id'] = notifyHistoryId;
            }
            if (actionName !== undefined) {
                localVarQueryParameter['action_name'] = actionName;
            }
            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set all notification in cabinet as read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyHistoryControllerSetAllCabinetRead1: async (options = {}) => {
            const localVarPath = `/method/notify_history/set_all_cabinet_read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.NotifyHistoryApiAxiosParamCreator = NotifyHistoryApiAxiosParamCreator;
/**
 * NotifyHistoryApi - functional programming interface
 * @export
 */
const NotifyHistoryApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.NotifyHistoryApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get my NotifyHistory item by id
         * @param {SiteNotifyHistoryControllerGet1VEnum} v Version
         * @param {string} id Id of page in mongodb
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteNotifyHistoryControllerGet1(v, id, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteNotifyHistoryControllerGet1(v, id, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotifyHistoryApi.siteNotifyHistoryControllerGet1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get list of my notifications
         * @param {SiteNotifyHistoryControllerGetListMy1VEnum} v Version
         * @param {SiteNotifyHistoryControllerGetListMy1LanguageEnum} language Current language
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {number} [projectId] Project id
         * @param {SiteNotifyHistoryControllerGetListMy1NameEnum} [name] Name
         * @param {SiteNotifyHistoryControllerGetListMy1ChannelEnum} [channel] Channel
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {SiteNotifyHistoryControllerGetListMy1StatusReadEnum} [statusRead] Status read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteNotifyHistoryControllerGetListMy1(v, language, limit, offset, projectId, name, channel, dateFrom, dateTo, statusRead, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteNotifyHistoryControllerGetListMy1(v, language, limit, offset, projectId, name, channel, dateFrom, dateTo, statusRead, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotifyHistoryApi.siteNotifyHistoryControllerGetListMy1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get my status unread message for user
         * @param {SiteNotifyHistoryControllerGetStatusMy1VEnum} v Version
         * @param {SiteNotifyHistoryControllerGetStatusMy1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteNotifyHistoryControllerGetStatusMy1(v, language, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteNotifyHistoryControllerGetStatusMy1(v, language, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotifyHistoryApi.siteNotifyHistoryControllerGetStatusMy1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Set notification in cabinet as read
         * @param {SiteNotifyHistoryControllerMarkOfRead1VEnum} v Version
         * @param {SiteNotifyHistoryControllerMarkOfRead1LanguageEnum} language Current language
         * @param {SiteMarkReadHistoryRequest} siteMarkReadHistoryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteNotifyHistoryControllerMarkOfRead1(v, language, siteMarkReadHistoryRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteNotifyHistoryControllerMarkOfRead1(v, language, siteMarkReadHistoryRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotifyHistoryApi.siteNotifyHistoryControllerMarkOfRead1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Run action in my notify item
         * @param {SiteNotifyHistoryControllerRunAction1VEnum} v Version
         * @param {string} notifyHistoryId Id of page in mongodb
         * @param {string} actionName Action name
         * @param {string} groupId Group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteNotifyHistoryControllerRunAction1(v, notifyHistoryId, actionName, groupId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteNotifyHistoryControllerRunAction1(v, notifyHistoryId, actionName, groupId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotifyHistoryApi.siteNotifyHistoryControllerRunAction1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Set all notification in cabinet as read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteNotifyHistoryControllerSetAllCabinetRead1(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteNotifyHistoryControllerSetAllCabinetRead1(options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotifyHistoryApi.siteNotifyHistoryControllerSetAllCabinetRead1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.NotifyHistoryApiFp = NotifyHistoryApiFp;
/**
 * NotifyHistoryApi - factory interface
 * @export
 */
const NotifyHistoryApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.NotifyHistoryApiFp)(configuration);
    return {
        /**
         *
         * @summary Get my NotifyHistory item by id
         * @param {SiteNotifyHistoryControllerGet1VEnum} v Version
         * @param {string} id Id of page in mongodb
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyHistoryControllerGet1(v, id, options) {
            return localVarFp.siteNotifyHistoryControllerGet1(v, id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get list of my notifications
         * @param {SiteNotifyHistoryControllerGetListMy1VEnum} v Version
         * @param {SiteNotifyHistoryControllerGetListMy1LanguageEnum} language Current language
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {number} [projectId] Project id
         * @param {SiteNotifyHistoryControllerGetListMy1NameEnum} [name] Name
         * @param {SiteNotifyHistoryControllerGetListMy1ChannelEnum} [channel] Channel
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {SiteNotifyHistoryControllerGetListMy1StatusReadEnum} [statusRead] Status read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyHistoryControllerGetListMy1(v, language, limit, offset, projectId, name, channel, dateFrom, dateTo, statusRead, options) {
            return localVarFp.siteNotifyHistoryControllerGetListMy1(v, language, limit, offset, projectId, name, channel, dateFrom, dateTo, statusRead, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get my status unread message for user
         * @param {SiteNotifyHistoryControllerGetStatusMy1VEnum} v Version
         * @param {SiteNotifyHistoryControllerGetStatusMy1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyHistoryControllerGetStatusMy1(v, language, options) {
            return localVarFp.siteNotifyHistoryControllerGetStatusMy1(v, language, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set notification in cabinet as read
         * @param {SiteNotifyHistoryControllerMarkOfRead1VEnum} v Version
         * @param {SiteNotifyHistoryControllerMarkOfRead1LanguageEnum} language Current language
         * @param {SiteMarkReadHistoryRequest} siteMarkReadHistoryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyHistoryControllerMarkOfRead1(v, language, siteMarkReadHistoryRequest, options) {
            return localVarFp.siteNotifyHistoryControllerMarkOfRead1(v, language, siteMarkReadHistoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Run action in my notify item
         * @param {SiteNotifyHistoryControllerRunAction1VEnum} v Version
         * @param {string} notifyHistoryId Id of page in mongodb
         * @param {string} actionName Action name
         * @param {string} groupId Group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyHistoryControllerRunAction1(v, notifyHistoryId, actionName, groupId, options) {
            return localVarFp.siteNotifyHistoryControllerRunAction1(v, notifyHistoryId, actionName, groupId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set all notification in cabinet as read
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyHistoryControllerSetAllCabinetRead1(options) {
            return localVarFp.siteNotifyHistoryControllerSetAllCabinetRead1(options).then((request) => request(axios, basePath));
        },
    };
};
exports.NotifyHistoryApiFactory = NotifyHistoryApiFactory;
/**
 * NotifyHistoryApi - object-oriented interface
 * @export
 * @class NotifyHistoryApi
 * @extends {BaseAPI}
 */
class NotifyHistoryApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get my NotifyHistory item by id
     * @param {SiteNotifyHistoryControllerGet1VEnum} v Version
     * @param {string} id Id of page in mongodb
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    siteNotifyHistoryControllerGet1(v, id, options) {
        return (0, exports.NotifyHistoryApiFp)(this.configuration).siteNotifyHistoryControllerGet1(v, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get list of my notifications
     * @param {SiteNotifyHistoryControllerGetListMy1VEnum} v Version
     * @param {SiteNotifyHistoryControllerGetListMy1LanguageEnum} language Current language
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {number} [projectId] Project id
     * @param {SiteNotifyHistoryControllerGetListMy1NameEnum} [name] Name
     * @param {SiteNotifyHistoryControllerGetListMy1ChannelEnum} [channel] Channel
     * @param {string} [dateFrom] Date from
     * @param {string} [dateTo] Date to
     * @param {SiteNotifyHistoryControllerGetListMy1StatusReadEnum} [statusRead] Status read
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    siteNotifyHistoryControllerGetListMy1(v, language, limit, offset, projectId, name, channel, dateFrom, dateTo, statusRead, options) {
        return (0, exports.NotifyHistoryApiFp)(this.configuration).siteNotifyHistoryControllerGetListMy1(v, language, limit, offset, projectId, name, channel, dateFrom, dateTo, statusRead, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get my status unread message for user
     * @param {SiteNotifyHistoryControllerGetStatusMy1VEnum} v Version
     * @param {SiteNotifyHistoryControllerGetStatusMy1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    siteNotifyHistoryControllerGetStatusMy1(v, language, options) {
        return (0, exports.NotifyHistoryApiFp)(this.configuration).siteNotifyHistoryControllerGetStatusMy1(v, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set notification in cabinet as read
     * @param {SiteNotifyHistoryControllerMarkOfRead1VEnum} v Version
     * @param {SiteNotifyHistoryControllerMarkOfRead1LanguageEnum} language Current language
     * @param {SiteMarkReadHistoryRequest} siteMarkReadHistoryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    siteNotifyHistoryControllerMarkOfRead1(v, language, siteMarkReadHistoryRequest, options) {
        return (0, exports.NotifyHistoryApiFp)(this.configuration).siteNotifyHistoryControllerMarkOfRead1(v, language, siteMarkReadHistoryRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Run action in my notify item
     * @param {SiteNotifyHistoryControllerRunAction1VEnum} v Version
     * @param {string} notifyHistoryId Id of page in mongodb
     * @param {string} actionName Action name
     * @param {string} groupId Group id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    siteNotifyHistoryControllerRunAction1(v, notifyHistoryId, actionName, groupId, options) {
        return (0, exports.NotifyHistoryApiFp)(this.configuration).siteNotifyHistoryControllerRunAction1(v, notifyHistoryId, actionName, groupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set all notification in cabinet as read
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyHistoryApi
     */
    siteNotifyHistoryControllerSetAllCabinetRead1(options) {
        return (0, exports.NotifyHistoryApiFp)(this.configuration).siteNotifyHistoryControllerSetAllCabinetRead1(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.NotifyHistoryApi = NotifyHistoryApi;
/**
 * @export
 */
exports.SiteNotifyHistoryControllerGet1VEnum = {
    _1: '1'
};
/**
 * @export
 */
exports.SiteNotifyHistoryControllerGetListMy1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteNotifyHistoryControllerGetListMy1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteNotifyHistoryControllerGetListMy1NameEnum = {
    HighBitrate: 'high_bitrate',
    RequestAccessChannel: 'request_access_channel',
    RequestAccessProject: 'request_access_project',
    PromocodeTest: 'promocode_test',
    StreamTest: 'stream_test',
    PlanRestreamExpires: 'plan_restream_expires',
    PlanRestreamExpired: 'plan_restream_expired',
    PlanRestreamRenewed: 'plan_restream_renewed',
    PlanTranscoderExpires: 'plan_transcoder_expires',
    PlanTranscoderExpired: 'plan_transcoder_expired',
    PlanTranscoderRenewed: 'plan_transcoder_renewed',
    PlanStorageExpires: 'plan_storage_expires',
    PlanStorageExpired: 'plan_storage_expired',
    PlanStorageRenewed: 'plan_storage_renewed',
    BroadcastUnsupportedCodec: 'broadcast_unsupported_codec',
    BroadcastUnsupportedCodecScreen: 'broadcast_unsupported_codec_screen',
    BroadcastBitrateExceededScreen: 'broadcast_bitrate_exceeded_screen',
    RtmpConnectOldServerScreen: 'rtmp_connect_old_server_screen',
    BroadcastNotAudio: 'broadcast_not_audio',
    BroadcastBitrateExceeded: 'broadcast_bitrate_exceeded',
    BroadcastStarted: 'broadcast_started',
    BroadcastStopped: 'broadcast_stopped',
    RestreamCheckTwitchBitrate1: 'restream_check_twitch_bitrate_1',
    ApiPauseStart: 'api_pause_start',
    ApiPauseEnd: 'api_pause_end',
    ApiWaitEdit: 'api_wait_edit',
    ApiRestreamStart: 'api_restream_start',
    ApiRestreamStop: 'api_restream_stop',
    ApiDropBroadcast: 'api_drop_broadcast',
    ApiDropBroadcastRemoveCompany: 'api_drop_broadcast_remove_company',
    ApiDropBroadcastUpdateKey: 'api_drop_broadcast_update_key',
    PublisherDisconnected: 'publisher_disconnected',
    PublisherConnected: 'publisher_connected',
    PublisherInitializing: 'publisher_initializing',
    PublisherClose: 'publisher_close',
    BroadcastConnectedStart: 'broadcast_connected_start',
    BroadcastConnectedEnd: 'broadcast_connected_end',
    BroadcastConnectingStream: 'broadcast_connecting_stream',
    BroadcastStartedNewStream: 'broadcast_started_new_stream',
    BroadcastConnectingLost: 'broadcast_connecting_lost',
    BroadcastVideoLostStart: 'broadcast_video_lost_start',
    BroadcastVideoLostEnd: 'broadcast_video_lost_end',
    BroadcastVideoPauseStart: 'broadcast_video_pause_start',
    BroadcastVideoPauseEnd: 'broadcast_video_pause_end',
    BroadcastInitRestream: 'broadcast_init_restream',
    StartStream: 'start_stream',
    CreateReader: 'create_reader',
    StartChannel: 'start_channel',
    StopChannel: 'stop_channel',
    StopStreamVideoTimeout: 'stop_stream_video_timeout',
    StopStreamNoStartVideo: 'stop_stream_no_start_video',
    StopStream: 'stop_stream',
    DeleteReader: 'delete_reader',
    TranscoderStart: 'transcoder_start',
    TranscoderStop: 'transcoder_stop',
    StartChannelFailed: 'start_channel_failed',
    StartChannelSuccess: 'start_channel_success',
    ApiChannelInitializingStart: 'api_channel_initializing_start',
    ApiChannelInitializingFailed: 'api_channel_initializing_failed',
    ApiChannelInitializingSuccess: 'api_channel_initializing_success',
    ChannelApiUpdateSettingsSuccess: 'channel_api_update_settings_success',
    ChannelApiUpdateSettingsError: 'channel_api_update_settings_error',
    ChannelApiUpdatePlaylistSuccess: 'channel_api_update_playlist_success',
    ChannelApiUpdatePlaylistError: 'channel_api_update_playlist_error',
    ChannelApiUpdateChatError: 'channel_api_update_chat_error',
    ChannelApiStreamKeySuccess: 'channel_api_stream_key_success',
    ChannelApiStreamKeyError: 'channel_api_stream_key_error',
    ChannelApiAutoStopDisableSuccess: 'channel_api_auto_stop_disable_success',
    ChannelApiAutoStopDisableError: 'channel_api_auto_stop_disable_error',
    ChannelApiUnbindingStreamKeyError: 'channel_api_unbinding_stream_key_error',
    ChannelApiCreateBroadcastSuccess: 'channel_api_create_broadcast_success',
    ChannelApiCreateBroadcastError: 'channel_api_create_broadcast_error',
    ChannelApiSetPlannedSuccess: 'channel_api_set_planned_success',
    ChannelApiSetPlannedError: 'channel_api_set_planned_error',
    ChannelApiSetThumbnailSuccess: 'channel_api_set_thumbnail_success',
    ChannelApiSetThumbnailError: 'channel_api_set_thumbnail_error',
    ChannelTokenError: 'channel_token_error',
    ChannelApiGroupFailed: 'channel_api_group_failed',
    NoAudioReader: 'no_audio_reader',
    RestreamCheckTwitchBitrate2: 'restream_check_twitch_bitrate_2',
    TranscoderSupportErrorScreen: 'transcoder_support_error_screen',
    TranscoderTariffEndScreen: 'transcoder_tariff_end_screen',
    TranscoderCountFlowScreen: 'transcoder_count_flow_screen',
    TranscoderResolutionScreen: 'transcoder_resolution_screen',
    StreamKeyBanned: 'stream_key_banned',
    BroadcastChangeCodec: 'broadcast_change_codec',
    BroadcastChangeRegion: 'broadcast_change_region',
    VideoUploadError: 'video_upload_error',
    StopChannelError: 'stop_channel_error',
    BroadcastUserActionStop: 'broadcast_user_action_stop'
};
/**
 * @export
 */
exports.SiteNotifyHistoryControllerGetListMy1ChannelEnum = {
    Telegram: 'telegram',
    Cabinet: 'cabinet',
    Mobile: 'mobile'
};
/**
 * @export
 */
exports.SiteNotifyHistoryControllerGetListMy1StatusReadEnum = {
    Unread: 'unread',
    Read: 'read'
};
/**
 * @export
 */
exports.SiteNotifyHistoryControllerGetStatusMy1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteNotifyHistoryControllerGetStatusMy1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteNotifyHistoryControllerMarkOfRead1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteNotifyHistoryControllerMarkOfRead1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteNotifyHistoryControllerRunAction1VEnum = {
    _1: '1'
};
/**
 * NotifyUserApi - axios parameter creator
 * @export
 */
const NotifyUserApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Delete mobile token from user
         * @param {SiteNotifyUserControllerDelMobileToken1VEnum} v Version
         * @param {SiteNotifyUserControllerDelMobileToken1LanguageEnum} language Current language
         * @param {string} token Token in mobile app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyUserControllerDelMobileToken1: async (v, language, token, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyUserControllerDelMobileToken1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyUserControllerDelMobileToken1', 'language', language);
            // verify required parameter 'token' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyUserControllerDelMobileToken1', 'token', token);
            const localVarPath = `/method/notify_user/del_mobile_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get user notify settings
         * @param {SiteNotifyUserControllerGet1VEnum} v Version
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyUserControllerGet1: async (v, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyUserControllerGet1', 'v', v);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyUserControllerGet1', 'projectId', projectId);
            const localVarPath = `/method/notify_user/setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get user screen notify
         * @param {SiteNotifyUserControllerGetScreen1VEnum} v Version
         * @param {SiteNotifyUserControllerGetScreen1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyUserControllerGetScreen1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyUserControllerGetScreen1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyUserControllerGetScreen1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyUserControllerGetScreen1', 'projectId', projectId);
            const localVarPath = `/method/notify_user/screen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove user screen notify
         * @param {SiteNotifyUserControllerRemoveScreen1VEnum} v Version
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyUserControllerRemoveScreen1: async (v, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyUserControllerRemoveScreen1', 'v', v);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyUserControllerRemoveScreen1', 'projectId', projectId);
            const localVarPath = `/method/notify_user/screen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set user notify settings
         * @param {SiteNotifyUserControllerSet1VEnum} v Version
         * @param {SiteSetNotifyUserRequest} siteSetNotifyUserRequest Set user notify settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyUserControllerSet1: async (v, siteSetNotifyUserRequest, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyUserControllerSet1', 'v', v);
            // verify required parameter 'siteSetNotifyUserRequest' is not null or undefined
            (0, common_1.assertParamExists)('siteNotifyUserControllerSet1', 'siteSetNotifyUserRequest', siteSetNotifyUserRequest);
            const localVarPath = `/method/notify_user/setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteSetNotifyUserRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.NotifyUserApiAxiosParamCreator = NotifyUserApiAxiosParamCreator;
/**
 * NotifyUserApi - functional programming interface
 * @export
 */
const NotifyUserApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.NotifyUserApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Delete mobile token from user
         * @param {SiteNotifyUserControllerDelMobileToken1VEnum} v Version
         * @param {SiteNotifyUserControllerDelMobileToken1LanguageEnum} language Current language
         * @param {string} token Token in mobile app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteNotifyUserControllerDelMobileToken1(v, language, token, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteNotifyUserControllerDelMobileToken1(v, language, token, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotifyUserApi.siteNotifyUserControllerDelMobileToken1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get user notify settings
         * @param {SiteNotifyUserControllerGet1VEnum} v Version
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteNotifyUserControllerGet1(v, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteNotifyUserControllerGet1(v, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotifyUserApi.siteNotifyUserControllerGet1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get user screen notify
         * @param {SiteNotifyUserControllerGetScreen1VEnum} v Version
         * @param {SiteNotifyUserControllerGetScreen1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteNotifyUserControllerGetScreen1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteNotifyUserControllerGetScreen1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotifyUserApi.siteNotifyUserControllerGetScreen1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Remove user screen notify
         * @param {SiteNotifyUserControllerRemoveScreen1VEnum} v Version
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteNotifyUserControllerRemoveScreen1(v, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteNotifyUserControllerRemoveScreen1(v, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotifyUserApi.siteNotifyUserControllerRemoveScreen1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Set user notify settings
         * @param {SiteNotifyUserControllerSet1VEnum} v Version
         * @param {SiteSetNotifyUserRequest} siteSetNotifyUserRequest Set user notify settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteNotifyUserControllerSet1(v, siteSetNotifyUserRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteNotifyUserControllerSet1(v, siteSetNotifyUserRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotifyUserApi.siteNotifyUserControllerSet1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.NotifyUserApiFp = NotifyUserApiFp;
/**
 * NotifyUserApi - factory interface
 * @export
 */
const NotifyUserApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.NotifyUserApiFp)(configuration);
    return {
        /**
         *
         * @summary Delete mobile token from user
         * @param {SiteNotifyUserControllerDelMobileToken1VEnum} v Version
         * @param {SiteNotifyUserControllerDelMobileToken1LanguageEnum} language Current language
         * @param {string} token Token in mobile app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyUserControllerDelMobileToken1(v, language, token, options) {
            return localVarFp.siteNotifyUserControllerDelMobileToken1(v, language, token, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get user notify settings
         * @param {SiteNotifyUserControllerGet1VEnum} v Version
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyUserControllerGet1(v, projectId, options) {
            return localVarFp.siteNotifyUserControllerGet1(v, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get user screen notify
         * @param {SiteNotifyUserControllerGetScreen1VEnum} v Version
         * @param {SiteNotifyUserControllerGetScreen1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyUserControllerGetScreen1(v, language, projectId, options) {
            return localVarFp.siteNotifyUserControllerGetScreen1(v, language, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Remove user screen notify
         * @param {SiteNotifyUserControllerRemoveScreen1VEnum} v Version
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyUserControllerRemoveScreen1(v, projectId, options) {
            return localVarFp.siteNotifyUserControllerRemoveScreen1(v, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set user notify settings
         * @param {SiteNotifyUserControllerSet1VEnum} v Version
         * @param {SiteSetNotifyUserRequest} siteSetNotifyUserRequest Set user notify settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteNotifyUserControllerSet1(v, siteSetNotifyUserRequest, options) {
            return localVarFp.siteNotifyUserControllerSet1(v, siteSetNotifyUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.NotifyUserApiFactory = NotifyUserApiFactory;
/**
 * NotifyUserApi - object-oriented interface
 * @export
 * @class NotifyUserApi
 * @extends {BaseAPI}
 */
class NotifyUserApi extends base_1.BaseAPI {
    /**
     *
     * @summary Delete mobile token from user
     * @param {SiteNotifyUserControllerDelMobileToken1VEnum} v Version
     * @param {SiteNotifyUserControllerDelMobileToken1LanguageEnum} language Current language
     * @param {string} token Token in mobile app
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    siteNotifyUserControllerDelMobileToken1(v, language, token, options) {
        return (0, exports.NotifyUserApiFp)(this.configuration).siteNotifyUserControllerDelMobileToken1(v, language, token, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get user notify settings
     * @param {SiteNotifyUserControllerGet1VEnum} v Version
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    siteNotifyUserControllerGet1(v, projectId, options) {
        return (0, exports.NotifyUserApiFp)(this.configuration).siteNotifyUserControllerGet1(v, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get user screen notify
     * @param {SiteNotifyUserControllerGetScreen1VEnum} v Version
     * @param {SiteNotifyUserControllerGetScreen1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    siteNotifyUserControllerGetScreen1(v, language, projectId, options) {
        return (0, exports.NotifyUserApiFp)(this.configuration).siteNotifyUserControllerGetScreen1(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Remove user screen notify
     * @param {SiteNotifyUserControllerRemoveScreen1VEnum} v Version
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    siteNotifyUserControllerRemoveScreen1(v, projectId, options) {
        return (0, exports.NotifyUserApiFp)(this.configuration).siteNotifyUserControllerRemoveScreen1(v, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set user notify settings
     * @param {SiteNotifyUserControllerSet1VEnum} v Version
     * @param {SiteSetNotifyUserRequest} siteSetNotifyUserRequest Set user notify settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotifyUserApi
     */
    siteNotifyUserControllerSet1(v, siteSetNotifyUserRequest, options) {
        return (0, exports.NotifyUserApiFp)(this.configuration).siteNotifyUserControllerSet1(v, siteSetNotifyUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.NotifyUserApi = NotifyUserApi;
/**
 * @export
 */
exports.SiteNotifyUserControllerDelMobileToken1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteNotifyUserControllerDelMobileToken1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteNotifyUserControllerGet1VEnum = {
    _1: '1'
};
/**
 * @export
 */
exports.SiteNotifyUserControllerGetScreen1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteNotifyUserControllerGetScreen1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteNotifyUserControllerRemoveScreen1VEnum = {
    _1: '1'
};
/**
 * @export
 */
exports.SiteNotifyUserControllerSet1VEnum = {
    _1: '1'
};
/**
 * PaySettingApi - axios parameter creator
 * @export
 */
const PaySettingApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Check country after update user
         * @param {PaySettingControllerCheckCountry1VEnum} v Version
         * @param {PaySettingControllerCheckCountry1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} countryId country id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySettingControllerCheckCountry1: async (v, language, projectId, countryId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('paySettingControllerCheckCountry1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('paySettingControllerCheckCountry1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('paySettingControllerCheckCountry1', 'projectId', projectId);
            // verify required parameter 'countryId' is not null or undefined
            (0, common_1.assertParamExists)('paySettingControllerCheckCountry1', 'countryId', countryId);
            const localVarPath = `/method/pay-setting/check-country`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (countryId !== undefined) {
                localVarQueryParameter['country_id'] = countryId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get pay settings for profile v3
         * @param {PaySettingControllerGetSettingV31VEnum} v Version
         * @param {PaySettingControllerGetSettingV31LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySettingControllerGetSettingV31: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('paySettingControllerGetSettingV31', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('paySettingControllerGetSettingV31', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('paySettingControllerGetSettingV31', 'projectId', projectId);
            const localVarPath = `/method/pay-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set pay settings for profile
         * @param {PaySettingBodyDto} paySettingBodyDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySettingControllerSetSetting1: async (paySettingBodyDto, options = {}) => {
            // verify required parameter 'paySettingBodyDto' is not null or undefined
            (0, common_1.assertParamExists)('paySettingControllerSetSetting1', 'paySettingBodyDto', paySettingBodyDto);
            const localVarPath = `/method/pay-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(paySettingBodyDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PaySettingApiAxiosParamCreator = PaySettingApiAxiosParamCreator;
/**
 * PaySettingApi - functional programming interface
 * @export
 */
const PaySettingApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PaySettingApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Check country after update user
         * @param {PaySettingControllerCheckCountry1VEnum} v Version
         * @param {PaySettingControllerCheckCountry1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} countryId country id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paySettingControllerCheckCountry1(v, language, projectId, countryId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.paySettingControllerCheckCountry1(v, language, projectId, countryId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaySettingApi.paySettingControllerCheckCountry1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get pay settings for profile v3
         * @param {PaySettingControllerGetSettingV31VEnum} v Version
         * @param {PaySettingControllerGetSettingV31LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paySettingControllerGetSettingV31(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.paySettingControllerGetSettingV31(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaySettingApi.paySettingControllerGetSettingV31']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Set pay settings for profile
         * @param {PaySettingBodyDto} paySettingBodyDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paySettingControllerSetSetting1(paySettingBodyDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.paySettingControllerSetSetting1(paySettingBodyDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaySettingApi.paySettingControllerSetSetting1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PaySettingApiFp = PaySettingApiFp;
/**
 * PaySettingApi - factory interface
 * @export
 */
const PaySettingApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PaySettingApiFp)(configuration);
    return {
        /**
         *
         * @summary Check country after update user
         * @param {PaySettingControllerCheckCountry1VEnum} v Version
         * @param {PaySettingControllerCheckCountry1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} countryId country id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySettingControllerCheckCountry1(v, language, projectId, countryId, options) {
            return localVarFp.paySettingControllerCheckCountry1(v, language, projectId, countryId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get pay settings for profile v3
         * @param {PaySettingControllerGetSettingV31VEnum} v Version
         * @param {PaySettingControllerGetSettingV31LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySettingControllerGetSettingV31(v, language, projectId, options) {
            return localVarFp.paySettingControllerGetSettingV31(v, language, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set pay settings for profile
         * @param {PaySettingBodyDto} paySettingBodyDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySettingControllerSetSetting1(paySettingBodyDto, options) {
            return localVarFp.paySettingControllerSetSetting1(paySettingBodyDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PaySettingApiFactory = PaySettingApiFactory;
/**
 * PaySettingApi - object-oriented interface
 * @export
 * @class PaySettingApi
 * @extends {BaseAPI}
 */
class PaySettingApi extends base_1.BaseAPI {
    /**
     *
     * @summary Check country after update user
     * @param {PaySettingControllerCheckCountry1VEnum} v Version
     * @param {PaySettingControllerCheckCountry1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} countryId country id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    paySettingControllerCheckCountry1(v, language, projectId, countryId, options) {
        return (0, exports.PaySettingApiFp)(this.configuration).paySettingControllerCheckCountry1(v, language, projectId, countryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get pay settings for profile v3
     * @param {PaySettingControllerGetSettingV31VEnum} v Version
     * @param {PaySettingControllerGetSettingV31LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    paySettingControllerGetSettingV31(v, language, projectId, options) {
        return (0, exports.PaySettingApiFp)(this.configuration).paySettingControllerGetSettingV31(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set pay settings for profile
     * @param {PaySettingBodyDto} paySettingBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySettingApi
     */
    paySettingControllerSetSetting1(paySettingBodyDto, options) {
        return (0, exports.PaySettingApiFp)(this.configuration).paySettingControllerSetSetting1(paySettingBodyDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PaySettingApi = PaySettingApi;
/**
 * @export
 */
exports.PaySettingControllerCheckCountry1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PaySettingControllerCheckCountry1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PaySettingControllerGetSettingV31VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PaySettingControllerGetSettingV31LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * PaySystemApi - axios parameter creator
 * @export
 */
const PaySystemApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {PaySystemControllerCreateChallenge1VEnum} v Version
         * @param {PaySystemControllerCreateChallenge1LanguageEnum} language Current language
         * @param {number} paymentId Payment id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySystemControllerCreateChallenge1: async (v, language, paymentId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('paySystemControllerCreateChallenge1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('paySystemControllerCreateChallenge1', 'language', language);
            // verify required parameter 'paymentId' is not null or undefined
            (0, common_1.assertParamExists)('paySystemControllerCreateChallenge1', 'paymentId', paymentId);
            const localVarPath = `/method/pay-system/payoneer/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (paymentId !== undefined) {
                localVarQueryParameter['payment_id'] = paymentId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {PaySystemControllerCreateUnitpay1VEnum} v Version
         * @param {PaySystemControllerCreateUnitpay1LanguageEnum} language Current language
         * @param {number} paymentId Payment id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySystemControllerCreateUnitpay1: async (v, language, paymentId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('paySystemControllerCreateUnitpay1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('paySystemControllerCreateUnitpay1', 'language', language);
            // verify required parameter 'paymentId' is not null or undefined
            (0, common_1.assertParamExists)('paySystemControllerCreateUnitpay1', 'paymentId', paymentId);
            const localVarPath = `/method/pay-system/unitpay/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (paymentId !== undefined) {
                localVarQueryParameter['payment_id'] = paymentId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Load available pay systems
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySystemControllerList1: async (options = {}) => {
            const localVarPath = `/method/pay-system/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PaySystemApiAxiosParamCreator = PaySystemApiAxiosParamCreator;
/**
 * PaySystemApi - functional programming interface
 * @export
 */
const PaySystemApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PaySystemApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {PaySystemControllerCreateChallenge1VEnum} v Version
         * @param {PaySystemControllerCreateChallenge1LanguageEnum} language Current language
         * @param {number} paymentId Payment id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paySystemControllerCreateChallenge1(v, language, paymentId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.paySystemControllerCreateChallenge1(v, language, paymentId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaySystemApi.paySystemControllerCreateChallenge1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {PaySystemControllerCreateUnitpay1VEnum} v Version
         * @param {PaySystemControllerCreateUnitpay1LanguageEnum} language Current language
         * @param {number} paymentId Payment id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paySystemControllerCreateUnitpay1(v, language, paymentId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.paySystemControllerCreateUnitpay1(v, language, paymentId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaySystemApi.paySystemControllerCreateUnitpay1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Load available pay systems
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paySystemControllerList1(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.paySystemControllerList1(options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaySystemApi.paySystemControllerList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PaySystemApiFp = PaySystemApiFp;
/**
 * PaySystemApi - factory interface
 * @export
 */
const PaySystemApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PaySystemApiFp)(configuration);
    return {
        /**
         *
         * @param {PaySystemControllerCreateChallenge1VEnum} v Version
         * @param {PaySystemControllerCreateChallenge1LanguageEnum} language Current language
         * @param {number} paymentId Payment id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySystemControllerCreateChallenge1(v, language, paymentId, options) {
            return localVarFp.paySystemControllerCreateChallenge1(v, language, paymentId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {PaySystemControllerCreateUnitpay1VEnum} v Version
         * @param {PaySystemControllerCreateUnitpay1LanguageEnum} language Current language
         * @param {number} paymentId Payment id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySystemControllerCreateUnitpay1(v, language, paymentId, options) {
            return localVarFp.paySystemControllerCreateUnitpay1(v, language, paymentId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Load available pay systems
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paySystemControllerList1(options) {
            return localVarFp.paySystemControllerList1(options).then((request) => request(axios, basePath));
        },
    };
};
exports.PaySystemApiFactory = PaySystemApiFactory;
/**
 * PaySystemApi - object-oriented interface
 * @export
 * @class PaySystemApi
 * @extends {BaseAPI}
 */
class PaySystemApi extends base_1.BaseAPI {
    /**
     *
     * @param {PaySystemControllerCreateChallenge1VEnum} v Version
     * @param {PaySystemControllerCreateChallenge1LanguageEnum} language Current language
     * @param {number} paymentId Payment id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySystemApi
     */
    paySystemControllerCreateChallenge1(v, language, paymentId, options) {
        return (0, exports.PaySystemApiFp)(this.configuration).paySystemControllerCreateChallenge1(v, language, paymentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {PaySystemControllerCreateUnitpay1VEnum} v Version
     * @param {PaySystemControllerCreateUnitpay1LanguageEnum} language Current language
     * @param {number} paymentId Payment id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySystemApi
     */
    paySystemControllerCreateUnitpay1(v, language, paymentId, options) {
        return (0, exports.PaySystemApiFp)(this.configuration).paySystemControllerCreateUnitpay1(v, language, paymentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Load available pay systems
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySystemApi
     */
    paySystemControllerList1(options) {
        return (0, exports.PaySystemApiFp)(this.configuration).paySystemControllerList1(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PaySystemApi = PaySystemApi;
/**
 * @export
 */
exports.PaySystemControllerCreateChallenge1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PaySystemControllerCreateChallenge1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PaySystemControllerCreateUnitpay1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PaySystemControllerCreateUnitpay1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * PaymentApi - axios parameter creator
 * @export
 */
const PaymentApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create payment item for pay system
         * @param {PaymentControllerCreate1VEnum} v Version
         * @param {PaymentControllerCreate1LanguageEnum} language Current language
         * @param {PaymentControllerCreate1Request} paymentControllerCreate1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerCreate1: async (v, language, paymentControllerCreate1Request, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('paymentControllerCreate1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('paymentControllerCreate1', 'language', language);
            // verify required parameter 'paymentControllerCreate1Request' is not null or undefined
            (0, common_1.assertParamExists)('paymentControllerCreate1', 'paymentControllerCreate1Request', paymentControllerCreate1Request);
            const localVarPath = `/method/payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(paymentControllerCreate1Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {PaymentControllerGetStatus1VEnum} v Version
         * @param {PaymentControllerGetStatus1LanguageEnum} language Current language
         * @param {number} payId Pay order id
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerGetStatus1: async (v, language, payId, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('paymentControllerGetStatus1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('paymentControllerGetStatus1', 'language', language);
            // verify required parameter 'payId' is not null or undefined
            (0, common_1.assertParamExists)('paymentControllerGetStatus1', 'payId', payId);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('paymentControllerGetStatus1', 'projectId', projectId);
            const localVarPath = `/method/payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (payId !== undefined) {
                localVarQueryParameter['payId'] = payId;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {PaymentControllerList1VEnum} v Version
         * @param {PaymentControllerList1LanguageEnum} language Current language
         * @param {number} [pageSize] Number of results
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerList1: async (v, language, pageSize, page, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('paymentControllerList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('paymentControllerList1', 'language', language);
            const localVarPath = `/method/payment/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PaymentApiAxiosParamCreator = PaymentApiAxiosParamCreator;
/**
 * PaymentApi - functional programming interface
 * @export
 */
const PaymentApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PaymentApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create payment item for pay system
         * @param {PaymentControllerCreate1VEnum} v Version
         * @param {PaymentControllerCreate1LanguageEnum} language Current language
         * @param {PaymentControllerCreate1Request} paymentControllerCreate1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerCreate1(v, language, paymentControllerCreate1Request, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerCreate1(v, language, paymentControllerCreate1Request, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaymentApi.paymentControllerCreate1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {PaymentControllerGetStatus1VEnum} v Version
         * @param {PaymentControllerGetStatus1LanguageEnum} language Current language
         * @param {number} payId Pay order id
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerGetStatus1(v, language, payId, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerGetStatus1(v, language, payId, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaymentApi.paymentControllerGetStatus1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {PaymentControllerList1VEnum} v Version
         * @param {PaymentControllerList1LanguageEnum} language Current language
         * @param {number} [pageSize] Number of results
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerList1(v, language, pageSize, page, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerList1(v, language, pageSize, page, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PaymentApi.paymentControllerList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PaymentApiFp = PaymentApiFp;
/**
 * PaymentApi - factory interface
 * @export
 */
const PaymentApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PaymentApiFp)(configuration);
    return {
        /**
         *
         * @summary Create payment item for pay system
         * @param {PaymentControllerCreate1VEnum} v Version
         * @param {PaymentControllerCreate1LanguageEnum} language Current language
         * @param {PaymentControllerCreate1Request} paymentControllerCreate1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerCreate1(v, language, paymentControllerCreate1Request, options) {
            return localVarFp.paymentControllerCreate1(v, language, paymentControllerCreate1Request, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {PaymentControllerGetStatus1VEnum} v Version
         * @param {PaymentControllerGetStatus1LanguageEnum} language Current language
         * @param {number} payId Pay order id
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerGetStatus1(v, language, payId, projectId, options) {
            return localVarFp.paymentControllerGetStatus1(v, language, payId, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {PaymentControllerList1VEnum} v Version
         * @param {PaymentControllerList1LanguageEnum} language Current language
         * @param {number} [pageSize] Number of results
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerList1(v, language, pageSize, page, options) {
            return localVarFp.paymentControllerList1(v, language, pageSize, page, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PaymentApiFactory = PaymentApiFactory;
/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
class PaymentApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create payment item for pay system
     * @param {PaymentControllerCreate1VEnum} v Version
     * @param {PaymentControllerCreate1LanguageEnum} language Current language
     * @param {PaymentControllerCreate1Request} paymentControllerCreate1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    paymentControllerCreate1(v, language, paymentControllerCreate1Request, options) {
        return (0, exports.PaymentApiFp)(this.configuration).paymentControllerCreate1(v, language, paymentControllerCreate1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {PaymentControllerGetStatus1VEnum} v Version
     * @param {PaymentControllerGetStatus1LanguageEnum} language Current language
     * @param {number} payId Pay order id
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    paymentControllerGetStatus1(v, language, payId, projectId, options) {
        return (0, exports.PaymentApiFp)(this.configuration).paymentControllerGetStatus1(v, language, payId, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {PaymentControllerList1VEnum} v Version
     * @param {PaymentControllerList1LanguageEnum} language Current language
     * @param {number} [pageSize] Number of results
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    paymentControllerList1(v, language, pageSize, page, options) {
        return (0, exports.PaymentApiFp)(this.configuration).paymentControllerList1(v, language, pageSize, page, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PaymentApi = PaymentApi;
/**
 * @export
 */
exports.PaymentControllerCreate1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PaymentControllerCreate1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PaymentControllerGetStatus1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PaymentControllerGetStatus1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PaymentControllerList1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PaymentControllerList1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * PayoutApi - axios parameter creator
 * @export
 */
const PayoutApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create payout
         * @param {PayoutControllerCreate1VEnum} v Version
         * @param {PayoutControllerCreate1LanguageEnum} language Current language
         * @param {PayoutCreateRequestBodyDto} payoutCreateRequestBodyDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payoutControllerCreate1: async (v, language, payoutCreateRequestBodyDto, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('payoutControllerCreate1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('payoutControllerCreate1', 'language', language);
            // verify required parameter 'payoutCreateRequestBodyDto' is not null or undefined
            (0, common_1.assertParamExists)('payoutControllerCreate1', 'payoutCreateRequestBodyDto', payoutCreateRequestBodyDto);
            const localVarPath = `/method/payout/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(payoutCreateRequestBodyDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get payout data for create
         * @param {PayoutControllerPrepare1VEnum} v Version
         * @param {PayoutControllerPrepare1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payoutControllerPrepare1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('payoutControllerPrepare1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('payoutControllerPrepare1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('payoutControllerPrepare1', 'projectId', projectId);
            const localVarPath = `/method/payout/prepare`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PayoutApiAxiosParamCreator = PayoutApiAxiosParamCreator;
/**
 * PayoutApi - functional programming interface
 * @export
 */
const PayoutApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PayoutApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create payout
         * @param {PayoutControllerCreate1VEnum} v Version
         * @param {PayoutControllerCreate1LanguageEnum} language Current language
         * @param {PayoutCreateRequestBodyDto} payoutCreateRequestBodyDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payoutControllerCreate1(v, language, payoutCreateRequestBodyDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.payoutControllerCreate1(v, language, payoutCreateRequestBodyDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PayoutApi.payoutControllerCreate1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get payout data for create
         * @param {PayoutControllerPrepare1VEnum} v Version
         * @param {PayoutControllerPrepare1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payoutControllerPrepare1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.payoutControllerPrepare1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PayoutApi.payoutControllerPrepare1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PayoutApiFp = PayoutApiFp;
/**
 * PayoutApi - factory interface
 * @export
 */
const PayoutApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PayoutApiFp)(configuration);
    return {
        /**
         *
         * @summary Create payout
         * @param {PayoutControllerCreate1VEnum} v Version
         * @param {PayoutControllerCreate1LanguageEnum} language Current language
         * @param {PayoutCreateRequestBodyDto} payoutCreateRequestBodyDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payoutControllerCreate1(v, language, payoutCreateRequestBodyDto, options) {
            return localVarFp.payoutControllerCreate1(v, language, payoutCreateRequestBodyDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get payout data for create
         * @param {PayoutControllerPrepare1VEnum} v Version
         * @param {PayoutControllerPrepare1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payoutControllerPrepare1(v, language, projectId, options) {
            return localVarFp.payoutControllerPrepare1(v, language, projectId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PayoutApiFactory = PayoutApiFactory;
/**
 * PayoutApi - object-oriented interface
 * @export
 * @class PayoutApi
 * @extends {BaseAPI}
 */
class PayoutApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create payout
     * @param {PayoutControllerCreate1VEnum} v Version
     * @param {PayoutControllerCreate1LanguageEnum} language Current language
     * @param {PayoutCreateRequestBodyDto} payoutCreateRequestBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApi
     */
    payoutControllerCreate1(v, language, payoutCreateRequestBodyDto, options) {
        return (0, exports.PayoutApiFp)(this.configuration).payoutControllerCreate1(v, language, payoutCreateRequestBodyDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get payout data for create
     * @param {PayoutControllerPrepare1VEnum} v Version
     * @param {PayoutControllerPrepare1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApi
     */
    payoutControllerPrepare1(v, language, projectId, options) {
        return (0, exports.PayoutApiFp)(this.configuration).payoutControllerPrepare1(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PayoutApi = PayoutApi;
/**
 * @export
 */
exports.PayoutControllerCreate1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PayoutControllerCreate1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PayoutControllerPrepare1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PayoutControllerPrepare1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * PlanRestreamApi - axios parameter creator
 * @export
 */
const PlanRestreamApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Buy restream tariff
         * @param {SitePlanRestreamControllerBuy1VEnum} v Version
         * @param {SitePlanRestreamControllerBuy1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {SitePlanRestreamControllerBuy1PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {number} [countChannel] Channel count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanRestreamControllerBuy1: async (v, language, projectId, period, planRestreamId, countChannel, bitrate, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerBuy1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerBuy1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerBuy1', 'projectId', projectId);
            // verify required parameter 'period' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerBuy1', 'period', period);
            // verify required parameter 'planRestreamId' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerBuy1', 'planRestreamId', planRestreamId);
            const localVarPath = `/method/plan_restream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }
            if (planRestreamId !== undefined) {
                localVarQueryParameter['plan_restream_id'] = planRestreamId;
            }
            if (countChannel !== undefined) {
                localVarQueryParameter['count_channel'] = countChannel;
            }
            if (bitrate !== undefined) {
                localVarQueryParameter['bitrate'] = bitrate;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Load data for show card the tariffs v2
         * @param {SitePlanRestreamControllerCheck21VEnum} v Version
         * @param {SitePlanRestreamControllerCheck21LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {SitePlanRestreamControllerCheck21PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {number} [useBalance] Is select balance
         * @param {number} [channels] Channels count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanRestreamControllerCheck21: async (v, language, projectId, period, planRestreamId, useBalance, channels, bitrate, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerCheck21', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerCheck21', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerCheck21', 'projectId', projectId);
            // verify required parameter 'period' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerCheck21', 'period', period);
            // verify required parameter 'planRestreamId' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerCheck21', 'planRestreamId', planRestreamId);
            const localVarPath = `/method/plan_restream/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }
            if (planRestreamId !== undefined) {
                localVarQueryParameter['plan_restream_id'] = planRestreamId;
            }
            if (useBalance !== undefined) {
                localVarQueryParameter['use_balance'] = useBalance;
            }
            if (channels !== undefined) {
                localVarQueryParameter['channels'] = channels;
            }
            if (bitrate !== undefined) {
                localVarQueryParameter['bitrate'] = bitrate;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get discount restream
         * @param {SitePlanRestreamControllerGetDiscount1VEnum} v Version
         * @param {SitePlanRestreamControllerGetDiscount1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanRestreamControllerGetDiscount1: async (v, language, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerGetDiscount1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerGetDiscount1', 'language', language);
            const localVarPath = `/method/plan_restream/get_discount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get list of restream tariffs
         * @param {SitePlanRestreamControllerList1VEnum} v Version
         * @param {SitePlanRestreamControllerList1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanRestreamControllerList1: async (v, language, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerList1', 'language', language);
            const localVarPath = `/method/plan_restream/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get list of restream tariffs for project
         * @param {SitePlanRestreamControllerListProject1VEnum} v Version
         * @param {SitePlanRestreamControllerListProject1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanRestreamControllerListProject1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerListProject1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerListProject1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerListProject1', 'projectId', projectId);
            const localVarPath = `/method/plan_restream/list/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove after tariff
         * @param {SitePlanRestreamControllerRemove1VEnum} v Version
         * @param {SitePlanRestreamControllerRemove1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} planRestreamId Restream plan id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanRestreamControllerRemove1: async (v, language, projectId, planRestreamId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerRemove1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerRemove1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerRemove1', 'projectId', projectId);
            // verify required parameter 'planRestreamId' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerRemove1', 'planRestreamId', planRestreamId);
            const localVarPath = `/method/plan_restream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (planRestreamId !== undefined) {
                localVarQueryParameter['plan_restream_id'] = planRestreamId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get tariff for project
         * @param {SitePlanRestreamControllerTariff1VEnum} v Version
         * @param {SitePlanRestreamControllerTariff1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanRestreamControllerTariff1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerTariff1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerTariff1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanRestreamControllerTariff1', 'projectId', projectId);
            const localVarPath = `/method/plan_restream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PlanRestreamApiAxiosParamCreator = PlanRestreamApiAxiosParamCreator;
/**
 * PlanRestreamApi - functional programming interface
 * @export
 */
const PlanRestreamApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PlanRestreamApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Buy restream tariff
         * @param {SitePlanRestreamControllerBuy1VEnum} v Version
         * @param {SitePlanRestreamControllerBuy1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {SitePlanRestreamControllerBuy1PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {number} [countChannel] Channel count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlanRestreamControllerBuy1(v, language, projectId, period, planRestreamId, countChannel, bitrate, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlanRestreamControllerBuy1(v, language, projectId, period, planRestreamId, countChannel, bitrate, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.sitePlanRestreamControllerBuy1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Load data for show card the tariffs v2
         * @param {SitePlanRestreamControllerCheck21VEnum} v Version
         * @param {SitePlanRestreamControllerCheck21LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {SitePlanRestreamControllerCheck21PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {number} [useBalance] Is select balance
         * @param {number} [channels] Channels count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlanRestreamControllerCheck21(v, language, projectId, period, planRestreamId, useBalance, channels, bitrate, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlanRestreamControllerCheck21(v, language, projectId, period, planRestreamId, useBalance, channels, bitrate, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.sitePlanRestreamControllerCheck21']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get discount restream
         * @param {SitePlanRestreamControllerGetDiscount1VEnum} v Version
         * @param {SitePlanRestreamControllerGetDiscount1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlanRestreamControllerGetDiscount1(v, language, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlanRestreamControllerGetDiscount1(v, language, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.sitePlanRestreamControllerGetDiscount1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get list of restream tariffs
         * @param {SitePlanRestreamControllerList1VEnum} v Version
         * @param {SitePlanRestreamControllerList1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlanRestreamControllerList1(v, language, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlanRestreamControllerList1(v, language, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.sitePlanRestreamControllerList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get list of restream tariffs for project
         * @param {SitePlanRestreamControllerListProject1VEnum} v Version
         * @param {SitePlanRestreamControllerListProject1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlanRestreamControllerListProject1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlanRestreamControllerListProject1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.sitePlanRestreamControllerListProject1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Remove after tariff
         * @param {SitePlanRestreamControllerRemove1VEnum} v Version
         * @param {SitePlanRestreamControllerRemove1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} planRestreamId Restream plan id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlanRestreamControllerRemove1(v, language, projectId, planRestreamId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlanRestreamControllerRemove1(v, language, projectId, planRestreamId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.sitePlanRestreamControllerRemove1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get tariff for project
         * @param {SitePlanRestreamControllerTariff1VEnum} v Version
         * @param {SitePlanRestreamControllerTariff1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlanRestreamControllerTariff1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlanRestreamControllerTariff1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanRestreamApi.sitePlanRestreamControllerTariff1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PlanRestreamApiFp = PlanRestreamApiFp;
/**
 * PlanRestreamApi - factory interface
 * @export
 */
const PlanRestreamApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PlanRestreamApiFp)(configuration);
    return {
        /**
         *
         * @summary Buy restream tariff
         * @param {SitePlanRestreamControllerBuy1VEnum} v Version
         * @param {SitePlanRestreamControllerBuy1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {SitePlanRestreamControllerBuy1PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {number} [countChannel] Channel count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanRestreamControllerBuy1(v, language, projectId, period, planRestreamId, countChannel, bitrate, options) {
            return localVarFp.sitePlanRestreamControllerBuy1(v, language, projectId, period, planRestreamId, countChannel, bitrate, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Load data for show card the tariffs v2
         * @param {SitePlanRestreamControllerCheck21VEnum} v Version
         * @param {SitePlanRestreamControllerCheck21LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {SitePlanRestreamControllerCheck21PeriodEnum} period Period
         * @param {number} planRestreamId Restream plan id
         * @param {number} [useBalance] Is select balance
         * @param {number} [channels] Channels count
         * @param {number} [bitrate] Bitrate, kbps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanRestreamControllerCheck21(v, language, projectId, period, planRestreamId, useBalance, channels, bitrate, options) {
            return localVarFp.sitePlanRestreamControllerCheck21(v, language, projectId, period, planRestreamId, useBalance, channels, bitrate, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get discount restream
         * @param {SitePlanRestreamControllerGetDiscount1VEnum} v Version
         * @param {SitePlanRestreamControllerGetDiscount1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanRestreamControllerGetDiscount1(v, language, options) {
            return localVarFp.sitePlanRestreamControllerGetDiscount1(v, language, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get list of restream tariffs
         * @param {SitePlanRestreamControllerList1VEnum} v Version
         * @param {SitePlanRestreamControllerList1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanRestreamControllerList1(v, language, options) {
            return localVarFp.sitePlanRestreamControllerList1(v, language, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get list of restream tariffs for project
         * @param {SitePlanRestreamControllerListProject1VEnum} v Version
         * @param {SitePlanRestreamControllerListProject1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanRestreamControllerListProject1(v, language, projectId, options) {
            return localVarFp.sitePlanRestreamControllerListProject1(v, language, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Remove after tariff
         * @param {SitePlanRestreamControllerRemove1VEnum} v Version
         * @param {SitePlanRestreamControllerRemove1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} planRestreamId Restream plan id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanRestreamControllerRemove1(v, language, projectId, planRestreamId, options) {
            return localVarFp.sitePlanRestreamControllerRemove1(v, language, projectId, planRestreamId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get tariff for project
         * @param {SitePlanRestreamControllerTariff1VEnum} v Version
         * @param {SitePlanRestreamControllerTariff1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanRestreamControllerTariff1(v, language, projectId, options) {
            return localVarFp.sitePlanRestreamControllerTariff1(v, language, projectId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PlanRestreamApiFactory = PlanRestreamApiFactory;
/**
 * PlanRestreamApi - object-oriented interface
 * @export
 * @class PlanRestreamApi
 * @extends {BaseAPI}
 */
class PlanRestreamApi extends base_1.BaseAPI {
    /**
     *
     * @summary Buy restream tariff
     * @param {SitePlanRestreamControllerBuy1VEnum} v Version
     * @param {SitePlanRestreamControllerBuy1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {SitePlanRestreamControllerBuy1PeriodEnum} period Period
     * @param {number} planRestreamId Restream plan id
     * @param {number} [countChannel] Channel count
     * @param {number} [bitrate] Bitrate, kbps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    sitePlanRestreamControllerBuy1(v, language, projectId, period, planRestreamId, countChannel, bitrate, options) {
        return (0, exports.PlanRestreamApiFp)(this.configuration).sitePlanRestreamControllerBuy1(v, language, projectId, period, planRestreamId, countChannel, bitrate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Load data for show card the tariffs v2
     * @param {SitePlanRestreamControllerCheck21VEnum} v Version
     * @param {SitePlanRestreamControllerCheck21LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {SitePlanRestreamControllerCheck21PeriodEnum} period Period
     * @param {number} planRestreamId Restream plan id
     * @param {number} [useBalance] Is select balance
     * @param {number} [channels] Channels count
     * @param {number} [bitrate] Bitrate, kbps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    sitePlanRestreamControllerCheck21(v, language, projectId, period, planRestreamId, useBalance, channels, bitrate, options) {
        return (0, exports.PlanRestreamApiFp)(this.configuration).sitePlanRestreamControllerCheck21(v, language, projectId, period, planRestreamId, useBalance, channels, bitrate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get discount restream
     * @param {SitePlanRestreamControllerGetDiscount1VEnum} v Version
     * @param {SitePlanRestreamControllerGetDiscount1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    sitePlanRestreamControllerGetDiscount1(v, language, options) {
        return (0, exports.PlanRestreamApiFp)(this.configuration).sitePlanRestreamControllerGetDiscount1(v, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get list of restream tariffs
     * @param {SitePlanRestreamControllerList1VEnum} v Version
     * @param {SitePlanRestreamControllerList1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    sitePlanRestreamControllerList1(v, language, options) {
        return (0, exports.PlanRestreamApiFp)(this.configuration).sitePlanRestreamControllerList1(v, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get list of restream tariffs for project
     * @param {SitePlanRestreamControllerListProject1VEnum} v Version
     * @param {SitePlanRestreamControllerListProject1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    sitePlanRestreamControllerListProject1(v, language, projectId, options) {
        return (0, exports.PlanRestreamApiFp)(this.configuration).sitePlanRestreamControllerListProject1(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Remove after tariff
     * @param {SitePlanRestreamControllerRemove1VEnum} v Version
     * @param {SitePlanRestreamControllerRemove1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} planRestreamId Restream plan id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    sitePlanRestreamControllerRemove1(v, language, projectId, planRestreamId, options) {
        return (0, exports.PlanRestreamApiFp)(this.configuration).sitePlanRestreamControllerRemove1(v, language, projectId, planRestreamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get tariff for project
     * @param {SitePlanRestreamControllerTariff1VEnum} v Version
     * @param {SitePlanRestreamControllerTariff1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanRestreamApi
     */
    sitePlanRestreamControllerTariff1(v, language, projectId, options) {
        return (0, exports.PlanRestreamApiFp)(this.configuration).sitePlanRestreamControllerTariff1(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PlanRestreamApi = PlanRestreamApi;
/**
 * @export
 */
exports.SitePlanRestreamControllerBuy1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlanRestreamControllerBuy1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePlanRestreamControllerBuy1PeriodEnum = {
    Month: 'month',
    Year: 'year'
};
/**
 * @export
 */
exports.SitePlanRestreamControllerCheck21VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlanRestreamControllerCheck21LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePlanRestreamControllerCheck21PeriodEnum = {
    Month: 'month',
    Year: 'year'
};
/**
 * @export
 */
exports.SitePlanRestreamControllerGetDiscount1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlanRestreamControllerGetDiscount1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePlanRestreamControllerList1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlanRestreamControllerList1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePlanRestreamControllerListProject1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlanRestreamControllerListProject1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePlanRestreamControllerRemove1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlanRestreamControllerRemove1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePlanRestreamControllerTariff1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlanRestreamControllerTariff1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * PlanStorageApi - axios parameter creator
 * @export
 */
const PlanStorageApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Buy storage tariff
         * @param {SitePlanStorageControllerBuy1VEnum} v Version
         * @param {SitePlanStorageControllerBuy1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {SitePlanStorageControllerBuy1PeriodEnum} period Period
         * @param {number} planStorageId Storage plan id
         * @param {number} [size] Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanStorageControllerBuy1: async (v, language, projectId, period, planStorageId, size, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanStorageControllerBuy1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanStorageControllerBuy1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanStorageControllerBuy1', 'projectId', projectId);
            // verify required parameter 'period' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanStorageControllerBuy1', 'period', period);
            // verify required parameter 'planStorageId' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanStorageControllerBuy1', 'planStorageId', planStorageId);
            const localVarPath = `/method/plan_storage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }
            if (planStorageId !== undefined) {
                localVarQueryParameter['plan_storage_id'] = planStorageId;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove next tariff
         * @param {SitePlanStorageControllerCancel1VEnum} v Version
         * @param {SitePlanStorageControllerCancel1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanStorageControllerCancel1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanStorageControllerCancel1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanStorageControllerCancel1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanStorageControllerCancel1', 'projectId', projectId);
            const localVarPath = `/method/plan_storage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Check storage tariff before buy
         * @param {SitePlanStorageControllerCheck1VEnum} v Version
         * @param {SitePlanStorageControllerCheck1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanStorageControllerCheck1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanStorageControllerCheck1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanStorageControllerCheck1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanStorageControllerCheck1', 'projectId', projectId);
            const localVarPath = `/method/plan_storage/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get discount of storage
         * @param {SitePlanStorageControllerGetDiscount1VEnum} v Version
         * @param {SitePlanStorageControllerGetDiscount1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanStorageControllerGetDiscount1: async (v, language, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanStorageControllerGetDiscount1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanStorageControllerGetDiscount1', 'language', language);
            const localVarPath = `/method/plan_storage/get_discount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get info for storage tariff
         * @param {SitePlanStorageControllerList1VEnum} v Version
         * @param {SitePlanStorageControllerList1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanStorageControllerList1: async (v, language, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanStorageControllerList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanStorageControllerList1', 'language', language);
            const localVarPath = `/method/plan_storage/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get tariff for project
         * @param {SitePlanStorageControllerTariff1VEnum} v Version
         * @param {SitePlanStorageControllerTariff1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanStorageControllerTariff1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanStorageControllerTariff1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanStorageControllerTariff1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanStorageControllerTariff1', 'projectId', projectId);
            const localVarPath = `/method/plan_storage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PlanStorageApiAxiosParamCreator = PlanStorageApiAxiosParamCreator;
/**
 * PlanStorageApi - functional programming interface
 * @export
 */
const PlanStorageApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PlanStorageApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Buy storage tariff
         * @param {SitePlanStorageControllerBuy1VEnum} v Version
         * @param {SitePlanStorageControllerBuy1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {SitePlanStorageControllerBuy1PeriodEnum} period Period
         * @param {number} planStorageId Storage plan id
         * @param {number} [size] Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlanStorageControllerBuy1(v, language, projectId, period, planStorageId, size, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlanStorageControllerBuy1(v, language, projectId, period, planStorageId, size, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanStorageApi.sitePlanStorageControllerBuy1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Remove next tariff
         * @param {SitePlanStorageControllerCancel1VEnum} v Version
         * @param {SitePlanStorageControllerCancel1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlanStorageControllerCancel1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlanStorageControllerCancel1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanStorageApi.sitePlanStorageControllerCancel1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Check storage tariff before buy
         * @param {SitePlanStorageControllerCheck1VEnum} v Version
         * @param {SitePlanStorageControllerCheck1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlanStorageControllerCheck1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlanStorageControllerCheck1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanStorageApi.sitePlanStorageControllerCheck1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get discount of storage
         * @param {SitePlanStorageControllerGetDiscount1VEnum} v Version
         * @param {SitePlanStorageControllerGetDiscount1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlanStorageControllerGetDiscount1(v, language, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlanStorageControllerGetDiscount1(v, language, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanStorageApi.sitePlanStorageControllerGetDiscount1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get info for storage tariff
         * @param {SitePlanStorageControllerList1VEnum} v Version
         * @param {SitePlanStorageControllerList1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlanStorageControllerList1(v, language, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlanStorageControllerList1(v, language, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanStorageApi.sitePlanStorageControllerList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get tariff for project
         * @param {SitePlanStorageControllerTariff1VEnum} v Version
         * @param {SitePlanStorageControllerTariff1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlanStorageControllerTariff1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlanStorageControllerTariff1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanStorageApi.sitePlanStorageControllerTariff1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PlanStorageApiFp = PlanStorageApiFp;
/**
 * PlanStorageApi - factory interface
 * @export
 */
const PlanStorageApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PlanStorageApiFp)(configuration);
    return {
        /**
         *
         * @summary Buy storage tariff
         * @param {SitePlanStorageControllerBuy1VEnum} v Version
         * @param {SitePlanStorageControllerBuy1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {SitePlanStorageControllerBuy1PeriodEnum} period Period
         * @param {number} planStorageId Storage plan id
         * @param {number} [size] Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanStorageControllerBuy1(v, language, projectId, period, planStorageId, size, options) {
            return localVarFp.sitePlanStorageControllerBuy1(v, language, projectId, period, planStorageId, size, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Remove next tariff
         * @param {SitePlanStorageControllerCancel1VEnum} v Version
         * @param {SitePlanStorageControllerCancel1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanStorageControllerCancel1(v, language, projectId, options) {
            return localVarFp.sitePlanStorageControllerCancel1(v, language, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Check storage tariff before buy
         * @param {SitePlanStorageControllerCheck1VEnum} v Version
         * @param {SitePlanStorageControllerCheck1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanStorageControllerCheck1(v, language, projectId, options) {
            return localVarFp.sitePlanStorageControllerCheck1(v, language, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get discount of storage
         * @param {SitePlanStorageControllerGetDiscount1VEnum} v Version
         * @param {SitePlanStorageControllerGetDiscount1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanStorageControllerGetDiscount1(v, language, options) {
            return localVarFp.sitePlanStorageControllerGetDiscount1(v, language, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get info for storage tariff
         * @param {SitePlanStorageControllerList1VEnum} v Version
         * @param {SitePlanStorageControllerList1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanStorageControllerList1(v, language, options) {
            return localVarFp.sitePlanStorageControllerList1(v, language, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get tariff for project
         * @param {SitePlanStorageControllerTariff1VEnum} v Version
         * @param {SitePlanStorageControllerTariff1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanStorageControllerTariff1(v, language, projectId, options) {
            return localVarFp.sitePlanStorageControllerTariff1(v, language, projectId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PlanStorageApiFactory = PlanStorageApiFactory;
/**
 * PlanStorageApi - object-oriented interface
 * @export
 * @class PlanStorageApi
 * @extends {BaseAPI}
 */
class PlanStorageApi extends base_1.BaseAPI {
    /**
     *
     * @summary Buy storage tariff
     * @param {SitePlanStorageControllerBuy1VEnum} v Version
     * @param {SitePlanStorageControllerBuy1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {SitePlanStorageControllerBuy1PeriodEnum} period Period
     * @param {number} planStorageId Storage plan id
     * @param {number} [size] Size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    sitePlanStorageControllerBuy1(v, language, projectId, period, planStorageId, size, options) {
        return (0, exports.PlanStorageApiFp)(this.configuration).sitePlanStorageControllerBuy1(v, language, projectId, period, planStorageId, size, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Remove next tariff
     * @param {SitePlanStorageControllerCancel1VEnum} v Version
     * @param {SitePlanStorageControllerCancel1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    sitePlanStorageControllerCancel1(v, language, projectId, options) {
        return (0, exports.PlanStorageApiFp)(this.configuration).sitePlanStorageControllerCancel1(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Check storage tariff before buy
     * @param {SitePlanStorageControllerCheck1VEnum} v Version
     * @param {SitePlanStorageControllerCheck1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    sitePlanStorageControllerCheck1(v, language, projectId, options) {
        return (0, exports.PlanStorageApiFp)(this.configuration).sitePlanStorageControllerCheck1(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get discount of storage
     * @param {SitePlanStorageControllerGetDiscount1VEnum} v Version
     * @param {SitePlanStorageControllerGetDiscount1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    sitePlanStorageControllerGetDiscount1(v, language, options) {
        return (0, exports.PlanStorageApiFp)(this.configuration).sitePlanStorageControllerGetDiscount1(v, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get info for storage tariff
     * @param {SitePlanStorageControllerList1VEnum} v Version
     * @param {SitePlanStorageControllerList1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    sitePlanStorageControllerList1(v, language, options) {
        return (0, exports.PlanStorageApiFp)(this.configuration).sitePlanStorageControllerList1(v, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get tariff for project
     * @param {SitePlanStorageControllerTariff1VEnum} v Version
     * @param {SitePlanStorageControllerTariff1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanStorageApi
     */
    sitePlanStorageControllerTariff1(v, language, projectId, options) {
        return (0, exports.PlanStorageApiFp)(this.configuration).sitePlanStorageControllerTariff1(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PlanStorageApi = PlanStorageApi;
/**
 * @export
 */
exports.SitePlanStorageControllerBuy1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlanStorageControllerBuy1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePlanStorageControllerBuy1PeriodEnum = {
    Month: 'month',
    Year: 'year'
};
/**
 * @export
 */
exports.SitePlanStorageControllerCancel1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlanStorageControllerCancel1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePlanStorageControllerCheck1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlanStorageControllerCheck1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePlanStorageControllerGetDiscount1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlanStorageControllerGetDiscount1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePlanStorageControllerList1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlanStorageControllerList1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePlanStorageControllerTariff1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlanStorageControllerTariff1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * PlanTranscodingApi - axios parameter creator
 * @export
 */
const PlanTranscodingApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Buy transcoder tariff
         * @param {SitePlanTranscodingControllerBuy1VEnum} v Version
         * @param {SitePlanTranscodingControllerBuy1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {SitePlanTranscodingControllerBuy1PeriodEnum} period Period
         * @param {number} planTranscodingId Transcoding plan id
         * @param {number} [count] Count flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanTranscodingControllerBuy1: async (v, language, projectId, period, planTranscodingId, count, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanTranscodingControllerBuy1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanTranscodingControllerBuy1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanTranscodingControllerBuy1', 'projectId', projectId);
            // verify required parameter 'period' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanTranscodingControllerBuy1', 'period', period);
            // verify required parameter 'planTranscodingId' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanTranscodingControllerBuy1', 'planTranscodingId', planTranscodingId);
            const localVarPath = `/method/plan_transcoding`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }
            if (planTranscodingId !== undefined) {
                localVarQueryParameter['plan_transcoding_id'] = planTranscodingId;
            }
            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove after tariff
         * @param {SitePlanTranscodingControllerCancel1VEnum} v Version
         * @param {SitePlanTranscodingControllerCancel1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanTranscodingControllerCancel1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanTranscodingControllerCancel1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanTranscodingControllerCancel1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanTranscodingControllerCancel1', 'projectId', projectId);
            const localVarPath = `/method/plan_transcoding`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Check transcoding tariff before buy
         * @param {SitePlanTranscodingControllerCheck1VEnum} v Version
         * @param {SitePlanTranscodingControllerCheck1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanTranscodingControllerCheck1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanTranscodingControllerCheck1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanTranscodingControllerCheck1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanTranscodingControllerCheck1', 'projectId', projectId);
            const localVarPath = `/method/plan_transcoding/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get discount transcoding
         * @param {SitePlanTranscodingControllerGetDiscount1VEnum} v Version
         * @param {SitePlanTranscodingControllerGetDiscount1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanTranscodingControllerGetDiscount1: async (v, language, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanTranscodingControllerGetDiscount1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanTranscodingControllerGetDiscount1', 'language', language);
            const localVarPath = `/method/plan_transcoding/get_discount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get list of transcoding tariffs
         * @param {SitePlanTranscodingControllerList1VEnum} v Version
         * @param {SitePlanTranscodingControllerList1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanTranscodingControllerList1: async (v, language, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanTranscodingControllerList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanTranscodingControllerList1', 'language', language);
            const localVarPath = `/method/plan_transcoding/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get tariff for project
         * @param {SitePlanTranscodingControllerTariff1VEnum} v Version
         * @param {SitePlanTranscodingControllerTariff1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanTranscodingControllerTariff1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanTranscodingControllerTariff1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanTranscodingControllerTariff1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('sitePlanTranscodingControllerTariff1', 'projectId', projectId);
            const localVarPath = `/method/plan_transcoding`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PlanTranscodingApiAxiosParamCreator = PlanTranscodingApiAxiosParamCreator;
/**
 * PlanTranscodingApi - functional programming interface
 * @export
 */
const PlanTranscodingApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PlanTranscodingApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Buy transcoder tariff
         * @param {SitePlanTranscodingControllerBuy1VEnum} v Version
         * @param {SitePlanTranscodingControllerBuy1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {SitePlanTranscodingControllerBuy1PeriodEnum} period Period
         * @param {number} planTranscodingId Transcoding plan id
         * @param {number} [count] Count flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlanTranscodingControllerBuy1(v, language, projectId, period, planTranscodingId, count, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlanTranscodingControllerBuy1(v, language, projectId, period, planTranscodingId, count, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanTranscodingApi.sitePlanTranscodingControllerBuy1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Remove after tariff
         * @param {SitePlanTranscodingControllerCancel1VEnum} v Version
         * @param {SitePlanTranscodingControllerCancel1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlanTranscodingControllerCancel1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlanTranscodingControllerCancel1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanTranscodingApi.sitePlanTranscodingControllerCancel1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Check transcoding tariff before buy
         * @param {SitePlanTranscodingControllerCheck1VEnum} v Version
         * @param {SitePlanTranscodingControllerCheck1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlanTranscodingControllerCheck1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlanTranscodingControllerCheck1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanTranscodingApi.sitePlanTranscodingControllerCheck1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get discount transcoding
         * @param {SitePlanTranscodingControllerGetDiscount1VEnum} v Version
         * @param {SitePlanTranscodingControllerGetDiscount1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlanTranscodingControllerGetDiscount1(v, language, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlanTranscodingControllerGetDiscount1(v, language, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanTranscodingApi.sitePlanTranscodingControllerGetDiscount1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get list of transcoding tariffs
         * @param {SitePlanTranscodingControllerList1VEnum} v Version
         * @param {SitePlanTranscodingControllerList1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlanTranscodingControllerList1(v, language, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlanTranscodingControllerList1(v, language, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanTranscodingApi.sitePlanTranscodingControllerList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get tariff for project
         * @param {SitePlanTranscodingControllerTariff1VEnum} v Version
         * @param {SitePlanTranscodingControllerTariff1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlanTranscodingControllerTariff1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlanTranscodingControllerTariff1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlanTranscodingApi.sitePlanTranscodingControllerTariff1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PlanTranscodingApiFp = PlanTranscodingApiFp;
/**
 * PlanTranscodingApi - factory interface
 * @export
 */
const PlanTranscodingApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PlanTranscodingApiFp)(configuration);
    return {
        /**
         *
         * @summary Buy transcoder tariff
         * @param {SitePlanTranscodingControllerBuy1VEnum} v Version
         * @param {SitePlanTranscodingControllerBuy1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {SitePlanTranscodingControllerBuy1PeriodEnum} period Period
         * @param {number} planTranscodingId Transcoding plan id
         * @param {number} [count] Count flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanTranscodingControllerBuy1(v, language, projectId, period, planTranscodingId, count, options) {
            return localVarFp.sitePlanTranscodingControllerBuy1(v, language, projectId, period, planTranscodingId, count, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Remove after tariff
         * @param {SitePlanTranscodingControllerCancel1VEnum} v Version
         * @param {SitePlanTranscodingControllerCancel1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanTranscodingControllerCancel1(v, language, projectId, options) {
            return localVarFp.sitePlanTranscodingControllerCancel1(v, language, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Check transcoding tariff before buy
         * @param {SitePlanTranscodingControllerCheck1VEnum} v Version
         * @param {SitePlanTranscodingControllerCheck1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanTranscodingControllerCheck1(v, language, projectId, options) {
            return localVarFp.sitePlanTranscodingControllerCheck1(v, language, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get discount transcoding
         * @param {SitePlanTranscodingControllerGetDiscount1VEnum} v Version
         * @param {SitePlanTranscodingControllerGetDiscount1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanTranscodingControllerGetDiscount1(v, language, options) {
            return localVarFp.sitePlanTranscodingControllerGetDiscount1(v, language, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get list of transcoding tariffs
         * @param {SitePlanTranscodingControllerList1VEnum} v Version
         * @param {SitePlanTranscodingControllerList1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanTranscodingControllerList1(v, language, options) {
            return localVarFp.sitePlanTranscodingControllerList1(v, language, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get tariff for project
         * @param {SitePlanTranscodingControllerTariff1VEnum} v Version
         * @param {SitePlanTranscodingControllerTariff1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlanTranscodingControllerTariff1(v, language, projectId, options) {
            return localVarFp.sitePlanTranscodingControllerTariff1(v, language, projectId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PlanTranscodingApiFactory = PlanTranscodingApiFactory;
/**
 * PlanTranscodingApi - object-oriented interface
 * @export
 * @class PlanTranscodingApi
 * @extends {BaseAPI}
 */
class PlanTranscodingApi extends base_1.BaseAPI {
    /**
     *
     * @summary Buy transcoder tariff
     * @param {SitePlanTranscodingControllerBuy1VEnum} v Version
     * @param {SitePlanTranscodingControllerBuy1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {SitePlanTranscodingControllerBuy1PeriodEnum} period Period
     * @param {number} planTranscodingId Transcoding plan id
     * @param {number} [count] Count flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    sitePlanTranscodingControllerBuy1(v, language, projectId, period, planTranscodingId, count, options) {
        return (0, exports.PlanTranscodingApiFp)(this.configuration).sitePlanTranscodingControllerBuy1(v, language, projectId, period, planTranscodingId, count, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Remove after tariff
     * @param {SitePlanTranscodingControllerCancel1VEnum} v Version
     * @param {SitePlanTranscodingControllerCancel1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    sitePlanTranscodingControllerCancel1(v, language, projectId, options) {
        return (0, exports.PlanTranscodingApiFp)(this.configuration).sitePlanTranscodingControllerCancel1(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Check transcoding tariff before buy
     * @param {SitePlanTranscodingControllerCheck1VEnum} v Version
     * @param {SitePlanTranscodingControllerCheck1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    sitePlanTranscodingControllerCheck1(v, language, projectId, options) {
        return (0, exports.PlanTranscodingApiFp)(this.configuration).sitePlanTranscodingControllerCheck1(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get discount transcoding
     * @param {SitePlanTranscodingControllerGetDiscount1VEnum} v Version
     * @param {SitePlanTranscodingControllerGetDiscount1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    sitePlanTranscodingControllerGetDiscount1(v, language, options) {
        return (0, exports.PlanTranscodingApiFp)(this.configuration).sitePlanTranscodingControllerGetDiscount1(v, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get list of transcoding tariffs
     * @param {SitePlanTranscodingControllerList1VEnum} v Version
     * @param {SitePlanTranscodingControllerList1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    sitePlanTranscodingControllerList1(v, language, options) {
        return (0, exports.PlanTranscodingApiFp)(this.configuration).sitePlanTranscodingControllerList1(v, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get tariff for project
     * @param {SitePlanTranscodingControllerTariff1VEnum} v Version
     * @param {SitePlanTranscodingControllerTariff1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanTranscodingApi
     */
    sitePlanTranscodingControllerTariff1(v, language, projectId, options) {
        return (0, exports.PlanTranscodingApiFp)(this.configuration).sitePlanTranscodingControllerTariff1(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PlanTranscodingApi = PlanTranscodingApi;
/**
 * @export
 */
exports.SitePlanTranscodingControllerBuy1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlanTranscodingControllerBuy1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePlanTranscodingControllerBuy1PeriodEnum = {
    Month: 'month',
    Year: 'year'
};
/**
 * @export
 */
exports.SitePlanTranscodingControllerCancel1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlanTranscodingControllerCancel1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePlanTranscodingControllerCheck1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlanTranscodingControllerCheck1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePlanTranscodingControllerGetDiscount1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlanTranscodingControllerGetDiscount1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePlanTranscodingControllerList1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlanTranscodingControllerList1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePlanTranscodingControllerTariff1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlanTranscodingControllerTariff1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * PlatformsApi - axios parameter creator
 * @export
 */
const PlatformsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get url for start oauth
         * @param {SitePlatformsControllerAddAccount1VEnum} v Version
         * @param {SitePlatformsControllerAddAccount1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {SitePlatformsControllerAddAccount1PlatformEnum} platform Provider oauth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlatformsControllerAddAccount1: async (v, language, projectId, platform, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlatformsControllerAddAccount1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlatformsControllerAddAccount1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('sitePlatformsControllerAddAccount1', 'projectId', projectId);
            // verify required parameter 'platform' is not null or undefined
            (0, common_1.assertParamExists)('sitePlatformsControllerAddAccount1', 'platform', platform);
            const localVarPath = `/method/platforms/connect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get category from the platform
         * @param {SitePlatformsControllerGetCategory1VEnum} v Version
         * @param {SitePlatformsControllerGetCategory1LanguageEnum} language Current language
         * @param {SitePlatformsControllerGetCategory1TypeEnum} type Category search bar
         * @param {string} [q] Category search bar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlatformsControllerGetCategory1: async (v, language, type, q, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlatformsControllerGetCategory1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlatformsControllerGetCategory1', 'language', language);
            // verify required parameter 'type' is not null or undefined
            (0, common_1.assertParamExists)('sitePlatformsControllerGetCategory1', 'type', type);
            const localVarPath = `/method/platforms/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get category from the platform
         * @param {SitePlatformsControllerLogoutAccount1VEnum} v Version
         * @param {SitePlatformsControllerLogoutAccount1LanguageEnum} language Current language
         * @param {string} id Category search bar
         * @param {SitePlatformsControllerLogoutAccount1PlatformEnum} platform Provider oauth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlatformsControllerLogoutAccount1: async (v, language, id, platform, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlatformsControllerLogoutAccount1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlatformsControllerLogoutAccount1', 'language', language);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('sitePlatformsControllerLogoutAccount1', 'id', id);
            // verify required parameter 'platform' is not null or undefined
            (0, common_1.assertParamExists)('sitePlatformsControllerLogoutAccount1', 'platform', platform);
            const localVarPath = `/method/platforms/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Supported platforms
         * @param {SitePlatformsControllerPlatformList1VEnum} v Version
         * @param {SitePlatformsControllerPlatformList1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlatformsControllerPlatformList1: async (v, language, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePlatformsControllerPlatformList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePlatformsControllerPlatformList1', 'language', language);
            const localVarPath = `/method/platforms/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PlatformsApiAxiosParamCreator = PlatformsApiAxiosParamCreator;
/**
 * PlatformsApi - functional programming interface
 * @export
 */
const PlatformsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PlatformsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get url for start oauth
         * @param {SitePlatformsControllerAddAccount1VEnum} v Version
         * @param {SitePlatformsControllerAddAccount1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {SitePlatformsControllerAddAccount1PlatformEnum} platform Provider oauth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlatformsControllerAddAccount1(v, language, projectId, platform, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlatformsControllerAddAccount1(v, language, projectId, platform, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlatformsApi.sitePlatformsControllerAddAccount1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get category from the platform
         * @param {SitePlatformsControllerGetCategory1VEnum} v Version
         * @param {SitePlatformsControllerGetCategory1LanguageEnum} language Current language
         * @param {SitePlatformsControllerGetCategory1TypeEnum} type Category search bar
         * @param {string} [q] Category search bar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlatformsControllerGetCategory1(v, language, type, q, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlatformsControllerGetCategory1(v, language, type, q, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlatformsApi.sitePlatformsControllerGetCategory1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get category from the platform
         * @param {SitePlatformsControllerLogoutAccount1VEnum} v Version
         * @param {SitePlatformsControllerLogoutAccount1LanguageEnum} language Current language
         * @param {string} id Category search bar
         * @param {SitePlatformsControllerLogoutAccount1PlatformEnum} platform Provider oauth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlatformsControllerLogoutAccount1(v, language, id, platform, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlatformsControllerLogoutAccount1(v, language, id, platform, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlatformsApi.sitePlatformsControllerLogoutAccount1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Supported platforms
         * @param {SitePlatformsControllerPlatformList1VEnum} v Version
         * @param {SitePlatformsControllerPlatformList1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePlatformsControllerPlatformList1(v, language, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePlatformsControllerPlatformList1(v, language, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PlatformsApi.sitePlatformsControllerPlatformList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PlatformsApiFp = PlatformsApiFp;
/**
 * PlatformsApi - factory interface
 * @export
 */
const PlatformsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PlatformsApiFp)(configuration);
    return {
        /**
         *
         * @summary Get url for start oauth
         * @param {SitePlatformsControllerAddAccount1VEnum} v Version
         * @param {SitePlatformsControllerAddAccount1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {SitePlatformsControllerAddAccount1PlatformEnum} platform Provider oauth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlatformsControllerAddAccount1(v, language, projectId, platform, options) {
            return localVarFp.sitePlatformsControllerAddAccount1(v, language, projectId, platform, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get category from the platform
         * @param {SitePlatformsControllerGetCategory1VEnum} v Version
         * @param {SitePlatformsControllerGetCategory1LanguageEnum} language Current language
         * @param {SitePlatformsControllerGetCategory1TypeEnum} type Category search bar
         * @param {string} [q] Category search bar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlatformsControllerGetCategory1(v, language, type, q, options) {
            return localVarFp.sitePlatformsControllerGetCategory1(v, language, type, q, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get category from the platform
         * @param {SitePlatformsControllerLogoutAccount1VEnum} v Version
         * @param {SitePlatformsControllerLogoutAccount1LanguageEnum} language Current language
         * @param {string} id Category search bar
         * @param {SitePlatformsControllerLogoutAccount1PlatformEnum} platform Provider oauth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlatformsControllerLogoutAccount1(v, language, id, platform, options) {
            return localVarFp.sitePlatformsControllerLogoutAccount1(v, language, id, platform, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Supported platforms
         * @param {SitePlatformsControllerPlatformList1VEnum} v Version
         * @param {SitePlatformsControllerPlatformList1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePlatformsControllerPlatformList1(v, language, options) {
            return localVarFp.sitePlatformsControllerPlatformList1(v, language, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PlatformsApiFactory = PlatformsApiFactory;
/**
 * PlatformsApi - object-oriented interface
 * @export
 * @class PlatformsApi
 * @extends {BaseAPI}
 */
class PlatformsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get url for start oauth
     * @param {SitePlatformsControllerAddAccount1VEnum} v Version
     * @param {SitePlatformsControllerAddAccount1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {SitePlatformsControllerAddAccount1PlatformEnum} platform Provider oauth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    sitePlatformsControllerAddAccount1(v, language, projectId, platform, options) {
        return (0, exports.PlatformsApiFp)(this.configuration).sitePlatformsControllerAddAccount1(v, language, projectId, platform, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get category from the platform
     * @param {SitePlatformsControllerGetCategory1VEnum} v Version
     * @param {SitePlatformsControllerGetCategory1LanguageEnum} language Current language
     * @param {SitePlatformsControllerGetCategory1TypeEnum} type Category search bar
     * @param {string} [q] Category search bar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    sitePlatformsControllerGetCategory1(v, language, type, q, options) {
        return (0, exports.PlatformsApiFp)(this.configuration).sitePlatformsControllerGetCategory1(v, language, type, q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get category from the platform
     * @param {SitePlatformsControllerLogoutAccount1VEnum} v Version
     * @param {SitePlatformsControllerLogoutAccount1LanguageEnum} language Current language
     * @param {string} id Category search bar
     * @param {SitePlatformsControllerLogoutAccount1PlatformEnum} platform Provider oauth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    sitePlatformsControllerLogoutAccount1(v, language, id, platform, options) {
        return (0, exports.PlatformsApiFp)(this.configuration).sitePlatformsControllerLogoutAccount1(v, language, id, platform, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Supported platforms
     * @param {SitePlatformsControllerPlatformList1VEnum} v Version
     * @param {SitePlatformsControllerPlatformList1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    sitePlatformsControllerPlatformList1(v, language, options) {
        return (0, exports.PlatformsApiFp)(this.configuration).sitePlatformsControllerPlatformList1(v, language, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PlatformsApi = PlatformsApi;
/**
 * @export
 */
exports.SitePlatformsControllerAddAccount1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlatformsControllerAddAccount1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePlatformsControllerAddAccount1PlatformEnum = {
    Vk: 'vk',
    VkId: 'vk-id',
    Ok: 'ok',
    Youtube: 'youtube',
    Trovo: 'trovo',
    Twitch: 'twitch'
};
/**
 * @export
 */
exports.SitePlatformsControllerGetCategory1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlatformsControllerGetCategory1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePlatformsControllerGetCategory1TypeEnum = {
    Vk: 'vk',
    Youtube: 'youtube',
    Trovo: 'trovo',
    Twitch: 'twitch',
    Vkvideolive: 'vkvideolive'
};
/**
 * @export
 */
exports.SitePlatformsControllerLogoutAccount1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlatformsControllerLogoutAccount1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePlatformsControllerLogoutAccount1PlatformEnum = {
    Vk: 'vk',
    VkId: 'vk-id',
    Ok: 'ok',
    Youtube: 'youtube',
    Trovo: 'trovo',
    Twitch: 'twitch'
};
/**
 * @export
 */
exports.SitePlatformsControllerPlatformList1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePlatformsControllerPlatformList1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * PolicyPageApi - axios parameter creator
 * @export
 */
const PolicyPageApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get policy page
         * @param {SitePolicyPageControllerGetItem1VEnum} v Version
         * @param {SitePolicyPageControllerGetItem1LanguageEnum} language Current language
         * @param {SitePolicyPageControllerGetItem1FileNameEnum} fileName Policy file name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePolicyPageControllerGetItem1: async (v, language, fileName, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePolicyPageControllerGetItem1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePolicyPageControllerGetItem1', 'language', language);
            // verify required parameter 'fileName' is not null or undefined
            (0, common_1.assertParamExists)('sitePolicyPageControllerGetItem1', 'fileName', fileName);
            const localVarPath = `/method/policy/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (fileName !== undefined) {
                localVarQueryParameter['file_name'] = fileName;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get policy structure
         * @param {SitePolicyPageControllerGetStructure1VEnum} v Version
         * @param {SitePolicyPageControllerGetStructure1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePolicyPageControllerGetStructure1: async (v, language, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('sitePolicyPageControllerGetStructure1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('sitePolicyPageControllerGetStructure1', 'language', language);
            const localVarPath = `/method/policy/structure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PolicyPageApiAxiosParamCreator = PolicyPageApiAxiosParamCreator;
/**
 * PolicyPageApi - functional programming interface
 * @export
 */
const PolicyPageApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PolicyPageApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get policy page
         * @param {SitePolicyPageControllerGetItem1VEnum} v Version
         * @param {SitePolicyPageControllerGetItem1LanguageEnum} language Current language
         * @param {SitePolicyPageControllerGetItem1FileNameEnum} fileName Policy file name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePolicyPageControllerGetItem1(v, language, fileName, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePolicyPageControllerGetItem1(v, language, fileName, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PolicyPageApi.sitePolicyPageControllerGetItem1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get policy structure
         * @param {SitePolicyPageControllerGetStructure1VEnum} v Version
         * @param {SitePolicyPageControllerGetStructure1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sitePolicyPageControllerGetStructure1(v, language, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sitePolicyPageControllerGetStructure1(v, language, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PolicyPageApi.sitePolicyPageControllerGetStructure1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PolicyPageApiFp = PolicyPageApiFp;
/**
 * PolicyPageApi - factory interface
 * @export
 */
const PolicyPageApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PolicyPageApiFp)(configuration);
    return {
        /**
         *
         * @summary Get policy page
         * @param {SitePolicyPageControllerGetItem1VEnum} v Version
         * @param {SitePolicyPageControllerGetItem1LanguageEnum} language Current language
         * @param {SitePolicyPageControllerGetItem1FileNameEnum} fileName Policy file name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePolicyPageControllerGetItem1(v, language, fileName, options) {
            return localVarFp.sitePolicyPageControllerGetItem1(v, language, fileName, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get policy structure
         * @param {SitePolicyPageControllerGetStructure1VEnum} v Version
         * @param {SitePolicyPageControllerGetStructure1LanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sitePolicyPageControllerGetStructure1(v, language, options) {
            return localVarFp.sitePolicyPageControllerGetStructure1(v, language, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PolicyPageApiFactory = PolicyPageApiFactory;
/**
 * PolicyPageApi - object-oriented interface
 * @export
 * @class PolicyPageApi
 * @extends {BaseAPI}
 */
class PolicyPageApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get policy page
     * @param {SitePolicyPageControllerGetItem1VEnum} v Version
     * @param {SitePolicyPageControllerGetItem1LanguageEnum} language Current language
     * @param {SitePolicyPageControllerGetItem1FileNameEnum} fileName Policy file name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyPageApi
     */
    sitePolicyPageControllerGetItem1(v, language, fileName, options) {
        return (0, exports.PolicyPageApiFp)(this.configuration).sitePolicyPageControllerGetItem1(v, language, fileName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get policy structure
     * @param {SitePolicyPageControllerGetStructure1VEnum} v Version
     * @param {SitePolicyPageControllerGetStructure1LanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyPageApi
     */
    sitePolicyPageControllerGetStructure1(v, language, options) {
        return (0, exports.PolicyPageApiFp)(this.configuration).sitePolicyPageControllerGetStructure1(v, language, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PolicyPageApi = PolicyPageApi;
/**
 * @export
 */
exports.SitePolicyPageControllerGetItem1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePolicyPageControllerGetItem1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SitePolicyPageControllerGetItem1FileNameEnum = {
    RefundPolicy: 'refund-policy',
    TermsOfUse: 'terms-of-use',
    UsingCookie: 'using-cookie',
    AcceptableUse: 'acceptable-use',
    PrivacyNotice: 'privacy-notice'
};
/**
 * @export
 */
exports.SitePolicyPageControllerGetStructure1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SitePolicyPageControllerGetStructure1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * ProjectApi - axios parameter creator
 * @export
 */
const ProjectApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get live status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodControllerLiveStatus: async (options = {}) => {
            const localVarPath = `/method/project/live-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication X-API-KEY required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ProjectApiAxiosParamCreator = ProjectApiAxiosParamCreator;
/**
 * ProjectApi - functional programming interface
 * @export
 */
const ProjectApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ProjectApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get live status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async methodControllerLiveStatus(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.methodControllerLiveStatus(options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectApi.methodControllerLiveStatus']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.ProjectApiFp = ProjectApiFp;
/**
 * ProjectApi - factory interface
 * @export
 */
const ProjectApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ProjectApiFp)(configuration);
    return {
        /**
         *
         * @summary Get live status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodControllerLiveStatus(options) {
            return localVarFp.methodControllerLiveStatus(options).then((request) => request(axios, basePath));
        },
    };
};
exports.ProjectApiFactory = ProjectApiFactory;
/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
class ProjectApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get live status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    methodControllerLiveStatus(options) {
        return (0, exports.ProjectApiFp)(this.configuration).methodControllerLiveStatus(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProjectApi = ProjectApi;
/**
 * ProjectChannelApi - axios parameter creator
 * @export
 */
const ProjectChannelApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Change access for project in channel
         * @param {SiteProjectChannelControllerChangeAccess1VEnum} v Version
         * @param {SiteProjectChannelControllerChangeAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {SiteProjectChannelControllerChangeAccess1AccessTypeEnum} accessType Access type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelControllerChangeAccess1: async (v, language, projectId, channelId, toProjectId, accessType, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerChangeAccess1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerChangeAccess1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerChangeAccess1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerChangeAccess1', 'channelId', channelId);
            // verify required parameter 'toProjectId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerChangeAccess1', 'toProjectId', toProjectId);
            // verify required parameter 'accessType' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerChangeAccess1', 'accessType', accessType);
            const localVarPath = `/method/channel/access/change`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (toProjectId !== undefined) {
                localVarQueryParameter['to_project_id'] = toProjectId;
            }
            if (accessType !== undefined) {
                localVarQueryParameter['access_type'] = accessType;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove access for project in channel
         * @param {SiteProjectChannelControllerDel1VEnum} v Version
         * @param {SiteProjectChannelControllerDel1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} targetProjectId Target project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelControllerDel1: async (v, language, projectId, channelId, targetProjectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerDel1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerDel1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerDel1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerDel1', 'channelId', channelId);
            // verify required parameter 'targetProjectId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerDel1', 'targetProjectId', targetProjectId);
            const localVarPath = `/method/channel/access/del`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (targetProjectId !== undefined) {
                localVarQueryParameter['target_project_id'] = targetProjectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Project channel list
         * @param {SiteProjectChannelControllerList1VEnum} v Version
         * @param {SiteProjectChannelControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelControllerList1: async (v, language, projectId, channelId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerList1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerList1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerList1', 'channelId', channelId);
            const localVarPath = `/method/channel/access/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Transfer owner for project in channel
         * @param {SiteProjectChannelControllerTransferOwner1VEnum} v Version
         * @param {SiteProjectChannelControllerTransferOwner1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelControllerTransferOwner1: async (v, language, projectId, channelId, toProjectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerTransferOwner1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerTransferOwner1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerTransferOwner1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerTransferOwner1', 'channelId', channelId);
            // verify required parameter 'toProjectId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelControllerTransferOwner1', 'toProjectId', toProjectId);
            const localVarPath = `/method/channel/access/transfer_owner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (toProjectId !== undefined) {
                localVarQueryParameter['to_project_id'] = toProjectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ProjectChannelApiAxiosParamCreator = ProjectChannelApiAxiosParamCreator;
/**
 * ProjectChannelApi - functional programming interface
 * @export
 */
const ProjectChannelApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ProjectChannelApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Change access for project in channel
         * @param {SiteProjectChannelControllerChangeAccess1VEnum} v Version
         * @param {SiteProjectChannelControllerChangeAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {SiteProjectChannelControllerChangeAccess1AccessTypeEnum} accessType Access type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteProjectChannelControllerChangeAccess1(v, language, projectId, channelId, toProjectId, accessType, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteProjectChannelControllerChangeAccess1(v, language, projectId, channelId, toProjectId, accessType, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelApi.siteProjectChannelControllerChangeAccess1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Remove access for project in channel
         * @param {SiteProjectChannelControllerDel1VEnum} v Version
         * @param {SiteProjectChannelControllerDel1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} targetProjectId Target project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteProjectChannelControllerDel1(v, language, projectId, channelId, targetProjectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteProjectChannelControllerDel1(v, language, projectId, channelId, targetProjectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelApi.siteProjectChannelControllerDel1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Project channel list
         * @param {SiteProjectChannelControllerList1VEnum} v Version
         * @param {SiteProjectChannelControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteProjectChannelControllerList1(v, language, projectId, channelId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteProjectChannelControllerList1(v, language, projectId, channelId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelApi.siteProjectChannelControllerList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Transfer owner for project in channel
         * @param {SiteProjectChannelControllerTransferOwner1VEnum} v Version
         * @param {SiteProjectChannelControllerTransferOwner1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteProjectChannelControllerTransferOwner1(v, language, projectId, channelId, toProjectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteProjectChannelControllerTransferOwner1(v, language, projectId, channelId, toProjectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelApi.siteProjectChannelControllerTransferOwner1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.ProjectChannelApiFp = ProjectChannelApiFp;
/**
 * ProjectChannelApi - factory interface
 * @export
 */
const ProjectChannelApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ProjectChannelApiFp)(configuration);
    return {
        /**
         *
         * @summary Change access for project in channel
         * @param {SiteProjectChannelControllerChangeAccess1VEnum} v Version
         * @param {SiteProjectChannelControllerChangeAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {SiteProjectChannelControllerChangeAccess1AccessTypeEnum} accessType Access type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelControllerChangeAccess1(v, language, projectId, channelId, toProjectId, accessType, options) {
            return localVarFp.siteProjectChannelControllerChangeAccess1(v, language, projectId, channelId, toProjectId, accessType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Remove access for project in channel
         * @param {SiteProjectChannelControllerDel1VEnum} v Version
         * @param {SiteProjectChannelControllerDel1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} targetProjectId Target project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelControllerDel1(v, language, projectId, channelId, targetProjectId, options) {
            return localVarFp.siteProjectChannelControllerDel1(v, language, projectId, channelId, targetProjectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Project channel list
         * @param {SiteProjectChannelControllerList1VEnum} v Version
         * @param {SiteProjectChannelControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelControllerList1(v, language, projectId, channelId, options) {
            return localVarFp.siteProjectChannelControllerList1(v, language, projectId, channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Transfer owner for project in channel
         * @param {SiteProjectChannelControllerTransferOwner1VEnum} v Version
         * @param {SiteProjectChannelControllerTransferOwner1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {number} toProjectId Target project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelControllerTransferOwner1(v, language, projectId, channelId, toProjectId, options) {
            return localVarFp.siteProjectChannelControllerTransferOwner1(v, language, projectId, channelId, toProjectId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ProjectChannelApiFactory = ProjectChannelApiFactory;
/**
 * ProjectChannelApi - object-oriented interface
 * @export
 * @class ProjectChannelApi
 * @extends {BaseAPI}
 */
class ProjectChannelApi extends base_1.BaseAPI {
    /**
     *
     * @summary Change access for project in channel
     * @param {SiteProjectChannelControllerChangeAccess1VEnum} v Version
     * @param {SiteProjectChannelControllerChangeAccess1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} toProjectId Target project id
     * @param {SiteProjectChannelControllerChangeAccess1AccessTypeEnum} accessType Access type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    siteProjectChannelControllerChangeAccess1(v, language, projectId, channelId, toProjectId, accessType, options) {
        return (0, exports.ProjectChannelApiFp)(this.configuration).siteProjectChannelControllerChangeAccess1(v, language, projectId, channelId, toProjectId, accessType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Remove access for project in channel
     * @param {SiteProjectChannelControllerDel1VEnum} v Version
     * @param {SiteProjectChannelControllerDel1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} targetProjectId Target project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    siteProjectChannelControllerDel1(v, language, projectId, channelId, targetProjectId, options) {
        return (0, exports.ProjectChannelApiFp)(this.configuration).siteProjectChannelControllerDel1(v, language, projectId, channelId, targetProjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Project channel list
     * @param {SiteProjectChannelControllerList1VEnum} v Version
     * @param {SiteProjectChannelControllerList1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    siteProjectChannelControllerList1(v, language, projectId, channelId, options) {
        return (0, exports.ProjectChannelApiFp)(this.configuration).siteProjectChannelControllerList1(v, language, projectId, channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Transfer owner for project in channel
     * @param {SiteProjectChannelControllerTransferOwner1VEnum} v Version
     * @param {SiteProjectChannelControllerTransferOwner1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {number} toProjectId Target project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelApi
     */
    siteProjectChannelControllerTransferOwner1(v, language, projectId, channelId, toProjectId, options) {
        return (0, exports.ProjectChannelApiFp)(this.configuration).siteProjectChannelControllerTransferOwner1(v, language, projectId, channelId, toProjectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProjectChannelApi = ProjectChannelApi;
/**
 * @export
 */
exports.SiteProjectChannelControllerChangeAccess1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteProjectChannelControllerChangeAccess1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteProjectChannelControllerChangeAccess1AccessTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_12: 1,
    NUMBER_2: 2
};
/**
 * @export
 */
exports.SiteProjectChannelControllerDel1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteProjectChannelControllerDel1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteProjectChannelControllerList1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteProjectChannelControllerList1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteProjectChannelControllerTransferOwner1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteProjectChannelControllerTransferOwner1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * ProjectChannelInviteApi - axios parameter creator
 * @export
 */
const ProjectChannelInviteApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Accept channel invitation for selected project
         * @param {SiteProjectChannelInviteControllerAcceptForProject1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerAcceptForProject1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerAcceptForProject1: async (v, language, projectId, channelId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAcceptForProject1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAcceptForProject1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAcceptForProject1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAcceptForProject1', 'channelId', channelId);
            const localVarPath = `/method/channel_invite/accept_for_project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Accept channel invitation using a secret link
         * @param {SiteProjectChannelInviteControllerAcceptForSecret1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerAcceptForSecret1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerAcceptForSecret1: async (v, language, projectId, channelId, secret, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAcceptForSecret1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAcceptForSecret1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAcceptForSecret1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAcceptForSecret1', 'channelId', channelId);
            // verify required parameter 'secret' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAcceptForSecret1', 'secret', secret);
            const localVarPath = `/method/channel_invite/accept_for_secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (secret !== undefined) {
                localVarQueryParameter['secret'] = secret;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Add channel invite item for another user by email
         * @param {SiteProjectChannelInviteControllerAddByEmail1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerAddByEmail1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {string} email Email
         * @param {SiteProjectChannelInviteControllerAddByEmail1AccessTypeEnum} accessType Access type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerAddByEmail1: async (v, language, projectId, channelId, email, accessType, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAddByEmail1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAddByEmail1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAddByEmail1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAddByEmail1', 'channelId', channelId);
            // verify required parameter 'email' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAddByEmail1', 'email', email);
            // verify required parameter 'accessType' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAddByEmail1', 'accessType', accessType);
            const localVarPath = `/method/channel_invite/add_by_email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            if (accessType !== undefined) {
                localVarQueryParameter['access_type'] = accessType;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Add channel invite item for another user by id
         * @param {SiteProjectChannelInviteControllerAddById1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerAddById1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {SiteProjectChannelInviteControllerAddById1AccessTypeEnum} accessType Access type
         * @param {string} toProjectExternalId Project for get access by external id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerAddById1: async (v, language, projectId, channelId, accessType, toProjectExternalId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAddById1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAddById1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAddById1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAddById1', 'channelId', channelId);
            // verify required parameter 'accessType' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAddById1', 'accessType', accessType);
            // verify required parameter 'toProjectExternalId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerAddById1', 'toProjectExternalId', toProjectExternalId);
            const localVarPath = `/method/channel_invite/add_by_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (accessType !== undefined) {
                localVarQueryParameter['access_type'] = accessType;
            }
            if (toProjectExternalId !== undefined) {
                localVarQueryParameter['to_project_external_id'] = toProjectExternalId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Decline channel invitation for selected project
         * @param {SiteProjectChannelInviteControllerDeclineForProject1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerDeclineForProject1LanguageEnum} language Current language
         * @param {number} projectId Channel id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerDeclineForProject1: async (v, language, projectId, channelId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerDeclineForProject1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerDeclineForProject1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerDeclineForProject1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerDeclineForProject1', 'channelId', channelId);
            const localVarPath = `/method/channel_invite/decline_for_project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Decline channel invitation using a secret link
         * @param {SiteProjectChannelInviteControllerDeclineForSecret1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerDeclineForSecret1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerDeclineForSecret1: async (v, language, projectId, channelId, secret, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerDeclineForSecret1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerDeclineForSecret1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerDeclineForSecret1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerDeclineForSecret1', 'channelId', channelId);
            // verify required parameter 'secret' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerDeclineForSecret1', 'secret', secret);
            const localVarPath = `/method/channel_invite/decline_for_secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (secret !== undefined) {
                localVarQueryParameter['secret'] = secret;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Del channel invite item for my channel for another user
         * @param {SiteProjectChannelInviteControllerDel1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerDel1LanguageEnum} language Current language
         * @param {number} id Unique id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerDel1: async (v, language, id, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerDel1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerDel1', 'language', language);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerDel1', 'id', id);
            const localVarPath = `/method/channel_invite/del`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get channel invite item for my channel for another user
         * @param {SiteProjectChannelInviteControllerGet1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerGet1LanguageEnum} language Current language
         * @param {number} id Channel request id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerGet1: async (v, language, id, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerGet1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerGet1', 'language', language);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerGet1', 'id', id);
            const localVarPath = `/method/channel_invite/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get invitation for channel
         * @param {SiteProjectChannelInviteControllerGetForProject1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerGetForProject1LanguageEnum} language Current language
         * @param {number} projectId Current project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerGetForProject1: async (v, language, projectId, channelId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerGetForProject1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerGetForProject1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerGetForProject1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerGetForProject1', 'channelId', channelId);
            const localVarPath = `/method/channel_invite/get_for_project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get channel invitation using a secret link
         * @param {SiteProjectChannelInviteControllerGetForSecret1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerGetForSecret1LanguageEnum} language Current language
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerGetForSecret1: async (v, language, channelId, secret, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerGetForSecret1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerGetForSecret1', 'language', language);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerGetForSecret1', 'channelId', channelId);
            // verify required parameter 'secret' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerGetForSecret1', 'secret', secret);
            const localVarPath = `/method/channel_invite/get_for_secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (secret !== undefined) {
                localVarQueryParameter['secret'] = secret;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of invites for channel in project
         * @param {SiteProjectChannelInviteControllerList1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerList1: async (v, language, projectId, channelId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerList1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerList1', 'projectId', projectId);
            // verify required parameter 'channelId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectChannelInviteControllerList1', 'channelId', channelId);
            const localVarPath = `/method/channel_invite/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ProjectChannelInviteApiAxiosParamCreator = ProjectChannelInviteApiAxiosParamCreator;
/**
 * ProjectChannelInviteApi - functional programming interface
 * @export
 */
const ProjectChannelInviteApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ProjectChannelInviteApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Accept channel invitation for selected project
         * @param {SiteProjectChannelInviteControllerAcceptForProject1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerAcceptForProject1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteProjectChannelInviteControllerAcceptForProject1(v, language, projectId, channelId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteProjectChannelInviteControllerAcceptForProject1(v, language, projectId, channelId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.siteProjectChannelInviteControllerAcceptForProject1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Accept channel invitation using a secret link
         * @param {SiteProjectChannelInviteControllerAcceptForSecret1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerAcceptForSecret1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteProjectChannelInviteControllerAcceptForSecret1(v, language, projectId, channelId, secret, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteProjectChannelInviteControllerAcceptForSecret1(v, language, projectId, channelId, secret, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.siteProjectChannelInviteControllerAcceptForSecret1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Add channel invite item for another user by email
         * @param {SiteProjectChannelInviteControllerAddByEmail1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerAddByEmail1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {string} email Email
         * @param {SiteProjectChannelInviteControllerAddByEmail1AccessTypeEnum} accessType Access type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteProjectChannelInviteControllerAddByEmail1(v, language, projectId, channelId, email, accessType, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteProjectChannelInviteControllerAddByEmail1(v, language, projectId, channelId, email, accessType, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.siteProjectChannelInviteControllerAddByEmail1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Add channel invite item for another user by id
         * @param {SiteProjectChannelInviteControllerAddById1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerAddById1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {SiteProjectChannelInviteControllerAddById1AccessTypeEnum} accessType Access type
         * @param {string} toProjectExternalId Project for get access by external id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteProjectChannelInviteControllerAddById1(v, language, projectId, channelId, accessType, toProjectExternalId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteProjectChannelInviteControllerAddById1(v, language, projectId, channelId, accessType, toProjectExternalId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.siteProjectChannelInviteControllerAddById1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Decline channel invitation for selected project
         * @param {SiteProjectChannelInviteControllerDeclineForProject1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerDeclineForProject1LanguageEnum} language Current language
         * @param {number} projectId Channel id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteProjectChannelInviteControllerDeclineForProject1(v, language, projectId, channelId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteProjectChannelInviteControllerDeclineForProject1(v, language, projectId, channelId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.siteProjectChannelInviteControllerDeclineForProject1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Decline channel invitation using a secret link
         * @param {SiteProjectChannelInviteControllerDeclineForSecret1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerDeclineForSecret1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteProjectChannelInviteControllerDeclineForSecret1(v, language, projectId, channelId, secret, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteProjectChannelInviteControllerDeclineForSecret1(v, language, projectId, channelId, secret, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.siteProjectChannelInviteControllerDeclineForSecret1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Del channel invite item for my channel for another user
         * @param {SiteProjectChannelInviteControllerDel1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerDel1LanguageEnum} language Current language
         * @param {number} id Unique id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteProjectChannelInviteControllerDel1(v, language, id, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteProjectChannelInviteControllerDel1(v, language, id, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.siteProjectChannelInviteControllerDel1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get channel invite item for my channel for another user
         * @param {SiteProjectChannelInviteControllerGet1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerGet1LanguageEnum} language Current language
         * @param {number} id Channel request id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteProjectChannelInviteControllerGet1(v, language, id, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteProjectChannelInviteControllerGet1(v, language, id, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.siteProjectChannelInviteControllerGet1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get invitation for channel
         * @param {SiteProjectChannelInviteControllerGetForProject1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerGetForProject1LanguageEnum} language Current language
         * @param {number} projectId Current project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteProjectChannelInviteControllerGetForProject1(v, language, projectId, channelId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteProjectChannelInviteControllerGetForProject1(v, language, projectId, channelId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.siteProjectChannelInviteControllerGetForProject1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get channel invitation using a secret link
         * @param {SiteProjectChannelInviteControllerGetForSecret1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerGetForSecret1LanguageEnum} language Current language
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteProjectChannelInviteControllerGetForSecret1(v, language, channelId, secret, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteProjectChannelInviteControllerGetForSecret1(v, language, channelId, secret, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.siteProjectChannelInviteControllerGetForSecret1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary List of invites for channel in project
         * @param {SiteProjectChannelInviteControllerList1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteProjectChannelInviteControllerList1(v, language, projectId, channelId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteProjectChannelInviteControllerList1(v, language, projectId, channelId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectChannelInviteApi.siteProjectChannelInviteControllerList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.ProjectChannelInviteApiFp = ProjectChannelInviteApiFp;
/**
 * ProjectChannelInviteApi - factory interface
 * @export
 */
const ProjectChannelInviteApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ProjectChannelInviteApiFp)(configuration);
    return {
        /**
         *
         * @summary Accept channel invitation for selected project
         * @param {SiteProjectChannelInviteControllerAcceptForProject1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerAcceptForProject1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerAcceptForProject1(v, language, projectId, channelId, options) {
            return localVarFp.siteProjectChannelInviteControllerAcceptForProject1(v, language, projectId, channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Accept channel invitation using a secret link
         * @param {SiteProjectChannelInviteControllerAcceptForSecret1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerAcceptForSecret1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerAcceptForSecret1(v, language, projectId, channelId, secret, options) {
            return localVarFp.siteProjectChannelInviteControllerAcceptForSecret1(v, language, projectId, channelId, secret, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Add channel invite item for another user by email
         * @param {SiteProjectChannelInviteControllerAddByEmail1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerAddByEmail1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {string} email Email
         * @param {SiteProjectChannelInviteControllerAddByEmail1AccessTypeEnum} accessType Access type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerAddByEmail1(v, language, projectId, channelId, email, accessType, options) {
            return localVarFp.siteProjectChannelInviteControllerAddByEmail1(v, language, projectId, channelId, email, accessType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Add channel invite item for another user by id
         * @param {SiteProjectChannelInviteControllerAddById1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerAddById1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {SiteProjectChannelInviteControllerAddById1AccessTypeEnum} accessType Access type
         * @param {string} toProjectExternalId Project for get access by external id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerAddById1(v, language, projectId, channelId, accessType, toProjectExternalId, options) {
            return localVarFp.siteProjectChannelInviteControllerAddById1(v, language, projectId, channelId, accessType, toProjectExternalId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Decline channel invitation for selected project
         * @param {SiteProjectChannelInviteControllerDeclineForProject1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerDeclineForProject1LanguageEnum} language Current language
         * @param {number} projectId Channel id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerDeclineForProject1(v, language, projectId, channelId, options) {
            return localVarFp.siteProjectChannelInviteControllerDeclineForProject1(v, language, projectId, channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Decline channel invitation using a secret link
         * @param {SiteProjectChannelInviteControllerDeclineForSecret1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerDeclineForSecret1LanguageEnum} language Current language
         * @param {number} projectId The project to which you want to add a channel
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerDeclineForSecret1(v, language, projectId, channelId, secret, options) {
            return localVarFp.siteProjectChannelInviteControllerDeclineForSecret1(v, language, projectId, channelId, secret, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Del channel invite item for my channel for another user
         * @param {SiteProjectChannelInviteControllerDel1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerDel1LanguageEnum} language Current language
         * @param {number} id Unique id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerDel1(v, language, id, options) {
            return localVarFp.siteProjectChannelInviteControllerDel1(v, language, id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get channel invite item for my channel for another user
         * @param {SiteProjectChannelInviteControllerGet1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerGet1LanguageEnum} language Current language
         * @param {number} id Channel request id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerGet1(v, language, id, options) {
            return localVarFp.siteProjectChannelInviteControllerGet1(v, language, id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get invitation for channel
         * @param {SiteProjectChannelInviteControllerGetForProject1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerGetForProject1LanguageEnum} language Current language
         * @param {number} projectId Current project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerGetForProject1(v, language, projectId, channelId, options) {
            return localVarFp.siteProjectChannelInviteControllerGetForProject1(v, language, projectId, channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get channel invitation using a secret link
         * @param {SiteProjectChannelInviteControllerGetForSecret1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerGetForSecret1LanguageEnum} language Current language
         * @param {number} channelId Channel id
         * @param {string} secret Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerGetForSecret1(v, language, channelId, secret, options) {
            return localVarFp.siteProjectChannelInviteControllerGetForSecret1(v, language, channelId, secret, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List of invites for channel in project
         * @param {SiteProjectChannelInviteControllerList1VEnum} v Version
         * @param {SiteProjectChannelInviteControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} channelId Channel id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectChannelInviteControllerList1(v, language, projectId, channelId, options) {
            return localVarFp.siteProjectChannelInviteControllerList1(v, language, projectId, channelId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ProjectChannelInviteApiFactory = ProjectChannelInviteApiFactory;
/**
 * ProjectChannelInviteApi - object-oriented interface
 * @export
 * @class ProjectChannelInviteApi
 * @extends {BaseAPI}
 */
class ProjectChannelInviteApi extends base_1.BaseAPI {
    /**
     *
     * @summary Accept channel invitation for selected project
     * @param {SiteProjectChannelInviteControllerAcceptForProject1VEnum} v Version
     * @param {SiteProjectChannelInviteControllerAcceptForProject1LanguageEnum} language Current language
     * @param {number} projectId The project to which you want to add a channel
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    siteProjectChannelInviteControllerAcceptForProject1(v, language, projectId, channelId, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).siteProjectChannelInviteControllerAcceptForProject1(v, language, projectId, channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Accept channel invitation using a secret link
     * @param {SiteProjectChannelInviteControllerAcceptForSecret1VEnum} v Version
     * @param {SiteProjectChannelInviteControllerAcceptForSecret1LanguageEnum} language Current language
     * @param {number} projectId The project to which you want to add a channel
     * @param {number} channelId Channel id
     * @param {string} secret Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    siteProjectChannelInviteControllerAcceptForSecret1(v, language, projectId, channelId, secret, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).siteProjectChannelInviteControllerAcceptForSecret1(v, language, projectId, channelId, secret, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Add channel invite item for another user by email
     * @param {SiteProjectChannelInviteControllerAddByEmail1VEnum} v Version
     * @param {SiteProjectChannelInviteControllerAddByEmail1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {string} email Email
     * @param {SiteProjectChannelInviteControllerAddByEmail1AccessTypeEnum} accessType Access type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    siteProjectChannelInviteControllerAddByEmail1(v, language, projectId, channelId, email, accessType, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).siteProjectChannelInviteControllerAddByEmail1(v, language, projectId, channelId, email, accessType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Add channel invite item for another user by id
     * @param {SiteProjectChannelInviteControllerAddById1VEnum} v Version
     * @param {SiteProjectChannelInviteControllerAddById1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {SiteProjectChannelInviteControllerAddById1AccessTypeEnum} accessType Access type
     * @param {string} toProjectExternalId Project for get access by external id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    siteProjectChannelInviteControllerAddById1(v, language, projectId, channelId, accessType, toProjectExternalId, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).siteProjectChannelInviteControllerAddById1(v, language, projectId, channelId, accessType, toProjectExternalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Decline channel invitation for selected project
     * @param {SiteProjectChannelInviteControllerDeclineForProject1VEnum} v Version
     * @param {SiteProjectChannelInviteControllerDeclineForProject1LanguageEnum} language Current language
     * @param {number} projectId Channel id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    siteProjectChannelInviteControllerDeclineForProject1(v, language, projectId, channelId, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).siteProjectChannelInviteControllerDeclineForProject1(v, language, projectId, channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Decline channel invitation using a secret link
     * @param {SiteProjectChannelInviteControllerDeclineForSecret1VEnum} v Version
     * @param {SiteProjectChannelInviteControllerDeclineForSecret1LanguageEnum} language Current language
     * @param {number} projectId The project to which you want to add a channel
     * @param {number} channelId Channel id
     * @param {string} secret Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    siteProjectChannelInviteControllerDeclineForSecret1(v, language, projectId, channelId, secret, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).siteProjectChannelInviteControllerDeclineForSecret1(v, language, projectId, channelId, secret, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Del channel invite item for my channel for another user
     * @param {SiteProjectChannelInviteControllerDel1VEnum} v Version
     * @param {SiteProjectChannelInviteControllerDel1LanguageEnum} language Current language
     * @param {number} id Unique id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    siteProjectChannelInviteControllerDel1(v, language, id, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).siteProjectChannelInviteControllerDel1(v, language, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get channel invite item for my channel for another user
     * @param {SiteProjectChannelInviteControllerGet1VEnum} v Version
     * @param {SiteProjectChannelInviteControllerGet1LanguageEnum} language Current language
     * @param {number} id Channel request id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    siteProjectChannelInviteControllerGet1(v, language, id, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).siteProjectChannelInviteControllerGet1(v, language, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get invitation for channel
     * @param {SiteProjectChannelInviteControllerGetForProject1VEnum} v Version
     * @param {SiteProjectChannelInviteControllerGetForProject1LanguageEnum} language Current language
     * @param {number} projectId Current project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    siteProjectChannelInviteControllerGetForProject1(v, language, projectId, channelId, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).siteProjectChannelInviteControllerGetForProject1(v, language, projectId, channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get channel invitation using a secret link
     * @param {SiteProjectChannelInviteControllerGetForSecret1VEnum} v Version
     * @param {SiteProjectChannelInviteControllerGetForSecret1LanguageEnum} language Current language
     * @param {number} channelId Channel id
     * @param {string} secret Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    siteProjectChannelInviteControllerGetForSecret1(v, language, channelId, secret, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).siteProjectChannelInviteControllerGetForSecret1(v, language, channelId, secret, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List of invites for channel in project
     * @param {SiteProjectChannelInviteControllerList1VEnum} v Version
     * @param {SiteProjectChannelInviteControllerList1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} channelId Channel id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectChannelInviteApi
     */
    siteProjectChannelInviteControllerList1(v, language, projectId, channelId, options) {
        return (0, exports.ProjectChannelInviteApiFp)(this.configuration).siteProjectChannelInviteControllerList1(v, language, projectId, channelId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProjectChannelInviteApi = ProjectChannelInviteApi;
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerAcceptForProject1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerAcceptForProject1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerAcceptForSecret1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerAcceptForSecret1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerAddByEmail1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerAddByEmail1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerAddByEmail1AccessTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_12: 1,
    NUMBER_2: 2
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerAddById1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerAddById1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerAddById1AccessTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_12: 1,
    NUMBER_2: 2
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerDeclineForProject1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerDeclineForProject1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerDeclineForSecret1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerDeclineForSecret1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerDel1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerDel1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerGet1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerGet1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerGetForProject1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerGetForProject1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerGetForSecret1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerGetForSecret1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerList1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteProjectChannelInviteControllerList1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * ProjectHistoryApi - axios parameter creator
 * @export
 */
const ProjectHistoryApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get project history of actions
         * @param {SiteProjectHistoryControllerList1VEnum} v Version
         * @param {SiteProjectHistoryControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {SiteProjectHistoryControllerList1ActionEnum} [action] Action
         * @param {number} [groupId] Group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectHistoryControllerList1: async (v, language, projectId, limit, offset, dateFrom, dateTo, action, groupId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectHistoryControllerList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectHistoryControllerList1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteProjectHistoryControllerList1', 'projectId', projectId);
            const localVarPath = `/method/project_history/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom instanceof Date) ?
                    dateFrom.toISOString() :
                    dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo instanceof Date) ?
                    dateTo.toISOString() :
                    dateTo;
            }
            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }
            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ProjectHistoryApiAxiosParamCreator = ProjectHistoryApiAxiosParamCreator;
/**
 * ProjectHistoryApi - functional programming interface
 * @export
 */
const ProjectHistoryApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ProjectHistoryApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get project history of actions
         * @param {SiteProjectHistoryControllerList1VEnum} v Version
         * @param {SiteProjectHistoryControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {SiteProjectHistoryControllerList1ActionEnum} [action] Action
         * @param {number} [groupId] Group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteProjectHistoryControllerList1(v, language, projectId, limit, offset, dateFrom, dateTo, action, groupId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteProjectHistoryControllerList1(v, language, projectId, limit, offset, dateFrom, dateTo, action, groupId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProjectHistoryApi.siteProjectHistoryControllerList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.ProjectHistoryApiFp = ProjectHistoryApiFp;
/**
 * ProjectHistoryApi - factory interface
 * @export
 */
const ProjectHistoryApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ProjectHistoryApiFp)(configuration);
    return {
        /**
         *
         * @summary Get project history of actions
         * @param {SiteProjectHistoryControllerList1VEnum} v Version
         * @param {SiteProjectHistoryControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {SiteProjectHistoryControllerList1ActionEnum} [action] Action
         * @param {number} [groupId] Group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteProjectHistoryControllerList1(v, language, projectId, limit, offset, dateFrom, dateTo, action, groupId, options) {
            return localVarFp.siteProjectHistoryControllerList1(v, language, projectId, limit, offset, dateFrom, dateTo, action, groupId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ProjectHistoryApiFactory = ProjectHistoryApiFactory;
/**
 * ProjectHistoryApi - object-oriented interface
 * @export
 * @class ProjectHistoryApi
 * @extends {BaseAPI}
 */
class ProjectHistoryApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get project history of actions
     * @param {SiteProjectHistoryControllerList1VEnum} v Version
     * @param {SiteProjectHistoryControllerList1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {string} [dateFrom] Date from
     * @param {string} [dateTo] Date to
     * @param {SiteProjectHistoryControllerList1ActionEnum} [action] Action
     * @param {number} [groupId] Group id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectHistoryApi
     */
    siteProjectHistoryControllerList1(v, language, projectId, limit, offset, dateFrom, dateTo, action, groupId, options) {
        return (0, exports.ProjectHistoryApiFp)(this.configuration).siteProjectHistoryControllerList1(v, language, projectId, limit, offset, dateFrom, dateTo, action, groupId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProjectHistoryApi = ProjectHistoryApi;
/**
 * @export
 */
exports.SiteProjectHistoryControllerList1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteProjectHistoryControllerList1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteProjectHistoryControllerList1ActionEnum = {
    ProjectChannelInviteAdd: 'project_channel_invite_add',
    ProjectChannelInviteDel: 'project_channel_invite_del',
    ProjectChannelInviteAccept: 'project_channel_invite_accept',
    ProjectChannelInviteDecline: 'project_channel_invite_decline',
    UserProjectInviteAdd: 'user_project_invite_add',
    UserProjectInviteDel: 'user_project_invite_del',
    UserProjectInviteAccept: 'user_project_invite_accept',
    UserProjectInviteDecline: 'user_project_invite_decline',
    UserProjectAdd: 'user_project_add',
    UserProjectDel: 'user_project_del',
    UserProjectChange: 'user_project_change',
    ProjectChannelAdd: 'project_channel_add',
    ProjectChannelDel: 'project_channel_del',
    ProjectChannelChange: 'project_channel_change'
};
/**
 * PromoApi - axios parameter creator
 * @export
 */
const PromoApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Apply code
         * @param {PromoControllerApply1VEnum} v Version
         * @param {PromoControllerApply1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} code Code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoControllerApply1: async (v, language, projectId, code, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('promoControllerApply1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('promoControllerApply1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('promoControllerApply1', 'projectId', projectId);
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('promoControllerApply1', 'code', code);
            const localVarPath = `/method/promo/apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Check code
         * @param {PromoControllerCheck1VEnum} v Version
         * @param {PromoControllerCheck1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} code Code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoControllerCheck1: async (v, language, projectId, code, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('promoControllerCheck1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('promoControllerCheck1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('promoControllerCheck1', 'projectId', projectId);
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('promoControllerCheck1', 'code', code);
            const localVarPath = `/method/promo/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PromoApiAxiosParamCreator = PromoApiAxiosParamCreator;
/**
 * PromoApi - functional programming interface
 * @export
 */
const PromoApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PromoApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Apply code
         * @param {PromoControllerApply1VEnum} v Version
         * @param {PromoControllerApply1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} code Code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promoControllerApply1(v, language, projectId, code, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.promoControllerApply1(v, language, projectId, code, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PromoApi.promoControllerApply1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Check code
         * @param {PromoControllerCheck1VEnum} v Version
         * @param {PromoControllerCheck1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} code Code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promoControllerCheck1(v, language, projectId, code, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.promoControllerCheck1(v, language, projectId, code, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PromoApi.promoControllerCheck1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PromoApiFp = PromoApiFp;
/**
 * PromoApi - factory interface
 * @export
 */
const PromoApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PromoApiFp)(configuration);
    return {
        /**
         *
         * @summary Apply code
         * @param {PromoControllerApply1VEnum} v Version
         * @param {PromoControllerApply1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} code Code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoControllerApply1(v, language, projectId, code, options) {
            return localVarFp.promoControllerApply1(v, language, projectId, code, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Check code
         * @param {PromoControllerCheck1VEnum} v Version
         * @param {PromoControllerCheck1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} code Code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoControllerCheck1(v, language, projectId, code, options) {
            return localVarFp.promoControllerCheck1(v, language, projectId, code, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PromoApiFactory = PromoApiFactory;
/**
 * PromoApi - object-oriented interface
 * @export
 * @class PromoApi
 * @extends {BaseAPI}
 */
class PromoApi extends base_1.BaseAPI {
    /**
     *
     * @summary Apply code
     * @param {PromoControllerApply1VEnum} v Version
     * @param {PromoControllerApply1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} code Code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromoApi
     */
    promoControllerApply1(v, language, projectId, code, options) {
        return (0, exports.PromoApiFp)(this.configuration).promoControllerApply1(v, language, projectId, code, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Check code
     * @param {PromoControllerCheck1VEnum} v Version
     * @param {PromoControllerCheck1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} code Code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromoApi
     */
    promoControllerCheck1(v, language, projectId, code, options) {
        return (0, exports.PromoApiFp)(this.configuration).promoControllerCheck1(v, language, projectId, code, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PromoApi = PromoApi;
/**
 * @export
 */
exports.PromoControllerApply1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PromoControllerApply1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.PromoControllerCheck1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.PromoControllerCheck1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * PullServersApi - axios parameter creator
 * @export
 */
const PullServersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get pull servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullServersControllerGetPullServers1: async (options = {}) => {
            const localVarPath = `/method/pull-servers/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PullServersApiAxiosParamCreator = PullServersApiAxiosParamCreator;
/**
 * PullServersApi - functional programming interface
 * @export
 */
const PullServersApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PullServersApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get pull servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pullServersControllerGetPullServers1(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.pullServersControllerGetPullServers1(options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PullServersApi.pullServersControllerGetPullServers1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PullServersApiFp = PullServersApiFp;
/**
 * PullServersApi - factory interface
 * @export
 */
const PullServersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PullServersApiFp)(configuration);
    return {
        /**
         *
         * @summary Get pull servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullServersControllerGetPullServers1(options) {
            return localVarFp.pullServersControllerGetPullServers1(options).then((request) => request(axios, basePath));
        },
    };
};
exports.PullServersApiFactory = PullServersApiFactory;
/**
 * PullServersApi - object-oriented interface
 * @export
 * @class PullServersApi
 * @extends {BaseAPI}
 */
class PullServersApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get pull servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PullServersApi
     */
    pullServersControllerGetPullServers1(options) {
        return (0, exports.PullServersApiFp)(this.configuration).pullServersControllerGetPullServers1(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PullServersApi = PullServersApi;
/**
 * ReferralsApi - axios parameter creator
 * @export
 */
const ReferralsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Total info
         * @param {SiteReferralsControllerTotalInfo1VEnum} v Version
         * @param {SiteReferralsControllerTotalInfo1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteReferralsControllerTotalInfo1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteReferralsControllerTotalInfo1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteReferralsControllerTotalInfo1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteReferralsControllerTotalInfo1', 'projectId', projectId);
            const localVarPath = `/method/referrals/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ReferralsApiAxiosParamCreator = ReferralsApiAxiosParamCreator;
/**
 * ReferralsApi - functional programming interface
 * @export
 */
const ReferralsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ReferralsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Total info
         * @param {SiteReferralsControllerTotalInfo1VEnum} v Version
         * @param {SiteReferralsControllerTotalInfo1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteReferralsControllerTotalInfo1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteReferralsControllerTotalInfo1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ReferralsApi.siteReferralsControllerTotalInfo1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.ReferralsApiFp = ReferralsApiFp;
/**
 * ReferralsApi - factory interface
 * @export
 */
const ReferralsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ReferralsApiFp)(configuration);
    return {
        /**
         *
         * @summary Total info
         * @param {SiteReferralsControllerTotalInfo1VEnum} v Version
         * @param {SiteReferralsControllerTotalInfo1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteReferralsControllerTotalInfo1(v, language, projectId, options) {
            return localVarFp.siteReferralsControllerTotalInfo1(v, language, projectId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ReferralsApiFactory = ReferralsApiFactory;
/**
 * ReferralsApi - object-oriented interface
 * @export
 * @class ReferralsApi
 * @extends {BaseAPI}
 */
class ReferralsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Total info
     * @param {SiteReferralsControllerTotalInfo1VEnum} v Version
     * @param {SiteReferralsControllerTotalInfo1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    siteReferralsControllerTotalInfo1(v, language, projectId, options) {
        return (0, exports.ReferralsApiFp)(this.configuration).siteReferralsControllerTotalInfo1(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ReferralsApi = ReferralsApi;
/**
 * @export
 */
exports.SiteReferralsControllerTotalInfo1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteReferralsControllerTotalInfo1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * ReleaseApi - axios parameter creator
 * @export
 */
const ReleaseApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get current version app
         * @param {SiteReleaseAppControllerCabinet1VEnum} v Version
         * @param {SiteReleaseAppControllerCabinet1LanguageEnum} language Current language
         * @param {SiteReleaseAppControllerCabinet1AppEnum} [app] Apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteReleaseAppControllerCabinet1: async (v, language, app, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteReleaseAppControllerCabinet1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteReleaseAppControllerCabinet1', 'language', language);
            const localVarPath = `/method/release-app`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (app !== undefined) {
                localVarQueryParameter['app'] = app;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ReleaseApiAxiosParamCreator = ReleaseApiAxiosParamCreator;
/**
 * ReleaseApi - functional programming interface
 * @export
 */
const ReleaseApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ReleaseApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get current version app
         * @param {SiteReleaseAppControllerCabinet1VEnum} v Version
         * @param {SiteReleaseAppControllerCabinet1LanguageEnum} language Current language
         * @param {SiteReleaseAppControllerCabinet1AppEnum} [app] Apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteReleaseAppControllerCabinet1(v, language, app, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteReleaseAppControllerCabinet1(v, language, app, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ReleaseApi.siteReleaseAppControllerCabinet1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.ReleaseApiFp = ReleaseApiFp;
/**
 * ReleaseApi - factory interface
 * @export
 */
const ReleaseApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ReleaseApiFp)(configuration);
    return {
        /**
         *
         * @summary Get current version app
         * @param {SiteReleaseAppControllerCabinet1VEnum} v Version
         * @param {SiteReleaseAppControllerCabinet1LanguageEnum} language Current language
         * @param {SiteReleaseAppControllerCabinet1AppEnum} [app] Apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteReleaseAppControllerCabinet1(v, language, app, options) {
            return localVarFp.siteReleaseAppControllerCabinet1(v, language, app, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ReleaseApiFactory = ReleaseApiFactory;
/**
 * ReleaseApi - object-oriented interface
 * @export
 * @class ReleaseApi
 * @extends {BaseAPI}
 */
class ReleaseApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get current version app
     * @param {SiteReleaseAppControllerCabinet1VEnum} v Version
     * @param {SiteReleaseAppControllerCabinet1LanguageEnum} language Current language
     * @param {SiteReleaseAppControllerCabinet1AppEnum} [app] Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleaseApi
     */
    siteReleaseAppControllerCabinet1(v, language, app, options) {
        return (0, exports.ReleaseApiFp)(this.configuration).siteReleaseAppControllerCabinet1(v, language, app, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ReleaseApi = ReleaseApi;
/**
 * @export
 */
exports.SiteReleaseAppControllerCabinet1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteReleaseAppControllerCabinet1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteReleaseAppControllerCabinet1AppEnum = {
    Cabinet: 'cabinet'
};
/**
 * RtmpServerApi - axios parameter creator
 * @export
 */
const RtmpServerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Rtmp locations server list example for unauthorized
         * @param {MethodRtmpServerControllerListLocationsUnauthorizedVEnum} v Version
         * @param {MethodRtmpServerControllerListLocationsUnauthorizedLanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodRtmpServerControllerListLocationsUnauthorized: async (v, language, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('methodRtmpServerControllerListLocationsUnauthorized', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('methodRtmpServerControllerListLocationsUnauthorized', 'language', language);
            const localVarPath = `/method/rtmp_server/list_locations_unauthorized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Graph of rtmp servers
         * @param {SiteRtmpServerControllerGraph1VEnum} v Version
         * @param {SiteRtmpServerControllerGraph1LanguageEnum} language Current language
         * @param {SiteRtmpServerControllerGraph1IntervalEnum} interval Interval state in hours
         * @param {SiteRtmpServerControllerGraph1TypeEnum} type Type graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteRtmpServerControllerGraph1: async (v, language, interval, type, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteRtmpServerControllerGraph1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteRtmpServerControllerGraph1', 'language', language);
            // verify required parameter 'interval' is not null or undefined
            (0, common_1.assertParamExists)('siteRtmpServerControllerGraph1', 'interval', interval);
            // verify required parameter 'type' is not null or undefined
            (0, common_1.assertParamExists)('siteRtmpServerControllerGraph1', 'type', type);
            const localVarPath = `/method/rtmp_server/graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List rtmp servers
         * @param {SiteRtmpServerControllerList1VEnum} v Version
         * @param {SiteRtmpServerControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {SiteRtmpServerControllerList1IntervalEnum} interval Interval state in hours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteRtmpServerControllerList1: async (v, language, projectId, interval, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteRtmpServerControllerList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteRtmpServerControllerList1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteRtmpServerControllerList1', 'projectId', projectId);
            // verify required parameter 'interval' is not null or undefined
            (0, common_1.assertParamExists)('siteRtmpServerControllerList1', 'interval', interval);
            const localVarPath = `/method/rtmp_server/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary State of rtmp servers
         * @param {SiteRtmpServerControllerState1VEnum} v Version
         * @param {SiteRtmpServerControllerState1LanguageEnum} language Current language
         * @param {SiteRtmpServerControllerState1IntervalEnum} interval Interval state in hours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteRtmpServerControllerState1: async (v, language, interval, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteRtmpServerControllerState1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteRtmpServerControllerState1', 'language', language);
            // verify required parameter 'interval' is not null or undefined
            (0, common_1.assertParamExists)('siteRtmpServerControllerState1', 'interval', interval);
            const localVarPath = `/method/rtmp_server/state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary State of rtmp servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteRtmpServerControllerUp1: async (options = {}) => {
            const localVarPath = `/method/rtmp_server/up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.RtmpServerApiAxiosParamCreator = RtmpServerApiAxiosParamCreator;
/**
 * RtmpServerApi - functional programming interface
 * @export
 */
const RtmpServerApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.RtmpServerApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Rtmp locations server list example for unauthorized
         * @param {MethodRtmpServerControllerListLocationsUnauthorizedVEnum} v Version
         * @param {MethodRtmpServerControllerListLocationsUnauthorizedLanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async methodRtmpServerControllerListLocationsUnauthorized(v, language, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.methodRtmpServerControllerListLocationsUnauthorized(v, language, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['RtmpServerApi.methodRtmpServerControllerListLocationsUnauthorized']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Graph of rtmp servers
         * @param {SiteRtmpServerControllerGraph1VEnum} v Version
         * @param {SiteRtmpServerControllerGraph1LanguageEnum} language Current language
         * @param {SiteRtmpServerControllerGraph1IntervalEnum} interval Interval state in hours
         * @param {SiteRtmpServerControllerGraph1TypeEnum} type Type graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteRtmpServerControllerGraph1(v, language, interval, type, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteRtmpServerControllerGraph1(v, language, interval, type, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['RtmpServerApi.siteRtmpServerControllerGraph1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary List rtmp servers
         * @param {SiteRtmpServerControllerList1VEnum} v Version
         * @param {SiteRtmpServerControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {SiteRtmpServerControllerList1IntervalEnum} interval Interval state in hours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteRtmpServerControllerList1(v, language, projectId, interval, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteRtmpServerControllerList1(v, language, projectId, interval, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['RtmpServerApi.siteRtmpServerControllerList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary State of rtmp servers
         * @param {SiteRtmpServerControllerState1VEnum} v Version
         * @param {SiteRtmpServerControllerState1LanguageEnum} language Current language
         * @param {SiteRtmpServerControllerState1IntervalEnum} interval Interval state in hours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteRtmpServerControllerState1(v, language, interval, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteRtmpServerControllerState1(v, language, interval, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['RtmpServerApi.siteRtmpServerControllerState1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary State of rtmp servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteRtmpServerControllerUp1(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteRtmpServerControllerUp1(options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['RtmpServerApi.siteRtmpServerControllerUp1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.RtmpServerApiFp = RtmpServerApiFp;
/**
 * RtmpServerApi - factory interface
 * @export
 */
const RtmpServerApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.RtmpServerApiFp)(configuration);
    return {
        /**
         *
         * @summary Rtmp locations server list example for unauthorized
         * @param {MethodRtmpServerControllerListLocationsUnauthorizedVEnum} v Version
         * @param {MethodRtmpServerControllerListLocationsUnauthorizedLanguageEnum} language Current language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        methodRtmpServerControllerListLocationsUnauthorized(v, language, options) {
            return localVarFp.methodRtmpServerControllerListLocationsUnauthorized(v, language, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Graph of rtmp servers
         * @param {SiteRtmpServerControllerGraph1VEnum} v Version
         * @param {SiteRtmpServerControllerGraph1LanguageEnum} language Current language
         * @param {SiteRtmpServerControllerGraph1IntervalEnum} interval Interval state in hours
         * @param {SiteRtmpServerControllerGraph1TypeEnum} type Type graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteRtmpServerControllerGraph1(v, language, interval, type, options) {
            return localVarFp.siteRtmpServerControllerGraph1(v, language, interval, type, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List rtmp servers
         * @param {SiteRtmpServerControllerList1VEnum} v Version
         * @param {SiteRtmpServerControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {SiteRtmpServerControllerList1IntervalEnum} interval Interval state in hours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteRtmpServerControllerList1(v, language, projectId, interval, options) {
            return localVarFp.siteRtmpServerControllerList1(v, language, projectId, interval, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary State of rtmp servers
         * @param {SiteRtmpServerControllerState1VEnum} v Version
         * @param {SiteRtmpServerControllerState1LanguageEnum} language Current language
         * @param {SiteRtmpServerControllerState1IntervalEnum} interval Interval state in hours
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteRtmpServerControllerState1(v, language, interval, options) {
            return localVarFp.siteRtmpServerControllerState1(v, language, interval, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary State of rtmp servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteRtmpServerControllerUp1(options) {
            return localVarFp.siteRtmpServerControllerUp1(options).then((request) => request(axios, basePath));
        },
    };
};
exports.RtmpServerApiFactory = RtmpServerApiFactory;
/**
 * RtmpServerApi - object-oriented interface
 * @export
 * @class RtmpServerApi
 * @extends {BaseAPI}
 */
class RtmpServerApi extends base_1.BaseAPI {
    /**
     *
     * @summary Rtmp locations server list example for unauthorized
     * @param {MethodRtmpServerControllerListLocationsUnauthorizedVEnum} v Version
     * @param {MethodRtmpServerControllerListLocationsUnauthorizedLanguageEnum} language Current language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    methodRtmpServerControllerListLocationsUnauthorized(v, language, options) {
        return (0, exports.RtmpServerApiFp)(this.configuration).methodRtmpServerControllerListLocationsUnauthorized(v, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Graph of rtmp servers
     * @param {SiteRtmpServerControllerGraph1VEnum} v Version
     * @param {SiteRtmpServerControllerGraph1LanguageEnum} language Current language
     * @param {SiteRtmpServerControllerGraph1IntervalEnum} interval Interval state in hours
     * @param {SiteRtmpServerControllerGraph1TypeEnum} type Type graph
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    siteRtmpServerControllerGraph1(v, language, interval, type, options) {
        return (0, exports.RtmpServerApiFp)(this.configuration).siteRtmpServerControllerGraph1(v, language, interval, type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List rtmp servers
     * @param {SiteRtmpServerControllerList1VEnum} v Version
     * @param {SiteRtmpServerControllerList1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {SiteRtmpServerControllerList1IntervalEnum} interval Interval state in hours
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    siteRtmpServerControllerList1(v, language, projectId, interval, options) {
        return (0, exports.RtmpServerApiFp)(this.configuration).siteRtmpServerControllerList1(v, language, projectId, interval, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary State of rtmp servers
     * @param {SiteRtmpServerControllerState1VEnum} v Version
     * @param {SiteRtmpServerControllerState1LanguageEnum} language Current language
     * @param {SiteRtmpServerControllerState1IntervalEnum} interval Interval state in hours
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    siteRtmpServerControllerState1(v, language, interval, options) {
        return (0, exports.RtmpServerApiFp)(this.configuration).siteRtmpServerControllerState1(v, language, interval, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary State of rtmp servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RtmpServerApi
     */
    siteRtmpServerControllerUp1(options) {
        return (0, exports.RtmpServerApiFp)(this.configuration).siteRtmpServerControllerUp1(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RtmpServerApi = RtmpServerApi;
/**
 * @export
 */
exports.MethodRtmpServerControllerListLocationsUnauthorizedVEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.MethodRtmpServerControllerListLocationsUnauthorizedLanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteRtmpServerControllerGraph1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteRtmpServerControllerGraph1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteRtmpServerControllerGraph1IntervalEnum = {
    NUMBER_1: 1,
    NUMBER_3: 3,
    NUMBER_6: 6,
    NUMBER_12: 12,
    NUMBER_24: 24
};
/**
 * @export
 */
exports.SiteRtmpServerControllerGraph1TypeEnum = {
    Performance: 'performance',
    Network: 'network',
    Cpu: 'cpu',
    Ram: 'ram',
    DeliveredPackages: 'deliveredPackages'
};
/**
 * @export
 */
exports.SiteRtmpServerControllerList1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteRtmpServerControllerList1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteRtmpServerControllerList1IntervalEnum = {
    NUMBER_1: 1,
    NUMBER_3: 3,
    NUMBER_6: 6,
    NUMBER_12: 12,
    NUMBER_24: 24
};
/**
 * @export
 */
exports.SiteRtmpServerControllerState1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteRtmpServerControllerState1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteRtmpServerControllerState1IntervalEnum = {
    NUMBER_1: 1,
    NUMBER_3: 3,
    NUMBER_6: 6,
    NUMBER_12: 12,
    NUMBER_24: 24
};
/**
 * SocialsApi - axios parameter creator
 * @export
 */
const SocialsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Social list for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialsControllerGetList1: async (options = {}) => {
            const localVarPath = `/method/socials/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.SocialsApiAxiosParamCreator = SocialsApiAxiosParamCreator;
/**
 * SocialsApi - functional programming interface
 * @export
 */
const SocialsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SocialsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Social list for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async socialsControllerGetList1(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.socialsControllerGetList1(options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SocialsApi.socialsControllerGetList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.SocialsApiFp = SocialsApiFp;
/**
 * SocialsApi - factory interface
 * @export
 */
const SocialsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SocialsApiFp)(configuration);
    return {
        /**
         *
         * @summary Social list for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialsControllerGetList1(options) {
            return localVarFp.socialsControllerGetList1(options).then((request) => request(axios, basePath));
        },
    };
};
exports.SocialsApiFactory = SocialsApiFactory;
/**
 * SocialsApi - object-oriented interface
 * @export
 * @class SocialsApi
 * @extends {BaseAPI}
 */
class SocialsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Social list for user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialsApi
     */
    socialsControllerGetList1(options) {
        return (0, exports.SocialsApiFp)(this.configuration).socialsControllerGetList1(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SocialsApi = SocialsApi;
/**
 * StreamKeyApi - axios parameter creator
 * @export
 */
const StreamKeyApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get stream credentials
         * @param {SiteStreamKeysControllerKey1VEnum} v Version
         * @param {SiteStreamKeysControllerKey1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteStreamKeysControllerKey1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteStreamKeysControllerKey1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteStreamKeysControllerKey1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteStreamKeysControllerKey1', 'projectId', projectId);
            const localVarPath = `/method/stream-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update record
         * @param {SetRecordStreamRequest} setRecordStreamRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteStreamKeysControllerUpdateRecord1: async (setRecordStreamRequest, options = {}) => {
            // verify required parameter 'setRecordStreamRequest' is not null or undefined
            (0, common_1.assertParamExists)('siteStreamKeysControllerUpdateRecord1', 'setRecordStreamRequest', setRecordStreamRequest);
            const localVarPath = `/method/stream-keys/record`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(setRecordStreamRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.StreamKeyApiAxiosParamCreator = StreamKeyApiAxiosParamCreator;
/**
 * StreamKeyApi - functional programming interface
 * @export
 */
const StreamKeyApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.StreamKeyApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get stream credentials
         * @param {SiteStreamKeysControllerKey1VEnum} v Version
         * @param {SiteStreamKeysControllerKey1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteStreamKeysControllerKey1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteStreamKeysControllerKey1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StreamKeyApi.siteStreamKeysControllerKey1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update record
         * @param {SetRecordStreamRequest} setRecordStreamRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteStreamKeysControllerUpdateRecord1(setRecordStreamRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteStreamKeysControllerUpdateRecord1(setRecordStreamRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StreamKeyApi.siteStreamKeysControllerUpdateRecord1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.StreamKeyApiFp = StreamKeyApiFp;
/**
 * StreamKeyApi - factory interface
 * @export
 */
const StreamKeyApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.StreamKeyApiFp)(configuration);
    return {
        /**
         *
         * @summary Get stream credentials
         * @param {SiteStreamKeysControllerKey1VEnum} v Version
         * @param {SiteStreamKeysControllerKey1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteStreamKeysControllerKey1(v, language, projectId, options) {
            return localVarFp.siteStreamKeysControllerKey1(v, language, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update record
         * @param {SetRecordStreamRequest} setRecordStreamRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteStreamKeysControllerUpdateRecord1(setRecordStreamRequest, options) {
            return localVarFp.siteStreamKeysControllerUpdateRecord1(setRecordStreamRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.StreamKeyApiFactory = StreamKeyApiFactory;
/**
 * StreamKeyApi - object-oriented interface
 * @export
 * @class StreamKeyApi
 * @extends {BaseAPI}
 */
class StreamKeyApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get stream credentials
     * @param {SiteStreamKeysControllerKey1VEnum} v Version
     * @param {SiteStreamKeysControllerKey1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamKeyApi
     */
    siteStreamKeysControllerKey1(v, language, projectId, options) {
        return (0, exports.StreamKeyApiFp)(this.configuration).siteStreamKeysControllerKey1(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update record
     * @param {SetRecordStreamRequest} setRecordStreamRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamKeyApi
     */
    siteStreamKeysControllerUpdateRecord1(setRecordStreamRequest, options) {
        return (0, exports.StreamKeyApiFp)(this.configuration).siteStreamKeysControllerUpdateRecord1(setRecordStreamRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.StreamKeyApi = StreamKeyApi;
/**
 * @export
 */
exports.SiteStreamKeysControllerKey1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteStreamKeysControllerKey1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * StreamPullKeysApi - axios parameter creator
 * @export
 */
const StreamPullKeysApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Check key
         * @param {StreamPullKeysSiteControllerCheck1VEnum} v Version
         * @param {StreamPullKeysSiteControllerCheck1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {string} key Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteControllerCheck1: async (v, language, projectId, key, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteControllerCheck1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteControllerCheck1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteControllerCheck1', 'projectId', projectId);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteControllerCheck1', 'key', key);
            const localVarPath = `/method/stream-pull-keys/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create key
         * @param {CreatePullKeyRequest} createPullKeyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteControllerCreate1: async (createPullKeyRequest, options = {}) => {
            // verify required parameter 'createPullKeyRequest' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteControllerCreate1', 'createPullKeyRequest', createPullKeyRequest);
            const localVarPath = `/method/stream-pull-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createPullKeyRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List keys
         * @param {StreamPullKeysSiteControllerGet1VEnum} v Version
         * @param {StreamPullKeysSiteControllerGet1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteControllerGet1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteControllerGet1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteControllerGet1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteControllerGet1', 'projectId', projectId);
            const localVarPath = `/method/stream-pull-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete key
         * @param {StreamPullKeysSiteControllerRemove1VEnum} v Version
         * @param {StreamPullKeysSiteControllerRemove1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {string} key Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteControllerRemove1: async (v, language, projectId, key, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteControllerRemove1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteControllerRemove1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteControllerRemove1', 'projectId', projectId);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteControllerRemove1', 'key', key);
            const localVarPath = `/method/stream-pull-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update key
         * @param {UpdatePullKeyRequest} updatePullKeyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteControllerUpdate1: async (updatePullKeyRequest, options = {}) => {
            // verify required parameter 'updatePullKeyRequest' is not null or undefined
            (0, common_1.assertParamExists)('streamPullKeysSiteControllerUpdate1', 'updatePullKeyRequest', updatePullKeyRequest);
            const localVarPath = `/method/stream-pull-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updatePullKeyRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.StreamPullKeysApiAxiosParamCreator = StreamPullKeysApiAxiosParamCreator;
/**
 * StreamPullKeysApi - functional programming interface
 * @export
 */
const StreamPullKeysApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.StreamPullKeysApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Check key
         * @param {StreamPullKeysSiteControllerCheck1VEnum} v Version
         * @param {StreamPullKeysSiteControllerCheck1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {string} key Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamPullKeysSiteControllerCheck1(v, language, projectId, key, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamPullKeysSiteControllerCheck1(v, language, projectId, key, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StreamPullKeysApi.streamPullKeysSiteControllerCheck1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Create key
         * @param {CreatePullKeyRequest} createPullKeyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamPullKeysSiteControllerCreate1(createPullKeyRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamPullKeysSiteControllerCreate1(createPullKeyRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StreamPullKeysApi.streamPullKeysSiteControllerCreate1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary List keys
         * @param {StreamPullKeysSiteControllerGet1VEnum} v Version
         * @param {StreamPullKeysSiteControllerGet1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamPullKeysSiteControllerGet1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamPullKeysSiteControllerGet1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StreamPullKeysApi.streamPullKeysSiteControllerGet1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Delete key
         * @param {StreamPullKeysSiteControllerRemove1VEnum} v Version
         * @param {StreamPullKeysSiteControllerRemove1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {string} key Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamPullKeysSiteControllerRemove1(v, language, projectId, key, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamPullKeysSiteControllerRemove1(v, language, projectId, key, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StreamPullKeysApi.streamPullKeysSiteControllerRemove1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update key
         * @param {UpdatePullKeyRequest} updatePullKeyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamPullKeysSiteControllerUpdate1(updatePullKeyRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamPullKeysSiteControllerUpdate1(updatePullKeyRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StreamPullKeysApi.streamPullKeysSiteControllerUpdate1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.StreamPullKeysApiFp = StreamPullKeysApiFp;
/**
 * StreamPullKeysApi - factory interface
 * @export
 */
const StreamPullKeysApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.StreamPullKeysApiFp)(configuration);
    return {
        /**
         *
         * @summary Check key
         * @param {StreamPullKeysSiteControllerCheck1VEnum} v Version
         * @param {StreamPullKeysSiteControllerCheck1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {string} key Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteControllerCheck1(v, language, projectId, key, options) {
            return localVarFp.streamPullKeysSiteControllerCheck1(v, language, projectId, key, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create key
         * @param {CreatePullKeyRequest} createPullKeyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteControllerCreate1(createPullKeyRequest, options) {
            return localVarFp.streamPullKeysSiteControllerCreate1(createPullKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List keys
         * @param {StreamPullKeysSiteControllerGet1VEnum} v Version
         * @param {StreamPullKeysSiteControllerGet1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteControllerGet1(v, language, projectId, options) {
            return localVarFp.streamPullKeysSiteControllerGet1(v, language, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete key
         * @param {StreamPullKeysSiteControllerRemove1VEnum} v Version
         * @param {StreamPullKeysSiteControllerRemove1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {string} key Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteControllerRemove1(v, language, projectId, key, options) {
            return localVarFp.streamPullKeysSiteControllerRemove1(v, language, projectId, key, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update key
         * @param {UpdatePullKeyRequest} updatePullKeyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamPullKeysSiteControllerUpdate1(updatePullKeyRequest, options) {
            return localVarFp.streamPullKeysSiteControllerUpdate1(updatePullKeyRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.StreamPullKeysApiFactory = StreamPullKeysApiFactory;
/**
 * StreamPullKeysApi - object-oriented interface
 * @export
 * @class StreamPullKeysApi
 * @extends {BaseAPI}
 */
class StreamPullKeysApi extends base_1.BaseAPI {
    /**
     *
     * @summary Check key
     * @param {StreamPullKeysSiteControllerCheck1VEnum} v Version
     * @param {StreamPullKeysSiteControllerCheck1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {string} key Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    streamPullKeysSiteControllerCheck1(v, language, projectId, key, options) {
        return (0, exports.StreamPullKeysApiFp)(this.configuration).streamPullKeysSiteControllerCheck1(v, language, projectId, key, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create key
     * @param {CreatePullKeyRequest} createPullKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    streamPullKeysSiteControllerCreate1(createPullKeyRequest, options) {
        return (0, exports.StreamPullKeysApiFp)(this.configuration).streamPullKeysSiteControllerCreate1(createPullKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List keys
     * @param {StreamPullKeysSiteControllerGet1VEnum} v Version
     * @param {StreamPullKeysSiteControllerGet1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    streamPullKeysSiteControllerGet1(v, language, projectId, options) {
        return (0, exports.StreamPullKeysApiFp)(this.configuration).streamPullKeysSiteControllerGet1(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete key
     * @param {StreamPullKeysSiteControllerRemove1VEnum} v Version
     * @param {StreamPullKeysSiteControllerRemove1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {string} key Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    streamPullKeysSiteControllerRemove1(v, language, projectId, key, options) {
        return (0, exports.StreamPullKeysApiFp)(this.configuration).streamPullKeysSiteControllerRemove1(v, language, projectId, key, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update key
     * @param {UpdatePullKeyRequest} updatePullKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamPullKeysApi
     */
    streamPullKeysSiteControllerUpdate1(updatePullKeyRequest, options) {
        return (0, exports.StreamPullKeysApiFp)(this.configuration).streamPullKeysSiteControllerUpdate1(updatePullKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.StreamPullKeysApi = StreamPullKeysApi;
/**
 * @export
 */
exports.StreamPullKeysSiteControllerCheck1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.StreamPullKeysSiteControllerCheck1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.StreamPullKeysSiteControllerGet1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.StreamPullKeysSiteControllerGet1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.StreamPullKeysSiteControllerRemove1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.StreamPullKeysSiteControllerRemove1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
const TransactionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Transaction list for frontend
         * @param {SiteTransactionsControllerList1VEnum} v Version
         * @param {SiteTransactionsControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {string} [code] Filter code transaction. example 1 or 1,2,3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteTransactionsControllerList1: async (v, language, projectId, limit, offset, dateFrom, dateTo, code, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteTransactionsControllerList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteTransactionsControllerList1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteTransactionsControllerList1', 'projectId', projectId);
            const localVarPath = `/method/transactions/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom instanceof Date) ?
                    dateFrom.toISOString() :
                    dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo instanceof Date) ?
                    dateTo.toISOString() :
                    dateTo;
            }
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.TransactionsApiAxiosParamCreator = TransactionsApiAxiosParamCreator;
/**
 * TransactionsApi - functional programming interface
 * @export
 */
const TransactionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.TransactionsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Transaction list for frontend
         * @param {SiteTransactionsControllerList1VEnum} v Version
         * @param {SiteTransactionsControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {string} [code] Filter code transaction. example 1 or 1,2,3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteTransactionsControllerList1(v, language, projectId, limit, offset, dateFrom, dateTo, code, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteTransactionsControllerList1(v, language, projectId, limit, offset, dateFrom, dateTo, code, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TransactionsApi.siteTransactionsControllerList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.TransactionsApiFp = TransactionsApiFp;
/**
 * TransactionsApi - factory interface
 * @export
 */
const TransactionsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.TransactionsApiFp)(configuration);
    return {
        /**
         *
         * @summary Transaction list for frontend
         * @param {SiteTransactionsControllerList1VEnum} v Version
         * @param {SiteTransactionsControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {string} [dateFrom] Date from
         * @param {string} [dateTo] Date to
         * @param {string} [code] Filter code transaction. example 1 or 1,2,3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteTransactionsControllerList1(v, language, projectId, limit, offset, dateFrom, dateTo, code, options) {
            return localVarFp.siteTransactionsControllerList1(v, language, projectId, limit, offset, dateFrom, dateTo, code, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TransactionsApiFactory = TransactionsApiFactory;
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
class TransactionsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Transaction list for frontend
     * @param {SiteTransactionsControllerList1VEnum} v Version
     * @param {SiteTransactionsControllerList1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {string} [dateFrom] Date from
     * @param {string} [dateTo] Date to
     * @param {string} [code] Filter code transaction. example 1 or 1,2,3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    siteTransactionsControllerList1(v, language, projectId, limit, offset, dateFrom, dateTo, code, options) {
        return (0, exports.TransactionsApiFp)(this.configuration).siteTransactionsControllerList1(v, language, projectId, limit, offset, dateFrom, dateTo, code, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TransactionsApi = TransactionsApi;
/**
 * @export
 */
exports.SiteTransactionsControllerList1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteTransactionsControllerList1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * TranscodersApi - axios parameter creator
 * @export
 */
const TranscodersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Transcoder create
         * @param {SiteTranscoderCreateDto} siteTranscoderCreateDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersControllerAdd1: async (siteTranscoderCreateDto, options = {}) => {
            // verify required parameter 'siteTranscoderCreateDto' is not null or undefined
            (0, common_1.assertParamExists)('transcodersControllerAdd1', 'siteTranscoderCreateDto', siteTranscoderCreateDto);
            const localVarPath = `/method/transcoder/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteTranscoderCreateDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Transcoder delete
         * @param {SiteTranscoderItemDto} siteTranscoderItemDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersControllerDelete1: async (siteTranscoderItemDto, options = {}) => {
            // verify required parameter 'siteTranscoderItemDto' is not null or undefined
            (0, common_1.assertParamExists)('transcodersControllerDelete1', 'siteTranscoderItemDto', siteTranscoderItemDto);
            const localVarPath = `/method/transcoder/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteTranscoderItemDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of transcoder
         * @param {TranscodersControllerList1VEnum} v Version
         * @param {TranscodersControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersControllerList1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('transcodersControllerList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('transcodersControllerList1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('transcodersControllerList1', 'projectId', projectId);
            const localVarPath = `/method/transcoder/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Transcoder stop
         * @param {SiteTranscoderItemDto} siteTranscoderItemDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersControllerStop1: async (siteTranscoderItemDto, options = {}) => {
            // verify required parameter 'siteTranscoderItemDto' is not null or undefined
            (0, common_1.assertParamExists)('transcodersControllerStop1', 'siteTranscoderItemDto', siteTranscoderItemDto);
            const localVarPath = `/method/transcoder/stop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteTranscoderItemDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Transcoder update
         * @param {SiteTranscoderUpdateDto} siteTranscoderUpdateDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersControllerUpdate1: async (siteTranscoderUpdateDto, options = {}) => {
            // verify required parameter 'siteTranscoderUpdateDto' is not null or undefined
            (0, common_1.assertParamExists)('transcodersControllerUpdate1', 'siteTranscoderUpdateDto', siteTranscoderUpdateDto);
            const localVarPath = `/method/transcoder/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(siteTranscoderUpdateDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.TranscodersApiAxiosParamCreator = TranscodersApiAxiosParamCreator;
/**
 * TranscodersApi - functional programming interface
 * @export
 */
const TranscodersApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.TranscodersApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Transcoder create
         * @param {SiteTranscoderCreateDto} siteTranscoderCreateDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transcodersControllerAdd1(siteTranscoderCreateDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.transcodersControllerAdd1(siteTranscoderCreateDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TranscodersApi.transcodersControllerAdd1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Transcoder delete
         * @param {SiteTranscoderItemDto} siteTranscoderItemDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transcodersControllerDelete1(siteTranscoderItemDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.transcodersControllerDelete1(siteTranscoderItemDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TranscodersApi.transcodersControllerDelete1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary List of transcoder
         * @param {TranscodersControllerList1VEnum} v Version
         * @param {TranscodersControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transcodersControllerList1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.transcodersControllerList1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TranscodersApi.transcodersControllerList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Transcoder stop
         * @param {SiteTranscoderItemDto} siteTranscoderItemDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transcodersControllerStop1(siteTranscoderItemDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.transcodersControllerStop1(siteTranscoderItemDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TranscodersApi.transcodersControllerStop1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Transcoder update
         * @param {SiteTranscoderUpdateDto} siteTranscoderUpdateDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transcodersControllerUpdate1(siteTranscoderUpdateDto, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.transcodersControllerUpdate1(siteTranscoderUpdateDto, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TranscodersApi.transcodersControllerUpdate1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.TranscodersApiFp = TranscodersApiFp;
/**
 * TranscodersApi - factory interface
 * @export
 */
const TranscodersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.TranscodersApiFp)(configuration);
    return {
        /**
         *
         * @summary Transcoder create
         * @param {SiteTranscoderCreateDto} siteTranscoderCreateDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersControllerAdd1(siteTranscoderCreateDto, options) {
            return localVarFp.transcodersControllerAdd1(siteTranscoderCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Transcoder delete
         * @param {SiteTranscoderItemDto} siteTranscoderItemDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersControllerDelete1(siteTranscoderItemDto, options) {
            return localVarFp.transcodersControllerDelete1(siteTranscoderItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List of transcoder
         * @param {TranscodersControllerList1VEnum} v Version
         * @param {TranscodersControllerList1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersControllerList1(v, language, projectId, options) {
            return localVarFp.transcodersControllerList1(v, language, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Transcoder stop
         * @param {SiteTranscoderItemDto} siteTranscoderItemDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersControllerStop1(siteTranscoderItemDto, options) {
            return localVarFp.transcodersControllerStop1(siteTranscoderItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Transcoder update
         * @param {SiteTranscoderUpdateDto} siteTranscoderUpdateDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcodersControllerUpdate1(siteTranscoderUpdateDto, options) {
            return localVarFp.transcodersControllerUpdate1(siteTranscoderUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TranscodersApiFactory = TranscodersApiFactory;
/**
 * TranscodersApi - object-oriented interface
 * @export
 * @class TranscodersApi
 * @extends {BaseAPI}
 */
class TranscodersApi extends base_1.BaseAPI {
    /**
     *
     * @summary Transcoder create
     * @param {SiteTranscoderCreateDto} siteTranscoderCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    transcodersControllerAdd1(siteTranscoderCreateDto, options) {
        return (0, exports.TranscodersApiFp)(this.configuration).transcodersControllerAdd1(siteTranscoderCreateDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Transcoder delete
     * @param {SiteTranscoderItemDto} siteTranscoderItemDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    transcodersControllerDelete1(siteTranscoderItemDto, options) {
        return (0, exports.TranscodersApiFp)(this.configuration).transcodersControllerDelete1(siteTranscoderItemDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List of transcoder
     * @param {TranscodersControllerList1VEnum} v Version
     * @param {TranscodersControllerList1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    transcodersControllerList1(v, language, projectId, options) {
        return (0, exports.TranscodersApiFp)(this.configuration).transcodersControllerList1(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Transcoder stop
     * @param {SiteTranscoderItemDto} siteTranscoderItemDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    transcodersControllerStop1(siteTranscoderItemDto, options) {
        return (0, exports.TranscodersApiFp)(this.configuration).transcodersControllerStop1(siteTranscoderItemDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Transcoder update
     * @param {SiteTranscoderUpdateDto} siteTranscoderUpdateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodersApi
     */
    transcodersControllerUpdate1(siteTranscoderUpdateDto, options) {
        return (0, exports.TranscodersApiFp)(this.configuration).transcodersControllerUpdate1(siteTranscoderUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TranscodersApi = TranscodersApi;
/**
 * @export
 */
exports.TranscodersControllerList1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.TranscodersControllerList1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * UserApi - axios parameter creator
 * @export
 */
const UserApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get user profile
         * @param {SiteUserControllerGetProfile1VEnum} v Version
         * @param {SiteUserControllerGetProfile1LanguageEnum} language Current language
         * @param {number | null} [projectId] Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserControllerGetProfile1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteUserControllerGetProfile1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteUserControllerGetProfile1', 'language', language);
            const localVarPath = `/method/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Test code only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserControllerTestCode1: async (options = {}) => {
            const localVarPath = `/method/users/code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Test code exception only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserControllerTestCodeException1: async (options = {}) => {
            const localVarPath = `/method/users/code-throw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update profile
         * @param {SiteUserControllerUpdateProfile1VEnum} v Version
         * @param {SiteUserControllerUpdateProfile1LanguageEnum} language Current language
         * @param {string} firstName First name
         * @param {string} lastName Last name
         * @param {File} [avatar] File for avatar upload max size 2MB, format: jpeg, jpg, png
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserControllerUpdateProfile1: async (v, language, firstName, lastName, avatar, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteUserControllerUpdateProfile1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteUserControllerUpdateProfile1', 'language', language);
            // verify required parameter 'firstName' is not null or undefined
            (0, common_1.assertParamExists)('siteUserControllerUpdateProfile1', 'firstName', firstName);
            // verify required parameter 'lastName' is not null or undefined
            (0, common_1.assertParamExists)('siteUserControllerUpdateProfile1', 'lastName', lastName);
            const localVarPath = `/method/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            if (v !== undefined) {
                localVarFormParams.append('v', v);
            }
            if (language !== undefined) {
                localVarFormParams.append('language', language);
            }
            if (firstName !== undefined) {
                localVarFormParams.append('first_name', firstName);
            }
            if (lastName !== undefined) {
                localVarFormParams.append('last_name', lastName);
            }
            if (avatar !== undefined) {
                localVarFormParams.append('avatar', avatar);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.UserApiAxiosParamCreator = UserApiAxiosParamCreator;
/**
 * UserApi - functional programming interface
 * @export
 */
const UserApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.UserApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get user profile
         * @param {SiteUserControllerGetProfile1VEnum} v Version
         * @param {SiteUserControllerGetProfile1LanguageEnum} language Current language
         * @param {number | null} [projectId] Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteUserControllerGetProfile1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteUserControllerGetProfile1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserApi.siteUserControllerGetProfile1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Test code only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteUserControllerTestCode1(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteUserControllerTestCode1(options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserApi.siteUserControllerTestCode1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Test code exception only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteUserControllerTestCodeException1(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteUserControllerTestCodeException1(options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserApi.siteUserControllerTestCodeException1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update profile
         * @param {SiteUserControllerUpdateProfile1VEnum} v Version
         * @param {SiteUserControllerUpdateProfile1LanguageEnum} language Current language
         * @param {string} firstName First name
         * @param {string} lastName Last name
         * @param {File} [avatar] File for avatar upload max size 2MB, format: jpeg, jpg, png
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteUserControllerUpdateProfile1(v, language, firstName, lastName, avatar, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteUserControllerUpdateProfile1(v, language, firstName, lastName, avatar, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserApi.siteUserControllerUpdateProfile1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.UserApiFp = UserApiFp;
/**
 * UserApi - factory interface
 * @export
 */
const UserApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.UserApiFp)(configuration);
    return {
        /**
         *
         * @summary Get user profile
         * @param {SiteUserControllerGetProfile1VEnum} v Version
         * @param {SiteUserControllerGetProfile1LanguageEnum} language Current language
         * @param {number | null} [projectId] Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserControllerGetProfile1(v, language, projectId, options) {
            return localVarFp.siteUserControllerGetProfile1(v, language, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Test code only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserControllerTestCode1(options) {
            return localVarFp.siteUserControllerTestCode1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Test code exception only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserControllerTestCodeException1(options) {
            return localVarFp.siteUserControllerTestCodeException1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update profile
         * @param {SiteUserControllerUpdateProfile1VEnum} v Version
         * @param {SiteUserControllerUpdateProfile1LanguageEnum} language Current language
         * @param {string} firstName First name
         * @param {string} lastName Last name
         * @param {File} [avatar] File for avatar upload max size 2MB, format: jpeg, jpg, png
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserControllerUpdateProfile1(v, language, firstName, lastName, avatar, options) {
            return localVarFp.siteUserControllerUpdateProfile1(v, language, firstName, lastName, avatar, options).then((request) => request(axios, basePath));
        },
    };
};
exports.UserApiFactory = UserApiFactory;
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
class UserApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get user profile
     * @param {SiteUserControllerGetProfile1VEnum} v Version
     * @param {SiteUserControllerGetProfile1LanguageEnum} language Current language
     * @param {number | null} [projectId] Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    siteUserControllerGetProfile1(v, language, projectId, options) {
        return (0, exports.UserApiFp)(this.configuration).siteUserControllerGetProfile1(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Test code only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    siteUserControllerTestCode1(options) {
        return (0, exports.UserApiFp)(this.configuration).siteUserControllerTestCode1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Test code exception only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    siteUserControllerTestCodeException1(options) {
        return (0, exports.UserApiFp)(this.configuration).siteUserControllerTestCodeException1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update profile
     * @param {SiteUserControllerUpdateProfile1VEnum} v Version
     * @param {SiteUserControllerUpdateProfile1LanguageEnum} language Current language
     * @param {string} firstName First name
     * @param {string} lastName Last name
     * @param {File} [avatar] File for avatar upload max size 2MB, format: jpeg, jpg, png
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    siteUserControllerUpdateProfile1(v, language, firstName, lastName, avatar, options) {
        return (0, exports.UserApiFp)(this.configuration).siteUserControllerUpdateProfile1(v, language, firstName, lastName, avatar, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.UserApi = UserApi;
/**
 * @export
 */
exports.SiteUserControllerGetProfile1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteUserControllerGetProfile1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteUserControllerUpdateProfile1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteUserControllerUpdateProfile1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * UserProjectApi - axios parameter creator
 * @export
 */
const UserProjectApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Change access user from project
         * @param {SiteUserProjectControllerChangeAccess1VEnum} v Version
         * @param {SiteUserProjectControllerChangeAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} userId User id
         * @param {SiteUserProjectControllerChangeAccess1AccessTypeEnum} accessType Access type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserProjectControllerChangeAccess1: async (v, language, projectId, userId, accessType, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerChangeAccess1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerChangeAccess1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerChangeAccess1', 'projectId', projectId);
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerChangeAccess1', 'userId', userId);
            // verify required parameter 'accessType' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerChangeAccess1', 'accessType', accessType);
            const localVarPath = `/method/project/user/change_access`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }
            if (accessType !== undefined) {
                localVarQueryParameter['access_type'] = accessType;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove user from project
         * @param {SiteUserProjectControllerDel1VEnum} v Version
         * @param {SiteUserProjectControllerDel1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} userId User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserProjectControllerDel1: async (v, language, projectId, userId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerDel1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerDel1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerDel1', 'projectId', projectId);
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerDel1', 'userId', userId);
            const localVarPath = `/method/project/user/del`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get project by number id
         * @param {SiteUserProjectControllerGetProject1VEnum} v Version
         * @param {SiteUserProjectControllerGetProject1LanguageEnum} language Current language
         * @param {string} projectExternalId Project external id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserProjectControllerGetProject1: async (v, language, projectExternalId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerGetProject1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerGetProject1', 'language', language);
            // verify required parameter 'projectExternalId' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerGetProject1', 'projectExternalId', projectExternalId);
            const localVarPath = `/method/project/get_project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectExternalId !== undefined) {
                localVarQueryParameter['project_external_id'] = projectExternalId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get project full info
         * @param {SiteUserProjectControllerGetProjectInfo1VEnum} v Version
         * @param {SiteUserProjectControllerGetProjectInfo1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserProjectControllerGetProjectInfo1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerGetProjectInfo1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerGetProjectInfo1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerGetProjectInfo1', 'projectId', projectId);
            const localVarPath = `/method/project/get_project_info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get user by number id
         * @param {SiteUserProjectControllerGetUser1VEnum} v Version
         * @param {SiteUserProjectControllerGetUser1LanguageEnum} language Current language
         * @param {string} userExternalId User external id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserProjectControllerGetUser1: async (v, language, userExternalId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerGetUser1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerGetUser1', 'language', language);
            // verify required parameter 'userExternalId' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerGetUser1', 'userExternalId', userExternalId);
            const localVarPath = `/method/project/get_user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (userExternalId !== undefined) {
                localVarQueryParameter['user_external_id'] = userExternalId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of project for current user
         * @param {SiteUserProjectControllerList1VEnum} v Version
         * @param {SiteUserProjectControllerList1LanguageEnum} language Current language
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserProjectControllerList1: async (v, language, limit, offset, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerList1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerList1', 'language', language);
            const localVarPath = `/method/project/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of user in project
         * @param {SiteUserProjectControllerListAccess1VEnum} v Version
         * @param {SiteUserProjectControllerListAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserProjectControllerListAccess1: async (v, language, projectId, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerListAccess1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerListAccess1', 'language', language);
            // verify required parameter 'projectId' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerListAccess1', 'projectId', projectId);
            const localVarPath = `/method/project/user/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Select user for project
         * @param {SiteUserProjectControllerSelectProject1VEnum} v Version
         * @param {SiteUserProjectControllerSelectProject1LanguageEnum} language Current language
         * @param {number} id Project internal id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserProjectControllerSelectProject1: async (v, language, id, options = {}) => {
            // verify required parameter 'v' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerSelectProject1', 'v', v);
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerSelectProject1', 'language', language);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('siteUserProjectControllerSelectProject1', 'id', id);
            const localVarPath = `/method/project/select`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.UserProjectApiAxiosParamCreator = UserProjectApiAxiosParamCreator;
/**
 * UserProjectApi - functional programming interface
 * @export
 */
const UserProjectApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.UserProjectApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Change access user from project
         * @param {SiteUserProjectControllerChangeAccess1VEnum} v Version
         * @param {SiteUserProjectControllerChangeAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} userId User id
         * @param {SiteUserProjectControllerChangeAccess1AccessTypeEnum} accessType Access type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteUserProjectControllerChangeAccess1(v, language, projectId, userId, accessType, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteUserProjectControllerChangeAccess1(v, language, projectId, userId, accessType, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserProjectApi.siteUserProjectControllerChangeAccess1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Remove user from project
         * @param {SiteUserProjectControllerDel1VEnum} v Version
         * @param {SiteUserProjectControllerDel1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} userId User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteUserProjectControllerDel1(v, language, projectId, userId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteUserProjectControllerDel1(v, language, projectId, userId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserProjectApi.siteUserProjectControllerDel1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get project by number id
         * @param {SiteUserProjectControllerGetProject1VEnum} v Version
         * @param {SiteUserProjectControllerGetProject1LanguageEnum} language Current language
         * @param {string} projectExternalId Project external id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteUserProjectControllerGetProject1(v, language, projectExternalId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteUserProjectControllerGetProject1(v, language, projectExternalId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserProjectApi.siteUserProjectControllerGetProject1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get project full info
         * @param {SiteUserProjectControllerGetProjectInfo1VEnum} v Version
         * @param {SiteUserProjectControllerGetProjectInfo1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteUserProjectControllerGetProjectInfo1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteUserProjectControllerGetProjectInfo1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserProjectApi.siteUserProjectControllerGetProjectInfo1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get user by number id
         * @param {SiteUserProjectControllerGetUser1VEnum} v Version
         * @param {SiteUserProjectControllerGetUser1LanguageEnum} language Current language
         * @param {string} userExternalId User external id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteUserProjectControllerGetUser1(v, language, userExternalId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteUserProjectControllerGetUser1(v, language, userExternalId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserProjectApi.siteUserProjectControllerGetUser1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary List of project for current user
         * @param {SiteUserProjectControllerList1VEnum} v Version
         * @param {SiteUserProjectControllerList1LanguageEnum} language Current language
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteUserProjectControllerList1(v, language, limit, offset, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteUserProjectControllerList1(v, language, limit, offset, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserProjectApi.siteUserProjectControllerList1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary List of user in project
         * @param {SiteUserProjectControllerListAccess1VEnum} v Version
         * @param {SiteUserProjectControllerListAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteUserProjectControllerListAccess1(v, language, projectId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteUserProjectControllerListAccess1(v, language, projectId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserProjectApi.siteUserProjectControllerListAccess1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Select user for project
         * @param {SiteUserProjectControllerSelectProject1VEnum} v Version
         * @param {SiteUserProjectControllerSelectProject1LanguageEnum} language Current language
         * @param {number} id Project internal id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteUserProjectControllerSelectProject1(v, language, id, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteUserProjectControllerSelectProject1(v, language, id, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserProjectApi.siteUserProjectControllerSelectProject1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.UserProjectApiFp = UserProjectApiFp;
/**
 * UserProjectApi - factory interface
 * @export
 */
const UserProjectApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.UserProjectApiFp)(configuration);
    return {
        /**
         *
         * @summary Change access user from project
         * @param {SiteUserProjectControllerChangeAccess1VEnum} v Version
         * @param {SiteUserProjectControllerChangeAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} userId User id
         * @param {SiteUserProjectControllerChangeAccess1AccessTypeEnum} accessType Access type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserProjectControllerChangeAccess1(v, language, projectId, userId, accessType, options) {
            return localVarFp.siteUserProjectControllerChangeAccess1(v, language, projectId, userId, accessType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Remove user from project
         * @param {SiteUserProjectControllerDel1VEnum} v Version
         * @param {SiteUserProjectControllerDel1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {number} userId User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserProjectControllerDel1(v, language, projectId, userId, options) {
            return localVarFp.siteUserProjectControllerDel1(v, language, projectId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get project by number id
         * @param {SiteUserProjectControllerGetProject1VEnum} v Version
         * @param {SiteUserProjectControllerGetProject1LanguageEnum} language Current language
         * @param {string} projectExternalId Project external id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserProjectControllerGetProject1(v, language, projectExternalId, options) {
            return localVarFp.siteUserProjectControllerGetProject1(v, language, projectExternalId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get project full info
         * @param {SiteUserProjectControllerGetProjectInfo1VEnum} v Version
         * @param {SiteUserProjectControllerGetProjectInfo1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserProjectControllerGetProjectInfo1(v, language, projectId, options) {
            return localVarFp.siteUserProjectControllerGetProjectInfo1(v, language, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get user by number id
         * @param {SiteUserProjectControllerGetUser1VEnum} v Version
         * @param {SiteUserProjectControllerGetUser1LanguageEnum} language Current language
         * @param {string} userExternalId User external id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserProjectControllerGetUser1(v, language, userExternalId, options) {
            return localVarFp.siteUserProjectControllerGetUser1(v, language, userExternalId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List of project for current user
         * @param {SiteUserProjectControllerList1VEnum} v Version
         * @param {SiteUserProjectControllerList1LanguageEnum} language Current language
         * @param {number} [limit] Number of results
         * @param {number} [offset] Page offset number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserProjectControllerList1(v, language, limit, offset, options) {
            return localVarFp.siteUserProjectControllerList1(v, language, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List of user in project
         * @param {SiteUserProjectControllerListAccess1VEnum} v Version
         * @param {SiteUserProjectControllerListAccess1LanguageEnum} language Current language
         * @param {number} projectId Project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserProjectControllerListAccess1(v, language, projectId, options) {
            return localVarFp.siteUserProjectControllerListAccess1(v, language, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Select user for project
         * @param {SiteUserProjectControllerSelectProject1VEnum} v Version
         * @param {SiteUserProjectControllerSelectProject1LanguageEnum} language Current language
         * @param {number} id Project internal id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteUserProjectControllerSelectProject1(v, language, id, options) {
            return localVarFp.siteUserProjectControllerSelectProject1(v, language, id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.UserProjectApiFactory = UserProjectApiFactory;
/**
 * UserProjectApi - object-oriented interface
 * @export
 * @class UserProjectApi
 * @extends {BaseAPI}
 */
class UserProjectApi extends base_1.BaseAPI {
    /**
     *
     * @summary Change access user from project
     * @param {SiteUserProjectControllerChangeAccess1VEnum} v Version
     * @param {SiteUserProjectControllerChangeAccess1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} userId User id
     * @param {SiteUserProjectControllerChangeAccess1AccessTypeEnum} accessType Access type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    siteUserProjectControllerChangeAccess1(v, language, projectId, userId, accessType, options) {
        return (0, exports.UserProjectApiFp)(this.configuration).siteUserProjectControllerChangeAccess1(v, language, projectId, userId, accessType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Remove user from project
     * @param {SiteUserProjectControllerDel1VEnum} v Version
     * @param {SiteUserProjectControllerDel1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {number} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    siteUserProjectControllerDel1(v, language, projectId, userId, options) {
        return (0, exports.UserProjectApiFp)(this.configuration).siteUserProjectControllerDel1(v, language, projectId, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get project by number id
     * @param {SiteUserProjectControllerGetProject1VEnum} v Version
     * @param {SiteUserProjectControllerGetProject1LanguageEnum} language Current language
     * @param {string} projectExternalId Project external id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    siteUserProjectControllerGetProject1(v, language, projectExternalId, options) {
        return (0, exports.UserProjectApiFp)(this.configuration).siteUserProjectControllerGetProject1(v, language, projectExternalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get project full info
     * @param {SiteUserProjectControllerGetProjectInfo1VEnum} v Version
     * @param {SiteUserProjectControllerGetProjectInfo1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    siteUserProjectControllerGetProjectInfo1(v, language, projectId, options) {
        return (0, exports.UserProjectApiFp)(this.configuration).siteUserProjectControllerGetProjectInfo1(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get user by number id
     * @param {SiteUserProjectControllerGetUser1VEnum} v Version
     * @param {SiteUserProjectControllerGetUser1LanguageEnum} language Current language
     * @param {string} userExternalId User external id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    siteUserProjectControllerGetUser1(v, language, userExternalId, options) {
        return (0, exports.UserProjectApiFp)(this.configuration).siteUserProjectControllerGetUser1(v, language, userExternalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List of project for current user
     * @param {SiteUserProjectControllerList1VEnum} v Version
     * @param {SiteUserProjectControllerList1LanguageEnum} language Current language
     * @param {number} [limit] Number of results
     * @param {number} [offset] Page offset number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    siteUserProjectControllerList1(v, language, limit, offset, options) {
        return (0, exports.UserProjectApiFp)(this.configuration).siteUserProjectControllerList1(v, language, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List of user in project
     * @param {SiteUserProjectControllerListAccess1VEnum} v Version
     * @param {SiteUserProjectControllerListAccess1LanguageEnum} language Current language
     * @param {number} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    siteUserProjectControllerListAccess1(v, language, projectId, options) {
        return (0, exports.UserProjectApiFp)(this.configuration).siteUserProjectControllerListAccess1(v, language, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Select user for project
     * @param {SiteUserProjectControllerSelectProject1VEnum} v Version
     * @param {SiteUserProjectControllerSelectProject1LanguageEnum} language Current language
     * @param {number} id Project internal id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProjectApi
     */
    siteUserProjectControllerSelectProject1(v, language, id, options) {
        return (0, exports.UserProjectApiFp)(this.configuration).siteUserProjectControllerSelectProject1(v, language, id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.UserProjectApi = UserProjectApi;
/**
 * @export
 */
exports.SiteUserProjectControllerChangeAccess1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteUserProjectControllerChangeAccess1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteUserProjectControllerChangeAccess1AccessTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
};
/**
 * @export
 */
exports.SiteUserProjectControllerDel1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteUserProjectControllerDel1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteUserProjectControllerGetProject1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteUserProjectControllerGetProject1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteUserProjectControllerGetProjectInfo1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteUserProjectControllerGetProjectInfo1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteUserProjectControllerGetUser1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteUserProjectControllerGetUser1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteUserProjectControllerList1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteUserProjectControllerList1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteUserProjectControllerListAccess1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteUserProjectControllerListAccess1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
/**
 * @export
 */
exports.SiteUserProjectControllerSelectProject1VEnum = {
    _1: '1',
    _2: '2',
    _3: '3'
};
/**
 * @export
 */
exports.SiteUserProjectControllerSelectProject1LanguageEnum = {
    Ru: 'ru',
    En: 'en',
    Cn: 'cn'
};
