const fs = require('fs');
const path = require('path');

const docsDir = path.join(__dirname, '../src/generated/api2/docs');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
function updateAllDocs(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  let updatedContent = content;
  let hasChanges = false;

  // 1. –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Å Configuration –Ω–∞ –Ω–æ–≤—ã–µ —Å StreamViSdkConfig
  const oldConfigPattern = /```typescript\nimport \{\s*([^}]+)\s*\} from '\.\/api';\s*\n\nconst configuration = new Configuration\(\);\nconst apiInstance = new ([A-Za-z]+)\(configuration\);/g;
  updatedContent = updatedContent.replace(oldConfigPattern, (match, imports, apiClass) => {
    // –û—á–∏—â–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã –æ—Ç Configuration
    const cleanImports = imports.replace(/,?\s*Configuration\s*,?/, '').replace(/^,\s*|,\s*$/, '').trim();
    hasChanges = true;
    return `\`\`\`typescript
import { StreamViSdkConfig } from '../../../streamvi-sdk-config';
import { ${cleanImports} } from './api';

const sdkConfig = new StreamViSdkConfig({ accessToken: 'your_access_token' });
const apiInstance = new ${apiClass}(sdkConfig.configuration);`;
  });

  // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–æ–π–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö
  updatedContent = updatedContent.replace(
    /import \{ ([^}]+),,,\s*([^}]+) \} from '\.\/api';/g,
    (match, apiClass, importClass) => {
      hasChanges = true;
      return `import { ${apiClass.trim()}, ${importClass.trim()} } from './api';`;
    }
  );

  // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö
  updatedContent = updatedContent.replace(
    /import \{ ([^}]+),,\s*\} from '\.\/api';/g,
    (match, apiClass) => {
      hasChanges = true;
      return `import { ${apiClass.trim()} } from './api';`;
    }
  );

  updatedContent = updatedContent.replace(
    /import \{ ([^}]+),\s*\} from '\.\/api';/g,
    (match, apiClass) => {
      hasChanges = true;
      return `import { ${apiClass.trim()} } from './api';`;
    }
  );

  // 4. –£–¥–∞–ª—è–µ–º –¢–û–õ–¨–ö–û –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–µ—Ä—Å–∏–∏ v (–æ—Å—Ç–∞–≤–ª—è–µ–º language)
  // –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π v
  updatedContent = updatedContent.replace(
    /let v: '1' \| '2' \| '3'; \/\/Version \(default to undefined\)\n/g,
    ''
  );

  // –£–¥–∞–ª—è–µ–º v –∏–∑ –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–æ–≤ (–ø–∞—Ç—Ç–µ—Ä–Ω: v, language, ...)
  updatedContent = updatedContent.replace(
    /const \{ status, data \} = await apiInstance\.([a-zA-Z0-9]+)\({\n    v,\n    language,\n/g,
    (match, methodName) => {
      hasChanges = true;
      return `const { status, data } = await apiInstance.${methodName}({
    language,
`;
    }
  );

  // –£–¥–∞–ª—è–µ–º v –∏–∑ –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–æ–≤ (–ø–∞—Ç—Ç–µ—Ä–Ω: v, –¥—Ä—É–≥–æ–π_–ø–∞—Ä–∞–º–µ—Ç—Ä)
  updatedContent = updatedContent.replace(
    /const \{ status, data \} = await apiInstance\.([a-zA-Z0-9]+)\({\n    v,\n    ([a-zA-Z_][a-zA-Z0-9_]*)/g,
    (match, methodName, nextParam) => {
      hasChanges = true;
      return `const { status, data } = await apiInstance.${methodName}({
    ${nextParam}`;
    }
  );

  // –£–¥–∞–ª—è–µ–º v –∏–∑ –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ v –∏ language)
  updatedContent = updatedContent.replace(
    /const \{ status, data \} = await apiInstance\.([a-zA-Z0-9]+)\({\n    v,\n    language\n  }\);/g,
    (match, methodName) => {
      hasChanges = true;
      return `const { status, data } = await apiInstance.${methodName}({
    language
  });`;
    }
  );

  // –£–¥–∞–ª—è–µ–º v –∏–∑ —Ç–∞–±–ª–∏—Ü –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  updatedContent = updatedContent.replace(
    /\| \*\*v\*\* \| \[\*\*&#39;1&#39; \| &#39;2&#39; \| &#39;3&#39;\*\*\]\*\*Array<&#39;1&#39; &#124; &#39;2&#39; &#124; &#39;3&#39;>\*\* \| Version \| defaults to undefined\|\n/g,
    ''
  );

  // 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤ - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
  const methodCallPattern = /const \{ status, data \} = await apiInstance\.([a-zA-Z0-9]+)\(\s*((?:[a-zA-Z_][a-zA-Z0-9_]*,\s*)*[a-zA-Z_][a-zA-Z0-9_]*)\s*\);/g;
  updatedContent = updatedContent.replace(methodCallPattern, (match, methodName, params) => {
    // –†–∞–∑–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const paramList = params.split(',').map(p => p.trim()).filter(p => p);
    
    if (paramList.length === 0) {
      return match; // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    }

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const paramObject = paramList.map(param => `    ${param}`).join(',\n');

    hasChanges = true;
    return `const { status, data } = await apiInstance.${methodName}({
${paramObject}
  });`;
  });

  // 6. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const noParamsPattern = /const \{ status, data \} = await apiInstance\.([a-zA-Z0-9]+)\(\);/g;
  updatedContent = updatedContent.replace(noParamsPattern, (match, methodName) => {
    hasChanges = true;
    return `const { status, data } = await apiInstance.${methodName}({});`;
  });

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
  if (hasChanges && updatedContent !== content) {
    fs.writeFileSync(filePath, updatedContent, 'utf8');
    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: ${path.basename(filePath)}`);
    return true;
  }
  return false;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
if (!fs.existsSync(docsDir)) {
  console.log('–ü–∞–ø–∫–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', docsDir);
  process.exit(1);
}

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API
const apiFiles = fs.readdirSync(docsDir)
  .filter(file => file.endsWith('Api.md'))
  .map(file => path.join(docsDir, file));

console.log(`–ù–∞–π–¥–µ–Ω–æ ${apiFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...`);

let updatedCount = 0;
apiFiles.forEach(filePath => {
  if (updateAllDocs(filePath)) {
    updatedCount++;
  }
});

console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –∏–∑ ${apiFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.`);

if (updatedCount > 0) {
  console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
  console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç:');
  console.log('   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ StreamViSdkConfig –≤–º–µ—Å—Ç–æ Configuration');
  console.log('   - –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤–µ—Ä—Å–∏–∏ v –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤');
  console.log('   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ language –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö');
  console.log('   - –û–±—ä–µ–∫—Ç–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–æ–≤');
  console.log('   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  console.log('   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–æ–π–Ω—ã—Ö –∑–∞–ø—è—Ç—ã—Ö –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö');
} else {
  console.log('‚ÑπÔ∏è –í—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞.');
} 