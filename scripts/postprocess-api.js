const fs = require('fs');
const path = require('path');

const API_DIR = './src/generated/api2';

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö API —Ñ–∞–π–ª–æ–≤
function processApiFiles() {
  console.log('üîß –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ API —Ñ–∞–π–ª–æ–≤...');
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω –º–µ—Ç–æ–¥–æ–≤ (—É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤)
  processMethodNames();
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥–æ–≤
  processVersionParameters();
  
  console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

function processMethodNames() {
  console.log('üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω –º–µ—Ç–æ–¥–æ–≤...');
  
  const apiDir = path.join(API_DIR, 'api');
  if (!fs.existsSync(apiDir)) return;
  
  const apiFiles = fs.readdirSync(apiDir).filter(f => f.endsWith('.ts'));
  
  apiFiles.forEach(file => {
    const apiFile = path.join(apiDir, file);
    let content = fs.readFileSync(apiFile, 'utf8');
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
    const prefixPatterns = [
      /(\w+)Controller([A-Z]\w+)/g,
      /(\w+)Api([A-Z]\w+)/g,
      /(\w+)Service([A-Z]\w+)/g
    ];
    
    prefixPatterns.forEach(pattern => {
      content = content.replace(pattern, (match, prefix, method) => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥, —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
        return method.charAt(0).toLowerCase() + method.slice(1);
      });
    });
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –≤–µ—Ä—Å–∏–π –≤ –∏–º–µ–Ω–∞—Ö
    content = content.replace(/(\w+)(\d+)$/g, '$1');
    
    fs.writeFileSync(apiFile, content);
  });
  
  console.log(`‚úÖ –ò–º–µ–Ω–∞ –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ ${apiFiles.length} —Ñ–∞–π–ª–∞—Ö`);
}

function processVersionParameters() {
  console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–µ—Ä—Å–∏–π...');
  
  const apiDir = path.join(API_DIR, 'api');
  if (!fs.existsSync(apiDir)) return;
  
  const apiFiles = fs.readdirSync(apiDir).filter(f => f.endsWith('.ts'));
  
  apiFiles.forEach(file => {
    const apiFile = path.join(apiDir, file);
    let content = fs.readFileSync(apiFile, 'utf8');
    
    // –î–µ–ª–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–µ—Ä—Å–∏–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    content = content.replace(
      /readonly v: (\w+)(\d+)VEnum/g,
      (match, enumPrefix, version) => {
        return `readonly v?: ${enumPrefix}${version}VEnum`;
      }
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ—Ä—Å–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –º–µ—Ç–æ–¥—ã API –∫–ª–∞—Å—Å–æ–≤
    content = content.replace(
      /public (\w+)(\d+)\(requestParameters: (\w+)(\d+)Request, options\?: RawAxiosRequestConfig\) \{\s*return fp\(this\.configuration\)\.(\w+)(\d+)\(requestParameters\.v,/g,
      (match, methodName, version, interfaceName, interfaceVersion, fpMethodName, fpVersion) => {
        return `public ${methodName}${version}(requestParameters: ${interfaceName}${interfaceVersion}Request, options?: RawAxiosRequestConfig) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
        const actualV: ${interfaceName}${interfaceVersion}VEnum = requestParameters.v || ${interfaceName}${interfaceVersion}VEnum._${version};
        return fp(this.configuration).${fpMethodName}${fpVersion}(actualV,`;
      }
    );
    
    // –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é factory - –∑–∞–º–µ–Ω—è–µ–º requestParameters.v –Ω–∞ actualV
    content = content.replace(
      /return localVarFp\.(\w+)(\d+)\(requestParameters\.v,/g,
      (match, methodName, version) => {
        return `// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
            const actualV: ${methodName}${version}VEnum = requestParameters.v || ${methodName}${version}VEnum._${version};
            return localVarFp.${methodName}${version}(actualV,`;
      }
    );
    
    fs.writeFileSync(apiFile, content);
  });
  
  console.log(`‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ—Ä—Å–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ ${apiFiles.length} —Ñ–∞–π–ª–∞—Ö`);
}

// –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
processApiFiles(); 