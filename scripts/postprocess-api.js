const fs = require('fs');
const path = require('path');
const glob = require('glob');

/**
 * –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö API —Ñ–∞–π–ª–æ–≤
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ—Ä—Å–∏–π –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ v
 */

const apiDir = path.join(__dirname, '../src/generated/api2');

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ –º–µ—Ç–æ–¥–∞
 */
function extractVersionFromMethodName(methodName) {
  // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω V{—á–∏—Å–ª–æ} –≤ –∫–æ–Ω—Ü–µ
  const versionMatch = methodName.match(/V(\d+)$/);
  if (versionMatch) {
    return versionMatch[1];
  }
  
  // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω _v{—á–∏—Å–ª–æ} –≤ –∫–æ–Ω—Ü–µ
  const underscoreVersionMatch = methodName.match(/_v(\d+)$/);
  if (underscoreVersionMatch) {
    return underscoreVersionMatch[1];
  }
  
  return null;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω API —Ñ–∞–π–ª
 */
function processApiFile(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  let updatedContent = content;
  let totalChanges = 0;

  // 1. –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É –¥–ª—è Query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  // –ò—â–µ–º: if (v !== undefined) { localVarQueryParameter['v'] = v; }
  // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞: if (v !== undefined) { localVarQueryParameter['v'] = v; } else { localVarQueryParameter['v'] = 'X'; }
  
  const queryPattern = /((\w+V\d+):\s*async[\s\S]*?)if\s*\(\s*v\s*!==\s*undefined\s*\)\s*\{\s*localVarQueryParameter\['v'\]\s*=\s*v;\s*\}/g;
  
  updatedContent = updatedContent.replace(queryPattern, (match, methodBlock, methodName) => {
    const version = extractVersionFromMethodName(methodName);
    if (version) {
      totalChanges++;
      console.log(`  üéØ Query: –¥–æ–±–∞–≤–ª—è—é –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É v="${version}" –¥–ª—è ${methodName}`);
      return match.replace(
        /if\s*\(\s*v\s*!==\s*undefined\s*\)\s*\{\s*localVarQueryParameter\['v'\]\s*=\s*v;\s*\}/,
        `if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            } else {
                localVarQueryParameter['v'] = '${version}';
            }`
      );
    }
    return match;
  });

  // 2. –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É –¥–ª—è FormData –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  // –ò—â–µ–º: if (v !== undefined) { localVarFormParams.append('v', v as any); }
  // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞: if (v !== undefined) { localVarFormParams.append('v', v as any); } else { localVarFormParams.append('v', 'X' as any); }
  
  const formDataPattern = /((\w+V\d+):\s*async[\s\S]*?)if\s*\(\s*v\s*!==\s*undefined\s*\)\s*\{\s*localVarFormParams\.append\('v',\s*v\s*as\s*any\);\s*\}/g;
  
  updatedContent = updatedContent.replace(formDataPattern, (match, methodBlock, methodName) => {
    const version = extractVersionFromMethodName(methodName);
    if (version) {
      totalChanges++;
      console.log(`  üéØ FormData: –¥–æ–±–∞–≤–ª—è—é –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É v="${version}" –¥–ª—è ${methodName}`);
      return match.replace(
        /if\s*\(\s*v\s*!==\s*undefined\s*\)\s*\{\s*localVarFormParams\.append\('v',\s*v\s*as\s*any\);\s*\}/,
        `if (v !== undefined) { 
                localVarFormParams.append('v', v as any);
            } else {
                localVarFormParams.append('v', '${version}' as any);
            }`
      );
    }
    return match;
  });

  if (totalChanges > 0) {
    fs.writeFileSync(filePath, updatedContent);
  }
  
  return { totalChanges };
}

try {
  console.log('üîß –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ API —Ñ–∞–π–ª–æ–≤...');
  console.log('üéØ –¶–µ–ª—å: –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ—Ä—Å–∏–π –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ v');
  console.log('=' .repeat(60));
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –¥–ª—è Windows
  const apiPath = path.resolve(apiDir, 'api');
  const pattern = path.join(apiPath, '*.ts').replace(/\\/g, '/');
  
  console.log(`üîç –ò—â–µ–º API —Ñ–∞–π–ª—ã –≤: ${apiPath}`);
  
  const apiFiles = glob.sync(pattern);
  console.log(`üîç –ù–∞–π–¥–µ–Ω–æ API —Ñ–∞–π–ª–æ–≤: ${apiFiles.length}`);
  console.log('');
  
  let totalChanges = 0;
  let processedFiles = 0;
  
  for (const filePath of apiFiles) {
    const fileName = path.basename(filePath);
    console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${fileName}`);
    
    const result = processApiFile(filePath);
    if (result.totalChanges > 0) {
      processedFiles++;
      totalChanges += result.totalChanges;
      console.log(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ–∫: ${result.totalChanges}`);
    } else {
      console.log(`  ‚è≠Ô∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
    }
  }
  
  console.log('');
  console.log('=' .repeat(60));
  console.log('‚úÖ –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
  console.log(`   ‚Ä¢ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${apiFiles.length}`);
  console.log(`   ‚Ä¢ –§–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ: ${processedFiles}`);
  console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${totalChanges}`);
  
  if (totalChanges > 0) {
    console.log('');
    console.log('üí° –¢–µ–ø–µ—Ä—å –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç –≤–µ—Ä—Å–∏—é:');
    console.log('   ‚Ä¢ userGetProfileV1({ language: "ru" }) - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç v="1"');
    console.log('   ‚Ä¢ paySettingGetSettingV3({ language: "ru" }) - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç v="3"');
    console.log('   ‚Ä¢ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å: userGetProfileV1({ v: "2", language: "ru" }) - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç v="2"');
  }
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–µ:', error.message);
  console.error(error.stack);
  process.exit(1);
}

// –≠–∫—Å–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
module.exports = {
  extractVersionFromMethodName,
  processApiFile
}; 