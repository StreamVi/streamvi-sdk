const fs = require('fs');
const path = require('path');

const API_DIR = './src/generated/api2';

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö API —Ñ–∞–π–ª–æ–≤
function processApiFiles() {
  console.log('üîß –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ API —Ñ–∞–π–ª–æ–≤...');
  
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
  fixDuplicateExports();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω –º–µ—Ç–æ–¥–æ–≤ (—É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤)
  processMethodNames();
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥–æ–≤
  processVersionParameters();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  processDocumentation();
  
  console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

function fixDuplicateExports() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤...');
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º api.ts
  const apiFile = path.join(API_DIR, 'api.ts');
  if (fs.existsSync(apiFile)) {
    let content = fs.readFileSync(apiFile, 'utf8');
    
    // –î–æ–±–∞–≤–ª—è–µ–º eslint-disable –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
    if (!content.startsWith('/* eslint-disable */')) {
      content = '/* eslint-disable */\n' + content;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º @ts-nocheck –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è TypeScript –æ—à–∏–±–æ–∫
    if (!content.includes('@ts-nocheck')) {
      content = content.replace('/* eslint-disable */', '/* eslint-disable */\n// @ts-nocheck');
    }
    
    fs.writeFileSync(apiFile, content);
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω api.ts');
  }
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º models/index.ts
  const modelsIndexFile = path.join(API_DIR, 'models', 'index.ts');
  if (fs.existsSync(modelsIndexFile)) {
    let content = fs.readFileSync(modelsIndexFile, 'utf8');
    
    // –î–æ–±–∞–≤–ª—è–µ–º eslint-disable –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
    if (!content.startsWith('/* eslint-disable */')) {
      content = '/* eslint-disable */\n' + content;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º @ts-nocheck –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è TypeScript –æ—à–∏–±–æ–∫
    if (!content.includes('@ts-nocheck')) {
      content = content.replace('/* eslint-disable */', '/* eslint-disable */\n// @ts-nocheck');
    }
    
    fs.writeFileSync(modelsIndexFile, content);
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω models/index.ts');
  }
}

function processMethodNames() {
  console.log('üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω –º–µ—Ç–æ–¥–æ–≤...');
  
  const apiDir = path.join(API_DIR, 'api');
  if (!fs.existsSync(apiDir)) return;
  
  const apiFiles = fs.readdirSync(apiDir).filter(f => f.endsWith('.ts'));
  
  apiFiles.forEach(file => {
    const apiFile = path.join(apiDir, file);
    let content = fs.readFileSync(apiFile, 'utf8');
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
    const prefixPatterns = [
      /(\w+)Controller([A-Z]\w+)/g,
      /(\w+)Api([A-Z]\w+)/g,
      /(\w+)Service([A-Z]\w+)/g
    ];
    
    prefixPatterns.forEach(pattern => {
      content = content.replace(pattern, (match, prefix, method) => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥, —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
        return method.charAt(0).toLowerCase() + method.slice(1);
      });
    });
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –≤–µ—Ä—Å–∏–π –≤ –∏–º–µ–Ω–∞—Ö
    content = content.replace(/(\w+)(\d+)$/g, '$1');
    
    fs.writeFileSync(apiFile, content);
  });
  
  console.log(`‚úÖ –ò–º–µ–Ω–∞ –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ ${apiFiles.length} —Ñ–∞–π–ª–∞—Ö`);
}

function processVersionParameters() {
  console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–µ—Ä—Å–∏–π...');
  
  const apiDir = path.join(API_DIR, 'api');
  if (!fs.existsSync(apiDir)) return;
  
  const apiFiles = fs.readdirSync(apiDir).filter(f => f.endsWith('.ts'));
  
  apiFiles.forEach(file => {
    const apiFile = path.join(apiDir, file);
    let content = fs.readFileSync(apiFile, 'utf8');
    
    // –î–µ–ª–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–µ—Ä—Å–∏–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    content = content.replace(
      /readonly v: (\w+)(\d+)VEnum/g,
      (match, enumPrefix, version) => {
        return `readonly v?: ${enumPrefix}${version}VEnum`;
      }
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ—Ä—Å–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –º–µ—Ç–æ–¥—ã API –∫–ª–∞—Å—Å–æ–≤
    content = content.replace(
      /public (\w+)(\d+)\(requestParameters: (\w+)(\d+)Request, options\?: RawAxiosRequestConfig\) \{\s*return fp\(this\.configuration\)\.(\w+)(\d+)\(requestParameters\.v,/g,
      (match, methodName, version, interfaceName, interfaceVersion, fpMethodName, fpVersion) => {
        return `public ${methodName}${version}(requestParameters: ${interfaceName}${interfaceVersion}Request, options?: RawAxiosRequestConfig) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
        const actualV: ${interfaceName}${interfaceVersion}VEnum = requestParameters.v || ${interfaceName}${interfaceVersion}VEnum._${version};
        return fp(this.configuration).${fpMethodName}${fpVersion}(actualV,`;
      }
    );
    
    // –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é factory - –∑–∞–º–µ–Ω—è–µ–º requestParameters.v –Ω–∞ actualV
    content = content.replace(
      /return localVarFp\.(\w+)(\d+)\(requestParameters\.v,/g,
      (match, methodName, version) => {
        return `// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
            const actualV: ${methodName}${version}VEnum = requestParameters.v || ${methodName}${version}VEnum._${version};
            return localVarFp.${methodName}${version}(actualV,`;
      }
    );
    
    fs.writeFileSync(apiFile, content);
  });
  
  console.log(`‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ—Ä—Å–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ ${apiFiles.length} —Ñ–∞–π–ª–∞—Ö`);
}

function processDocumentation() {
  console.log('üìö –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...');
  
  const docsDir = path.join(API_DIR, 'docs');
  if (!fs.existsSync(docsDir)) {
    console.log('‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }
  
  const docFiles = fs.readdirSync(docsDir).filter(f => f.endsWith('.md'));
  let updatedCount = 0;
  
  docFiles.forEach(file => {
    const docFile = path.join(docsDir, file);
    let content = fs.readFileSync(docFile, 'utf8');
    let hasChanges = false;
    
    // 1. –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const prefixPatterns = [
      /(\w+)Controller([A-Z]\w+)(\d+)/g,
      /(\w+)Api([A-Z]\w+)(\d+)/g,
      /(\w+)Service([A-Z]\w+)(\d+)/g
    ];
    
    prefixPatterns.forEach(pattern => {
      const originalContent = content;
      content = content.replace(pattern, (match, prefix, method, version) => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥ —Å –≤–µ—Ä—Å–∏–µ–π, —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
        return method.charAt(0).toLowerCase() + method.slice(1) + version;
      });
      if (content !== originalContent) hasChanges = true;
    });
    
    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –º–µ—Ç–æ–¥–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    content = content.replace(/# \*\*(\w+)Controller([A-Z]\w+)(\d+)\*\*/g, (match, prefix, method, version) => {
      hasChanges = true;
      return `# **${method.charAt(0).toLowerCase() + method.slice(1) + version}**`;
    });
    
    // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ—Ç–æ–¥—ã –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
    content = content.replace(/\|\[\*\*(\w+)Controller([A-Z]\w+)(\d+)\*\*\]/g, (match, prefix, method, version) => {
      const newMethodName = method.charAt(0).toLowerCase() + method.slice(1) + version;
      hasChanges = true;
      return `|[**${newMethodName}**]`;
    });
    
    // 4. –û–±–Ω–æ–≤–ª—è–µ–º —è–∫–æ—Ä–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    content = content.replace(/#(\w+)controller([a-z]+)(\d+)/g, (match, prefix, method, version) => {
      hasChanges = true;
      return `#${method}${version}`;
    });
    
    // 5. –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Å Configuration –Ω–∞ –Ω–æ–≤—ã–µ —Å StreamViSdkConfig
    const oldConfigPattern = /```typescript\nimport \{\s*([^}]+)\s*\} from '\.\/api';\s*\n\nconst configuration = new Configuration\(\);\nconst apiInstance = new ([A-Za-z]+)\(configuration\);/g;
    content = content.replace(oldConfigPattern, (match, imports, apiClass) => {
      // –û—á–∏—â–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã –æ—Ç Configuration
      const cleanImports = imports.replace(/,?\s*Configuration\s*,?/, '').replace(/^,\s*|,\s*$/, '').trim();
      hasChanges = true;
      return `\`\`\`typescript
import { StreamViSdkConfig } from '../../../streamvi-sdk-config';
import { ${cleanImports} } from './api';

const sdkConfig = new StreamViSdkConfig({ accessToken: 'your_access_token' });
const apiInstance = new ${apiClass}(sdkConfig.configuration);`;
    });

    // 6. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–æ–π–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö
    content = content.replace(
      /import \{ ([^}]+),,,\s*([^}]+) \} from '\.\/api';/g,
      (match, apiClass, importClass) => {
        hasChanges = true;
        return `import { ${apiClass.trim()}, ${importClass.trim()} } from './api';`;
      }
    );

    // 7. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö
    content = content.replace(
      /import \{ ([^}]+),,\s*\} from '\.\/api';/g,
      (match, apiClass) => {
        hasChanges = true;
        return `import { ${apiClass.trim()} } from './api';`;
      }
    );

    content = content.replace(
      /import \{ ([^}]+),\s*\} from '\.\/api';/g,
      (match, apiClass) => {
        hasChanges = true;
        return `import { ${apiClass.trim()} } from './api';`;
      }
    );

    // 8. –£–¥–∞–ª—è–µ–º –¢–û–õ–¨–ö–û –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–µ—Ä—Å–∏–∏ v (–æ—Å—Ç–∞–≤–ª—è–µ–º language)
    // –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π v (—Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
    content = content.replace(
      /let v: [^;]+; \/\/Version \(default to undefined\)\n/g,
      () => {
        hasChanges = true;
        return '';
      }
    );

    // 9. –£–¥–∞–ª—è–µ–º v –∏–∑ –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–æ–≤ (–ø–∞—Ç—Ç–µ—Ä–Ω: v, language, ...)
    content = content.replace(
      /const \{ status, data \} = await apiInstance\.([a-zA-Z0-9]+)\({\n    v,\n    language,\n/g,
      (match, methodName) => {
        hasChanges = true;
        return `const { status, data } = await apiInstance.${methodName}({
    language,
`;
      }
    );

    // 10. –£–¥–∞–ª—è–µ–º v –∏–∑ –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–æ–≤ (–ø–∞—Ç—Ç–µ—Ä–Ω: v, –¥—Ä—É–≥–æ–π_–ø–∞—Ä–∞–º–µ—Ç—Ä)
    content = content.replace(
      /const \{ status, data \} = await apiInstance\.([a-zA-Z0-9]+)\({\n    v,\n    ([a-zA-Z_][a-zA-Z0-9_]*)/g,
      (match, methodName, nextParam) => {
        hasChanges = true;
        return `const { status, data } = await apiInstance.${methodName}({
    ${nextParam}`;
      }
    );

    // 11. –£–¥–∞–ª—è–µ–º v –∏–∑ –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ v –∏ language)
    content = content.replace(
      /const \{ status, data \} = await apiInstance\.([a-zA-Z0-9]+)\({\n    v,\n    language\n  }\);/g,
      (match, methodName) => {
        hasChanges = true;
        return `const { status, data } = await apiInstance.${methodName}({
    language
  });`;
      }
    );

    // 12. –£–¥–∞–ª—è–µ–º v –∏–∑ —Ç–∞–±–ª–∏—Ü –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
    content = content.replace(
      /\| \*\*v\*\* \| [^|]+ \| Version \| defaults to undefined\|\n/g,
      () => {
        hasChanges = true;
        return '';
      }
    );

    // 13. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤ - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    const methodCallPattern = /const \{ status, data \} = await apiInstance\.([a-zA-Z0-9]+)\(\s*((?:[a-zA-Z_][a-zA-Z0-9_]*,\s*)*[a-zA-Z_][a-zA-Z0-9_]*)\s*\);/g;
    content = content.replace(methodCallPattern, (match, methodName, params) => {
      // –†–∞–∑–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      const paramList = params.split(',').map(p => p.trim()).filter(p => p);
      
      if (paramList.length === 0) {
        return match; // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      }

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const paramObject = paramList.map(param => `    ${param}`).join(',\n');

      hasChanges = true;
      return `const { status, data } = await apiInstance.${methodName}({
${paramObject}
  });`;
    });

    // 14. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const noParamsPattern = /const \{ status, data \} = await apiInstance\.([a-zA-Z0-9]+)\(\);/g;
    content = content.replace(noParamsPattern, (match, methodName) => {
      hasChanges = true;
      return `const { status, data } = await apiInstance.${methodName}({});`;
    });

    // 15. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
    content = content.replace(/apiInstance\.(\w+)Controller([A-Z]\w+)(\d+)\(/g, (match, prefix, method, version) => {
      hasChanges = true;
      return `apiInstance.${method.charAt(0).toLowerCase() + method.slice(1) + version}(`;
    });
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
    if (hasChanges) {
      fs.writeFileSync(docFile, content);
      updatedCount++;
    }
  });
  
  console.log(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ ${docFiles.length} —Ñ–∞–π–ª–∞—Ö (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount})`);
}

// –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
processApiFiles(); 